// source: blockchain/thepower/v1alpha1/thepower_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var blockchain_thepower_v1alpha1_thepower_pb = require('../../../blockchain/thepower/v1alpha1/thepower_pb.js');
goog.object.extend(proto, blockchain_thepower_v1alpha1_thepower_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.CreateTpChainRequest', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.CreateTpChainResponse', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.GetTpChainsRequest', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.GetTpChainsResponse', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest', null, global);
goog.exportSymbol('proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.CreateTpChainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.displayName = 'proto.blockchain.thepower.v1alpha1.CreateTpChainRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.displayName = 'proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.displayName = 'proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.GetTpChainsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.displayName = 'proto.blockchain.thepower.v1alpha1.GetTpChainsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.displayName = 'proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.CreateTpChainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.displayName = 'proto.blockchain.thepower.v1alpha1.CreateTpChainResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.repeatedFields_, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.GetTpChainsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.displayName = 'proto.blockchain.thepower.v1alpha1.GetTpChainsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.repeatedFields_, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.displayName = 'proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.displayName = 'proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.displayName = 'proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpChain: (f = msg.getTpChain()) && blockchain_thepower_v1alpha1_thepower_pb.TpChain.toObject(includeInstance, f),
    ccpOrganizationId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ccpProjectId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.CreateTpChainRequest;
  return proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_thepower_v1alpha1_thepower_pb.TpChain;
      reader.readMessage(value,blockchain_thepower_v1alpha1_thepower_pb.TpChain.deserializeBinaryFromReader);
      msg.setTpChain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCcpOrganizationId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCcpProjectId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      blockchain_thepower_v1alpha1_thepower_pb.TpChain.serializeBinaryToWriter
    );
  }
  f = message.getCcpOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCcpProjectId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional TpChain tp_chain = 1;
 * @return {?proto.blockchain.thepower.v1alpha1.TpChain}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.getTpChain = function() {
  return /** @type{?proto.blockchain.thepower.v1alpha1.TpChain} */ (
    jspb.Message.getWrapperField(this, blockchain_thepower_v1alpha1_thepower_pb.TpChain, 1));
};


/**
 * @param {?proto.blockchain.thepower.v1alpha1.TpChain|undefined} value
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest} returns this
*/
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.setTpChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.clearTpChain = function() {
  return this.setTpChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.hasTpChain = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ccp_organization_id = 2;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.getCcpOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.setCcpOrganizationId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ccp_project_id = 3;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.getCcpProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainRequest.prototype.setCcpProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest;
  return proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 limit = 3;
 * @return {number}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest;
  return proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    queryParams: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.GetTpChainsRequest;
  return proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getQueryParams();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 offset = 1;
 * @return {number}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string query_params = 3;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.getQueryParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsRequest.prototype.setQueryParams = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpChain: (f = msg.getTpChain()) && blockchain_thepower_v1alpha1_thepower_pb.TpChain.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest;
  return proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_thepower_v1alpha1_thepower_pb.TpChain;
      reader.readMessage(value,blockchain_thepower_v1alpha1_thepower_pb.TpChain.deserializeBinaryFromReader);
      msg.setTpChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      blockchain_thepower_v1alpha1_thepower_pb.TpChain.serializeBinaryToWriter
    );
  }
};


/**
 * optional TpChain tp_chain = 1;
 * @return {?proto.blockchain.thepower.v1alpha1.TpChain}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.prototype.getTpChain = function() {
  return /** @type{?proto.blockchain.thepower.v1alpha1.TpChain} */ (
    jspb.Message.getWrapperField(this, blockchain_thepower_v1alpha1_thepower_pb.TpChain, 1));
};


/**
 * @param {?proto.blockchain.thepower.v1alpha1.TpChain|undefined} value
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest} returns this
*/
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.prototype.setTpChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest} returns this
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.prototype.clearTpChain = function() {
  return this.setTpChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainRequest.prototype.hasTpChain = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.CreateTpChainResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpChain: (f = msg.getTpChain()) && blockchain_thepower_v1alpha1_thepower_pb.TpChain.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainResponse}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.CreateTpChainResponse;
  return proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.CreateTpChainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainResponse}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_thepower_v1alpha1_thepower_pb.TpChain;
      reader.readMessage(value,blockchain_thepower_v1alpha1_thepower_pb.TpChain.deserializeBinaryFromReader);
      msg.setTpChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.CreateTpChainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      blockchain_thepower_v1alpha1_thepower_pb.TpChain.serializeBinaryToWriter
    );
  }
};


/**
 * optional TpChain tp_chain = 1;
 * @return {?proto.blockchain.thepower.v1alpha1.TpChain}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.prototype.getTpChain = function() {
  return /** @type{?proto.blockchain.thepower.v1alpha1.TpChain} */ (
    jspb.Message.getWrapperField(this, blockchain_thepower_v1alpha1_thepower_pb.TpChain, 1));
};


/**
 * @param {?proto.blockchain.thepower.v1alpha1.TpChain|undefined} value
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainResponse} returns this
*/
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.prototype.setTpChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.thepower.v1alpha1.CreateTpChainResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.prototype.clearTpChain = function() {
  return this.setTpChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.thepower.v1alpha1.CreateTpChainResponse.prototype.hasTpChain = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpChainsList: jspb.Message.toObjectList(msg.getTpChainsList(),
    blockchain_thepower_v1alpha1_thepower_pb.TpChain.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    previousUrl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.GetTpChainsResponse;
  return proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_thepower_v1alpha1_thepower_pb.TpChain;
      reader.readMessage(value,blockchain_thepower_v1alpha1_thepower_pb.TpChain.deserializeBinaryFromReader);
      msg.addTpChains(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpChainsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      blockchain_thepower_v1alpha1_thepower_pb.TpChain.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNextUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreviousUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated TpChain tp_chains = 1;
 * @return {!Array<!proto.blockchain.thepower.v1alpha1.TpChain>}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.getTpChainsList = function() {
  return /** @type{!Array<!proto.blockchain.thepower.v1alpha1.TpChain>} */ (
    jspb.Message.getRepeatedWrapperField(this, blockchain_thepower_v1alpha1_thepower_pb.TpChain, 1));
};


/**
 * @param {!Array<!proto.blockchain.thepower.v1alpha1.TpChain>} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} returns this
*/
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.setTpChainsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.blockchain.thepower.v1alpha1.TpChain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.thepower.v1alpha1.TpChain}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.addTpChains = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.blockchain.thepower.v1alpha1.TpChain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.clearTpChainsList = function() {
  return this.setTpChainsList([]);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string next_url = 3;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.getNextUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.setNextUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string previous_url = 4;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.getPreviousUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsResponse.prototype.setPreviousUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpChainsList: jspb.Message.toObjectList(msg.getTpChainsList(),
    blockchain_thepower_v1alpha1_thepower_pb.TpChain.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    previousUrl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse;
  return proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_thepower_v1alpha1_thepower_pb.TpChain;
      reader.readMessage(value,blockchain_thepower_v1alpha1_thepower_pb.TpChain.deserializeBinaryFromReader);
      msg.addTpChains(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpChainsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      blockchain_thepower_v1alpha1_thepower_pb.TpChain.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNextUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreviousUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated TpChain tp_chains = 1;
 * @return {!Array<!proto.blockchain.thepower.v1alpha1.TpChain>}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.getTpChainsList = function() {
  return /** @type{!Array<!proto.blockchain.thepower.v1alpha1.TpChain>} */ (
    jspb.Message.getRepeatedWrapperField(this, blockchain_thepower_v1alpha1_thepower_pb.TpChain, 1));
};


/**
 * @param {!Array<!proto.blockchain.thepower.v1alpha1.TpChain>} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} returns this
*/
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.setTpChainsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.blockchain.thepower.v1alpha1.TpChain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.thepower.v1alpha1.TpChain}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.addTpChains = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.blockchain.thepower.v1alpha1.TpChain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.clearTpChainsList = function() {
  return this.setTpChainsList([]);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string next_url = 3;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.getNextUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.setNextUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string previous_url = 4;
 * @return {string}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.getPreviousUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.prototype.setPreviousUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpChain: (f = msg.getTpChain()) && blockchain_thepower_v1alpha1_thepower_pb.TpChain.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse;
  return proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_thepower_v1alpha1_thepower_pb.TpChain;
      reader.readMessage(value,blockchain_thepower_v1alpha1_thepower_pb.TpChain.deserializeBinaryFromReader);
      msg.setTpChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      blockchain_thepower_v1alpha1_thepower_pb.TpChain.serializeBinaryToWriter
    );
  }
};


/**
 * optional TpChain tp_chain = 1;
 * @return {?proto.blockchain.thepower.v1alpha1.TpChain}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.prototype.getTpChain = function() {
  return /** @type{?proto.blockchain.thepower.v1alpha1.TpChain} */ (
    jspb.Message.getWrapperField(this, blockchain_thepower_v1alpha1_thepower_pb.TpChain, 1));
};


/**
 * @param {?proto.blockchain.thepower.v1alpha1.TpChain|undefined} value
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse} returns this
*/
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.prototype.setTpChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.prototype.clearTpChain = function() {
  return this.setTpChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.thepower.v1alpha1.GetTpChainByIdResponse.prototype.hasTpChain = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpChain: (f = msg.getTpChain()) && blockchain_thepower_v1alpha1_thepower_pb.TpChain.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse;
  return proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_thepower_v1alpha1_thepower_pb.TpChain;
      reader.readMessage(value,blockchain_thepower_v1alpha1_thepower_pb.TpChain.deserializeBinaryFromReader);
      msg.setTpChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      blockchain_thepower_v1alpha1_thepower_pb.TpChain.serializeBinaryToWriter
    );
  }
};


/**
 * optional TpChain tp_chain = 1;
 * @return {?proto.blockchain.thepower.v1alpha1.TpChain}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.prototype.getTpChain = function() {
  return /** @type{?proto.blockchain.thepower.v1alpha1.TpChain} */ (
    jspb.Message.getWrapperField(this, blockchain_thepower_v1alpha1_thepower_pb.TpChain, 1));
};


/**
 * @param {?proto.blockchain.thepower.v1alpha1.TpChain|undefined} value
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse} returns this
*/
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.prototype.setTpChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse} returns this
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.prototype.clearTpChain = function() {
  return this.setTpChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.thepower.v1alpha1.UpdateTpChainResponse.prototype.hasTpChain = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.blockchain.thepower.v1alpha1);
