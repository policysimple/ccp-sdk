// source: pipelines/tekton/v1alpha1/tekton.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pipelines.tekton.v1alpha1.Pipeline', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.Task', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TaskParams', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TaskType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TaskParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TaskParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TaskParams.displayName = 'proto.pipelines.tekton.v1alpha1.TaskParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.Task.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.Task.displayName = 'proto.pipelines.tekton.v1alpha1.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.Pipeline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.Pipeline.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.Pipeline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.Pipeline.displayName = 'proto.pipelines.tekton.v1alpha1.Pipeline';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TaskParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TaskParams;
  return proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TaskParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.Task.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taskRefName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    workspaceName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    taskType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    taskParamsList: jspb.Message.toObjectList(msg.getTaskParamsList(),
    proto.pipelines.tekton.v1alpha1.TaskParams.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.Task;
  return proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskRefName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaceName(value);
      break;
    case 5:
      var value = /** @type {!proto.pipelines.tekton.v1alpha1.TaskType} */ (reader.readEnum());
      msg.setTaskType(value);
      break;
    case 6:
      var value = new proto.pipelines.tekton.v1alpha1.TaskParams;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinaryFromReader);
      msg.addTaskParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaskRefName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWorkspaceName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTaskType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTaskParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pipelines.tekton.v1alpha1.TaskParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string task_ref_name = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskRefName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskRefName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string workspace_name = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getWorkspaceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setWorkspaceName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TaskType task_type = 5;
 * @return {!proto.pipelines.tekton.v1alpha1.TaskType}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskType = function() {
  return /** @type {!proto.pipelines.tekton.v1alpha1.TaskType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.TaskType} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated TaskParams task_params = 6;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.TaskParams>}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskParamsList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.TaskParams>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.TaskParams, 6));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.TaskParams>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
*/
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.addTaskParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pipelines.tekton.v1alpha1.TaskParams, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.clearTaskParamsList = function() {
  return this.setTaskParamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.Pipeline.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.Pipeline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.Pipeline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Pipeline.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    organizationId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    projectId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    workspaces: jspb.Message.getFieldWithDefault(msg, 5, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    statusType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.pipelines.tekton.v1alpha1.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.Pipeline;
  return proto.pipelines.tekton.v1alpha1.Pipeline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.Pipeline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrganizationId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProjectId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaces(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusType(value);
      break;
    case 8:
      var value = new proto.pipelines.tekton.v1alpha1.Task;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.Pipeline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.Pipeline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Pipeline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrganizationId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getProjectId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWorkspaces();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getStatusType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 organization_id = 2;
 * @return {number}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 project_id = 3;
 * @return {number}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getProjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string workspaces = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getWorkspaces = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setWorkspaces = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool active = 6;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string status_type = 7;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getStatusType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setStatusType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated Task tasks = 8;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Task>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Task, 8));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Task>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
*/
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pipelines.tekton.v1alpha1.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * @enum {number}
 */
proto.pipelines.tekton.v1alpha1.TaskType = {
  TASK_TYPE_ACCEPTED_TASK_UNSPECIFIED: 0,
  TASK_TYPE_ACCEPTED_CLUSTER_TASK: 1
};

goog.object.extend(exports, proto.pipelines.tekton.v1alpha1);
