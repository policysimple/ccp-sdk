// source: pipelines/tekton/v1alpha1/tekton.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pipelines.tekton.v1alpha1.Event', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.Params', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.Pipeline', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.PipelineRun', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.PipelineRunList', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.Task', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TaskParams', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TaskRun', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TaskRunStep', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TaskToCustomize', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TektonTask', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.TektonTaskList', null, global);
goog.exportSymbol('proto.pipelines.tekton.v1alpha1.Workspaces', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.Params.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.Params.displayName = 'proto.pipelines.tekton.v1alpha1.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TaskParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.TaskParams.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TaskParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TaskParams.displayName = 'proto.pipelines.tekton.v1alpha1.TaskParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.Workspaces = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.Workspaces, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.Workspaces.displayName = 'proto.pipelines.tekton.v1alpha1.Workspaces';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.Task.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.Task.displayName = 'proto.pipelines.tekton.v1alpha1.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.Pipeline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.Pipeline.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.Pipeline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.Pipeline.displayName = 'proto.pipelines.tekton.v1alpha1.Pipeline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TektonTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.TektonTask.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TektonTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TektonTask.displayName = 'proto.pipelines.tekton.v1alpha1.TektonTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.TektonTaskList.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TektonTaskList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TektonTaskList.displayName = 'proto.pipelines.tekton.v1alpha1.TektonTaskList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.TaskToCustomize.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TaskToCustomize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TaskToCustomize.displayName = 'proto.pipelines.tekton.v1alpha1.TaskToCustomize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.displayName = 'proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.PipelineRun = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.PipelineRun.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.PipelineRun, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.PipelineRun.displayName = 'proto.pipelines.tekton.v1alpha1.PipelineRun';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.PipelineRunList.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.PipelineRunList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.PipelineRunList.displayName = 'proto.pipelines.tekton.v1alpha1.PipelineRunList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TaskRun = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pipelines.tekton.v1alpha1.TaskRun.repeatedFields_, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TaskRun, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TaskRun.displayName = 'proto.pipelines.tekton.v1alpha1.TaskRun';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.TaskRunStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.TaskRunStep.displayName = 'proto.pipelines.tekton.v1alpha1.TaskRunStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pipelines.tekton.v1alpha1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pipelines.tekton.v1alpha1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pipelines.tekton.v1alpha1.Event.displayName = 'proto.pipelines.tekton.v1alpha1.Event';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.Params.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueString: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valueArrayList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    valueType: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.Params}
 */
proto.pipelines.tekton.v1alpha1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.Params;
  return proto.pipelines.tekton.v1alpha1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.Params}
 */
proto.pipelines.tekton.v1alpha1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueString(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addValueArray(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueString();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValueArrayList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getValueType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Params} returns this
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value_string = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.getValueString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Params} returns this
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.setValueString = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string value_array = 3;
 * @return {!Array<string>}
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.getValueArrayList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Params} returns this
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.setValueArrayList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Params} returns this
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.addValueArray = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Params} returns this
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.clearValueArrayList = function() {
  return this.setValueArrayList([]);
};


/**
 * optional string value_type = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.getValueType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Params} returns this
 */
proto.pipelines.tekton.v1alpha1.Params.prototype.setValueType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.TaskParams.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TaskParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramValueType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    paramValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paramValueArrayList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_default: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TaskParams;
  return proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamValueType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addParamValueArray(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TaskParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamValueType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParamValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParamValueArrayList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefault();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string param_name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getParamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setParamName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string param_value_type = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getParamValueType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setParamValueType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string param_value = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getParamValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setParamValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string param_value_array = 4;
 * @return {!Array<string>}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getParamValueArrayList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setParamValueArrayList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.addParamValueArray = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.clearParamValueArrayList = function() {
  return this.setParamValueArrayList([]);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string default = 6;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.getDefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParams.prototype.setDefault = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.Workspaces.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.Workspaces} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Workspaces.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    main: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.Workspaces}
 */
proto.pipelines.tekton.v1alpha1.Workspaces.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.Workspaces;
  return proto.pipelines.tekton.v1alpha1.Workspaces.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.Workspaces} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.Workspaces}
 */
proto.pipelines.tekton.v1alpha1.Workspaces.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMain(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.Workspaces.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.Workspaces} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Workspaces.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Workspaces} returns this
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string main = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.getMain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Workspaces} returns this
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.setMain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Workspaces} returns this
 */
proto.pipelines.tekton.v1alpha1.Workspaces.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.Task.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    taskName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taskRefName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    taskKind: jspb.Message.getFieldWithDefault(msg, 4, ""),
    taskRunAfterList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    workspacesList: jspb.Message.toObjectList(msg.getWorkspacesList(),
    proto.pipelines.tekton.v1alpha1.Workspaces.toObject, includeInstance),
    taskParamsList: jspb.Message.toObjectList(msg.getTaskParamsList(),
    proto.pipelines.tekton.v1alpha1.TaskParams.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    beforeDeploy: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    afterDeploy: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.Task;
  return proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskRefName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskKind(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTaskRunAfter(value);
      break;
    case 6:
      var value = new proto.pipelines.tekton.v1alpha1.Workspaces;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Workspaces.deserializeBinaryFromReader);
      msg.addWorkspaces(value);
      break;
    case 7:
      var value = new proto.pipelines.tekton.v1alpha1.TaskParams;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.TaskParams.deserializeBinaryFromReader);
      msg.addTaskParams(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeforeDeploy(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAfterDeploy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTaskName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaskRefName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTaskKind();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTaskRunAfterList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getWorkspacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pipelines.tekton.v1alpha1.Workspaces.serializeBinaryToWriter
    );
  }
  f = message.getTaskParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.pipelines.tekton.v1alpha1.TaskParams.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBeforeDeploy();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getAfterDeploy();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string task_name = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string task_ref_name = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskRefName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskRefName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string task_kind = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskKind = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string task_run_after = 5;
 * @return {!Array<string>}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskRunAfterList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskRunAfterList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.addTaskRunAfter = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.clearTaskRunAfterList = function() {
  return this.setTaskRunAfterList([]);
};


/**
 * repeated Workspaces workspaces = 6;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Workspaces>}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getWorkspacesList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Workspaces>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Workspaces, 6));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Workspaces>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
*/
proto.pipelines.tekton.v1alpha1.Task.prototype.setWorkspacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Workspaces=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Workspaces}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.addWorkspaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pipelines.tekton.v1alpha1.Workspaces, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.clearWorkspacesList = function() {
  return this.setWorkspacesList([]);
};


/**
 * repeated TaskParams task_params = 7;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.TaskParams>}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getTaskParamsList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.TaskParams>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.TaskParams, 7));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.TaskParams>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
*/
proto.pipelines.tekton.v1alpha1.Task.prototype.setTaskParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParams=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParams}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.addTaskParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pipelines.tekton.v1alpha1.TaskParams, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.clearTaskParamsList = function() {
  return this.setTaskParamsList([]);
};


/**
 * optional string description = 8;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool before_deploy = 9;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getBeforeDeploy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setBeforeDeploy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool after_deploy = 10;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.getAfterDeploy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.Task} returns this
 */
proto.pipelines.tekton.v1alpha1.Task.prototype.setAfterDeploy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.Pipeline.repeatedFields_ = [10,11,22,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.Pipeline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.Pipeline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Pipeline.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    trafficType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    organizationId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    projectId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nameProject: jspb.Message.getFieldWithDefault(msg, 6, ""),
    environmentId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    applicationId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    runtimeId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    proto.pipelines.tekton.v1alpha1.Params.toObject, includeInstance),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.pipelines.tekton.v1alpha1.Task.toObject, includeInstance),
    statusType: jspb.Message.getFieldWithDefault(msg, 12, ""),
    integrationMap: (f = msg.getIntegrationMap()) ? f.toObject(includeInstance, undefined) : [],
    environmentVariablesMap: (f = msg.getEnvironmentVariablesMap()) ? f.toObject(includeInstance, undefined) : [],
    commandsMap: (f = msg.getCommandsMap()) ? f.toObject(includeInstance, undefined) : [],
    secretsMap: (f = msg.getSecretsMap()) ? f.toObject(includeInstance, undefined) : [],
    extraArgsMap: (f = msg.getExtraArgsMap()) ? f.toObject(includeInstance, undefined) : [],
    instanceTypeMap: (f = msg.getInstanceTypeMap()) ? f.toObject(includeInstance, undefined) : [],
    isDefault: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    customPipeline: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    beforeDeployTasksList: jspb.Message.toObjectList(msg.getBeforeDeployTasksList(),
    proto.pipelines.tekton.v1alpha1.Task.toObject, includeInstance),
    afterDeployTasksList: jspb.Message.toObjectList(msg.getAfterDeployTasksList(),
    proto.pipelines.tekton.v1alpha1.Task.toObject, includeInstance),
    isNotExistDockerfile: jspb.Message.getBooleanFieldWithDefault(msg, 24, false),
    hostUrl: jspb.Message.getFieldWithDefault(msg, 25, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.Pipeline;
  return proto.pipelines.tekton.v1alpha1.Pipeline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.Pipeline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrafficType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameProject(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvironmentId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplicationId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuntimeId(value);
      break;
    case 10:
      var value = new proto.pipelines.tekton.v1alpha1.Params;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Params.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    case 11:
      var value = new proto.pipelines.tekton.v1alpha1.Task;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusType(value);
      break;
    case 13:
      var value = msg.getIntegrationMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 14:
      var value = msg.getEnvironmentVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 15:
      var value = msg.getCommandsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 16:
      var value = msg.getSecretsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 17:
      var value = msg.getExtraArgsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 18:
      var value = msg.getInstanceTypeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDefault(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCustomPipeline(value);
      break;
    case 22:
      var value = new proto.pipelines.tekton.v1alpha1.Task;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader);
      msg.addBeforeDeployTasks(value);
      break;
    case 23:
      var value = new proto.pipelines.tekton.v1alpha1.Task;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader);
      msg.addAfterDeployTasks(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNotExistDockerfile(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.Pipeline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.Pipeline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Pipeline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTrafficType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNameProject();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEnvironmentId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getApplicationId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRuntimeId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.pipelines.tekton.v1alpha1.Params.serializeBinaryToWriter
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter
    );
  }
  f = message.getStatusType();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getIntegrationMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getEnvironmentVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getCommandsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSecretsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExtraArgsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getInstanceTypeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getIsDefault();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getCustomPipeline();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getBeforeDeployTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter
    );
  }
  f = message.getAfterDeployTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter
    );
  }
  f = message.getIsNotExistDockerfile();
  if (f) {
    writer.writeBool(
      24,
      f
    );
  }
  f = message.getHostUrl();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 traffic_type = 3;
 * @return {number}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getTrafficType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setTrafficType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string organization_id = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string project_id = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name_project = 6;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getNameProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setNameProject = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string environment_id = 7;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getEnvironmentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setEnvironmentId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string application_id = 8;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getApplicationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setApplicationId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string runtime_id = 9;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getRuntimeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setRuntimeId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated Params params = 10;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Params>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getParamsList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Params>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Params, 10));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Params>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
*/
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Params=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Params}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pipelines.tekton.v1alpha1.Params, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};


/**
 * repeated Task tasks = 11;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Task>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Task, 11));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Task>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
*/
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.pipelines.tekton.v1alpha1.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * optional string status_type = 12;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getStatusType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setStatusType = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * map<string, string> integration = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getIntegrationMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearIntegrationMap = function() {
  this.getIntegrationMap().clear();
  return this;};


/**
 * map<string, string> environment_variables = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getEnvironmentVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearEnvironmentVariablesMap = function() {
  this.getEnvironmentVariablesMap().clear();
  return this;};


/**
 * map<string, string> commands = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getCommandsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearCommandsMap = function() {
  this.getCommandsMap().clear();
  return this;};


/**
 * map<string, string> secrets = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getSecretsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearSecretsMap = function() {
  this.getSecretsMap().clear();
  return this;};


/**
 * map<string, string> extra_args = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getExtraArgsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearExtraArgsMap = function() {
  this.getExtraArgsMap().clear();
  return this;};


/**
 * map<string, string> instance_type = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getInstanceTypeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearInstanceTypeMap = function() {
  this.getInstanceTypeMap().clear();
  return this;};


/**
 * optional bool is_default = 19;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getIsDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setIsDefault = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional bool active = 20;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional bool custom_pipeline = 21;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getCustomPipeline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setCustomPipeline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * repeated Task before_deploy_tasks = 22;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Task>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getBeforeDeployTasksList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Task, 22));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Task>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
*/
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setBeforeDeployTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.addBeforeDeployTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.pipelines.tekton.v1alpha1.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearBeforeDeployTasksList = function() {
  return this.setBeforeDeployTasksList([]);
};


/**
 * repeated Task after_deploy_tasks = 23;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Task>}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getAfterDeployTasksList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Task, 23));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Task>} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
*/
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setAfterDeployTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.addAfterDeployTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.pipelines.tekton.v1alpha1.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.clearAfterDeployTasksList = function() {
  return this.setAfterDeployTasksList([]);
};


/**
 * optional bool is_not_exist_dockerfile = 24;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getIsNotExistDockerfile = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setIsNotExistDockerfile = function(value) {
  return jspb.Message.setProto3BooleanField(this, 24, value);
};


/**
 * optional string host_url = 25;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.getHostUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Pipeline} returns this
 */
proto.pipelines.tekton.v1alpha1.Pipeline.prototype.setHostUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.TektonTask.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TektonTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TektonTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TektonTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskList: jspb.Message.toObjectList(msg.getTaskList(),
    proto.pipelines.tekton.v1alpha1.Task.toObject, includeInstance),
    order: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTask}
 */
proto.pipelines.tekton.v1alpha1.TektonTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TektonTask;
  return proto.pipelines.tekton.v1alpha1.TektonTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TektonTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTask}
 */
proto.pipelines.tekton.v1alpha1.TektonTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pipelines.tekton.v1alpha1.Task;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Task.deserializeBinaryFromReader);
      msg.addTask(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TektonTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TektonTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TektonTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pipelines.tekton.v1alpha1.Task.serializeBinaryToWriter
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Task task = 1;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Task>}
 */
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.getTaskList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Task, 1));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Task>} value
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTask} returns this
*/
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.setTaskList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Task}
 */
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.addTask = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pipelines.tekton.v1alpha1.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTask} returns this
 */
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.clearTaskList = function() {
  return this.setTaskList([]);
};


/**
 * optional int32 order = 2;
 * @return {number}
 */
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTask} returns this
 */
proto.pipelines.tekton.v1alpha1.TektonTask.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TektonTaskList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TektonTaskList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pipelines.tekton.v1alpha1.TaskToCustomize.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTaskList}
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TektonTaskList;
  return proto.pipelines.tekton.v1alpha1.TektonTaskList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TektonTaskList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTaskList}
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pipelines.tekton.v1alpha1.TaskToCustomize;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.TaskToCustomize.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TektonTaskList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TektonTaskList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pipelines.tekton.v1alpha1.TaskToCustomize.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TaskToCustomize items = 1;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.TaskToCustomize>}
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.TaskToCustomize>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.TaskToCustomize, 1));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.TaskToCustomize>} value
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTaskList} returns this
*/
proto.pipelines.tekton.v1alpha1.TektonTaskList.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.TaskToCustomize=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize}
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pipelines.tekton.v1alpha1.TaskToCustomize, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.TektonTaskList} returns this
 */
proto.pipelines.tekton.v1alpha1.TektonTaskList.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TaskToCustomize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    taskRefName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taskKind: jspb.Message.getFieldWithDefault(msg, 3, ""),
    taskRunAfterList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    workspacesList: jspb.Message.toObjectList(msg.getWorkspacesList(),
    proto.pipelines.tekton.v1alpha1.Workspaces.toObject, includeInstance),
    taskParamsList: jspb.Message.toObjectList(msg.getTaskParamsList(),
    proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 7, ""),
    beforeDeploy: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    afterDeploy: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TaskToCustomize;
  return proto.pipelines.tekton.v1alpha1.TaskToCustomize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskRefName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskKind(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTaskRunAfter(value);
      break;
    case 5:
      var value = new proto.pipelines.tekton.v1alpha1.Workspaces;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.Workspaces.deserializeBinaryFromReader);
      msg.addWorkspaces(value);
      break;
    case 6:
      var value = new proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.deserializeBinaryFromReader);
      msg.addTaskParams(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeforeDeploy(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAfterDeploy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TaskToCustomize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTaskRefName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaskKind();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTaskRunAfterList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getWorkspacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pipelines.tekton.v1alpha1.Workspaces.serializeBinaryToWriter
    );
  }
  f = message.getTaskParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBeforeDeploy();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getAfterDeploy();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional string task_name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getTaskName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setTaskName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string task_ref_name = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getTaskRefName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setTaskRefName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string task_kind = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getTaskKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setTaskKind = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string task_run_after = 4;
 * @return {!Array<string>}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getTaskRunAfterList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setTaskRunAfterList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.addTaskRunAfter = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.clearTaskRunAfterList = function() {
  return this.setTaskRunAfterList([]);
};


/**
 * repeated Workspaces workspaces = 5;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.Workspaces>}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getWorkspacesList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.Workspaces>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.Workspaces, 5));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.Workspaces>} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
*/
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setWorkspacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.Workspaces=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.Workspaces}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.addWorkspaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pipelines.tekton.v1alpha1.Workspaces, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.clearWorkspacesList = function() {
  return this.setWorkspacesList([]);
};


/**
 * repeated TaskParamsToCustomize task_params = 6;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize>}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getTaskParamsList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize, 6));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize>} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
*/
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setTaskParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.addTaskParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.clearTaskParamsList = function() {
  return this.setTaskParamsList([]);
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool before_deploy = 8;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getBeforeDeploy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setBeforeDeploy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool after_deploy = 9;
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.getAfterDeploy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskToCustomize.prototype.setAfterDeploy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    validation: jspb.Message.getFieldWithDefault(msg, 3, ""),
    typeValue: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_default: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize;
  return proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidation(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValidation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTypeValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefault();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string param_name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.getParamName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.setParamName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string validation = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.getValidation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.setValidation = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string type_value = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.getTypeValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.setTypeValue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string default = 6;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.getDefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskParamsToCustomize.prototype.setDefault = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.PipelineRun.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.PipelineRun} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 5, ""),
    startedAt: jspb.Message.getFieldWithDefault(msg, 6, ""),
    finishedAt: jspb.Message.getFieldWithDefault(msg, 7, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 8, ""),
    pipelineRunStatus: jspb.Message.getFieldWithDefault(msg, 9, ""),
    taskRunList: jspb.Message.toObjectList(msg.getTaskRunList(),
    proto.pipelines.tekton.v1alpha1.TaskRun.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.PipelineRun;
  return proto.pipelines.tekton.v1alpha1.PipelineRun.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.PipelineRun} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFinishedAt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelineRunStatus(value);
      break;
    case 10:
      var value = new proto.pipelines.tekton.v1alpha1.TaskRun;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.TaskRun.deserializeBinaryFromReader);
      msg.addTaskRun(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.PipelineRun.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.PipelineRun} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStartedAt();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFinishedAt();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDuration();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPipelineRunStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTaskRunList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.pipelines.tekton.v1alpha1.TaskRun.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string namespace = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string reason = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string started_at = 6;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getStartedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string finished_at = 7;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getFinishedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setFinishedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string duration = 8;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string pipeline_run_status = 9;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getPipelineRunStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setPipelineRunStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated TaskRun task_run = 10;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.TaskRun>}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.getTaskRunList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.TaskRun>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.TaskRun, 10));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.TaskRun>} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
*/
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.setTaskRunList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRun=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun}
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.addTaskRun = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pipelines.tekton.v1alpha1.TaskRun, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRun.prototype.clearTaskRunList = function() {
  return this.setTaskRunList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.PipelineRunList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.PipelineRunList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pipelines.tekton.v1alpha1.PipelineRun.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRunList}
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.PipelineRunList;
  return proto.pipelines.tekton.v1alpha1.PipelineRunList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.PipelineRunList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRunList}
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pipelines.tekton.v1alpha1.PipelineRun;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.PipelineRun.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.PipelineRunList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.PipelineRunList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pipelines.tekton.v1alpha1.PipelineRun.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PipelineRun items = 1;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.PipelineRun>}
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.PipelineRun>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.PipelineRun, 1));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.PipelineRun>} value
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRunList} returns this
*/
proto.pipelines.tekton.v1alpha1.PipelineRunList.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.PipelineRun=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRun}
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pipelines.tekton.v1alpha1.PipelineRun, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.PipelineRunList} returns this
 */
proto.pipelines.tekton.v1alpha1.PipelineRunList.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pipelines.tekton.v1alpha1.TaskRun.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TaskRun.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRun} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskRun.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startedAt: jspb.Message.getFieldWithDefault(msg, 4, ""),
    finishedAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 6, ""),
    taskRunStatus: jspb.Message.getFieldWithDefault(msg, 7, ""),
    taskRunStepList: jspb.Message.toObjectList(msg.getTaskRunStepList(),
    proto.pipelines.tekton.v1alpha1.TaskRunStep.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TaskRun;
  return proto.pipelines.tekton.v1alpha1.TaskRun.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRun} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFinishedAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuration(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskRunStatus(value);
      break;
    case 8:
      var value = new proto.pipelines.tekton.v1alpha1.TaskRunStep;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.TaskRunStep.deserializeBinaryFromReader);
      msg.addTaskRunStep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TaskRun.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRun} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskRun.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartedAt();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFinishedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDuration();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTaskRunStatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTaskRunStepList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.pipelines.tekton.v1alpha1.TaskRunStep.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string started_at = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getStartedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string finished_at = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getFinishedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setFinishedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string duration = 6;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string task_run_status = 7;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getTaskRunStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setTaskRunStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated TaskRunStep task_run_step = 8;
 * @return {!Array<!proto.pipelines.tekton.v1alpha1.TaskRunStep>}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.getTaskRunStepList = function() {
  return /** @type{!Array<!proto.pipelines.tekton.v1alpha1.TaskRunStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pipelines.tekton.v1alpha1.TaskRunStep, 8));
};


/**
 * @param {!Array<!proto.pipelines.tekton.v1alpha1.TaskRunStep>} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
*/
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.setTaskRunStepList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRunStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep}
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.addTaskRunStep = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pipelines.tekton.v1alpha1.TaskRunStep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRun} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRun.prototype.clearTaskRunStepList = function() {
  return this.setTaskRunStepList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.TaskRunStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRunStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startedAt: jspb.Message.getFieldWithDefault(msg, 4, ""),
    finishedAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 6, ""),
    taskRunStepStatus: jspb.Message.getFieldWithDefault(msg, 7, ""),
    logs: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.TaskRunStep;
  return proto.pipelines.tekton.v1alpha1.TaskRunStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRunStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFinishedAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuration(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskRunStepStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.TaskRunStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.TaskRunStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartedAt();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFinishedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDuration();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTaskRunStepStatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLogs();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string started_at = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getStartedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string finished_at = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getFinishedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setFinishedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string duration = 6;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string task_run_step_status = 7;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getTaskRunStepStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setTaskRunStepStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string logs = 8;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.getLogs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.TaskRunStep} returns this
 */
proto.pipelines.tekton.v1alpha1.TaskRunStep.prototype.setLogs = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.pipelines.tekton.v1alpha1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pipelines.tekton.v1alpha1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    runtimeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 4, ""),
    message: jspb.Message.getFieldWithDefault(msg, 5, ""),
    status: jspb.Message.getFieldWithDefault(msg, 6, ""),
    eventType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pipelineRun: (f = msg.getPipelineRun()) && proto.pipelines.tekton.v1alpha1.PipelineRun.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pipelines.tekton.v1alpha1.Event}
 */
proto.pipelines.tekton.v1alpha1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pipelines.tekton.v1alpha1.Event;
  return proto.pipelines.tekton.v1alpha1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pipelines.tekton.v1alpha1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pipelines.tekton.v1alpha1.Event}
 */
proto.pipelines.tekton.v1alpha1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuntimeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    case 8:
      var value = new proto.pipelines.tekton.v1alpha1.PipelineRun;
      reader.readMessage(value,proto.pipelines.tekton.v1alpha1.PipelineRun.deserializeBinaryFromReader);
      msg.setPipelineRun(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pipelines.tekton.v1alpha1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pipelines.tekton.v1alpha1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pipelines.tekton.v1alpha1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuntimeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPipelineRun();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.pipelines.tekton.v1alpha1.PipelineRun.serializeBinaryToWriter
    );
  }
};


/**
 * optional string runtime_id = 1;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getRuntimeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.setRuntimeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string namespace = 3;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string reason = 4;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string message = 5;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string status = 6;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string event_type = 7;
 * @return {string}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional PipelineRun pipeline_run = 8;
 * @return {?proto.pipelines.tekton.v1alpha1.PipelineRun}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.getPipelineRun = function() {
  return /** @type{?proto.pipelines.tekton.v1alpha1.PipelineRun} */ (
    jspb.Message.getWrapperField(this, proto.pipelines.tekton.v1alpha1.PipelineRun, 8));
};


/**
 * @param {?proto.pipelines.tekton.v1alpha1.PipelineRun|undefined} value
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
*/
proto.pipelines.tekton.v1alpha1.Event.prototype.setPipelineRun = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pipelines.tekton.v1alpha1.Event} returns this
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.clearPipelineRun = function() {
  return this.setPipelineRun(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pipelines.tekton.v1alpha1.Event.prototype.hasPipelineRun = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.pipelines.tekton.v1alpha1);
