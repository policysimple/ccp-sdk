// source: performance/metrics/v1alpha1/metrics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.performance.metrics.v1alpha1.MetricItem', null, global);
goog.exportSymbol('proto.performance.metrics.v1alpha1.TektonMetricItem', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.performance.metrics.v1alpha1.MetricItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.performance.metrics.v1alpha1.MetricItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.performance.metrics.v1alpha1.MetricItem.displayName = 'proto.performance.metrics.v1alpha1.MetricItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.performance.metrics.v1alpha1.TektonMetricItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.performance.metrics.v1alpha1.TektonMetricItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.performance.metrics.v1alpha1.TektonMetricItem.displayName = 'proto.performance.metrics.v1alpha1.TektonMetricItem';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.toObject = function(opt_includeInstance) {
  return proto.performance.metrics.v1alpha1.MetricItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.performance.metrics.v1alpha1.MetricItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.performance.metrics.v1alpha1.MetricItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: jspb.Message.getFieldWithDefault(msg, 1, ""),
    container: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resource: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.performance.metrics.v1alpha1.MetricItem}
 */
proto.performance.metrics.v1alpha1.MetricItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.performance.metrics.v1alpha1.MetricItem;
  return proto.performance.metrics.v1alpha1.MetricItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.performance.metrics.v1alpha1.MetricItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.performance.metrics.v1alpha1.MetricItem}
 */
proto.performance.metrics.v1alpha1.MetricItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.performance.metrics.v1alpha1.MetricItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.performance.metrics.v1alpha1.MetricItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.performance.metrics.v1alpha1.MetricItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string date = 1;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.MetricItem} returns this
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string container = 2;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.MetricItem} returns this
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.setContainer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string resource = 3;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.MetricItem} returns this
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.setResource = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double value = 4;
 * @return {number}
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.performance.metrics.v1alpha1.MetricItem} returns this
 */
proto.performance.metrics.v1alpha1.MetricItem.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.toObject = function(opt_includeInstance) {
  return proto.performance.metrics.v1alpha1.TektonMetricItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.performance.metrics.v1alpha1.TektonMetricItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: jspb.Message.getFieldWithDefault(msg, 1, ""),
    container: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instance: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pod: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pipeline: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 7, ""),
    task: jspb.Message.getFieldWithDefault(msg, 8, ""),
    service: jspb.Message.getFieldWithDefault(msg, 9, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 10, ""),
    exportedNamespace: jspb.Message.getFieldWithDefault(msg, 11, ""),
    tektonQueryName: jspb.Message.getFieldWithDefault(msg, 12, ""),
    job: jspb.Message.getFieldWithDefault(msg, 13, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 15, ""),
    status: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.performance.metrics.v1alpha1.TektonMetricItem;
  return proto.performance.metrics.v1alpha1.TektonMetricItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.performance.metrics.v1alpha1.TektonMetricItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstance(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipeline(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTask(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setExportedNamespace(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTektonQueryName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setJob(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.performance.metrics.v1alpha1.TektonMetricItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.performance.metrics.v1alpha1.TektonMetricItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPipeline();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTask();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getExportedNamespace();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTektonQueryName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getJob();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional string date = 1;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string container = 2;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setContainer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string instance = 3;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getInstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setInstance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pod = 4;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getPod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setPod = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string pipeline = 6;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getPipeline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setPipeline = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string endpoint = 7;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string task = 8;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getTask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setTask = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string service = 9;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string namespace = 10;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string exported_namespace = 11;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getExportedNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setExportedNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string tekton_query_name = 12;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getTektonQueryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setTektonQueryName = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string job = 13;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getJob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setJob = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional double value = 14;
 * @return {number}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string timestamp = 15;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string status = 16;
 * @return {string}
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.performance.metrics.v1alpha1.TektonMetricItem} returns this
 */
proto.performance.metrics.v1alpha1.TektonMetricItem.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


goog.object.extend(exports, proto.performance.metrics.v1alpha1);
