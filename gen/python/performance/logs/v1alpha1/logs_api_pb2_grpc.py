# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from performance.logs.v1alpha1 import logs_api_pb2 as performance_dot_logs_dot_v1alpha1_dot_logs__api__pb2


class LogsAPIServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLogs = channel.unary_unary(
        '/performance.logs.v1alpha1.LogsAPIService/GetLogs',
        request_serializer=performance_dot_logs_dot_v1alpha1_dot_logs__api__pb2.GetLogsRequest.SerializeToString,
        response_deserializer=performance_dot_logs_dot_v1alpha1_dot_logs__api__pb2.GetLogsResponse.FromString,
        )


class LogsAPIServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetLogs(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LogsAPIServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLogs': grpc.unary_unary_rpc_method_handler(
          servicer.GetLogs,
          request_deserializer=performance_dot_logs_dot_v1alpha1_dot_logs__api__pb2.GetLogsRequest.FromString,
          response_serializer=performance_dot_logs_dot_v1alpha1_dot_logs__api__pb2.GetLogsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'performance.logs.v1alpha1.LogsAPIService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
