# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from pipelines.instance.v1alpha1 import instance_api_pb2 as pipelines_dot_instance_dot_v1alpha1_dot_instance__api__pb2


class InstanceAPIServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateInstance = channel.unary_unary(
        '/pipelines.instance.v1alpha1.InstanceAPIService/CreateInstance',
        request_serializer=pipelines_dot_instance_dot_v1alpha1_dot_instance__api__pb2.CreateInstanceRequest.SerializeToString,
        response_deserializer=pipelines_dot_instance_dot_v1alpha1_dot_instance__api__pb2.CreateInstanceResponse.FromString,
        )


class InstanceAPIServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CreateInstance(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InstanceAPIServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateInstance': grpc.unary_unary_rpc_method_handler(
          servicer.CreateInstance,
          request_deserializer=pipelines_dot_instance_dot_v1alpha1_dot_instance__api__pb2.CreateInstanceRequest.FromString,
          response_serializer=pipelines_dot_instance_dot_v1alpha1_dot_instance__api__pb2.CreateInstanceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pipelines.instance.v1alpha1.InstanceAPIService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
