# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from pipelines.environment.v1alpha1 import environment_api_pb2 as pipelines_dot_environment_dot_v1alpha1_dot_environment__api__pb2


class EnvironmentAPIServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateEnvironment = channel.unary_unary(
        '/pipelines.environment.v1alpha1.EnvironmentAPIService/CreateEnvironment',
        request_serializer=pipelines_dot_environment_dot_v1alpha1_dot_environment__api__pb2.CreateEnvironmentRequest.SerializeToString,
        response_deserializer=pipelines_dot_environment_dot_v1alpha1_dot_environment__api__pb2.CreateEnvironmentResponse.FromString,
        )


class EnvironmentAPIServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CreateEnvironment(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EnvironmentAPIServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateEnvironment': grpc.unary_unary_rpc_method_handler(
          servicer.CreateEnvironment,
          request_deserializer=pipelines_dot_environment_dot_v1alpha1_dot_environment__api__pb2.CreateEnvironmentRequest.FromString,
          response_serializer=pipelines_dot_environment_dot_v1alpha1_dot_environment__api__pb2.CreateEnvironmentResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pipelines.environment.v1alpha1.EnvironmentAPIService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
