// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package projects

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	//CRUD Project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	GetOneProject(ctx context.Context, in *GetOneProjectRequest, opts ...grpc.CallOption) (*GetOneProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	ListProject(ctx context.Context, in *ListProjectRequest, opts ...grpc.CallOption) (*ListProjectResponse, error)
	ListProjectPagination(ctx context.Context, in *ListProjectPaginationRequest, opts ...grpc.CallOption) (*ListProjectPaginationResponse, error)
	// EDITTS AND DELETE USERS
	DeleteUserByProject(ctx context.Context, in *DeleteUserByProjectRequest, opts ...grpc.CallOption) (*DeleteUserByProjectResponse, error)
	EditRoleUserByProject(ctx context.Context, in *EditRoleUserByProjectRequest, opts ...grpc.CallOption) (*EditRoleUserByProjectResponse, error)
	ListProjectByOrganization(ctx context.Context, in *ListProjectByOrganizationRequest, opts ...grpc.CallOption) (*ListProjectByOrganizationResponse, error)
	UpdadeProjectRole(ctx context.Context, in *UpdadeProjectRoleRequest, opts ...grpc.CallOption) (*UpdadeProjectRoleResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetOneProject(ctx context.Context, in *GetOneProjectRequest, opts ...grpc.CallOption) (*GetOneProjectResponse, error) {
	out := new(GetOneProjectResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/GetOneProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProject(ctx context.Context, in *ListProjectRequest, opts ...grpc.CallOption) (*ListProjectResponse, error) {
	out := new(ListProjectResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/ListProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjectPagination(ctx context.Context, in *ListProjectPaginationRequest, opts ...grpc.CallOption) (*ListProjectPaginationResponse, error) {
	out := new(ListProjectPaginationResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/ListProjectPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteUserByProject(ctx context.Context, in *DeleteUserByProjectRequest, opts ...grpc.CallOption) (*DeleteUserByProjectResponse, error) {
	out := new(DeleteUserByProjectResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/DeleteUserByProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) EditRoleUserByProject(ctx context.Context, in *EditRoleUserByProjectRequest, opts ...grpc.CallOption) (*EditRoleUserByProjectResponse, error) {
	out := new(EditRoleUserByProjectResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/EditRoleUserByProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjectByOrganization(ctx context.Context, in *ListProjectByOrganizationRequest, opts ...grpc.CallOption) (*ListProjectByOrganizationResponse, error) {
	out := new(ListProjectByOrganizationResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/ListProjectByOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdadeProjectRole(ctx context.Context, in *UpdadeProjectRoleRequest, opts ...grpc.CallOption) (*UpdadeProjectRoleResponse, error) {
	out := new(UpdadeProjectRoleResponse)
	err := c.cc.Invoke(ctx, "/accounts.v1alpha1.projects.v1.ProjectService/UpdadeProjectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations should embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	//CRUD Project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	GetOneProject(context.Context, *GetOneProjectRequest) (*GetOneProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	ListProject(context.Context, *ListProjectRequest) (*ListProjectResponse, error)
	ListProjectPagination(context.Context, *ListProjectPaginationRequest) (*ListProjectPaginationResponse, error)
	// EDITTS AND DELETE USERS
	DeleteUserByProject(context.Context, *DeleteUserByProjectRequest) (*DeleteUserByProjectResponse, error)
	EditRoleUserByProject(context.Context, *EditRoleUserByProjectRequest) (*EditRoleUserByProjectResponse, error)
	ListProjectByOrganization(context.Context, *ListProjectByOrganizationRequest) (*ListProjectByOrganizationResponse, error)
	UpdadeProjectRole(context.Context, *UpdadeProjectRoleRequest) (*UpdadeProjectRoleResponse, error)
}

// UnimplementedProjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) GetOneProject(context.Context, *GetOneProjectRequest) (*GetOneProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) ListProject(context.Context, *ListProjectRequest) (*ListProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProject not implemented")
}
func (UnimplementedProjectServiceServer) ListProjectPagination(context.Context, *ListProjectPaginationRequest) (*ListProjectPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectPagination not implemented")
}
func (UnimplementedProjectServiceServer) DeleteUserByProject(context.Context, *DeleteUserByProjectRequest) (*DeleteUserByProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByProject not implemented")
}
func (UnimplementedProjectServiceServer) EditRoleUserByProject(context.Context, *EditRoleUserByProjectRequest) (*EditRoleUserByProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditRoleUserByProject not implemented")
}
func (UnimplementedProjectServiceServer) ListProjectByOrganization(context.Context, *ListProjectByOrganizationRequest) (*ListProjectByOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectByOrganization not implemented")
}
func (UnimplementedProjectServiceServer) UpdadeProjectRole(context.Context, *UpdadeProjectRoleRequest) (*UpdadeProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdadeProjectRole not implemented")
}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetOneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetOneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/GetOneProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetOneProject(ctx, req.(*GetOneProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/ListProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProject(ctx, req.(*ListProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjectPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjectPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/ListProjectPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjectPagination(ctx, req.(*ListProjectPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteUserByProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserByProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteUserByProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/DeleteUserByProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteUserByProject(ctx, req.(*DeleteUserByProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_EditRoleUserByProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRoleUserByProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).EditRoleUserByProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/EditRoleUserByProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).EditRoleUserByProject(ctx, req.(*EditRoleUserByProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjectByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectByOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjectByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/ListProjectByOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjectByOrganization(ctx, req.(*ListProjectByOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdadeProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdadeProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdadeProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounts.v1alpha1.projects.v1.ProjectService/UpdadeProjectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdadeProjectRole(ctx, req.(*UpdadeProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounts.v1alpha1.projects.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "GetOneProject",
			Handler:    _ProjectService_GetOneProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
		{
			MethodName: "ListProject",
			Handler:    _ProjectService_ListProject_Handler,
		},
		{
			MethodName: "ListProjectPagination",
			Handler:    _ProjectService_ListProjectPagination_Handler,
		},
		{
			MethodName: "DeleteUserByProject",
			Handler:    _ProjectService_DeleteUserByProject_Handler,
		},
		{
			MethodName: "EditRoleUserByProject",
			Handler:    _ProjectService_EditRoleUserByProject_Handler,
		},
		{
			MethodName: "ListProjectByOrganization",
			Handler:    _ProjectService_ListProjectByOrganization_Handler,
		},
		{
			MethodName: "UpdadeProjectRole",
			Handler:    _ProjectService_UpdadeProjectRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts/v1alpha1/projects/projects_apis.proto",
}
