// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainThePowerServiceClient is the client API for BlockchainThePowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainThePowerServiceClient interface {
	CreateTpChain(ctx context.Context, in *CreateTpChainRequest, opts ...grpc.CallOption) (*CreateTpChainResponse, error)
	GetTpChains(ctx context.Context, in *GetTpChainsRequest, opts ...grpc.CallOption) (*GetTpChainsResponse, error)
	GetTpChainsByUserId(ctx context.Context, in *GetTpChainsByUserIdRequest, opts ...grpc.CallOption) (*GetTpChainsByUserIdResponse, error)
	GetTpChainById(ctx context.Context, in *GetTpChainByIdRequest, opts ...grpc.CallOption) (*GetTpChainByIdResponse, error)
	UpdateTpChain(ctx context.Context, in *UpdateTpChainRequest, opts ...grpc.CallOption) (*UpdateTpChainResponse, error)
}

type blockchainThePowerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainThePowerServiceClient(cc grpc.ClientConnInterface) BlockchainThePowerServiceClient {
	return &blockchainThePowerServiceClient{cc}
}

func (c *blockchainThePowerServiceClient) CreateTpChain(ctx context.Context, in *CreateTpChainRequest, opts ...grpc.CallOption) (*CreateTpChainResponse, error) {
	out := new(CreateTpChainResponse)
	err := c.cc.Invoke(ctx, "/blockchain.thepower.v1alpha1.BlockchainThePowerService/CreateTpChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainThePowerServiceClient) GetTpChains(ctx context.Context, in *GetTpChainsRequest, opts ...grpc.CallOption) (*GetTpChainsResponse, error) {
	out := new(GetTpChainsResponse)
	err := c.cc.Invoke(ctx, "/blockchain.thepower.v1alpha1.BlockchainThePowerService/GetTpChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainThePowerServiceClient) GetTpChainsByUserId(ctx context.Context, in *GetTpChainsByUserIdRequest, opts ...grpc.CallOption) (*GetTpChainsByUserIdResponse, error) {
	out := new(GetTpChainsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/blockchain.thepower.v1alpha1.BlockchainThePowerService/GetTpChainsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainThePowerServiceClient) GetTpChainById(ctx context.Context, in *GetTpChainByIdRequest, opts ...grpc.CallOption) (*GetTpChainByIdResponse, error) {
	out := new(GetTpChainByIdResponse)
	err := c.cc.Invoke(ctx, "/blockchain.thepower.v1alpha1.BlockchainThePowerService/GetTpChainById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainThePowerServiceClient) UpdateTpChain(ctx context.Context, in *UpdateTpChainRequest, opts ...grpc.CallOption) (*UpdateTpChainResponse, error) {
	out := new(UpdateTpChainResponse)
	err := c.cc.Invoke(ctx, "/blockchain.thepower.v1alpha1.BlockchainThePowerService/UpdateTpChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainThePowerServiceServer is the server API for BlockchainThePowerService service.
// All implementations should embed UnimplementedBlockchainThePowerServiceServer
// for forward compatibility
type BlockchainThePowerServiceServer interface {
	CreateTpChain(context.Context, *CreateTpChainRequest) (*CreateTpChainResponse, error)
	GetTpChains(context.Context, *GetTpChainsRequest) (*GetTpChainsResponse, error)
	GetTpChainsByUserId(context.Context, *GetTpChainsByUserIdRequest) (*GetTpChainsByUserIdResponse, error)
	GetTpChainById(context.Context, *GetTpChainByIdRequest) (*GetTpChainByIdResponse, error)
	UpdateTpChain(context.Context, *UpdateTpChainRequest) (*UpdateTpChainResponse, error)
}

// UnimplementedBlockchainThePowerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBlockchainThePowerServiceServer struct {
}

func (UnimplementedBlockchainThePowerServiceServer) CreateTpChain(context.Context, *CreateTpChainRequest) (*CreateTpChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTpChain not implemented")
}
func (UnimplementedBlockchainThePowerServiceServer) GetTpChains(context.Context, *GetTpChainsRequest) (*GetTpChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTpChains not implemented")
}
func (UnimplementedBlockchainThePowerServiceServer) GetTpChainsByUserId(context.Context, *GetTpChainsByUserIdRequest) (*GetTpChainsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTpChainsByUserId not implemented")
}
func (UnimplementedBlockchainThePowerServiceServer) GetTpChainById(context.Context, *GetTpChainByIdRequest) (*GetTpChainByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTpChainById not implemented")
}
func (UnimplementedBlockchainThePowerServiceServer) UpdateTpChain(context.Context, *UpdateTpChainRequest) (*UpdateTpChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTpChain not implemented")
}

// UnsafeBlockchainThePowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainThePowerServiceServer will
// result in compilation errors.
type UnsafeBlockchainThePowerServiceServer interface {
	mustEmbedUnimplementedBlockchainThePowerServiceServer()
}

func RegisterBlockchainThePowerServiceServer(s grpc.ServiceRegistrar, srv BlockchainThePowerServiceServer) {
	s.RegisterService(&BlockchainThePowerService_ServiceDesc, srv)
}

func _BlockchainThePowerService_CreateTpChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTpChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainThePowerServiceServer).CreateTpChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.thepower.v1alpha1.BlockchainThePowerService/CreateTpChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainThePowerServiceServer).CreateTpChain(ctx, req.(*CreateTpChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainThePowerService_GetTpChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTpChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainThePowerServiceServer).GetTpChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.thepower.v1alpha1.BlockchainThePowerService/GetTpChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainThePowerServiceServer).GetTpChains(ctx, req.(*GetTpChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainThePowerService_GetTpChainsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTpChainsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainThePowerServiceServer).GetTpChainsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.thepower.v1alpha1.BlockchainThePowerService/GetTpChainsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainThePowerServiceServer).GetTpChainsByUserId(ctx, req.(*GetTpChainsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainThePowerService_GetTpChainById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTpChainByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainThePowerServiceServer).GetTpChainById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.thepower.v1alpha1.BlockchainThePowerService/GetTpChainById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainThePowerServiceServer).GetTpChainById(ctx, req.(*GetTpChainByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainThePowerService_UpdateTpChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTpChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainThePowerServiceServer).UpdateTpChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.thepower.v1alpha1.BlockchainThePowerService/UpdateTpChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainThePowerServiceServer).UpdateTpChain(ctx, req.(*UpdateTpChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainThePowerService_ServiceDesc is the grpc.ServiceDesc for BlockchainThePowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainThePowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.thepower.v1alpha1.BlockchainThePowerService",
	HandlerType: (*BlockchainThePowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTpChain",
			Handler:    _BlockchainThePowerService_CreateTpChain_Handler,
		},
		{
			MethodName: "GetTpChains",
			Handler:    _BlockchainThePowerService_GetTpChains_Handler,
		},
		{
			MethodName: "GetTpChainsByUserId",
			Handler:    _BlockchainThePowerService_GetTpChainsByUserId_Handler,
		},
		{
			MethodName: "GetTpChainById",
			Handler:    _BlockchainThePowerService_GetTpChainById_Handler,
		},
		{
			MethodName: "UpdateTpChain",
			Handler:    _BlockchainThePowerService_UpdateTpChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain/thepower/v1alpha1/thepower_api.proto",
}
