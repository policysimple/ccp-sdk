// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: blockchain/network/v1alpha1/network_api.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Requests messages
type CreateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network           *Network     `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Corporation       *Corporation `protobuf:"bytes,2,opt,name=corporation,proto3" json:"corporation,omitempty"`
	CcpOrganizationId string       `protobuf:"bytes,3,opt,name=ccp_organization_id,json=ccpOrganizationId,proto3" json:"ccp_organization_id,omitempty"`
	CcpProjectId      string       `protobuf:"bytes,4,opt,name=ccp_project_id,json=ccpProjectId,proto3" json:"ccp_project_id,omitempty"`
}

func (x *CreateNetworkRequest) Reset() {
	*x = CreateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest) ProtoMessage() {}

func (x *CreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNetworkRequest) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateNetworkRequest) GetCorporation() *Corporation {
	if x != nil {
		return x.Corporation
	}
	return nil
}

func (x *CreateNetworkRequest) GetCcpOrganizationId() string {
	if x != nil {
		return x.CcpOrganizationId
	}
	return ""
}

func (x *CreateNetworkRequest) GetCcpProjectId() string {
	if x != nil {
		return x.CcpProjectId
	}
	return ""
}

type AddPeerToCorporationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CcpOrganizationId string `protobuf:"bytes,1,opt,name=ccp_organization_id,json=ccpOrganizationId,proto3" json:"ccp_organization_id,omitempty"`
	CcpProjectId      string `protobuf:"bytes,2,opt,name=ccp_project_id,json=ccpProjectId,proto3" json:"ccp_project_id,omitempty"`
	CorporationId     string `protobuf:"bytes,3,opt,name=corporation_id,json=corporationId,proto3" json:"corporation_id,omitempty"`
}

func (x *AddPeerToCorporationRequest) Reset() {
	*x = AddPeerToCorporationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeerToCorporationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerToCorporationRequest) ProtoMessage() {}

func (x *AddPeerToCorporationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerToCorporationRequest.ProtoReflect.Descriptor instead.
func (*AddPeerToCorporationRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{1}
}

func (x *AddPeerToCorporationRequest) GetCcpOrganizationId() string {
	if x != nil {
		return x.CcpOrganizationId
	}
	return ""
}

func (x *AddPeerToCorporationRequest) GetCcpProjectId() string {
	if x != nil {
		return x.CcpProjectId
	}
	return ""
}

func (x *AddPeerToCorporationRequest) GetCorporationId() string {
	if x != nil {
		return x.CorporationId
	}
	return ""
}

type AddOrdererByNetworkIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderer           *Orderer `protobuf:"bytes,1,opt,name=orderer,proto3" json:"orderer,omitempty"`
	CcpOrganizationId string   `protobuf:"bytes,2,opt,name=ccp_organization_id,json=ccpOrganizationId,proto3" json:"ccp_organization_id,omitempty"`
	CcpProjectId      string   `protobuf:"bytes,3,opt,name=ccp_project_id,json=ccpProjectId,proto3" json:"ccp_project_id,omitempty"`
}

func (x *AddOrdererByNetworkIdRequest) Reset() {
	*x = AddOrdererByNetworkIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrdererByNetworkIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrdererByNetworkIdRequest) ProtoMessage() {}

func (x *AddOrdererByNetworkIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrdererByNetworkIdRequest.ProtoReflect.Descriptor instead.
func (*AddOrdererByNetworkIdRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{2}
}

func (x *AddOrdererByNetworkIdRequest) GetOrderer() *Orderer {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *AddOrdererByNetworkIdRequest) GetCcpOrganizationId() string {
	if x != nil {
		return x.CcpOrganizationId
	}
	return ""
}

func (x *AddOrdererByNetworkIdRequest) GetCcpProjectId() string {
	if x != nil {
		return x.CcpProjectId
	}
	return ""
}

type CreateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{3}
}

func (x *CreateChannelRequest) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type GetBlockchainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset      int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	QueryParams string `protobuf:"bytes,3,opt,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"` // Standard query params to allow doing custom filters for blockchains.
}

func (x *GetBlockchainsRequest) Reset() {
	*x = GetBlockchainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainsRequest) ProtoMessage() {}

func (x *GetBlockchainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainsRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainsRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlockchainsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBlockchainsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetBlockchainsRequest) GetQueryParams() string {
	if x != nil {
		return x.QueryParams
	}
	return ""
}

type GetBlockchainsByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetBlockchainsByUserIdRequest) Reset() {
	*x = GetBlockchainsByUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainsByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainsByUserIdRequest) ProtoMessage() {}

func (x *GetBlockchainsByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainsByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainsByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockchainsByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetBlockchainsByUserIdRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBlockchainsByUserIdRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPeersByCorporationIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorporationId string `protobuf:"bytes,1,opt,name=corporation_id,json=corporationId,proto3" json:"corporation_id,omitempty"`
	Offset        int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetPeersByCorporationIdRequest) Reset() {
	*x = GetPeersByCorporationIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersByCorporationIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersByCorporationIdRequest) ProtoMessage() {}

func (x *GetPeersByCorporationIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersByCorporationIdRequest.ProtoReflect.Descriptor instead.
func (*GetPeersByCorporationIdRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetPeersByCorporationIdRequest) GetCorporationId() string {
	if x != nil {
		return x.CorporationId
	}
	return ""
}

func (x *GetPeersByCorporationIdRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPeersByCorporationIdRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetOrderersByNetworkIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Offset    int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetOrderersByNetworkIdRequest) Reset() {
	*x = GetOrderersByNetworkIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderersByNetworkIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderersByNetworkIdRequest) ProtoMessage() {}

func (x *GetOrderersByNetworkIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderersByNetworkIdRequest.ProtoReflect.Descriptor instead.
func (*GetOrderersByNetworkIdRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrderersByNetworkIdRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GetOrderersByNetworkIdRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetOrderersByNetworkIdRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetBlockchainByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBlockchainByIdRequest) Reset() {
	*x = GetBlockchainByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainByIdRequest) ProtoMessage() {}

func (x *GetBlockchainByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainByIdRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainByIdRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetBlockchainByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCorporationsByBlockchainIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainId string `protobuf:"bytes,1,opt,name=blockchain_id,json=blockchainId,proto3" json:"blockchain_id,omitempty"`
	Offset       int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetCorporationsByBlockchainIdRequest) Reset() {
	*x = GetCorporationsByBlockchainIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorporationsByBlockchainIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorporationsByBlockchainIdRequest) ProtoMessage() {}

func (x *GetCorporationsByBlockchainIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorporationsByBlockchainIdRequest.ProtoReflect.Descriptor instead.
func (*GetCorporationsByBlockchainIdRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetCorporationsByBlockchainIdRequest) GetBlockchainId() string {
	if x != nil {
		return x.BlockchainId
	}
	return ""
}

func (x *GetCorporationsByBlockchainIdRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCorporationsByBlockchainIdRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CreateCorporationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corporation       *Corporation `protobuf:"bytes,1,opt,name=corporation,proto3" json:"corporation,omitempty"`
	CcpOrganizationId string       `protobuf:"bytes,2,opt,name=ccp_organization_id,json=ccpOrganizationId,proto3" json:"ccp_organization_id,omitempty"`
	CcpProjectId      string       `protobuf:"bytes,3,opt,name=ccp_project_id,json=ccpProjectId,proto3" json:"ccp_project_id,omitempty"`
}

func (x *CreateCorporationRequest) Reset() {
	*x = CreateCorporationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCorporationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCorporationRequest) ProtoMessage() {}

func (x *CreateCorporationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCorporationRequest.ProtoReflect.Descriptor instead.
func (*CreateCorporationRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{10}
}

func (x *CreateCorporationRequest) GetCorporation() *Corporation {
	if x != nil {
		return x.Corporation
	}
	return nil
}

func (x *CreateCorporationRequest) GetCcpOrganizationId() string {
	if x != nil {
		return x.CcpOrganizationId
	}
	return ""
}

func (x *CreateCorporationRequest) GetCcpProjectId() string {
	if x != nil {
		return x.CcpProjectId
	}
	return ""
}

type SendInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation *Invitation `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation,omitempty"`
}

func (x *SendInvitationRequest) Reset() {
	*x = SendInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInvitationRequest) ProtoMessage() {}

func (x *SendInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInvitationRequest.ProtoReflect.Descriptor instead.
func (*SendInvitationRequest) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{11}
}

func (x *SendInvitationRequest) GetInvitation() *Invitation {
	if x != nil {
		return x.Invitation
	}
	return nil
}

// Response messages
type CreateNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateNetworkResponse) Reset() {
	*x = CreateNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkResponse) ProtoMessage() {}

func (x *CreateNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkResponse.ProtoReflect.Descriptor instead.
func (*CreateNetworkResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{12}
}

func (x *CreateNetworkResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateNetworkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddPeerToCorporationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corporation *Corporation `protobuf:"bytes,1,opt,name=corporation,proto3" json:"corporation,omitempty"`
	Message     string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddPeerToCorporationResponse) Reset() {
	*x = AddPeerToCorporationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeerToCorporationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerToCorporationResponse) ProtoMessage() {}

func (x *AddPeerToCorporationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerToCorporationResponse.ProtoReflect.Descriptor instead.
func (*AddPeerToCorporationResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{13}
}

func (x *AddPeerToCorporationResponse) GetCorporation() *Corporation {
	if x != nil {
		return x.Corporation
	}
	return nil
}

func (x *AddPeerToCorporationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddOrdererByNetworkIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderer *Orderer `protobuf:"bytes,1,opt,name=orderer,proto3" json:"orderer,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddOrdererByNetworkIdResponse) Reset() {
	*x = AddOrdererByNetworkIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrdererByNetworkIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrdererByNetworkIdResponse) ProtoMessage() {}

func (x *AddOrdererByNetworkIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrdererByNetworkIdResponse.ProtoReflect.Descriptor instead.
func (*AddOrdererByNetworkIdResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{14}
}

func (x *AddOrdererByNetworkIdResponse) GetOrderer() *Orderer {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *AddOrdererByNetworkIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateChannelResponse) Reset() {
	*x = CreateChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelResponse) ProtoMessage() {}

func (x *CreateChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateChannelResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{15}
}

func (x *CreateChannelResponse) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *CreateChannelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetBlockchainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks    []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	Total       int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	NextUrl     string     `protobuf:"bytes,3,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
	PreviousUrl string     `protobuf:"bytes,4,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
}

func (x *GetBlockchainsResponse) Reset() {
	*x = GetBlockchainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainsResponse) ProtoMessage() {}

func (x *GetBlockchainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainsResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainsResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetBlockchainsResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *GetBlockchainsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetBlockchainsResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

func (x *GetBlockchainsResponse) GetPreviousUrl() string {
	if x != nil {
		return x.PreviousUrl
	}
	return ""
}

type GetBlockchainsByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks    []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	Total       int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	NextUrl     string     `protobuf:"bytes,3,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
	PreviousUrl string     `protobuf:"bytes,4,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
}

func (x *GetBlockchainsByUserIdResponse) Reset() {
	*x = GetBlockchainsByUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainsByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainsByUserIdResponse) ProtoMessage() {}

func (x *GetBlockchainsByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainsByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainsByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetBlockchainsByUserIdResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *GetBlockchainsByUserIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetBlockchainsByUserIdResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

func (x *GetBlockchainsByUserIdResponse) GetPreviousUrl() string {
	if x != nil {
		return x.PreviousUrl
	}
	return ""
}

type GetOrderersByNetworkIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderers    []*Orderer `protobuf:"bytes,1,rep,name=orderers,proto3" json:"orderers,omitempty"`
	Total       int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	NextUrl     string     `protobuf:"bytes,3,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
	PreviousUrl string     `protobuf:"bytes,4,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
}

func (x *GetOrderersByNetworkIdResponse) Reset() {
	*x = GetOrderersByNetworkIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderersByNetworkIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderersByNetworkIdResponse) ProtoMessage() {}

func (x *GetOrderersByNetworkIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderersByNetworkIdResponse.ProtoReflect.Descriptor instead.
func (*GetOrderersByNetworkIdResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrderersByNetworkIdResponse) GetOrderers() []*Orderer {
	if x != nil {
		return x.Orderers
	}
	return nil
}

func (x *GetOrderersByNetworkIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetOrderersByNetworkIdResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

func (x *GetOrderersByNetworkIdResponse) GetPreviousUrl() string {
	if x != nil {
		return x.PreviousUrl
	}
	return ""
}

type GetPeersByCorporationIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer        []*Peer `protobuf:"bytes,1,rep,name=peer,proto3" json:"peer,omitempty"`
	Total       int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	NextUrl     string  `protobuf:"bytes,3,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
	PreviousUrl string  `protobuf:"bytes,4,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
}

func (x *GetPeersByCorporationIdResponse) Reset() {
	*x = GetPeersByCorporationIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersByCorporationIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersByCorporationIdResponse) ProtoMessage() {}

func (x *GetPeersByCorporationIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersByCorporationIdResponse.ProtoReflect.Descriptor instead.
func (*GetPeersByCorporationIdResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetPeersByCorporationIdResponse) GetPeer() []*Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *GetPeersByCorporationIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPeersByCorporationIdResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

func (x *GetPeersByCorporationIdResponse) GetPreviousUrl() string {
	if x != nil {
		return x.PreviousUrl
	}
	return ""
}

type GetBlockchainByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetBlockchainByIdResponse) Reset() {
	*x = GetBlockchainByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainByIdResponse) ProtoMessage() {}

func (x *GetBlockchainByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainByIdResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainByIdResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetBlockchainByIdResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type GetCorporationsByBlockchainIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corporations []*Corporation `protobuf:"bytes,1,rep,name=corporations,proto3" json:"corporations,omitempty"`
	Total        int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	NextUrl      string         `protobuf:"bytes,3,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
	PreviousUrl  string         `protobuf:"bytes,4,opt,name=previous_url,json=previousUrl,proto3" json:"previous_url,omitempty"`
}

func (x *GetCorporationsByBlockchainIdResponse) Reset() {
	*x = GetCorporationsByBlockchainIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorporationsByBlockchainIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorporationsByBlockchainIdResponse) ProtoMessage() {}

func (x *GetCorporationsByBlockchainIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorporationsByBlockchainIdResponse.ProtoReflect.Descriptor instead.
func (*GetCorporationsByBlockchainIdResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetCorporationsByBlockchainIdResponse) GetCorporations() []*Corporation {
	if x != nil {
		return x.Corporations
	}
	return nil
}

func (x *GetCorporationsByBlockchainIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCorporationsByBlockchainIdResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

func (x *GetCorporationsByBlockchainIdResponse) GetPreviousUrl() string {
	if x != nil {
		return x.PreviousUrl
	}
	return ""
}

type CreateCorporationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corporation *Corporation `protobuf:"bytes,1,opt,name=corporation,proto3" json:"corporation,omitempty"`
	Message     string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateCorporationResponse) Reset() {
	*x = CreateCorporationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCorporationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCorporationResponse) ProtoMessage() {}

func (x *CreateCorporationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCorporationResponse.ProtoReflect.Descriptor instead.
func (*CreateCorporationResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{22}
}

func (x *CreateCorporationResponse) GetCorporation() *Corporation {
	if x != nil {
		return x.Corporation
	}
	return nil
}

func (x *CreateCorporationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SendInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation *Invitation `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendInvitationResponse) Reset() {
	*x = SendInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInvitationResponse) ProtoMessage() {}

func (x *SendInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_network_v1alpha1_network_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInvitationResponse.ProtoReflect.Descriptor instead.
func (*SendInvitationResponse) Descriptor() ([]byte, []int) {
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP(), []int{23}
}

func (x *SendInvitationResponse) GetInvitation() *Invitation {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SendInvitationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_blockchain_network_v1alpha1_network_api_proto protoreflect.FileDescriptor

var file_blockchain_network_v1alpha1_network_api_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x29, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4a, 0x0a,
	0x0b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x63, 0x70,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x63, 0x70, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x63, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x9a, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x63, 0x70, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x63,
	0x70, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a,
	0x1c, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x63, 0x70, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x63, 0x70, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x68, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x66, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x75, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x63, 0x70, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x63, 0x70, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x63, 0x70, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x1c, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x71, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x55, 0x72, 0x6c, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x55, 0x72, 0x6c, 0x22, 0xb6, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x55, 0x72, 0x6c, 0x22, 0xac, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x55, 0x72, 0x6c, 0x22, 0x5b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0xc9, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x81, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x7b, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x8d,
	0x0d, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x50, 0x49,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f,
	0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x32, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x35, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xa6, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x41, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x3a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72,
	0x42, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x75, 0x65,
	0x6d, 0x62, 0x79, 0x2f, 0x63, 0x63, 0x70, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blockchain_network_v1alpha1_network_api_proto_rawDescOnce sync.Once
	file_blockchain_network_v1alpha1_network_api_proto_rawDescData = file_blockchain_network_v1alpha1_network_api_proto_rawDesc
)

func file_blockchain_network_v1alpha1_network_api_proto_rawDescGZIP() []byte {
	file_blockchain_network_v1alpha1_network_api_proto_rawDescOnce.Do(func() {
		file_blockchain_network_v1alpha1_network_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockchain_network_v1alpha1_network_api_proto_rawDescData)
	})
	return file_blockchain_network_v1alpha1_network_api_proto_rawDescData
}

var file_blockchain_network_v1alpha1_network_api_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_blockchain_network_v1alpha1_network_api_proto_goTypes = []interface{}{
	(*CreateNetworkRequest)(nil),                  // 0: blockchain.network.v1alpha1.CreateNetworkRequest
	(*AddPeerToCorporationRequest)(nil),           // 1: blockchain.network.v1alpha1.AddPeerToCorporationRequest
	(*AddOrdererByNetworkIdRequest)(nil),          // 2: blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest
	(*CreateChannelRequest)(nil),                  // 3: blockchain.network.v1alpha1.CreateChannelRequest
	(*GetBlockchainsRequest)(nil),                 // 4: blockchain.network.v1alpha1.GetBlockchainsRequest
	(*GetBlockchainsByUserIdRequest)(nil),         // 5: blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest
	(*GetPeersByCorporationIdRequest)(nil),        // 6: blockchain.network.v1alpha1.GetPeersByCorporationIdRequest
	(*GetOrderersByNetworkIdRequest)(nil),         // 7: blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest
	(*GetBlockchainByIdRequest)(nil),              // 8: blockchain.network.v1alpha1.GetBlockchainByIdRequest
	(*GetCorporationsByBlockchainIdRequest)(nil),  // 9: blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest
	(*CreateCorporationRequest)(nil),              // 10: blockchain.network.v1alpha1.CreateCorporationRequest
	(*SendInvitationRequest)(nil),                 // 11: blockchain.network.v1alpha1.SendInvitationRequest
	(*CreateNetworkResponse)(nil),                 // 12: blockchain.network.v1alpha1.CreateNetworkResponse
	(*AddPeerToCorporationResponse)(nil),          // 13: blockchain.network.v1alpha1.AddPeerToCorporationResponse
	(*AddOrdererByNetworkIdResponse)(nil),         // 14: blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse
	(*CreateChannelResponse)(nil),                 // 15: blockchain.network.v1alpha1.CreateChannelResponse
	(*GetBlockchainsResponse)(nil),                // 16: blockchain.network.v1alpha1.GetBlockchainsResponse
	(*GetBlockchainsByUserIdResponse)(nil),        // 17: blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse
	(*GetOrderersByNetworkIdResponse)(nil),        // 18: blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse
	(*GetPeersByCorporationIdResponse)(nil),       // 19: blockchain.network.v1alpha1.GetPeersByCorporationIdResponse
	(*GetBlockchainByIdResponse)(nil),             // 20: blockchain.network.v1alpha1.GetBlockchainByIdResponse
	(*GetCorporationsByBlockchainIdResponse)(nil), // 21: blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse
	(*CreateCorporationResponse)(nil),             // 22: blockchain.network.v1alpha1.CreateCorporationResponse
	(*SendInvitationResponse)(nil),                // 23: blockchain.network.v1alpha1.SendInvitationResponse
	(*Network)(nil),                               // 24: blockchain.network.v1alpha1.Network
	(*Corporation)(nil),                           // 25: blockchain.network.v1alpha1.Corporation
	(*Orderer)(nil),                               // 26: blockchain.network.v1alpha1.Orderer
	(*Channel)(nil),                               // 27: blockchain.network.v1alpha1.Channel
	(*Invitation)(nil),                            // 28: blockchain.network.v1alpha1.Invitation
	(*Peer)(nil),                                  // 29: blockchain.network.v1alpha1.Peer
}
var file_blockchain_network_v1alpha1_network_api_proto_depIdxs = []int32{
	24, // 0: blockchain.network.v1alpha1.CreateNetworkRequest.network:type_name -> blockchain.network.v1alpha1.Network
	25, // 1: blockchain.network.v1alpha1.CreateNetworkRequest.corporation:type_name -> blockchain.network.v1alpha1.Corporation
	26, // 2: blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.orderer:type_name -> blockchain.network.v1alpha1.Orderer
	27, // 3: blockchain.network.v1alpha1.CreateChannelRequest.channel:type_name -> blockchain.network.v1alpha1.Channel
	25, // 4: blockchain.network.v1alpha1.CreateCorporationRequest.corporation:type_name -> blockchain.network.v1alpha1.Corporation
	28, // 5: blockchain.network.v1alpha1.SendInvitationRequest.invitation:type_name -> blockchain.network.v1alpha1.Invitation
	24, // 6: blockchain.network.v1alpha1.CreateNetworkResponse.network:type_name -> blockchain.network.v1alpha1.Network
	25, // 7: blockchain.network.v1alpha1.AddPeerToCorporationResponse.corporation:type_name -> blockchain.network.v1alpha1.Corporation
	26, // 8: blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.orderer:type_name -> blockchain.network.v1alpha1.Orderer
	27, // 9: blockchain.network.v1alpha1.CreateChannelResponse.channel:type_name -> blockchain.network.v1alpha1.Channel
	24, // 10: blockchain.network.v1alpha1.GetBlockchainsResponse.networks:type_name -> blockchain.network.v1alpha1.Network
	24, // 11: blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.networks:type_name -> blockchain.network.v1alpha1.Network
	26, // 12: blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.orderers:type_name -> blockchain.network.v1alpha1.Orderer
	29, // 13: blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.peer:type_name -> blockchain.network.v1alpha1.Peer
	24, // 14: blockchain.network.v1alpha1.GetBlockchainByIdResponse.network:type_name -> blockchain.network.v1alpha1.Network
	25, // 15: blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.corporations:type_name -> blockchain.network.v1alpha1.Corporation
	25, // 16: blockchain.network.v1alpha1.CreateCorporationResponse.corporation:type_name -> blockchain.network.v1alpha1.Corporation
	28, // 17: blockchain.network.v1alpha1.SendInvitationResponse.invitation:type_name -> blockchain.network.v1alpha1.Invitation
	0,  // 18: blockchain.network.v1alpha1.BlockchainAPIService.CreateNetwork:input_type -> blockchain.network.v1alpha1.CreateNetworkRequest
	1,  // 19: blockchain.network.v1alpha1.BlockchainAPIService.AddPeerToCorporation:input_type -> blockchain.network.v1alpha1.AddPeerToCorporationRequest
	4,  // 20: blockchain.network.v1alpha1.BlockchainAPIService.GetBlockchains:input_type -> blockchain.network.v1alpha1.GetBlockchainsRequest
	5,  // 21: blockchain.network.v1alpha1.BlockchainAPIService.GetBlockchainsByUserId:input_type -> blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest
	8,  // 22: blockchain.network.v1alpha1.BlockchainAPIService.GetBlockchainById:input_type -> blockchain.network.v1alpha1.GetBlockchainByIdRequest
	9,  // 23: blockchain.network.v1alpha1.BlockchainAPIService.GetCorporationsByBlockchainId:input_type -> blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest
	11, // 24: blockchain.network.v1alpha1.BlockchainAPIService.SendInvitation:input_type -> blockchain.network.v1alpha1.SendInvitationRequest
	10, // 25: blockchain.network.v1alpha1.BlockchainAPIService.CreateCorporation:input_type -> blockchain.network.v1alpha1.CreateCorporationRequest
	3,  // 26: blockchain.network.v1alpha1.BlockchainAPIService.CreateChannel:input_type -> blockchain.network.v1alpha1.CreateChannelRequest
	6,  // 27: blockchain.network.v1alpha1.BlockchainAPIService.GetPeersByCorporationId:input_type -> blockchain.network.v1alpha1.GetPeersByCorporationIdRequest
	7,  // 28: blockchain.network.v1alpha1.BlockchainAPIService.GetOrderersByNetworkId:input_type -> blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest
	2,  // 29: blockchain.network.v1alpha1.BlockchainAPIService.AddOrdererByNetworkId:input_type -> blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest
	12, // 30: blockchain.network.v1alpha1.BlockchainAPIService.CreateNetwork:output_type -> blockchain.network.v1alpha1.CreateNetworkResponse
	13, // 31: blockchain.network.v1alpha1.BlockchainAPIService.AddPeerToCorporation:output_type -> blockchain.network.v1alpha1.AddPeerToCorporationResponse
	16, // 32: blockchain.network.v1alpha1.BlockchainAPIService.GetBlockchains:output_type -> blockchain.network.v1alpha1.GetBlockchainsResponse
	17, // 33: blockchain.network.v1alpha1.BlockchainAPIService.GetBlockchainsByUserId:output_type -> blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse
	20, // 34: blockchain.network.v1alpha1.BlockchainAPIService.GetBlockchainById:output_type -> blockchain.network.v1alpha1.GetBlockchainByIdResponse
	21, // 35: blockchain.network.v1alpha1.BlockchainAPIService.GetCorporationsByBlockchainId:output_type -> blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse
	23, // 36: blockchain.network.v1alpha1.BlockchainAPIService.SendInvitation:output_type -> blockchain.network.v1alpha1.SendInvitationResponse
	22, // 37: blockchain.network.v1alpha1.BlockchainAPIService.CreateCorporation:output_type -> blockchain.network.v1alpha1.CreateCorporationResponse
	15, // 38: blockchain.network.v1alpha1.BlockchainAPIService.CreateChannel:output_type -> blockchain.network.v1alpha1.CreateChannelResponse
	19, // 39: blockchain.network.v1alpha1.BlockchainAPIService.GetPeersByCorporationId:output_type -> blockchain.network.v1alpha1.GetPeersByCorporationIdResponse
	18, // 40: blockchain.network.v1alpha1.BlockchainAPIService.GetOrderersByNetworkId:output_type -> blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse
	14, // 41: blockchain.network.v1alpha1.BlockchainAPIService.AddOrdererByNetworkId:output_type -> blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse
	30, // [30:42] is the sub-list for method output_type
	18, // [18:30] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_blockchain_network_v1alpha1_network_api_proto_init() }
func file_blockchain_network_v1alpha1_network_api_proto_init() {
	if File_blockchain_network_v1alpha1_network_api_proto != nil {
		return
	}
	file_blockchain_network_v1alpha1_network_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeerToCorporationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrdererByNetworkIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainsByUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersByCorporationIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderersByNetworkIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorporationsByBlockchainIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCorporationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeerToCorporationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrdererByNetworkIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainsByUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderersByNetworkIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersByCorporationIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorporationsByBlockchainIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCorporationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_network_v1alpha1_network_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockchain_network_v1alpha1_network_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blockchain_network_v1alpha1_network_api_proto_goTypes,
		DependencyIndexes: file_blockchain_network_v1alpha1_network_api_proto_depIdxs,
		MessageInfos:      file_blockchain_network_v1alpha1_network_api_proto_msgTypes,
	}.Build()
	File_blockchain_network_v1alpha1_network_api_proto = out.File
	file_blockchain_network_v1alpha1_network_api_proto_rawDesc = nil
	file_blockchain_network_v1alpha1_network_api_proto_goTypes = nil
	file_blockchain_network_v1alpha1_network_api_proto_depIdxs = nil
}
