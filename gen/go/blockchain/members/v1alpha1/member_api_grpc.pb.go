// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainInvitationAPIServiceClient is the client API for BlockchainInvitationAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainInvitationAPIServiceClient interface {
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
}

type blockchainInvitationAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainInvitationAPIServiceClient(cc grpc.ClientConnInterface) BlockchainInvitationAPIServiceClient {
	return &blockchainInvitationAPIServiceClient{cc}
}

func (c *blockchainInvitationAPIServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/blockchain.members.v1alpha1.BlockchainInvitationAPIService/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainInvitationAPIServiceClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, "/blockchain.members.v1alpha1.BlockchainInvitationAPIService/CreateInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainInvitationAPIServiceServer is the server API for BlockchainInvitationAPIService service.
// All implementations should embed UnimplementedBlockchainInvitationAPIServiceServer
// for forward compatibility
type BlockchainInvitationAPIServiceServer interface {
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
}

// UnimplementedBlockchainInvitationAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBlockchainInvitationAPIServiceServer struct {
}

func (UnimplementedBlockchainInvitationAPIServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedBlockchainInvitationAPIServiceServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}

// UnsafeBlockchainInvitationAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainInvitationAPIServiceServer will
// result in compilation errors.
type UnsafeBlockchainInvitationAPIServiceServer interface {
	mustEmbedUnimplementedBlockchainInvitationAPIServiceServer()
}

func RegisterBlockchainInvitationAPIServiceServer(s grpc.ServiceRegistrar, srv BlockchainInvitationAPIServiceServer) {
	s.RegisterService(&BlockchainInvitationAPIService_ServiceDesc, srv)
}

func _BlockchainInvitationAPIService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainInvitationAPIServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.members.v1alpha1.BlockchainInvitationAPIService/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainInvitationAPIServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainInvitationAPIService_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainInvitationAPIServiceServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.members.v1alpha1.BlockchainInvitationAPIService/CreateInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainInvitationAPIServiceServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainInvitationAPIService_ServiceDesc is the grpc.ServiceDesc for BlockchainInvitationAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainInvitationAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.members.v1alpha1.BlockchainInvitationAPIService",
	HandlerType: (*BlockchainInvitationAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _BlockchainInvitationAPIService_CreateOrganization_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _BlockchainInvitationAPIService_CreateInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain/members/v1alpha1/member_api.proto",
}
