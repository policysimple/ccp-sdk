// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TektonPipelineAPIServiceClient is the client API for TektonPipelineAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TektonPipelineAPIServiceClient interface {
	CreateTektonPipeline(ctx context.Context, in *CreateTektonPipelineRequest, opts ...grpc.CallOption) (*CreateTektonPipelineResponse, error)
	DeleteTektonPipeline(ctx context.Context, in *DeleteTektonPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonPipelineResponse, error)
	ListTektonTaskPipeline(ctx context.Context, in *ListTektonTaskPipelineRequest, opts ...grpc.CallOption) (*ListTektonTaskPipelineResponse, error)
	GetPipelineRun(ctx context.Context, in *GetPipelineRunRequest, opts ...grpc.CallOption) (*GetPipelineRunResponse, error)
	ListPipelineRun(ctx context.Context, in *ListPipelineRunRequest, opts ...grpc.CallOption) (*ListPipelineRunResponse, error)
	GetStatusRuntime(ctx context.Context, in *GetStatusRuntimeRequest, opts ...grpc.CallOption) (TektonPipelineAPIService_GetStatusRuntimeClient, error)
}

type tektonPipelineAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTektonPipelineAPIServiceClient(cc grpc.ClientConnInterface) TektonPipelineAPIServiceClient {
	return &tektonPipelineAPIServiceClient{cc}
}

func (c *tektonPipelineAPIServiceClient) CreateTektonPipeline(ctx context.Context, in *CreateTektonPipelineRequest, opts ...grpc.CallOption) (*CreateTektonPipelineResponse, error) {
	out := new(CreateTektonPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) DeleteTektonPipeline(ctx context.Context, in *DeleteTektonPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonPipelineResponse, error) {
	out := new(DeleteTektonPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) ListTektonTaskPipeline(ctx context.Context, in *ListTektonTaskPipelineRequest, opts ...grpc.CallOption) (*ListTektonTaskPipelineResponse, error) {
	out := new(ListTektonTaskPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListTektonTaskPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) GetPipelineRun(ctx context.Context, in *GetPipelineRunRequest, opts ...grpc.CallOption) (*GetPipelineRunResponse, error) {
	out := new(GetPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/GetPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) ListPipelineRun(ctx context.Context, in *ListPipelineRunRequest, opts ...grpc.CallOption) (*ListPipelineRunResponse, error) {
	out := new(ListPipelineRunResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListPipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) GetStatusRuntime(ctx context.Context, in *GetStatusRuntimeRequest, opts ...grpc.CallOption) (TektonPipelineAPIService_GetStatusRuntimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TektonPipelineAPIService_ServiceDesc.Streams[0], "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/GetStatusRuntime", opts...)
	if err != nil {
		return nil, err
	}
	x := &tektonPipelineAPIServiceGetStatusRuntimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TektonPipelineAPIService_GetStatusRuntimeClient interface {
	Recv() (*GetStatusRuntimeResponse, error)
	grpc.ClientStream
}

type tektonPipelineAPIServiceGetStatusRuntimeClient struct {
	grpc.ClientStream
}

func (x *tektonPipelineAPIServiceGetStatusRuntimeClient) Recv() (*GetStatusRuntimeResponse, error) {
	m := new(GetStatusRuntimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TektonPipelineAPIServiceServer is the server API for TektonPipelineAPIService service.
// All implementations should embed UnimplementedTektonPipelineAPIServiceServer
// for forward compatibility
type TektonPipelineAPIServiceServer interface {
	CreateTektonPipeline(context.Context, *CreateTektonPipelineRequest) (*CreateTektonPipelineResponse, error)
	DeleteTektonPipeline(context.Context, *DeleteTektonPipelineRequest) (*DeleteTektonPipelineResponse, error)
	ListTektonTaskPipeline(context.Context, *ListTektonTaskPipelineRequest) (*ListTektonTaskPipelineResponse, error)
	GetPipelineRun(context.Context, *GetPipelineRunRequest) (*GetPipelineRunResponse, error)
	ListPipelineRun(context.Context, *ListPipelineRunRequest) (*ListPipelineRunResponse, error)
	GetStatusRuntime(*GetStatusRuntimeRequest, TektonPipelineAPIService_GetStatusRuntimeServer) error
}

// UnimplementedTektonPipelineAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTektonPipelineAPIServiceServer struct {
}

func (UnimplementedTektonPipelineAPIServiceServer) CreateTektonPipeline(context.Context, *CreateTektonPipelineRequest) (*CreateTektonPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTektonPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) DeleteTektonPipeline(context.Context, *DeleteTektonPipelineRequest) (*DeleteTektonPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTektonPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) ListTektonTaskPipeline(context.Context, *ListTektonTaskPipelineRequest) (*ListTektonTaskPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTektonTaskPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) GetPipelineRun(context.Context, *GetPipelineRunRequest) (*GetPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineRun not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) ListPipelineRun(context.Context, *ListPipelineRunRequest) (*ListPipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineRun not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) GetStatusRuntime(*GetStatusRuntimeRequest, TektonPipelineAPIService_GetStatusRuntimeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStatusRuntime not implemented")
}

// UnsafeTektonPipelineAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TektonPipelineAPIServiceServer will
// result in compilation errors.
type UnsafeTektonPipelineAPIServiceServer interface {
	mustEmbedUnimplementedTektonPipelineAPIServiceServer()
}

func RegisterTektonPipelineAPIServiceServer(s grpc.ServiceRegistrar, srv TektonPipelineAPIServiceServer) {
	s.RegisterService(&TektonPipelineAPIService_ServiceDesc, srv)
}

func _TektonPipelineAPIService_CreateTektonPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTektonPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).CreateTektonPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).CreateTektonPipeline(ctx, req.(*CreateTektonPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_DeleteTektonPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTektonPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).DeleteTektonPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).DeleteTektonPipeline(ctx, req.(*DeleteTektonPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_ListTektonTaskPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTektonTaskPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).ListTektonTaskPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListTektonTaskPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).ListTektonTaskPipeline(ctx, req.(*ListTektonTaskPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_GetPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).GetPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/GetPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).GetPipelineRun(ctx, req.(*GetPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_ListPipelineRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).ListPipelineRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListPipelineRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).ListPipelineRun(ctx, req.(*ListPipelineRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_GetStatusRuntime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStatusRuntimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TektonPipelineAPIServiceServer).GetStatusRuntime(m, &tektonPipelineAPIServiceGetStatusRuntimeServer{stream})
}

type TektonPipelineAPIService_GetStatusRuntimeServer interface {
	Send(*GetStatusRuntimeResponse) error
	grpc.ServerStream
}

type tektonPipelineAPIServiceGetStatusRuntimeServer struct {
	grpc.ServerStream
}

func (x *tektonPipelineAPIServiceGetStatusRuntimeServer) Send(m *GetStatusRuntimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TektonPipelineAPIService_ServiceDesc is the grpc.ServiceDesc for TektonPipelineAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TektonPipelineAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pipelines.tekton.v1alpha1.TektonPipelineAPIService",
	HandlerType: (*TektonPipelineAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTektonPipeline",
			Handler:    _TektonPipelineAPIService_CreateTektonPipeline_Handler,
		},
		{
			MethodName: "DeleteTektonPipeline",
			Handler:    _TektonPipelineAPIService_DeleteTektonPipeline_Handler,
		},
		{
			MethodName: "ListTektonTaskPipeline",
			Handler:    _TektonPipelineAPIService_ListTektonTaskPipeline_Handler,
		},
		{
			MethodName: "GetPipelineRun",
			Handler:    _TektonPipelineAPIService_GetPipelineRun_Handler,
		},
		{
			MethodName: "ListPipelineRun",
			Handler:    _TektonPipelineAPIService_ListPipelineRun_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStatusRuntime",
			Handler:       _TektonPipelineAPIService_GetStatusRuntime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pipelines/tekton/v1alpha1/tekton_api.proto",
}
