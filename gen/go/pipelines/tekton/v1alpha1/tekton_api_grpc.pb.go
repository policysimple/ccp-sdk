// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TektonPipelineAPIServiceClient is the client API for TektonPipelineAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TektonPipelineAPIServiceClient interface {
	CreateTektonPipeline(ctx context.Context, in *CreateTektonPipelineRequest, opts ...grpc.CallOption) (*CreateTektonPipelineResponse, error)
	DeleteTektonPipeline(ctx context.Context, in *DeleteTektonPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonPipelineResponse, error)
	CreateTektonTaskPipeline(ctx context.Context, in *CreateTektonTaskPipelineRequest, opts ...grpc.CallOption) (*CreateTektonTaskPipelineResponse, error)
	DeleteTektonTaskPipeline(ctx context.Context, in *DeleteTektonTaskPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonTaskPipelineResponse, error)
	ListTektonTaskPipeline(ctx context.Context, in *ListTektonTaskPipelineRequest, opts ...grpc.CallOption) (*ListTektonTaskPipelineResponse, error)
	GetTektonTaskPipeline(ctx context.Context, in *GetTektonTaskPipelineRequest, opts ...grpc.CallOption) (*GetTektonTaskPipelineResponse, error)
}

type tektonPipelineAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTektonPipelineAPIServiceClient(cc grpc.ClientConnInterface) TektonPipelineAPIServiceClient {
	return &tektonPipelineAPIServiceClient{cc}
}

func (c *tektonPipelineAPIServiceClient) CreateTektonPipeline(ctx context.Context, in *CreateTektonPipelineRequest, opts ...grpc.CallOption) (*CreateTektonPipelineResponse, error) {
	out := new(CreateTektonPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) DeleteTektonPipeline(ctx context.Context, in *DeleteTektonPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonPipelineResponse, error) {
	out := new(DeleteTektonPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) CreateTektonTaskPipeline(ctx context.Context, in *CreateTektonTaskPipelineRequest, opts ...grpc.CallOption) (*CreateTektonTaskPipelineResponse, error) {
	out := new(CreateTektonTaskPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonTaskPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) DeleteTektonTaskPipeline(ctx context.Context, in *DeleteTektonTaskPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonTaskPipelineResponse, error) {
	out := new(DeleteTektonTaskPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonTaskPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) ListTektonTaskPipeline(ctx context.Context, in *ListTektonTaskPipelineRequest, opts ...grpc.CallOption) (*ListTektonTaskPipelineResponse, error) {
	out := new(ListTektonTaskPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListTektonTaskPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tektonPipelineAPIServiceClient) GetTektonTaskPipeline(ctx context.Context, in *GetTektonTaskPipelineRequest, opts ...grpc.CallOption) (*GetTektonTaskPipelineResponse, error) {
	out := new(GetTektonTaskPipelineResponse)
	err := c.cc.Invoke(ctx, "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/GetTektonTaskPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TektonPipelineAPIServiceServer is the server API for TektonPipelineAPIService service.
// All implementations should embed UnimplementedTektonPipelineAPIServiceServer
// for forward compatibility
type TektonPipelineAPIServiceServer interface {
	CreateTektonPipeline(context.Context, *CreateTektonPipelineRequest) (*CreateTektonPipelineResponse, error)
	DeleteTektonPipeline(context.Context, *DeleteTektonPipelineRequest) (*DeleteTektonPipelineResponse, error)
	CreateTektonTaskPipeline(context.Context, *CreateTektonTaskPipelineRequest) (*CreateTektonTaskPipelineResponse, error)
	DeleteTektonTaskPipeline(context.Context, *DeleteTektonTaskPipelineRequest) (*DeleteTektonTaskPipelineResponse, error)
	ListTektonTaskPipeline(context.Context, *ListTektonTaskPipelineRequest) (*ListTektonTaskPipelineResponse, error)
	GetTektonTaskPipeline(context.Context, *GetTektonTaskPipelineRequest) (*GetTektonTaskPipelineResponse, error)
}

// UnimplementedTektonPipelineAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTektonPipelineAPIServiceServer struct {
}

func (UnimplementedTektonPipelineAPIServiceServer) CreateTektonPipeline(context.Context, *CreateTektonPipelineRequest) (*CreateTektonPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTektonPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) DeleteTektonPipeline(context.Context, *DeleteTektonPipelineRequest) (*DeleteTektonPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTektonPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) CreateTektonTaskPipeline(context.Context, *CreateTektonTaskPipelineRequest) (*CreateTektonTaskPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTektonTaskPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) DeleteTektonTaskPipeline(context.Context, *DeleteTektonTaskPipelineRequest) (*DeleteTektonTaskPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTektonTaskPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) ListTektonTaskPipeline(context.Context, *ListTektonTaskPipelineRequest) (*ListTektonTaskPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTektonTaskPipeline not implemented")
}
func (UnimplementedTektonPipelineAPIServiceServer) GetTektonTaskPipeline(context.Context, *GetTektonTaskPipelineRequest) (*GetTektonTaskPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTektonTaskPipeline not implemented")
}

// UnsafeTektonPipelineAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TektonPipelineAPIServiceServer will
// result in compilation errors.
type UnsafeTektonPipelineAPIServiceServer interface {
	mustEmbedUnimplementedTektonPipelineAPIServiceServer()
}

func RegisterTektonPipelineAPIServiceServer(s grpc.ServiceRegistrar, srv TektonPipelineAPIServiceServer) {
	s.RegisterService(&TektonPipelineAPIService_ServiceDesc, srv)
}

func _TektonPipelineAPIService_CreateTektonPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTektonPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).CreateTektonPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).CreateTektonPipeline(ctx, req.(*CreateTektonPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_DeleteTektonPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTektonPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).DeleteTektonPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).DeleteTektonPipeline(ctx, req.(*DeleteTektonPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_CreateTektonTaskPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTektonTaskPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).CreateTektonTaskPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonTaskPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).CreateTektonTaskPipeline(ctx, req.(*CreateTektonTaskPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_DeleteTektonTaskPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTektonTaskPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).DeleteTektonTaskPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonTaskPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).DeleteTektonTaskPipeline(ctx, req.(*DeleteTektonTaskPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_ListTektonTaskPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTektonTaskPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).ListTektonTaskPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListTektonTaskPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).ListTektonTaskPipeline(ctx, req.(*ListTektonTaskPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TektonPipelineAPIService_GetTektonTaskPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTektonTaskPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TektonPipelineAPIServiceServer).GetTektonTaskPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/GetTektonTaskPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TektonPipelineAPIServiceServer).GetTektonTaskPipeline(ctx, req.(*GetTektonTaskPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TektonPipelineAPIService_ServiceDesc is the grpc.ServiceDesc for TektonPipelineAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TektonPipelineAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pipelines.tekton.v1alpha1.TektonPipelineAPIService",
	HandlerType: (*TektonPipelineAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTektonPipeline",
			Handler:    _TektonPipelineAPIService_CreateTektonPipeline_Handler,
		},
		{
			MethodName: "DeleteTektonPipeline",
			Handler:    _TektonPipelineAPIService_DeleteTektonPipeline_Handler,
		},
		{
			MethodName: "CreateTektonTaskPipeline",
			Handler:    _TektonPipelineAPIService_CreateTektonTaskPipeline_Handler,
		},
		{
			MethodName: "DeleteTektonTaskPipeline",
			Handler:    _TektonPipelineAPIService_DeleteTektonTaskPipeline_Handler,
		},
		{
			MethodName: "ListTektonTaskPipeline",
			Handler:    _TektonPipelineAPIService_ListTektonTaskPipeline_Handler,
		},
		{
			MethodName: "GetTektonTaskPipeline",
			Handler:    _TektonPipelineAPIService_GetTektonTaskPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipelines/tekton/v1alpha1/tekton_api.proto",
}
