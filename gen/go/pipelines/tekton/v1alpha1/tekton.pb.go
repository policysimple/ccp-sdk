// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: pipelines/tekton/v1alpha1/tekton.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ValueString string   `protobuf:"bytes,2,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
	ValueArray  []string `protobuf:"bytes,3,rep,name=value_array,json=valueArray,proto3" json:"value_array,omitempty"`
	ValueType   string   `protobuf:"bytes,4,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Params) GetValueString() string {
	if x != nil {
		return x.ValueString
	}
	return ""
}

func (x *Params) GetValueArray() []string {
	if x != nil {
		return x.ValueArray
	}
	return nil
}

func (x *Params) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

type TaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamName       string   `protobuf:"bytes,1,opt,name=param_name,json=paramName,proto3" json:"param_name,omitempty"`
	ParamValueType  string   `protobuf:"bytes,2,opt,name=param_value_type,json=paramValueType,proto3" json:"param_value_type,omitempty"`
	ParamValue      string   `protobuf:"bytes,3,opt,name=param_value,json=paramValue,proto3" json:"param_value,omitempty"`
	ParamValueArray []string `protobuf:"bytes,4,rep,name=param_value_array,json=paramValueArray,proto3" json:"param_value_array,omitempty"`
	Description     string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Default         string   `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *TaskParams) Reset() {
	*x = TaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskParams) ProtoMessage() {}

func (x *TaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskParams.ProtoReflect.Descriptor instead.
func (*TaskParams) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{1}
}

func (x *TaskParams) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *TaskParams) GetParamValueType() string {
	if x != nil {
		return x.ParamValueType
	}
	return ""
}

func (x *TaskParams) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *TaskParams) GetParamValueArray() []string {
	if x != nil {
		return x.ParamValueArray
	}
	return nil
}

func (x *TaskParams) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskParams) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

type Workspaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Main string `protobuf:"bytes,2,opt,name=main,proto3" json:"main,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Workspaces) Reset() {
	*x = Workspaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspaces) ProtoMessage() {}

func (x *Workspaces) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspaces.ProtoReflect.Descriptor instead.
func (*Workspaces) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{2}
}

func (x *Workspaces) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspaces) GetMain() string {
	if x != nil {
		return x.Main
	}
	return ""
}

func (x *Workspaces) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskName     string        `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskRefName  string        `protobuf:"bytes,3,opt,name=task_ref_name,json=taskRefName,proto3" json:"task_ref_name,omitempty"`
	TaskKind     string        `protobuf:"bytes,4,opt,name=task_kind,json=taskKind,proto3" json:"task_kind,omitempty"`
	TaskRunAfter []string      `protobuf:"bytes,5,rep,name=task_run_after,json=taskRunAfter,proto3" json:"task_run_after,omitempty"`
	Workspaces   []*Workspaces `protobuf:"bytes,6,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	TaskParams   []*TaskParams `protobuf:"bytes,7,rep,name=task_params,json=taskParams,proto3" json:"task_params,omitempty"`
	Description  string        `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	BeforeDeploy bool          `protobuf:"varint,9,opt,name=before_deploy,json=beforeDeploy,proto3" json:"before_deploy,omitempty"`
	AfterDeploy  bool          `protobuf:"varint,10,opt,name=after_deploy,json=afterDeploy,proto3" json:"after_deploy,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Task) GetTaskRefName() string {
	if x != nil {
		return x.TaskRefName
	}
	return ""
}

func (x *Task) GetTaskKind() string {
	if x != nil {
		return x.TaskKind
	}
	return ""
}

func (x *Task) GetTaskRunAfter() []string {
	if x != nil {
		return x.TaskRunAfter
	}
	return nil
}

func (x *Task) GetWorkspaces() []*Workspaces {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *Task) GetTaskParams() []*TaskParams {
	if x != nil {
		return x.TaskParams
	}
	return nil
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetBeforeDeploy() bool {
	if x != nil {
		return x.BeforeDeploy
	}
	return false
}

func (x *Task) GetAfterDeploy() bool {
	if x != nil {
		return x.AfterDeploy
	}
	return false
}

// Pipeline ...
type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TrafficType          int32             `protobuf:"varint,3,opt,name=traffic_type,json=trafficType,proto3" json:"traffic_type,omitempty"`
	OrganizationId       string            `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId            string            `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	NameProject          string            `protobuf:"bytes,6,opt,name=name_project,json=nameProject,proto3" json:"name_project,omitempty"`
	EnvironmentId        string            `protobuf:"bytes,7,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	ApplicationId        string            `protobuf:"bytes,8,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	RuntimeId            string            `protobuf:"bytes,9,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	Params               []*Params         `protobuf:"bytes,10,rep,name=params,proto3" json:"params,omitempty"`
	Tasks                []*Task           `protobuf:"bytes,11,rep,name=tasks,proto3" json:"tasks,omitempty"`
	StatusType           string            `protobuf:"bytes,12,opt,name=status_type,json=statusType,proto3" json:"status_type,omitempty"`
	Integration          map[string]string `protobuf:"bytes,13,rep,name=integration,proto3" json:"integration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnvironmentVariables map[string]string `protobuf:"bytes,14,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Commands             map[string]string `protobuf:"bytes,15,rep,name=commands,proto3" json:"commands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Secrets              map[string]string `protobuf:"bytes,16,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraArgs            map[string]string `protobuf:"bytes,17,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InstanceType         map[string]string `protobuf:"bytes,18,rep,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDefault            bool              `protobuf:"varint,19,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Active               bool              `protobuf:"varint,20,opt,name=active,proto3" json:"active,omitempty"`
	CustomPipeline       bool              `protobuf:"varint,21,opt,name=custom_pipeline,json=customPipeline,proto3" json:"custom_pipeline,omitempty"`
	BeforeDeployTasks    []*Task           `protobuf:"bytes,22,rep,name=before_deploy_tasks,json=beforeDeployTasks,proto3" json:"before_deploy_tasks,omitempty"`
	AfterDeployTasks     []*Task           `protobuf:"bytes,23,rep,name=after_deploy_tasks,json=afterDeployTasks,proto3" json:"after_deploy_tasks,omitempty"`
	IsNotExistDockerfile bool              `protobuf:"varint,24,opt,name=is_not_exist_dockerfile,json=isNotExistDockerfile,proto3" json:"is_not_exist_dockerfile,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{4}
}

func (x *Pipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetTrafficType() int32 {
	if x != nil {
		return x.TrafficType
	}
	return 0
}

func (x *Pipeline) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Pipeline) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Pipeline) GetNameProject() string {
	if x != nil {
		return x.NameProject
	}
	return ""
}

func (x *Pipeline) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Pipeline) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Pipeline) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *Pipeline) GetParams() []*Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Pipeline) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Pipeline) GetStatusType() string {
	if x != nil {
		return x.StatusType
	}
	return ""
}

func (x *Pipeline) GetIntegration() map[string]string {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *Pipeline) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *Pipeline) GetCommands() map[string]string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Pipeline) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Pipeline) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *Pipeline) GetInstanceType() map[string]string {
	if x != nil {
		return x.InstanceType
	}
	return nil
}

func (x *Pipeline) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Pipeline) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Pipeline) GetCustomPipeline() bool {
	if x != nil {
		return x.CustomPipeline
	}
	return false
}

func (x *Pipeline) GetBeforeDeployTasks() []*Task {
	if x != nil {
		return x.BeforeDeployTasks
	}
	return nil
}

func (x *Pipeline) GetAfterDeployTasks() []*Task {
	if x != nil {
		return x.AfterDeployTasks
	}
	return nil
}

func (x *Pipeline) GetIsNotExistDockerfile() bool {
	if x != nil {
		return x.IsNotExistDockerfile
	}
	return false
}

type TektonTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task  []*Task `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty"`
	Order int32   `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *TektonTask) Reset() {
	*x = TektonTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TektonTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TektonTask) ProtoMessage() {}

func (x *TektonTask) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TektonTask.ProtoReflect.Descriptor instead.
func (*TektonTask) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{5}
}

func (x *TektonTask) GetTask() []*Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TektonTask) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type TektonTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*TaskToCustomize `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TektonTaskList) Reset() {
	*x = TektonTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TektonTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TektonTaskList) ProtoMessage() {}

func (x *TektonTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TektonTaskList.ProtoReflect.Descriptor instead.
func (*TektonTaskList) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{6}
}

func (x *TektonTaskList) GetItems() []*TaskToCustomize {
	if x != nil {
		return x.Items
	}
	return nil
}

type TaskToCustomize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName     string                   `protobuf:"bytes,1,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskRefName  string                   `protobuf:"bytes,2,opt,name=task_ref_name,json=taskRefName,proto3" json:"task_ref_name,omitempty"`
	TaskKind     string                   `protobuf:"bytes,3,opt,name=task_kind,json=taskKind,proto3" json:"task_kind,omitempty"`
	TaskRunAfter []string                 `protobuf:"bytes,4,rep,name=task_run_after,json=taskRunAfter,proto3" json:"task_run_after,omitempty"`
	Workspaces   []*Workspaces            `protobuf:"bytes,5,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	TaskParams   []*TaskParamsToCustomize `protobuf:"bytes,6,rep,name=task_params,json=taskParams,proto3" json:"task_params,omitempty"`
	Description  string                   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	BeforeDeploy bool                     `protobuf:"varint,8,opt,name=before_deploy,json=beforeDeploy,proto3" json:"before_deploy,omitempty"`
	AfterDeploy  bool                     `protobuf:"varint,9,opt,name=after_deploy,json=afterDeploy,proto3" json:"after_deploy,omitempty"`
}

func (x *TaskToCustomize) Reset() {
	*x = TaskToCustomize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskToCustomize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskToCustomize) ProtoMessage() {}

func (x *TaskToCustomize) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskToCustomize.ProtoReflect.Descriptor instead.
func (*TaskToCustomize) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{7}
}

func (x *TaskToCustomize) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskToCustomize) GetTaskRefName() string {
	if x != nil {
		return x.TaskRefName
	}
	return ""
}

func (x *TaskToCustomize) GetTaskKind() string {
	if x != nil {
		return x.TaskKind
	}
	return ""
}

func (x *TaskToCustomize) GetTaskRunAfter() []string {
	if x != nil {
		return x.TaskRunAfter
	}
	return nil
}

func (x *TaskToCustomize) GetWorkspaces() []*Workspaces {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *TaskToCustomize) GetTaskParams() []*TaskParamsToCustomize {
	if x != nil {
		return x.TaskParams
	}
	return nil
}

func (x *TaskToCustomize) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskToCustomize) GetBeforeDeploy() bool {
	if x != nil {
		return x.BeforeDeploy
	}
	return false
}

func (x *TaskToCustomize) GetAfterDeploy() bool {
	if x != nil {
		return x.AfterDeploy
	}
	return false
}

type TaskParamsToCustomize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamName   string `protobuf:"bytes,1,opt,name=param_name,json=paramName,proto3" json:"param_name,omitempty"`
	Label       string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Validation  string `protobuf:"bytes,3,opt,name=validation,proto3" json:"validation,omitempty"`
	TypeValue   string `protobuf:"bytes,4,opt,name=type_value,json=typeValue,proto3" json:"type_value,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Default     string `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *TaskParamsToCustomize) Reset() {
	*x = TaskParamsToCustomize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskParamsToCustomize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskParamsToCustomize) ProtoMessage() {}

func (x *TaskParamsToCustomize) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskParamsToCustomize.ProtoReflect.Descriptor instead.
func (*TaskParamsToCustomize) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{8}
}

func (x *TaskParamsToCustomize) GetParamName() string {
	if x != nil {
		return x.ParamName
	}
	return ""
}

func (x *TaskParamsToCustomize) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TaskParamsToCustomize) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *TaskParamsToCustomize) GetTypeValue() string {
	if x != nil {
		return x.TypeValue
	}
	return ""
}

func (x *TaskParamsToCustomize) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskParamsToCustomize) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

type PipelineRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label             string     `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Namespace         string     `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Message           string     `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Reason            string     `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	StartedAt         string     `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt        string     `protobuf:"bytes,7,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	Duration          string     `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	PipelineRunStatus string     `protobuf:"bytes,9,opt,name=pipeline_run_status,json=pipelineRunStatus,proto3" json:"pipeline_run_status,omitempty"`
	TaskRun           []*TaskRun `protobuf:"bytes,10,rep,name=task_run,json=taskRun,proto3" json:"task_run,omitempty"`
}

func (x *PipelineRun) Reset() {
	*x = PipelineRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRun) ProtoMessage() {}

func (x *PipelineRun) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRun.ProtoReflect.Descriptor instead.
func (*PipelineRun) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{9}
}

func (x *PipelineRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRun) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PipelineRun) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PipelineRun) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PipelineRun) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PipelineRun) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *PipelineRun) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *PipelineRun) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *PipelineRun) GetPipelineRunStatus() string {
	if x != nil {
		return x.PipelineRunStatus
	}
	return ""
}

func (x *PipelineRun) GetTaskRun() []*TaskRun {
	if x != nil {
		return x.TaskRun
	}
	return nil
}

type PipelineRunList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PipelineRun `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PipelineRunList) Reset() {
	*x = PipelineRunList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunList) ProtoMessage() {}

func (x *PipelineRunList) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunList.ProtoReflect.Descriptor instead.
func (*PipelineRunList) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{10}
}

func (x *PipelineRunList) GetItems() []*PipelineRun {
	if x != nil {
		return x.Items
	}
	return nil
}

type TaskRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message       string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Reason        string         `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	StartedAt     string         `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt    string         `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	Duration      string         `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	TaskRunStatus string         `protobuf:"bytes,7,opt,name=task_run_status,json=taskRunStatus,proto3" json:"task_run_status,omitempty"`
	TaskRun       []*TaskRunStep `protobuf:"bytes,8,rep,name=task_run,json=taskRun,proto3" json:"task_run,omitempty"`
}

func (x *TaskRun) Reset() {
	*x = TaskRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun) ProtoMessage() {}

func (x *TaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun.ProtoReflect.Descriptor instead.
func (*TaskRun) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{11}
}

func (x *TaskRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRun) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskRun) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TaskRun) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *TaskRun) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *TaskRun) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *TaskRun) GetTaskRunStatus() string {
	if x != nil {
		return x.TaskRunStatus
	}
	return ""
}

func (x *TaskRun) GetTaskRun() []*TaskRunStep {
	if x != nil {
		return x.TaskRun
	}
	return nil
}

type TaskRunStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message           string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Reason            string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	StartedAt         string `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt        string `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	Duration          string `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	TaskRunStepStatus string `protobuf:"bytes,7,opt,name=task_run_step_status,json=taskRunStepStatus,proto3" json:"task_run_step_status,omitempty"`
}

func (x *TaskRunStep) Reset() {
	*x = TaskRunStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRunStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunStep) ProtoMessage() {}

func (x *TaskRunStep) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunStep.ProtoReflect.Descriptor instead.
func (*TaskRunStep) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP(), []int{12}
}

func (x *TaskRunStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRunStep) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskRunStep) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TaskRunStep) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *TaskRunStep) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *TaskRunStep) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *TaskRunStep) GetTaskRunStepStatus() string {
	if x != nil {
		return x.TaskRunStepStatus
	}
	return ""
}

var File_pipelines_tekton_v1alpha1_tekton_proto protoreflect.FileDescriptor

var file_pipelines_tekton_v1alpha1_tekton_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x22, 0x7f, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x48, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x93, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0x8a, 0x0d, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x15,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x4d, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x4a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5a,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x11, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c,
	0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x57, 0x0a, 0x0a, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x0e, 0x54,
	0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x99, 0x03, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0xc7, 0x01, 0x0a, 0x15,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x22, 0x4f, 0x0a, 0x0f, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xae, 0x01, 0x0a, 0x23, 0x69, 0x6f, 0x2e, 0x63,
	0x75, 0x65, 0x6d, 0x62, 0x79, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0b, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x75, 0x65, 0x6d, 0x62,
	0x79, 0x2f, 0x63, 0x63, 0x70, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6b, 0x74, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x50, 0x58,
	0xaa, 0x02, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x19, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5c, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x5c,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pipelines_tekton_v1alpha1_tekton_proto_rawDescOnce sync.Once
	file_pipelines_tekton_v1alpha1_tekton_proto_rawDescData = file_pipelines_tekton_v1alpha1_tekton_proto_rawDesc
)

func file_pipelines_tekton_v1alpha1_tekton_proto_rawDescGZIP() []byte {
	file_pipelines_tekton_v1alpha1_tekton_proto_rawDescOnce.Do(func() {
		file_pipelines_tekton_v1alpha1_tekton_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipelines_tekton_v1alpha1_tekton_proto_rawDescData)
	})
	return file_pipelines_tekton_v1alpha1_tekton_proto_rawDescData
}

var file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_pipelines_tekton_v1alpha1_tekton_proto_goTypes = []interface{}{
	(*Params)(nil),                // 0: pipelines.tekton.v1alpha1.Params
	(*TaskParams)(nil),            // 1: pipelines.tekton.v1alpha1.TaskParams
	(*Workspaces)(nil),            // 2: pipelines.tekton.v1alpha1.Workspaces
	(*Task)(nil),                  // 3: pipelines.tekton.v1alpha1.Task
	(*Pipeline)(nil),              // 4: pipelines.tekton.v1alpha1.Pipeline
	(*TektonTask)(nil),            // 5: pipelines.tekton.v1alpha1.TektonTask
	(*TektonTaskList)(nil),        // 6: pipelines.tekton.v1alpha1.TektonTaskList
	(*TaskToCustomize)(nil),       // 7: pipelines.tekton.v1alpha1.TaskToCustomize
	(*TaskParamsToCustomize)(nil), // 8: pipelines.tekton.v1alpha1.TaskParamsToCustomize
	(*PipelineRun)(nil),           // 9: pipelines.tekton.v1alpha1.PipelineRun
	(*PipelineRunList)(nil),       // 10: pipelines.tekton.v1alpha1.PipelineRunList
	(*TaskRun)(nil),               // 11: pipelines.tekton.v1alpha1.TaskRun
	(*TaskRunStep)(nil),           // 12: pipelines.tekton.v1alpha1.TaskRunStep
	nil,                           // 13: pipelines.tekton.v1alpha1.Pipeline.IntegrationEntry
	nil,                           // 14: pipelines.tekton.v1alpha1.Pipeline.EnvironmentVariablesEntry
	nil,                           // 15: pipelines.tekton.v1alpha1.Pipeline.CommandsEntry
	nil,                           // 16: pipelines.tekton.v1alpha1.Pipeline.SecretsEntry
	nil,                           // 17: pipelines.tekton.v1alpha1.Pipeline.ExtraArgsEntry
	nil,                           // 18: pipelines.tekton.v1alpha1.Pipeline.InstanceTypeEntry
}
var file_pipelines_tekton_v1alpha1_tekton_proto_depIdxs = []int32{
	2,  // 0: pipelines.tekton.v1alpha1.Task.workspaces:type_name -> pipelines.tekton.v1alpha1.Workspaces
	1,  // 1: pipelines.tekton.v1alpha1.Task.task_params:type_name -> pipelines.tekton.v1alpha1.TaskParams
	0,  // 2: pipelines.tekton.v1alpha1.Pipeline.params:type_name -> pipelines.tekton.v1alpha1.Params
	3,  // 3: pipelines.tekton.v1alpha1.Pipeline.tasks:type_name -> pipelines.tekton.v1alpha1.Task
	13, // 4: pipelines.tekton.v1alpha1.Pipeline.integration:type_name -> pipelines.tekton.v1alpha1.Pipeline.IntegrationEntry
	14, // 5: pipelines.tekton.v1alpha1.Pipeline.environment_variables:type_name -> pipelines.tekton.v1alpha1.Pipeline.EnvironmentVariablesEntry
	15, // 6: pipelines.tekton.v1alpha1.Pipeline.commands:type_name -> pipelines.tekton.v1alpha1.Pipeline.CommandsEntry
	16, // 7: pipelines.tekton.v1alpha1.Pipeline.secrets:type_name -> pipelines.tekton.v1alpha1.Pipeline.SecretsEntry
	17, // 8: pipelines.tekton.v1alpha1.Pipeline.extra_args:type_name -> pipelines.tekton.v1alpha1.Pipeline.ExtraArgsEntry
	18, // 9: pipelines.tekton.v1alpha1.Pipeline.instance_type:type_name -> pipelines.tekton.v1alpha1.Pipeline.InstanceTypeEntry
	3,  // 10: pipelines.tekton.v1alpha1.Pipeline.before_deploy_tasks:type_name -> pipelines.tekton.v1alpha1.Task
	3,  // 11: pipelines.tekton.v1alpha1.Pipeline.after_deploy_tasks:type_name -> pipelines.tekton.v1alpha1.Task
	3,  // 12: pipelines.tekton.v1alpha1.TektonTask.task:type_name -> pipelines.tekton.v1alpha1.Task
	7,  // 13: pipelines.tekton.v1alpha1.TektonTaskList.items:type_name -> pipelines.tekton.v1alpha1.TaskToCustomize
	2,  // 14: pipelines.tekton.v1alpha1.TaskToCustomize.workspaces:type_name -> pipelines.tekton.v1alpha1.Workspaces
	8,  // 15: pipelines.tekton.v1alpha1.TaskToCustomize.task_params:type_name -> pipelines.tekton.v1alpha1.TaskParamsToCustomize
	11, // 16: pipelines.tekton.v1alpha1.PipelineRun.task_run:type_name -> pipelines.tekton.v1alpha1.TaskRun
	9,  // 17: pipelines.tekton.v1alpha1.PipelineRunList.items:type_name -> pipelines.tekton.v1alpha1.PipelineRun
	12, // 18: pipelines.tekton.v1alpha1.TaskRun.task_run:type_name -> pipelines.tekton.v1alpha1.TaskRunStep
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_pipelines_tekton_v1alpha1_tekton_proto_init() }
func file_pipelines_tekton_v1alpha1_tekton_proto_init() {
	if File_pipelines_tekton_v1alpha1_tekton_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TektonTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TektonTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskToCustomize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskParamsToCustomize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRunStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipelines_tekton_v1alpha1_tekton_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pipelines_tekton_v1alpha1_tekton_proto_goTypes,
		DependencyIndexes: file_pipelines_tekton_v1alpha1_tekton_proto_depIdxs,
		MessageInfos:      file_pipelines_tekton_v1alpha1_tekton_proto_msgTypes,
	}.Build()
	File_pipelines_tekton_v1alpha1_tekton_proto = out.File
	file_pipelines_tekton_v1alpha1_tekton_proto_rawDesc = nil
	file_pipelines_tekton_v1alpha1_tekton_proto_goTypes = nil
	file_pipelines_tekton_v1alpha1_tekton_proto_depIdxs = nil
}
