// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: pipelines/tekton/v1alpha1/tekton_api.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTektonPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TektonPipeline *Pipeline `protobuf:"bytes,1,opt,name=tekton_pipeline,json=tektonPipeline,proto3" json:"tekton_pipeline,omitempty"`
	UserId         string    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateTektonPipelineRequest) Reset() {
	*x = CreateTektonPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTektonPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTektonPipelineRequest) ProtoMessage() {}

func (x *CreateTektonPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTektonPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreateTektonPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTektonPipelineRequest) GetTektonPipeline() *Pipeline {
	if x != nil {
		return x.TektonPipeline
	}
	return nil
}

func (x *CreateTektonPipelineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreateTektonPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TektonPipeline *Pipeline `protobuf:"bytes,1,opt,name=tekton_pipeline,json=tektonPipeline,proto3" json:"tekton_pipeline,omitempty"`
	Status         string    `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateTektonPipelineResponse) Reset() {
	*x = CreateTektonPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTektonPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTektonPipelineResponse) ProtoMessage() {}

func (x *CreateTektonPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTektonPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreateTektonPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTektonPipelineResponse) GetTektonPipeline() *Pipeline {
	if x != nil {
		return x.TektonPipeline
	}
	return nil
}

func (x *CreateTektonPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeleteTektonPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeName   string `protobuf:"bytes,1,opt,name=runtime_name,json=runtimeName,proto3" json:"runtime_name,omitempty"`
	ApplicationId string `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	EnvironmentId string `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *DeleteTektonPipelineRequest) Reset() {
	*x = DeleteTektonPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTektonPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTektonPipelineRequest) ProtoMessage() {}

func (x *DeleteTektonPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTektonPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeleteTektonPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteTektonPipelineRequest) GetRuntimeName() string {
	if x != nil {
		return x.RuntimeName
	}
	return ""
}

func (x *DeleteTektonPipelineRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *DeleteTektonPipelineRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type DeleteTektonPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteTektonPipelineResponse) Reset() {
	*x = DeleteTektonPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTektonPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTektonPipelineResponse) ProtoMessage() {}

func (x *DeleteTektonPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTektonPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeleteTektonPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteTektonPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateTektonTaskPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TektonTask *Task `protobuf:"bytes,1,opt,name=tekton_task,json=tektonTask,proto3" json:"tekton_task,omitempty"`
	Order      int32 `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *CreateTektonTaskPipelineRequest) Reset() {
	*x = CreateTektonTaskPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTektonTaskPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTektonTaskPipelineRequest) ProtoMessage() {}

func (x *CreateTektonTaskPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTektonTaskPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreateTektonTaskPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTektonTaskPipelineRequest) GetTektonTask() *Task {
	if x != nil {
		return x.TektonTask
	}
	return nil
}

func (x *CreateTektonTaskPipelineRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type CreateTektonTaskPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TektonTask *Task `protobuf:"bytes,1,opt,name=tekton_task,json=tektonTask,proto3" json:"tekton_task,omitempty"`
}

func (x *CreateTektonTaskPipelineResponse) Reset() {
	*x = CreateTektonTaskPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTektonTaskPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTektonTaskPipelineResponse) ProtoMessage() {}

func (x *CreateTektonTaskPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTektonTaskPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreateTektonTaskPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTektonTaskPipelineResponse) GetTektonTask() *Task {
	if x != nil {
		return x.TektonTask
	}
	return nil
}

type DeleteTektonTaskPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *DeleteTektonTaskPipelineRequest) Reset() {
	*x = DeleteTektonTaskPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTektonTaskPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTektonTaskPipelineRequest) ProtoMessage() {}

func (x *DeleteTektonTaskPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTektonTaskPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeleteTektonTaskPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTektonTaskPipelineRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DeleteTektonTaskPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteTektonTaskPipelineResponse) Reset() {
	*x = DeleteTektonTaskPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTektonTaskPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTektonTaskPipelineResponse) ProtoMessage() {}

func (x *DeleteTektonTaskPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTektonTaskPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeleteTektonTaskPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTektonTaskPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListTektonTaskPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTektonTaskPipelineRequest) Reset() {
	*x = ListTektonTaskPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTektonTaskPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTektonTaskPipelineRequest) ProtoMessage() {}

func (x *ListTektonTaskPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTektonTaskPipelineRequest.ProtoReflect.Descriptor instead.
func (*ListTektonTaskPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{8}
}

type ListTektonTaskPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList *CustomPipelineList `protobuf:"bytes,1,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Status   string              `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListTektonTaskPipelineResponse) Reset() {
	*x = ListTektonTaskPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTektonTaskPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTektonTaskPipelineResponse) ProtoMessage() {}

func (x *ListTektonTaskPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTektonTaskPipelineResponse.ProtoReflect.Descriptor instead.
func (*ListTektonTaskPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{9}
}

func (x *ListTektonTaskPipelineResponse) GetTaskList() *CustomPipelineList {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *ListTektonTaskPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetTektonTaskPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetTektonTaskPipelineRequest) Reset() {
	*x = GetTektonTaskPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTektonTaskPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTektonTaskPipelineRequest) ProtoMessage() {}

func (x *GetTektonTaskPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTektonTaskPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetTektonTaskPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetTektonTaskPipelineRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTektonTaskPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task   *CustomPipeline `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Status string          `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetTektonTaskPipelineResponse) Reset() {
	*x = GetTektonTaskPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTektonTaskPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTektonTaskPipelineResponse) ProtoMessage() {}

func (x *GetTektonTaskPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTektonTaskPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetTektonTaskPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetTektonTaskPipelineResponse) GetTask() *CustomPipeline {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *GetTektonTaskPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateCustomPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomPipeline *CustomPipeline `protobuf:"bytes,1,opt,name=custom_pipeline,json=customPipeline,proto3" json:"custom_pipeline,omitempty"`
}

func (x *CreateCustomPipelineRequest) Reset() {
	*x = CreateCustomPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomPipelineRequest) ProtoMessage() {}

func (x *CreateCustomPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCustomPipelineRequest) GetCustomPipeline() *CustomPipeline {
	if x != nil {
		return x.CustomPipeline
	}
	return nil
}

type CreateCustomPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomPipelineResponse *CustomPipelineResponse `protobuf:"bytes,1,opt,name=custom_pipeline_response,json=customPipelineResponse,proto3" json:"custom_pipeline_response,omitempty"`
}

func (x *CreateCustomPipelineResponse) Reset() {
	*x = CreateCustomPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomPipelineResponse) ProtoMessage() {}

func (x *CreateCustomPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{13}
}

func (x *CreateCustomPipelineResponse) GetCustomPipelineResponse() *CustomPipelineResponse {
	if x != nil {
		return x.CustomPipelineResponse
	}
	return nil
}

type DeleteCustomPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomPipelineId string `protobuf:"bytes,1,opt,name=custom_pipeline_id,json=customPipelineId,proto3" json:"custom_pipeline_id,omitempty"`
}

func (x *DeleteCustomPipelineRequest) Reset() {
	*x = DeleteCustomPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomPipelineRequest) ProtoMessage() {}

func (x *DeleteCustomPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCustomPipelineRequest) GetCustomPipelineId() string {
	if x != nil {
		return x.CustomPipelineId
	}
	return ""
}

type DeleteCustomPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteCustomPipelineResponse) Reset() {
	*x = DeleteCustomPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomPipelineResponse) ProtoMessage() {}

func (x *DeleteCustomPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeleteCustomPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCustomPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListCustomPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCustomPipelineRequest) Reset() {
	*x = ListCustomPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCustomPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomPipelineRequest) ProtoMessage() {}

func (x *ListCustomPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomPipelineRequest.ProtoReflect.Descriptor instead.
func (*ListCustomPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{16}
}

type ListCustomPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomPipeline *CustomPipeline `protobuf:"bytes,1,opt,name=custom_pipeline,json=customPipeline,proto3" json:"custom_pipeline,omitempty"`
	Status         string          `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListCustomPipelineResponse) Reset() {
	*x = ListCustomPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCustomPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCustomPipelineResponse) ProtoMessage() {}

func (x *ListCustomPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCustomPipelineResponse.ProtoReflect.Descriptor instead.
func (*ListCustomPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListCustomPipelineResponse) GetCustomPipeline() *CustomPipeline {
	if x != nil {
		return x.CustomPipeline
	}
	return nil
}

func (x *ListCustomPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetCustomPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetCustomPipelineRequest) Reset() {
	*x = GetCustomPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomPipelineRequest) ProtoMessage() {}

func (x *GetCustomPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetCustomPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetCustomPipelineRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCustomPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task   *Task  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetCustomPipelineResponse) Reset() {
	*x = GetCustomPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomPipelineResponse) ProtoMessage() {}

func (x *GetCustomPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetCustomPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetCustomPipelineResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *GetCustomPipelineResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_pipelines_tekton_v1alpha1_tekton_api_proto protoreflect.FileDescriptor

var file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x26, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2f, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x84, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x0f, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x74,
	0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x65, 0x6b, 0x74, 0x6f,
	0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8e, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x36,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x64, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x3a, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x84, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x76, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x18,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x8f, 0x0b, 0x0a, 0x18, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x3a, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3a, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x36, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x33, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb1, 0x01, 0x0a, 0x23, 0x69, 0x6f, 0x2e, 0x63,
	0x75, 0x65, 0x6d, 0x62, 0x79, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0e, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x75,
	0x65, 0x6d, 0x62, 0x79, 0x2f, 0x63, 0x63, 0x70, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x74, 0x65,
	0x6b, 0x74, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x50, 0x50, 0x58, 0xaa, 0x02, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca,
	0x02, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5c, 0x54, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescOnce sync.Once
	file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescData = file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDesc
)

func file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescGZIP() []byte {
	file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescOnce.Do(func() {
		file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescData)
	})
	return file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDescData
}

var file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_pipelines_tekton_v1alpha1_tekton_api_proto_goTypes = []interface{}{
	(*CreateTektonPipelineRequest)(nil),      // 0: pipelines.tekton.v1alpha1.CreateTektonPipelineRequest
	(*CreateTektonPipelineResponse)(nil),     // 1: pipelines.tekton.v1alpha1.CreateTektonPipelineResponse
	(*DeleteTektonPipelineRequest)(nil),      // 2: pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest
	(*DeleteTektonPipelineResponse)(nil),     // 3: pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse
	(*CreateTektonTaskPipelineRequest)(nil),  // 4: pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest
	(*CreateTektonTaskPipelineResponse)(nil), // 5: pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse
	(*DeleteTektonTaskPipelineRequest)(nil),  // 6: pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest
	(*DeleteTektonTaskPipelineResponse)(nil), // 7: pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse
	(*ListTektonTaskPipelineRequest)(nil),    // 8: pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest
	(*ListTektonTaskPipelineResponse)(nil),   // 9: pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse
	(*GetTektonTaskPipelineRequest)(nil),     // 10: pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest
	(*GetTektonTaskPipelineResponse)(nil),    // 11: pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse
	(*CreateCustomPipelineRequest)(nil),      // 12: pipelines.tekton.v1alpha1.CreateCustomPipelineRequest
	(*CreateCustomPipelineResponse)(nil),     // 13: pipelines.tekton.v1alpha1.CreateCustomPipelineResponse
	(*DeleteCustomPipelineRequest)(nil),      // 14: pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest
	(*DeleteCustomPipelineResponse)(nil),     // 15: pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse
	(*ListCustomPipelineRequest)(nil),        // 16: pipelines.tekton.v1alpha1.ListCustomPipelineRequest
	(*ListCustomPipelineResponse)(nil),       // 17: pipelines.tekton.v1alpha1.ListCustomPipelineResponse
	(*GetCustomPipelineRequest)(nil),         // 18: pipelines.tekton.v1alpha1.GetCustomPipelineRequest
	(*GetCustomPipelineResponse)(nil),        // 19: pipelines.tekton.v1alpha1.GetCustomPipelineResponse
	(*Pipeline)(nil),                         // 20: pipelines.tekton.v1alpha1.Pipeline
	(*Task)(nil),                             // 21: pipelines.tekton.v1alpha1.Task
	(*CustomPipelineList)(nil),               // 22: pipelines.tekton.v1alpha1.CustomPipelineList
	(*CustomPipeline)(nil),                   // 23: pipelines.tekton.v1alpha1.CustomPipeline
	(*CustomPipelineResponse)(nil),           // 24: pipelines.tekton.v1alpha1.CustomPipelineResponse
}
var file_pipelines_tekton_v1alpha1_tekton_api_proto_depIdxs = []int32{
	20, // 0: pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.tekton_pipeline:type_name -> pipelines.tekton.v1alpha1.Pipeline
	20, // 1: pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.tekton_pipeline:type_name -> pipelines.tekton.v1alpha1.Pipeline
	21, // 2: pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest.tekton_task:type_name -> pipelines.tekton.v1alpha1.Task
	21, // 3: pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse.tekton_task:type_name -> pipelines.tekton.v1alpha1.Task
	22, // 4: pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse.task_list:type_name -> pipelines.tekton.v1alpha1.CustomPipelineList
	23, // 5: pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse.task:type_name -> pipelines.tekton.v1alpha1.CustomPipeline
	23, // 6: pipelines.tekton.v1alpha1.CreateCustomPipelineRequest.custom_pipeline:type_name -> pipelines.tekton.v1alpha1.CustomPipeline
	24, // 7: pipelines.tekton.v1alpha1.CreateCustomPipelineResponse.custom_pipeline_response:type_name -> pipelines.tekton.v1alpha1.CustomPipelineResponse
	23, // 8: pipelines.tekton.v1alpha1.ListCustomPipelineResponse.custom_pipeline:type_name -> pipelines.tekton.v1alpha1.CustomPipeline
	21, // 9: pipelines.tekton.v1alpha1.GetCustomPipelineResponse.task:type_name -> pipelines.tekton.v1alpha1.Task
	0,  // 10: pipelines.tekton.v1alpha1.TektonPipelineAPIService.CreateTektonPipeline:input_type -> pipelines.tekton.v1alpha1.CreateTektonPipelineRequest
	2,  // 11: pipelines.tekton.v1alpha1.TektonPipelineAPIService.DeleteTektonPipeline:input_type -> pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest
	4,  // 12: pipelines.tekton.v1alpha1.TektonPipelineAPIService.CreateTektonTaskPipeline:input_type -> pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest
	6,  // 13: pipelines.tekton.v1alpha1.TektonPipelineAPIService.DeleteTektonTaskPipeline:input_type -> pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest
	8,  // 14: pipelines.tekton.v1alpha1.TektonPipelineAPIService.ListTektonTaskPipeline:input_type -> pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest
	10, // 15: pipelines.tekton.v1alpha1.TektonPipelineAPIService.GetTektonTaskPipeline:input_type -> pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest
	12, // 16: pipelines.tekton.v1alpha1.TektonPipelineAPIService.CreateCustomPipeline:input_type -> pipelines.tekton.v1alpha1.CreateCustomPipelineRequest
	14, // 17: pipelines.tekton.v1alpha1.TektonPipelineAPIService.DeleteCustomPipeline:input_type -> pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest
	16, // 18: pipelines.tekton.v1alpha1.TektonPipelineAPIService.ListCustomPipeline:input_type -> pipelines.tekton.v1alpha1.ListCustomPipelineRequest
	18, // 19: pipelines.tekton.v1alpha1.TektonPipelineAPIService.GetCustomPipeline:input_type -> pipelines.tekton.v1alpha1.GetCustomPipelineRequest
	1,  // 20: pipelines.tekton.v1alpha1.TektonPipelineAPIService.CreateTektonPipeline:output_type -> pipelines.tekton.v1alpha1.CreateTektonPipelineResponse
	3,  // 21: pipelines.tekton.v1alpha1.TektonPipelineAPIService.DeleteTektonPipeline:output_type -> pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse
	5,  // 22: pipelines.tekton.v1alpha1.TektonPipelineAPIService.CreateTektonTaskPipeline:output_type -> pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse
	7,  // 23: pipelines.tekton.v1alpha1.TektonPipelineAPIService.DeleteTektonTaskPipeline:output_type -> pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse
	9,  // 24: pipelines.tekton.v1alpha1.TektonPipelineAPIService.ListTektonTaskPipeline:output_type -> pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse
	11, // 25: pipelines.tekton.v1alpha1.TektonPipelineAPIService.GetTektonTaskPipeline:output_type -> pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse
	13, // 26: pipelines.tekton.v1alpha1.TektonPipelineAPIService.CreateCustomPipeline:output_type -> pipelines.tekton.v1alpha1.CreateCustomPipelineResponse
	15, // 27: pipelines.tekton.v1alpha1.TektonPipelineAPIService.DeleteCustomPipeline:output_type -> pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse
	17, // 28: pipelines.tekton.v1alpha1.TektonPipelineAPIService.ListCustomPipeline:output_type -> pipelines.tekton.v1alpha1.ListCustomPipelineResponse
	19, // 29: pipelines.tekton.v1alpha1.TektonPipelineAPIService.GetCustomPipeline:output_type -> pipelines.tekton.v1alpha1.GetCustomPipelineResponse
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pipelines_tekton_v1alpha1_tekton_api_proto_init() }
func file_pipelines_tekton_v1alpha1_tekton_api_proto_init() {
	if File_pipelines_tekton_v1alpha1_tekton_api_proto != nil {
		return
	}
	file_pipelines_tekton_v1alpha1_tekton_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTektonPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTektonPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTektonPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTektonPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTektonTaskPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTektonTaskPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTektonTaskPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTektonTaskPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTektonTaskPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTektonTaskPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTektonTaskPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTektonTaskPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCustomPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCustomPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pipelines_tekton_v1alpha1_tekton_api_proto_goTypes,
		DependencyIndexes: file_pipelines_tekton_v1alpha1_tekton_api_proto_depIdxs,
		MessageInfos:      file_pipelines_tekton_v1alpha1_tekton_api_proto_msgTypes,
	}.Build()
	File_pipelines_tekton_v1alpha1_tekton_api_proto = out.File
	file_pipelines_tekton_v1alpha1_tekton_api_proto_rawDesc = nil
	file_pipelines_tekton_v1alpha1_tekton_api_proto_goTypes = nil
	file_pipelines_tekton_v1alpha1_tekton_api_proto_depIdxs = nil
}
