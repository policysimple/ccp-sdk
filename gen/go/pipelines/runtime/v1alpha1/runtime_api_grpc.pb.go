// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package runtimev1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuntimeAPIServiceClient is the client API for RuntimeAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeAPIServiceClient interface {
	GetRuntime(ctx context.Context, in *GetRuntimeRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error)
	CreateRuntime(ctx context.Context, in *CreateRuntimeRequest, opts ...grpc.CallOption) (*CreateRuntimeResponse, error)
	UpdateRuntime(ctx context.Context, in *UpdateRuntimeRequest, opts ...grpc.CallOption) (*UpdateRuntimeResponse, error)
	UpdateResponseMessageRuntime(ctx context.Context, in *UpdateResponseMessageRuntimeRequest, opts ...grpc.CallOption) (*UpdateResponseMessageRuntimeResponse, error)
	ResponseMessageDeleteRuntimeByAppId(ctx context.Context, in *ResponseMessageDeleteRuntimeByAppIdRequest, opts ...grpc.CallOption) (*ResponseMessageDeleteRuntimeByAppIdResponse, error)
	DeleteRuntime(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error)
	DeleteRuntimesByApplication(ctx context.Context, in *DeleteRuntimesByApplicationRequest, opts ...grpc.CallOption) (*DeleteRuntimesByApplicationResponse, error)
	DeleteRuntimesByEnvironment(ctx context.Context, in *DeleteRuntimesByEnvironmentRequest, opts ...grpc.CallOption) (*DeleteRuntimesByEnvironmentResponse, error)
	ListRuntimes(ctx context.Context, in *ListRuntimesRequest, opts ...grpc.CallOption) (*ListRuntimesResponse, error)
	RebuildRuntime(ctx context.Context, in *RebuildRuntimeRequest, opts ...grpc.CallOption) (*RebuildRuntimeResponse, error)
	AlreadyExistsRuntime(ctx context.Context, in *AlreadyExistsRuntimeRequest, opts ...grpc.CallOption) (*AlreadyExistsRuntimeResponse, error)
	GetRuntimesInLast24Hours(ctx context.Context, in *GetRuntimesInLast24HoursRequest, opts ...grpc.CallOption) (*GetRuntimesInLast24HoursResponse, error)
	GetRuntimesByApplication(ctx context.Context, in *GetRuntimesByApplicationRequest, opts ...grpc.CallOption) (*GetRuntimesByApplicationResponse, error)
	ChangeStatusRuntimeAndApplication(ctx context.Context, in *ChangeStatusRuntimeAndApplicationRequest, opts ...grpc.CallOption) (*ChangeStatusRuntimeAndApplicationResponse, error)
	UpdateApplicationChanges(ctx context.Context, in *UpdateApplicationChangesRequest, opts ...grpc.CallOption) (*UpdateApplicationChangesResponse, error)
}

type runtimeAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeAPIServiceClient(cc grpc.ClientConnInterface) RuntimeAPIServiceClient {
	return &runtimeAPIServiceClient{cc}
}

func (c *runtimeAPIServiceClient) GetRuntime(ctx context.Context, in *GetRuntimeRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error) {
	out := new(GetRuntimeResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/GetRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) CreateRuntime(ctx context.Context, in *CreateRuntimeRequest, opts ...grpc.CallOption) (*CreateRuntimeResponse, error) {
	out := new(CreateRuntimeResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/CreateRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) UpdateRuntime(ctx context.Context, in *UpdateRuntimeRequest, opts ...grpc.CallOption) (*UpdateRuntimeResponse, error) {
	out := new(UpdateRuntimeResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) UpdateResponseMessageRuntime(ctx context.Context, in *UpdateResponseMessageRuntimeRequest, opts ...grpc.CallOption) (*UpdateResponseMessageRuntimeResponse, error) {
	out := new(UpdateResponseMessageRuntimeResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateResponseMessageRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) ResponseMessageDeleteRuntimeByAppId(ctx context.Context, in *ResponseMessageDeleteRuntimeByAppIdRequest, opts ...grpc.CallOption) (*ResponseMessageDeleteRuntimeByAppIdResponse, error) {
	out := new(ResponseMessageDeleteRuntimeByAppIdResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/ResponseMessageDeleteRuntimeByAppId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) DeleteRuntime(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error) {
	out := new(DeleteRuntimeResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) DeleteRuntimesByApplication(ctx context.Context, in *DeleteRuntimesByApplicationRequest, opts ...grpc.CallOption) (*DeleteRuntimesByApplicationResponse, error) {
	out := new(DeleteRuntimesByApplicationResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntimesByApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) DeleteRuntimesByEnvironment(ctx context.Context, in *DeleteRuntimesByEnvironmentRequest, opts ...grpc.CallOption) (*DeleteRuntimesByEnvironmentResponse, error) {
	out := new(DeleteRuntimesByEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntimesByEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) ListRuntimes(ctx context.Context, in *ListRuntimesRequest, opts ...grpc.CallOption) (*ListRuntimesResponse, error) {
	out := new(ListRuntimesResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/ListRuntimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) RebuildRuntime(ctx context.Context, in *RebuildRuntimeRequest, opts ...grpc.CallOption) (*RebuildRuntimeResponse, error) {
	out := new(RebuildRuntimeResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/RebuildRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) AlreadyExistsRuntime(ctx context.Context, in *AlreadyExistsRuntimeRequest, opts ...grpc.CallOption) (*AlreadyExistsRuntimeResponse, error) {
	out := new(AlreadyExistsRuntimeResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/AlreadyExistsRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) GetRuntimesInLast24Hours(ctx context.Context, in *GetRuntimesInLast24HoursRequest, opts ...grpc.CallOption) (*GetRuntimesInLast24HoursResponse, error) {
	out := new(GetRuntimesInLast24HoursResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/GetRuntimesInLast24Hours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) GetRuntimesByApplication(ctx context.Context, in *GetRuntimesByApplicationRequest, opts ...grpc.CallOption) (*GetRuntimesByApplicationResponse, error) {
	out := new(GetRuntimesByApplicationResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/GetRuntimesByApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) ChangeStatusRuntimeAndApplication(ctx context.Context, in *ChangeStatusRuntimeAndApplicationRequest, opts ...grpc.CallOption) (*ChangeStatusRuntimeAndApplicationResponse, error) {
	out := new(ChangeStatusRuntimeAndApplicationResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/ChangeStatusRuntimeAndApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeAPIServiceClient) UpdateApplicationChanges(ctx context.Context, in *UpdateApplicationChangesRequest, opts ...grpc.CallOption) (*UpdateApplicationChangesResponse, error) {
	out := new(UpdateApplicationChangesResponse)
	err := c.cc.Invoke(ctx, "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateApplicationChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeAPIServiceServer is the server API for RuntimeAPIService service.
// All implementations should embed UnimplementedRuntimeAPIServiceServer
// for forward compatibility
type RuntimeAPIServiceServer interface {
	GetRuntime(context.Context, *GetRuntimeRequest) (*GetRuntimeResponse, error)
	CreateRuntime(context.Context, *CreateRuntimeRequest) (*CreateRuntimeResponse, error)
	UpdateRuntime(context.Context, *UpdateRuntimeRequest) (*UpdateRuntimeResponse, error)
	UpdateResponseMessageRuntime(context.Context, *UpdateResponseMessageRuntimeRequest) (*UpdateResponseMessageRuntimeResponse, error)
	ResponseMessageDeleteRuntimeByAppId(context.Context, *ResponseMessageDeleteRuntimeByAppIdRequest) (*ResponseMessageDeleteRuntimeByAppIdResponse, error)
	DeleteRuntime(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error)
	DeleteRuntimesByApplication(context.Context, *DeleteRuntimesByApplicationRequest) (*DeleteRuntimesByApplicationResponse, error)
	DeleteRuntimesByEnvironment(context.Context, *DeleteRuntimesByEnvironmentRequest) (*DeleteRuntimesByEnvironmentResponse, error)
	ListRuntimes(context.Context, *ListRuntimesRequest) (*ListRuntimesResponse, error)
	RebuildRuntime(context.Context, *RebuildRuntimeRequest) (*RebuildRuntimeResponse, error)
	AlreadyExistsRuntime(context.Context, *AlreadyExistsRuntimeRequest) (*AlreadyExistsRuntimeResponse, error)
	GetRuntimesInLast24Hours(context.Context, *GetRuntimesInLast24HoursRequest) (*GetRuntimesInLast24HoursResponse, error)
	GetRuntimesByApplication(context.Context, *GetRuntimesByApplicationRequest) (*GetRuntimesByApplicationResponse, error)
	ChangeStatusRuntimeAndApplication(context.Context, *ChangeStatusRuntimeAndApplicationRequest) (*ChangeStatusRuntimeAndApplicationResponse, error)
	UpdateApplicationChanges(context.Context, *UpdateApplicationChangesRequest) (*UpdateApplicationChangesResponse, error)
}

// UnimplementedRuntimeAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuntimeAPIServiceServer struct {
}

func (UnimplementedRuntimeAPIServiceServer) GetRuntime(context.Context, *GetRuntimeRequest) (*GetRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntime not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) CreateRuntime(context.Context, *CreateRuntimeRequest) (*CreateRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuntime not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) UpdateRuntime(context.Context, *UpdateRuntimeRequest) (*UpdateRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuntime not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) UpdateResponseMessageRuntime(context.Context, *UpdateResponseMessageRuntimeRequest) (*UpdateResponseMessageRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResponseMessageRuntime not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) ResponseMessageDeleteRuntimeByAppId(context.Context, *ResponseMessageDeleteRuntimeByAppIdRequest) (*ResponseMessageDeleteRuntimeByAppIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseMessageDeleteRuntimeByAppId not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) DeleteRuntime(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuntime not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) DeleteRuntimesByApplication(context.Context, *DeleteRuntimesByApplicationRequest) (*DeleteRuntimesByApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuntimesByApplication not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) DeleteRuntimesByEnvironment(context.Context, *DeleteRuntimesByEnvironmentRequest) (*DeleteRuntimesByEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuntimesByEnvironment not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) ListRuntimes(context.Context, *ListRuntimesRequest) (*ListRuntimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuntimes not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) RebuildRuntime(context.Context, *RebuildRuntimeRequest) (*RebuildRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildRuntime not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) AlreadyExistsRuntime(context.Context, *AlreadyExistsRuntimeRequest) (*AlreadyExistsRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlreadyExistsRuntime not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) GetRuntimesInLast24Hours(context.Context, *GetRuntimesInLast24HoursRequest) (*GetRuntimesInLast24HoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimesInLast24Hours not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) GetRuntimesByApplication(context.Context, *GetRuntimesByApplicationRequest) (*GetRuntimesByApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimesByApplication not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) ChangeStatusRuntimeAndApplication(context.Context, *ChangeStatusRuntimeAndApplicationRequest) (*ChangeStatusRuntimeAndApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatusRuntimeAndApplication not implemented")
}
func (UnimplementedRuntimeAPIServiceServer) UpdateApplicationChanges(context.Context, *UpdateApplicationChangesRequest) (*UpdateApplicationChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationChanges not implemented")
}

// UnsafeRuntimeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeAPIServiceServer will
// result in compilation errors.
type UnsafeRuntimeAPIServiceServer interface {
	mustEmbedUnimplementedRuntimeAPIServiceServer()
}

func RegisterRuntimeAPIServiceServer(s grpc.ServiceRegistrar, srv RuntimeAPIServiceServer) {
	s.RegisterService(&RuntimeAPIService_ServiceDesc, srv)
}

func _RuntimeAPIService_GetRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).GetRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/GetRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).GetRuntime(ctx, req.(*GetRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_CreateRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).CreateRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/CreateRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).CreateRuntime(ctx, req.(*CreateRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_UpdateRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).UpdateRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).UpdateRuntime(ctx, req.(*UpdateRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_UpdateResponseMessageRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResponseMessageRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).UpdateResponseMessageRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateResponseMessageRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).UpdateResponseMessageRuntime(ctx, req.(*UpdateResponseMessageRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_ResponseMessageDeleteRuntimeByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseMessageDeleteRuntimeByAppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).ResponseMessageDeleteRuntimeByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/ResponseMessageDeleteRuntimeByAppId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).ResponseMessageDeleteRuntimeByAppId(ctx, req.(*ResponseMessageDeleteRuntimeByAppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_DeleteRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).DeleteRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).DeleteRuntime(ctx, req.(*DeleteRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_DeleteRuntimesByApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuntimesByApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).DeleteRuntimesByApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntimesByApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).DeleteRuntimesByApplication(ctx, req.(*DeleteRuntimesByApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_DeleteRuntimesByEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuntimesByEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).DeleteRuntimesByEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntimesByEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).DeleteRuntimesByEnvironment(ctx, req.(*DeleteRuntimesByEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_ListRuntimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuntimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).ListRuntimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/ListRuntimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).ListRuntimes(ctx, req.(*ListRuntimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_RebuildRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).RebuildRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/RebuildRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).RebuildRuntime(ctx, req.(*RebuildRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_AlreadyExistsRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlreadyExistsRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).AlreadyExistsRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/AlreadyExistsRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).AlreadyExistsRuntime(ctx, req.(*AlreadyExistsRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_GetRuntimesInLast24Hours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimesInLast24HoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).GetRuntimesInLast24Hours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/GetRuntimesInLast24Hours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).GetRuntimesInLast24Hours(ctx, req.(*GetRuntimesInLast24HoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_GetRuntimesByApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimesByApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).GetRuntimesByApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/GetRuntimesByApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).GetRuntimesByApplication(ctx, req.(*GetRuntimesByApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_ChangeStatusRuntimeAndApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRuntimeAndApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).ChangeStatusRuntimeAndApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/ChangeStatusRuntimeAndApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).ChangeStatusRuntimeAndApplication(ctx, req.(*ChangeStatusRuntimeAndApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeAPIService_UpdateApplicationChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeAPIServiceServer).UpdateApplicationChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateApplicationChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeAPIServiceServer).UpdateApplicationChanges(ctx, req.(*UpdateApplicationChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeAPIService_ServiceDesc is the grpc.ServiceDesc for RuntimeAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pipelines.runtime.v1alpha1.RuntimeAPIService",
	HandlerType: (*RuntimeAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuntime",
			Handler:    _RuntimeAPIService_GetRuntime_Handler,
		},
		{
			MethodName: "CreateRuntime",
			Handler:    _RuntimeAPIService_CreateRuntime_Handler,
		},
		{
			MethodName: "UpdateRuntime",
			Handler:    _RuntimeAPIService_UpdateRuntime_Handler,
		},
		{
			MethodName: "UpdateResponseMessageRuntime",
			Handler:    _RuntimeAPIService_UpdateResponseMessageRuntime_Handler,
		},
		{
			MethodName: "ResponseMessageDeleteRuntimeByAppId",
			Handler:    _RuntimeAPIService_ResponseMessageDeleteRuntimeByAppId_Handler,
		},
		{
			MethodName: "DeleteRuntime",
			Handler:    _RuntimeAPIService_DeleteRuntime_Handler,
		},
		{
			MethodName: "DeleteRuntimesByApplication",
			Handler:    _RuntimeAPIService_DeleteRuntimesByApplication_Handler,
		},
		{
			MethodName: "DeleteRuntimesByEnvironment",
			Handler:    _RuntimeAPIService_DeleteRuntimesByEnvironment_Handler,
		},
		{
			MethodName: "ListRuntimes",
			Handler:    _RuntimeAPIService_ListRuntimes_Handler,
		},
		{
			MethodName: "RebuildRuntime",
			Handler:    _RuntimeAPIService_RebuildRuntime_Handler,
		},
		{
			MethodName: "AlreadyExistsRuntime",
			Handler:    _RuntimeAPIService_AlreadyExistsRuntime_Handler,
		},
		{
			MethodName: "GetRuntimesInLast24Hours",
			Handler:    _RuntimeAPIService_GetRuntimesInLast24Hours_Handler,
		},
		{
			MethodName: "GetRuntimesByApplication",
			Handler:    _RuntimeAPIService_GetRuntimesByApplication_Handler,
		},
		{
			MethodName: "ChangeStatusRuntimeAndApplication",
			Handler:    _RuntimeAPIService_ChangeStatusRuntimeAndApplication_Handler,
		},
		{
			MethodName: "UpdateApplicationChanges",
			Handler:    _RuntimeAPIService_UpdateApplicationChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipelines/runtime/v1alpha1/runtime_api.proto",
}
