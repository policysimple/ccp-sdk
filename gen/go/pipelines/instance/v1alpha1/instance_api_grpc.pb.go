// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pipelines/instance/v1alpha1/instance_api.proto

package instancev1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceAPIServiceClient is the client API for InstanceAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceAPIServiceClient interface {
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
}

type instanceAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceAPIServiceClient(cc grpc.ClientConnInterface) InstanceAPIServiceClient {
	return &instanceAPIServiceClient{cc}
}

func (c *instanceAPIServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, "/pipelines.instance.v1alpha1.InstanceAPIService/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceAPIServiceServer is the server API for InstanceAPIService service.
// All implementations should embed UnimplementedInstanceAPIServiceServer
// for forward compatibility
type InstanceAPIServiceServer interface {
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
}

// UnimplementedInstanceAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInstanceAPIServiceServer struct {
}

func (UnimplementedInstanceAPIServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}

// UnsafeInstanceAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceAPIServiceServer will
// result in compilation errors.
type UnsafeInstanceAPIServiceServer interface {
	mustEmbedUnimplementedInstanceAPIServiceServer()
}

func RegisterInstanceAPIServiceServer(s grpc.ServiceRegistrar, srv InstanceAPIServiceServer) {
	s.RegisterService(&InstanceAPIService_ServiceDesc, srv)
}

func _InstanceAPIService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceAPIServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipelines.instance.v1alpha1.InstanceAPIService/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceAPIServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceAPIService_ServiceDesc is the grpc.ServiceDesc for InstanceAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pipelines.instance.v1alpha1.InstanceAPIService",
	HandlerType: (*InstanceAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstance",
			Handler:    _InstanceAPIService_CreateInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipelines/instance/v1alpha1/instance_api.proto",
}
