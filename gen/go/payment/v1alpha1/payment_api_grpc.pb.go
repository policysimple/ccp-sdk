// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentAPIServiceClient is the client API for PaymentAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentAPIServiceClient interface {
	CreateSuscription(ctx context.Context, in *CreateSuscriptionRequest, opts ...grpc.CallOption) (*CreateSuscriptionResponse, error)
	UpdateSuscription(ctx context.Context, in *UpdateSuscriptionRequest, opts ...grpc.CallOption) (*UpdateSuscriptionResponse, error)
	CancelSuscription(ctx context.Context, in *CancelSuscriptionRequest, opts ...grpc.CallOption) (*CancelSuscriptionResponse, error)
	GetOrganizationPayment(ctx context.Context, in *GetOrganizationPaymentRequest, opts ...grpc.CallOption) (*GetOrganizationPaymentResponse, error)
	GetSuscription(ctx context.Context, in *GetSuscriptionRequest, opts ...grpc.CallOption) (*GetSuscriptionResponse, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error)
	GetPayments(ctx context.Context, in *GetPaymentsRequest, opts ...grpc.CallOption) (*GetPaymentsResponse, error)
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error)
	DeletePayment(ctx context.Context, in *DeletePaymentRequest, opts ...grpc.CallOption) (*DeletePaymentResponse, error)
	ListPayment(ctx context.Context, in *ListPaymentRequest, opts ...grpc.CallOption) (*ListPaymentResponse, error)
}

type paymentAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentAPIServiceClient(cc grpc.ClientConnInterface) PaymentAPIServiceClient {
	return &paymentAPIServiceClient{cc}
}

func (c *paymentAPIServiceClient) CreateSuscription(ctx context.Context, in *CreateSuscriptionRequest, opts ...grpc.CallOption) (*CreateSuscriptionResponse, error) {
	out := new(CreateSuscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/CreateSuscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) UpdateSuscription(ctx context.Context, in *UpdateSuscriptionRequest, opts ...grpc.CallOption) (*UpdateSuscriptionResponse, error) {
	out := new(UpdateSuscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/UpdateSuscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) CancelSuscription(ctx context.Context, in *CancelSuscriptionRequest, opts ...grpc.CallOption) (*CancelSuscriptionResponse, error) {
	out := new(CancelSuscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/CancelSuscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) GetOrganizationPayment(ctx context.Context, in *GetOrganizationPaymentRequest, opts ...grpc.CallOption) (*GetOrganizationPaymentResponse, error) {
	out := new(GetOrganizationPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/GetOrganizationPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) GetSuscription(ctx context.Context, in *GetSuscriptionRequest, opts ...grpc.CallOption) (*GetSuscriptionResponse, error) {
	out := new(GetSuscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/GetSuscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerResponse, error) {
	out := new(DeleteCustomerResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error) {
	out := new(GetCustomerResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) GetPayments(ctx context.Context, in *GetPaymentsRequest, opts ...grpc.CallOption) (*GetPaymentsResponse, error) {
	out := new(GetPaymentsResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/GetPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error) {
	out := new(UpdatePaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) DeletePayment(ctx context.Context, in *DeletePaymentRequest, opts ...grpc.CallOption) (*DeletePaymentResponse, error) {
	out := new(DeletePaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/DeletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIServiceClient) ListPayment(ctx context.Context, in *ListPaymentRequest, opts ...grpc.CallOption) (*ListPaymentResponse, error) {
	out := new(ListPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.v1alpha1.PaymentAPIService/ListPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentAPIServiceServer is the server API for PaymentAPIService service.
// All implementations should embed UnimplementedPaymentAPIServiceServer
// for forward compatibility
type PaymentAPIServiceServer interface {
	CreateSuscription(context.Context, *CreateSuscriptionRequest) (*CreateSuscriptionResponse, error)
	UpdateSuscription(context.Context, *UpdateSuscriptionRequest) (*UpdateSuscriptionResponse, error)
	CancelSuscription(context.Context, *CancelSuscriptionRequest) (*CancelSuscriptionResponse, error)
	GetOrganizationPayment(context.Context, *GetOrganizationPaymentRequest) (*GetOrganizationPaymentResponse, error)
	GetSuscription(context.Context, *GetSuscriptionRequest) (*GetSuscriptionResponse, error)
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerResponse, error)
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error)
	GetPayments(context.Context, *GetPaymentsRequest) (*GetPaymentsResponse, error)
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error)
	DeletePayment(context.Context, *DeletePaymentRequest) (*DeletePaymentResponse, error)
	ListPayment(context.Context, *ListPaymentRequest) (*ListPaymentResponse, error)
}

// UnimplementedPaymentAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentAPIServiceServer struct {
}

func (UnimplementedPaymentAPIServiceServer) CreateSuscription(context.Context, *CreateSuscriptionRequest) (*CreateSuscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSuscription not implemented")
}
func (UnimplementedPaymentAPIServiceServer) UpdateSuscription(context.Context, *UpdateSuscriptionRequest) (*UpdateSuscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuscription not implemented")
}
func (UnimplementedPaymentAPIServiceServer) CancelSuscription(context.Context, *CancelSuscriptionRequest) (*CancelSuscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSuscription not implemented")
}
func (UnimplementedPaymentAPIServiceServer) GetOrganizationPayment(context.Context, *GetOrganizationPaymentRequest) (*GetOrganizationPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationPayment not implemented")
}
func (UnimplementedPaymentAPIServiceServer) GetSuscription(context.Context, *GetSuscriptionRequest) (*GetSuscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuscription not implemented")
}
func (UnimplementedPaymentAPIServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedPaymentAPIServiceServer) DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedPaymentAPIServiceServer) GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentAPIServiceServer) GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedPaymentAPIServiceServer) GetPayments(context.Context, *GetPaymentsRequest) (*GetPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayments not implemented")
}
func (UnimplementedPaymentAPIServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentAPIServiceServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedPaymentAPIServiceServer) DeletePayment(context.Context, *DeletePaymentRequest) (*DeletePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayment not implemented")
}
func (UnimplementedPaymentAPIServiceServer) ListPayment(context.Context, *ListPaymentRequest) (*ListPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayment not implemented")
}

// UnsafePaymentAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentAPIServiceServer will
// result in compilation errors.
type UnsafePaymentAPIServiceServer interface {
	mustEmbedUnimplementedPaymentAPIServiceServer()
}

func RegisterPaymentAPIServiceServer(s grpc.ServiceRegistrar, srv PaymentAPIServiceServer) {
	s.RegisterService(&PaymentAPIService_ServiceDesc, srv)
}

func _PaymentAPIService_CreateSuscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSuscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).CreateSuscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/CreateSuscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).CreateSuscription(ctx, req.(*CreateSuscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_UpdateSuscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSuscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).UpdateSuscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/UpdateSuscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).UpdateSuscription(ctx, req.(*UpdateSuscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_CancelSuscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSuscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).CancelSuscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/CancelSuscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).CancelSuscription(ctx, req.(*CancelSuscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_GetOrganizationPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).GetOrganizationPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/GetOrganizationPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).GetOrganizationPayment(ctx, req.(*GetOrganizationPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_GetSuscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).GetSuscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/GetSuscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).GetSuscription(ctx, req.(*GetSuscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_GetPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).GetPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/GetPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).GetPayments(ctx, req.(*GetPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/DeletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).DeletePayment(ctx, req.(*DeletePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPIService_ListPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServiceServer).ListPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1alpha1.PaymentAPIService/ListPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServiceServer).ListPayment(ctx, req.(*ListPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentAPIService_ServiceDesc is the grpc.ServiceDesc for PaymentAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1alpha1.PaymentAPIService",
	HandlerType: (*PaymentAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSuscription",
			Handler:    _PaymentAPIService_CreateSuscription_Handler,
		},
		{
			MethodName: "UpdateSuscription",
			Handler:    _PaymentAPIService_UpdateSuscription_Handler,
		},
		{
			MethodName: "CancelSuscription",
			Handler:    _PaymentAPIService_CancelSuscription_Handler,
		},
		{
			MethodName: "GetOrganizationPayment",
			Handler:    _PaymentAPIService_GetOrganizationPayment_Handler,
		},
		{
			MethodName: "GetSuscription",
			Handler:    _PaymentAPIService_GetSuscription_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _PaymentAPIService_CreateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _PaymentAPIService_DeleteCustomer_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentAPIService_GetPayment_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _PaymentAPIService_GetCustomer_Handler,
		},
		{
			MethodName: "GetPayments",
			Handler:    _PaymentAPIService_GetPayments_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentAPIService_CreatePayment_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _PaymentAPIService_UpdatePayment_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _PaymentAPIService_DeletePayment_Handler,
		},
		{
			MethodName: "ListPayment",
			Handler:    _PaymentAPIService_ListPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1alpha1/payment_api.proto",
}
