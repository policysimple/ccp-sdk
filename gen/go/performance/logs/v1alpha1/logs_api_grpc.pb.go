// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logsv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogsAPIServiceClient is the client API for LogsAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsAPIServiceClient interface {
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
}

type logsAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsAPIServiceClient(cc grpc.ClientConnInterface) LogsAPIServiceClient {
	return &logsAPIServiceClient{cc}
}

func (c *logsAPIServiceClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, "/performance.logs.v1alpha1.LogsAPIService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsAPIServiceServer is the server API for LogsAPIService service.
// All implementations should embed UnimplementedLogsAPIServiceServer
// for forward compatibility
type LogsAPIServiceServer interface {
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
}

// UnimplementedLogsAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLogsAPIServiceServer struct {
}

func (UnimplementedLogsAPIServiceServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}

// UnsafeLogsAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsAPIServiceServer will
// result in compilation errors.
type UnsafeLogsAPIServiceServer interface {
	mustEmbedUnimplementedLogsAPIServiceServer()
}

func RegisterLogsAPIServiceServer(s grpc.ServiceRegistrar, srv LogsAPIServiceServer) {
	s.RegisterService(&LogsAPIService_ServiceDesc, srv)
}

func _LogsAPIService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsAPIServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/performance.logs.v1alpha1.LogsAPIService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsAPIServiceServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogsAPIService_ServiceDesc is the grpc.ServiceDesc for LogsAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "performance.logs.v1alpha1.LogsAPIService",
	HandlerType: (*LogsAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _LogsAPIService_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "performance/logs/v1alpha1/logs_api.proto",
}
