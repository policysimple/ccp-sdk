// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: email/v1alpha1/email_api.proto

#include "email/v1alpha1/email_api.pb.h"
#include "email/v1alpha1/email_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace email {
namespace v1alpha1 {

static const char* EmailService_method_names[] = {
  "/email.v1alpha1.EmailService/SendEmail",
};

std::unique_ptr< EmailService::Stub> EmailService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmailService::Stub> stub(new EmailService::Stub(channel));
  return stub;
}

EmailService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendEmail_(EmailService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EmailService::Stub::SendEmail(::grpc::ClientContext* context, const ::email::v1alpha1::SendEmailRequest& request, ::email::v1alpha1::SendEmailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendEmail_, context, request, response);
}

void EmailService::Stub::experimental_async::SendEmail(::grpc::ClientContext* context, const ::email::v1alpha1::SendEmailRequest* request, ::email::v1alpha1::SendEmailResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::email::v1alpha1::SendEmailResponse>* EmailService::Stub::AsyncSendEmailRaw(::grpc::ClientContext* context, const ::email::v1alpha1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::email::v1alpha1::SendEmailResponse>::Create(channel_.get(), cq, rpcmethod_SendEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::email::v1alpha1::SendEmailResponse>* EmailService::Stub::PrepareAsyncSendEmailRaw(::grpc::ClientContext* context, const ::email::v1alpha1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::email::v1alpha1::SendEmailResponse>::Create(channel_.get(), cq, rpcmethod_SendEmail_, context, request, false);
}

EmailService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmailService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmailService::Service, ::email::v1alpha1::SendEmailRequest, ::email::v1alpha1::SendEmailResponse>(
          std::mem_fn(&EmailService::Service::SendEmail), this)));
}

EmailService::Service::~Service() {
}

::grpc::Status EmailService::Service::SendEmail(::grpc::ServerContext* context, const ::email::v1alpha1::SendEmailRequest* request, ::email::v1alpha1::SendEmailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace email
}  // namespace v1alpha1

