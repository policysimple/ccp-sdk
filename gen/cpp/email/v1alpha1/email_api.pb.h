// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: email/v1alpha1/email_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_email_2fv1alpha1_2femail_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_email_2fv1alpha1_2femail_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_email_2fv1alpha1_2femail_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_email_2fv1alpha1_2femail_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_email_2fv1alpha1_2femail_5fapi_2eproto;
namespace email {
namespace v1alpha1 {
class SendEmailRequest;
struct SendEmailRequestDefaultTypeInternal;
extern SendEmailRequestDefaultTypeInternal _SendEmailRequest_default_instance_;
class SendEmailResponse;
struct SendEmailResponseDefaultTypeInternal;
extern SendEmailResponseDefaultTypeInternal _SendEmailResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace email
PROTOBUF_NAMESPACE_OPEN
template<> ::email::v1alpha1::SendEmailRequest* Arena::CreateMaybeMessage<::email::v1alpha1::SendEmailRequest>(Arena*);
template<> ::email::v1alpha1::SendEmailResponse* Arena::CreateMaybeMessage<::email::v1alpha1::SendEmailResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace email {
namespace v1alpha1 {

// ===================================================================

class SendEmailRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:email.v1alpha1.SendEmailRequest) */ {
 public:
  inline SendEmailRequest() : SendEmailRequest(nullptr) {}
  ~SendEmailRequest() override;
  explicit constexpr SendEmailRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendEmailRequest(const SendEmailRequest& from);
  SendEmailRequest(SendEmailRequest&& from) noexcept
    : SendEmailRequest() {
    *this = ::std::move(from);
  }

  inline SendEmailRequest& operator=(const SendEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendEmailRequest& operator=(SendEmailRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendEmailRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendEmailRequest* internal_default_instance() {
    return reinterpret_cast<const SendEmailRequest*>(
               &_SendEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendEmailRequest& a, SendEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendEmailRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendEmailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendEmailRequest* New() const final {
    return new SendEmailRequest();
  }

  SendEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendEmailRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendEmailRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendEmailRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "email.v1alpha1.SendEmailRequest";
  }
  protected:
  explicit SendEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kSubjectFieldNumber = 2,
    kMessageFieldNumber = 3,
    kInvitationCodeFieldNumber = 4,
  };
  // string to = 1 [json_name = "to"];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string subject = 2 [json_name = "subject"];
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_MUST_USE_RESULT std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string message = 3 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string invitation_code = 4 [json_name = "invitationCode"];
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // @@protoc_insertion_point(class_scope:email.v1alpha1.SendEmailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_email_2fv1alpha1_2femail_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendEmailResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:email.v1alpha1.SendEmailResponse) */ {
 public:
  inline SendEmailResponse() : SendEmailResponse(nullptr) {}
  ~SendEmailResponse() override;
  explicit constexpr SendEmailResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendEmailResponse(const SendEmailResponse& from);
  SendEmailResponse(SendEmailResponse&& from) noexcept
    : SendEmailResponse() {
    *this = ::std::move(from);
  }

  inline SendEmailResponse& operator=(const SendEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendEmailResponse& operator=(SendEmailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendEmailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendEmailResponse* internal_default_instance() {
    return reinterpret_cast<const SendEmailResponse*>(
               &_SendEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendEmailResponse& a, SendEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendEmailResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendEmailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendEmailResponse* New() const final {
    return new SendEmailResponse();
  }

  SendEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendEmailResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendEmailResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendEmailResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendEmailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "email.v1alpha1.SendEmailResponse";
  }
  protected:
  explicit SendEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1 [json_name = "result"];
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_MUST_USE_RESULT std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:email.v1alpha1.SendEmailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_email_2fv1alpha1_2femail_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendEmailRequest

// string to = 1 [json_name = "to"];
inline void SendEmailRequest::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& SendEmailRequest::to() const {
  // @@protoc_insertion_point(field_get:email.v1alpha1.SendEmailRequest.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendEmailRequest::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:email.v1alpha1.SendEmailRequest.to)
}
inline std::string* SendEmailRequest::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:email.v1alpha1.SendEmailRequest.to)
  return _s;
}
inline const std::string& SendEmailRequest::_internal_to() const {
  return to_.Get();
}
inline void SendEmailRequest::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::release_to() {
  // @@protoc_insertion_point(field_release:email.v1alpha1.SendEmailRequest.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendEmailRequest::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:email.v1alpha1.SendEmailRequest.to)
}

// string subject = 2 [json_name = "subject"];
inline void SendEmailRequest::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& SendEmailRequest::subject() const {
  // @@protoc_insertion_point(field_get:email.v1alpha1.SendEmailRequest.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendEmailRequest::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:email.v1alpha1.SendEmailRequest.subject)
}
inline std::string* SendEmailRequest::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:email.v1alpha1.SendEmailRequest.subject)
  return _s;
}
inline const std::string& SendEmailRequest::_internal_subject() const {
  return subject_.Get();
}
inline void SendEmailRequest::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::release_subject() {
  // @@protoc_insertion_point(field_release:email.v1alpha1.SendEmailRequest.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendEmailRequest::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:email.v1alpha1.SendEmailRequest.subject)
}

// string message = 3 [json_name = "message"];
inline void SendEmailRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SendEmailRequest::message() const {
  // @@protoc_insertion_point(field_get:email.v1alpha1.SendEmailRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendEmailRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:email.v1alpha1.SendEmailRequest.message)
}
inline std::string* SendEmailRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:email.v1alpha1.SendEmailRequest.message)
  return _s;
}
inline const std::string& SendEmailRequest::_internal_message() const {
  return message_.Get();
}
inline void SendEmailRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::release_message() {
  // @@protoc_insertion_point(field_release:email.v1alpha1.SendEmailRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendEmailRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:email.v1alpha1.SendEmailRequest.message)
}

// string invitation_code = 4 [json_name = "invitationCode"];
inline void SendEmailRequest::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
}
inline const std::string& SendEmailRequest::invitation_code() const {
  // @@protoc_insertion_point(field_get:email.v1alpha1.SendEmailRequest.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendEmailRequest::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:email.v1alpha1.SendEmailRequest.invitation_code)
}
inline std::string* SendEmailRequest::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:email.v1alpha1.SendEmailRequest.invitation_code)
  return _s;
}
inline const std::string& SendEmailRequest::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void SendEmailRequest::_internal_set_invitation_code(const std::string& value) {
  
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::_internal_mutable_invitation_code() {
  
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendEmailRequest::release_invitation_code() {
  // @@protoc_insertion_point(field_release:email.v1alpha1.SendEmailRequest.invitation_code)
  return invitation_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendEmailRequest::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    
  } else {
    
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:email.v1alpha1.SendEmailRequest.invitation_code)
}

// -------------------------------------------------------------------

// SendEmailResponse

// string result = 1 [json_name = "result"];
inline void SendEmailResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& SendEmailResponse::result() const {
  // @@protoc_insertion_point(field_get:email.v1alpha1.SendEmailResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendEmailResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:email.v1alpha1.SendEmailResponse.result)
}
inline std::string* SendEmailResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:email.v1alpha1.SendEmailResponse.result)
  return _s;
}
inline const std::string& SendEmailResponse::_internal_result() const {
  return result_.Get();
}
inline void SendEmailResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendEmailResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendEmailResponse::release_result() {
  // @@protoc_insertion_point(field_release:email.v1alpha1.SendEmailResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendEmailResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:email.v1alpha1.SendEmailResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace email

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_email_2fv1alpha1_2femail_5fapi_2eproto
