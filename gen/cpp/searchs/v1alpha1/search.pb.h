// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: searchs/v1alpha1/search.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_searchs_2fv1alpha1_2fsearch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_searchs_2fv1alpha1_2fsearch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_searchs_2fv1alpha1_2fsearch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_searchs_2fv1alpha1_2fsearch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_searchs_2fv1alpha1_2fsearch_2eproto;
namespace accounts {
namespace v1alpha1 {
namespace searchs {
namespace v1 {
class ResultSearch;
struct ResultSearchDefaultTypeInternal;
extern ResultSearchDefaultTypeInternal _ResultSearch_default_instance_;
class SearchGlobalRequest;
struct SearchGlobalRequestDefaultTypeInternal;
extern SearchGlobalRequestDefaultTypeInternal _SearchGlobalRequest_default_instance_;
class SearchGlobalResponse;
struct SearchGlobalResponseDefaultTypeInternal;
extern SearchGlobalResponseDefaultTypeInternal _SearchGlobalResponse_default_instance_;
}  // namespace v1
}  // namespace searchs
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> ::accounts::v1alpha1::searchs::v1::ResultSearch* Arena::CreateMaybeMessage<::accounts::v1alpha1::searchs::v1::ResultSearch>(Arena*);
template<> ::accounts::v1alpha1::searchs::v1::SearchGlobalRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::searchs::v1::SearchGlobalRequest>(Arena*);
template<> ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::searchs::v1::SearchGlobalResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accounts {
namespace v1alpha1 {
namespace searchs {
namespace v1 {

// ===================================================================

class SearchGlobalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.searchs.v1.SearchGlobalRequest) */ {
 public:
  inline SearchGlobalRequest() : SearchGlobalRequest(nullptr) {}
  ~SearchGlobalRequest() override;
  explicit constexpr SearchGlobalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchGlobalRequest(const SearchGlobalRequest& from);
  SearchGlobalRequest(SearchGlobalRequest&& from) noexcept
    : SearchGlobalRequest() {
    *this = ::std::move(from);
  }

  inline SearchGlobalRequest& operator=(const SearchGlobalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchGlobalRequest& operator=(SearchGlobalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchGlobalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchGlobalRequest* internal_default_instance() {
    return reinterpret_cast<const SearchGlobalRequest*>(
               &_SearchGlobalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchGlobalRequest& a, SearchGlobalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchGlobalRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchGlobalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchGlobalRequest* New() const final {
    return new SearchGlobalRequest();
  }

  SearchGlobalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchGlobalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchGlobalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchGlobalRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchGlobalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.searchs.v1.SearchGlobalRequest";
  }
  protected:
  explicit SearchGlobalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.searchs.v1.SearchGlobalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_searchs_2fv1alpha1_2fsearch_2eproto;
};
// -------------------------------------------------------------------

class ResultSearch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.searchs.v1.ResultSearch) */ {
 public:
  inline ResultSearch() : ResultSearch(nullptr) {}
  ~ResultSearch() override;
  explicit constexpr ResultSearch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultSearch(const ResultSearch& from);
  ResultSearch(ResultSearch&& from) noexcept
    : ResultSearch() {
    *this = ::std::move(from);
  }

  inline ResultSearch& operator=(const ResultSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultSearch& operator=(ResultSearch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultSearch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultSearch* internal_default_instance() {
    return reinterpret_cast<const ResultSearch*>(
               &_ResultSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultSearch& a, ResultSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultSearch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultSearch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultSearch* New() const final {
    return new ResultSearch();
  }

  ResultSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultSearch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultSearch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResultSearch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultSearch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.searchs.v1.ResultSearch";
  }
  protected:
  explicit ResultSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIdHexaFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string id_hexa = 3 [json_name = "idHexa"];
  void clear_id_hexa();
  const std::string& id_hexa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_hexa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_hexa();
  PROTOBUF_MUST_USE_RESULT std::string* release_id_hexa();
  void set_allocated_id_hexa(std::string* id_hexa);
  private:
  const std::string& _internal_id_hexa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_hexa(const std::string& value);
  std::string* _internal_mutable_id_hexa();
  public:

  // uint32 id = 4 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.searchs.v1.ResultSearch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_hexa_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_searchs_2fv1alpha1_2fsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchGlobalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.searchs.v1.SearchGlobalResponse) */ {
 public:
  inline SearchGlobalResponse() : SearchGlobalResponse(nullptr) {}
  ~SearchGlobalResponse() override;
  explicit constexpr SearchGlobalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchGlobalResponse(const SearchGlobalResponse& from);
  SearchGlobalResponse(SearchGlobalResponse&& from) noexcept
    : SearchGlobalResponse() {
    *this = ::std::move(from);
  }

  inline SearchGlobalResponse& operator=(const SearchGlobalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchGlobalResponse& operator=(SearchGlobalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchGlobalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchGlobalResponse* internal_default_instance() {
    return reinterpret_cast<const SearchGlobalResponse*>(
               &_SearchGlobalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchGlobalResponse& a, SearchGlobalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchGlobalResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchGlobalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchGlobalResponse* New() const final {
    return new SearchGlobalResponse();
  }

  SearchGlobalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchGlobalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchGlobalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchGlobalResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchGlobalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.searchs.v1.SearchGlobalResponse";
  }
  protected:
  explicit SearchGlobalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultSearchFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.searchs.v1.ResultSearch result_search = 1 [json_name = "resultSearch"];
  int result_search_size() const;
  private:
  int _internal_result_search_size() const;
  public:
  void clear_result_search();
  ::accounts::v1alpha1::searchs::v1::ResultSearch* mutable_result_search(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::searchs::v1::ResultSearch >*
      mutable_result_search();
  private:
  const ::accounts::v1alpha1::searchs::v1::ResultSearch& _internal_result_search(int index) const;
  ::accounts::v1alpha1::searchs::v1::ResultSearch* _internal_add_result_search();
  public:
  const ::accounts::v1alpha1::searchs::v1::ResultSearch& result_search(int index) const;
  ::accounts::v1alpha1::searchs::v1::ResultSearch* add_result_search();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::searchs::v1::ResultSearch >&
      result_search() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.searchs.v1.SearchGlobalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::searchs::v1::ResultSearch > result_search_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_searchs_2fv1alpha1_2fsearch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchGlobalRequest

// string name = 1 [json_name = "name"];
inline void SearchGlobalRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SearchGlobalRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.searchs.v1.SearchGlobalRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchGlobalRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.searchs.v1.SearchGlobalRequest.name)
}
inline std::string* SearchGlobalRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.searchs.v1.SearchGlobalRequest.name)
  return _s;
}
inline const std::string& SearchGlobalRequest::_internal_name() const {
  return name_.Get();
}
inline void SearchGlobalRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchGlobalRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchGlobalRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.searchs.v1.SearchGlobalRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchGlobalRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.searchs.v1.SearchGlobalRequest.name)
}

// -------------------------------------------------------------------

// ResultSearch

// string name = 1 [json_name = "name"];
inline void ResultSearch::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResultSearch::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.searchs.v1.ResultSearch.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultSearch::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.searchs.v1.ResultSearch.name)
}
inline std::string* ResultSearch::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.searchs.v1.ResultSearch.name)
  return _s;
}
inline const std::string& ResultSearch::_internal_name() const {
  return name_.Get();
}
inline void ResultSearch::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResultSearch::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResultSearch::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.searchs.v1.ResultSearch.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResultSearch::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.searchs.v1.ResultSearch.name)
}

// string type = 2 [json_name = "type"];
inline void ResultSearch::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ResultSearch::type() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.searchs.v1.ResultSearch.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultSearch::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.searchs.v1.ResultSearch.type)
}
inline std::string* ResultSearch::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.searchs.v1.ResultSearch.type)
  return _s;
}
inline const std::string& ResultSearch::_internal_type() const {
  return type_.Get();
}
inline void ResultSearch::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResultSearch::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResultSearch::release_type() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.searchs.v1.ResultSearch.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResultSearch::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.searchs.v1.ResultSearch.type)
}

// string id_hexa = 3 [json_name = "idHexa"];
inline void ResultSearch::clear_id_hexa() {
  id_hexa_.ClearToEmpty();
}
inline const std::string& ResultSearch::id_hexa() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.searchs.v1.ResultSearch.id_hexa)
  return _internal_id_hexa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultSearch::set_id_hexa(ArgT0&& arg0, ArgT... args) {
 
 id_hexa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.searchs.v1.ResultSearch.id_hexa)
}
inline std::string* ResultSearch::mutable_id_hexa() {
  std::string* _s = _internal_mutable_id_hexa();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.searchs.v1.ResultSearch.id_hexa)
  return _s;
}
inline const std::string& ResultSearch::_internal_id_hexa() const {
  return id_hexa_.Get();
}
inline void ResultSearch::_internal_set_id_hexa(const std::string& value) {
  
  id_hexa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResultSearch::_internal_mutable_id_hexa() {
  
  return id_hexa_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResultSearch::release_id_hexa() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.searchs.v1.ResultSearch.id_hexa)
  return id_hexa_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResultSearch::set_allocated_id_hexa(std::string* id_hexa) {
  if (id_hexa != nullptr) {
    
  } else {
    
  }
  id_hexa_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_hexa,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.searchs.v1.ResultSearch.id_hexa)
}

// uint32 id = 4 [json_name = "id"];
inline void ResultSearch::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultSearch::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultSearch::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.searchs.v1.ResultSearch.id)
  return _internal_id();
}
inline void ResultSearch::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ResultSearch::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.searchs.v1.ResultSearch.id)
}

// -------------------------------------------------------------------

// SearchGlobalResponse

// repeated .accounts.v1alpha1.searchs.v1.ResultSearch result_search = 1 [json_name = "resultSearch"];
inline int SearchGlobalResponse::_internal_result_search_size() const {
  return result_search_.size();
}
inline int SearchGlobalResponse::result_search_size() const {
  return _internal_result_search_size();
}
inline void SearchGlobalResponse::clear_result_search() {
  result_search_.Clear();
}
inline ::accounts::v1alpha1::searchs::v1::ResultSearch* SearchGlobalResponse::mutable_result_search(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.searchs.v1.SearchGlobalResponse.result_search)
  return result_search_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::searchs::v1::ResultSearch >*
SearchGlobalResponse::mutable_result_search() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.searchs.v1.SearchGlobalResponse.result_search)
  return &result_search_;
}
inline const ::accounts::v1alpha1::searchs::v1::ResultSearch& SearchGlobalResponse::_internal_result_search(int index) const {
  return result_search_.Get(index);
}
inline const ::accounts::v1alpha1::searchs::v1::ResultSearch& SearchGlobalResponse::result_search(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.searchs.v1.SearchGlobalResponse.result_search)
  return _internal_result_search(index);
}
inline ::accounts::v1alpha1::searchs::v1::ResultSearch* SearchGlobalResponse::_internal_add_result_search() {
  return result_search_.Add();
}
inline ::accounts::v1alpha1::searchs::v1::ResultSearch* SearchGlobalResponse::add_result_search() {
  ::accounts::v1alpha1::searchs::v1::ResultSearch* _add = _internal_add_result_search();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.searchs.v1.SearchGlobalResponse.result_search)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::searchs::v1::ResultSearch >&
SearchGlobalResponse::result_search() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.searchs.v1.SearchGlobalResponse.result_search)
  return result_search_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace searchs
}  // namespace v1alpha1
}  // namespace accounts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_searchs_2fv1alpha1_2fsearch_2eproto
