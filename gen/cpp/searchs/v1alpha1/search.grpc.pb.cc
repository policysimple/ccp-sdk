// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: searchs/v1alpha1/search.proto

#include "searchs/v1alpha1/search.pb.h"
#include "searchs/v1alpha1/search.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {
namespace searchs {
namespace v1 {

static const char* SearchService_method_names[] = {
  "/accounts.v1alpha1.searchs.v1.SearchService/SearchGlobal",
};

std::unique_ptr< SearchService::Stub> SearchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SearchService::Stub> stub(new SearchService::Stub(channel));
  return stub;
}

SearchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SearchGlobal_(SearchService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SearchService::Stub::SearchGlobal(::grpc::ClientContext* context, const ::accounts::v1alpha1::searchs::v1::SearchGlobalRequest& request, ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchGlobal_, context, request, response);
}

void SearchService::Stub::experimental_async::SearchGlobal(::grpc::ClientContext* context, const ::accounts::v1alpha1::searchs::v1::SearchGlobalRequest* request, ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchGlobal_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse>* SearchService::Stub::AsyncSearchGlobalRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::searchs::v1::SearchGlobalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse>::Create(channel_.get(), cq, rpcmethod_SearchGlobal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse>* SearchService::Stub::PrepareAsyncSearchGlobalRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::searchs::v1::SearchGlobalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse>::Create(channel_.get(), cq, rpcmethod_SearchGlobal_, context, request, false);
}

SearchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SearchService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SearchService::Service, ::accounts::v1alpha1::searchs::v1::SearchGlobalRequest, ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse>(
          std::mem_fn(&SearchService::Service::SearchGlobal), this)));
}

SearchService::Service::~Service() {
}

::grpc::Status SearchService::Service::SearchGlobal(::grpc::ServerContext* context, const ::accounts::v1alpha1::searchs::v1::SearchGlobalRequest* request, ::accounts::v1alpha1::searchs::v1::SearchGlobalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1
}  // namespace searchs
}  // namespace v1

