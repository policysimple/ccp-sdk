// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dexintegration/v1alpha1/dexintegration.proto

#include "dexintegration/v1alpha1/dexintegration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dexintegration {
namespace v1alpha1 {
constexpr UsersDex::UsersDex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , refresh_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connector_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UsersDexDefaultTypeInternal {
  constexpr UsersDexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UsersDexDefaultTypeInternal() {}
  union {
    UsersDex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UsersDexDefaultTypeInternal _UsersDex_default_instance_;
constexpr GetListUserDexRequest::GetListUserDexRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetListUserDexRequestDefaultTypeInternal {
  constexpr GetListUserDexRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetListUserDexRequestDefaultTypeInternal() {}
  union {
    GetListUserDexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetListUserDexRequestDefaultTypeInternal _GetListUserDexRequest_default_instance_;
constexpr GetListUserDexResponse::GetListUserDexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_dex_(){}
struct GetListUserDexResponseDefaultTypeInternal {
  constexpr GetListUserDexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetListUserDexResponseDefaultTypeInternal() {}
  union {
    GetListUserDexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetListUserDexResponseDefaultTypeInternal _GetListUserDexResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace dexintegration
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dexintegration_2fv1alpha1_2fdexintegration_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dexintegration_2fv1alpha1_2fdexintegration_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dexintegration_2fv1alpha1_2fdexintegration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dexintegration_2fv1alpha1_2fdexintegration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::UsersDex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::UsersDex, user_id_),
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::UsersDex, provider_),
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::UsersDex, refresh_),
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::UsersDex, connector_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::GetListUserDexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::GetListUserDexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dexintegration::v1alpha1::GetListUserDexResponse, users_dex_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dexintegration::v1alpha1::UsersDex)},
  { 9, -1, sizeof(::dexintegration::v1alpha1::GetListUserDexRequest)},
  { 14, -1, sizeof(::dexintegration::v1alpha1::GetListUserDexResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dexintegration::v1alpha1::_UsersDex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dexintegration::v1alpha1::_GetListUserDexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dexintegration::v1alpha1::_GetListUserDexResponse_default_instance_),
};

const char descriptor_table_protodef_dexintegration_2fv1alpha1_2fdexintegration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,dexintegration/v1alpha1/dexintegration"
  ".proto\022\027dexintegration.v1alpha1\"\200\001\n\010User"
  "sDex\022\027\n\007user_id\030\001 \001(\tR\006userId\022\032\n\010provide"
  "r\030\002 \001(\tR\010provider\022\030\n\007refresh\030\003 \001(\tR\007refr"
  "esh\022%\n\016connector_data\030\004 \001(\tR\rconnectorDa"
  "ta\"\027\n\025GetListUserDexRequest\"X\n\026GetListUs"
  "erDexResponse\022>\n\tusers_dex\030\001 \003(\0132!.dexin"
  "tegration.v1alpha1.UsersDexR\010usersDex2\212\001"
  "\n\025DexIntegrationService\022q\n\016GetListUserDe"
  "x\022..dexintegration.v1alpha1.GetListUserD"
  "exRequest\032/.dexintegration.v1alpha1.GetL"
  "istUserDexResponseB:Z8github.com/cuemby/"
  "ccp-sdk/gen/go/dexintegration/v1alpha1b\006"
  "proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto = {
  false, false, 526, descriptor_table_protodef_dexintegration_2fv1alpha1_2fdexintegration_2eproto, "dexintegration/v1alpha1/dexintegration.proto", 
  &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_dexintegration_2fv1alpha1_2fdexintegration_2eproto::offsets,
  file_level_metadata_dexintegration_2fv1alpha1_2fdexintegration_2eproto, file_level_enum_descriptors_dexintegration_2fv1alpha1_2fdexintegration_2eproto, file_level_service_descriptors_dexintegration_2fv1alpha1_2fdexintegration_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_getter() {
  return &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dexintegration_2fv1alpha1_2fdexintegration_2eproto(&descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto);
namespace dexintegration {
namespace v1alpha1 {

// ===================================================================

class UsersDex::_Internal {
 public:
};

UsersDex::UsersDex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dexintegration.v1alpha1.UsersDex)
}
UsersDex::UsersDex(const UsersDex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArenaForAllocation());
  }
  refresh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refresh().empty()) {
    refresh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refresh(), 
      GetArenaForAllocation());
  }
  connector_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connector_data().empty()) {
    connector_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connector_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dexintegration.v1alpha1.UsersDex)
}

inline void UsersDex::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
refresh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
connector_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UsersDex::~UsersDex() {
  // @@protoc_insertion_point(destructor:dexintegration.v1alpha1.UsersDex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UsersDex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refresh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connector_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UsersDex::ArenaDtor(void* object) {
  UsersDex* _this = reinterpret_cast< UsersDex* >(object);
  (void)_this;
}
void UsersDex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsersDex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UsersDex::Clear() {
// @@protoc_insertion_point(message_clear_start:dexintegration.v1alpha1.UsersDex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  provider_.ClearToEmpty();
  refresh_.ClearToEmpty();
  connector_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersDex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dexintegration.v1alpha1.UsersDex.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider = 2 [json_name = "provider"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dexintegration.v1alpha1.UsersDex.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refresh = 3 [json_name = "refresh"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_refresh();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dexintegration.v1alpha1.UsersDex.refresh"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string connector_data = 4 [json_name = "connectorData"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_connector_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dexintegration.v1alpha1.UsersDex.connector_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsersDex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dexintegration.v1alpha1.UsersDex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dexintegration.v1alpha1.UsersDex.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string provider = 2 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dexintegration.v1alpha1.UsersDex.provider");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_provider(), target);
  }

  // string refresh = 3 [json_name = "refresh"];
  if (!this->_internal_refresh().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh().data(), static_cast<int>(this->_internal_refresh().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dexintegration.v1alpha1.UsersDex.refresh");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_refresh(), target);
  }

  // string connector_data = 4 [json_name = "connectorData"];
  if (!this->_internal_connector_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connector_data().data(), static_cast<int>(this->_internal_connector_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dexintegration.v1alpha1.UsersDex.connector_data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_connector_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dexintegration.v1alpha1.UsersDex)
  return target;
}

size_t UsersDex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dexintegration.v1alpha1.UsersDex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string provider = 2 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // string refresh = 3 [json_name = "refresh"];
  if (!this->_internal_refresh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refresh());
  }

  // string connector_data = 4 [json_name = "connectorData"];
  if (!this->_internal_connector_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connector_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsersDex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UsersDex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsersDex::GetClassData() const { return &_class_data_; }

void UsersDex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UsersDex *>(to)->MergeFrom(
      static_cast<const UsersDex &>(from));
}


void UsersDex::MergeFrom(const UsersDex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dexintegration.v1alpha1.UsersDex)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_provider().empty()) {
    _internal_set_provider(from._internal_provider());
  }
  if (!from._internal_refresh().empty()) {
    _internal_set_refresh(from._internal_refresh());
  }
  if (!from._internal_connector_data().empty()) {
    _internal_set_connector_data(from._internal_connector_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsersDex::CopyFrom(const UsersDex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dexintegration.v1alpha1.UsersDex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersDex::IsInitialized() const {
  return true;
}

void UsersDex::InternalSwap(UsersDex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_, GetArenaForAllocation(),
      &other->provider_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &refresh_, GetArenaForAllocation(),
      &other->refresh_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connector_data_, GetArenaForAllocation(),
      &other->connector_data_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersDex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_getter, &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_once,
      file_level_metadata_dexintegration_2fv1alpha1_2fdexintegration_2eproto[0]);
}

// ===================================================================

class GetListUserDexRequest::_Internal {
 public:
};

GetListUserDexRequest::GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dexintegration.v1alpha1.GetListUserDexRequest)
}
GetListUserDexRequest::GetListUserDexRequest(const GetListUserDexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dexintegration.v1alpha1.GetListUserDexRequest)
}

inline void GetListUserDexRequest::SharedCtor() {
}

GetListUserDexRequest::~GetListUserDexRequest() {
  // @@protoc_insertion_point(destructor:dexintegration.v1alpha1.GetListUserDexRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetListUserDexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetListUserDexRequest::ArenaDtor(void* object) {
  GetListUserDexRequest* _this = reinterpret_cast< GetListUserDexRequest* >(object);
  (void)_this;
}
void GetListUserDexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListUserDexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetListUserDexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dexintegration.v1alpha1.GetListUserDexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListUserDexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListUserDexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dexintegration.v1alpha1.GetListUserDexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dexintegration.v1alpha1.GetListUserDexRequest)
  return target;
}

size_t GetListUserDexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dexintegration.v1alpha1.GetListUserDexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListUserDexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetListUserDexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListUserDexRequest::GetClassData() const { return &_class_data_; }

void GetListUserDexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetListUserDexRequest *>(to)->MergeFrom(
      static_cast<const GetListUserDexRequest &>(from));
}


void GetListUserDexRequest::MergeFrom(const GetListUserDexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dexintegration.v1alpha1.GetListUserDexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListUserDexRequest::CopyFrom(const GetListUserDexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dexintegration.v1alpha1.GetListUserDexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListUserDexRequest::IsInitialized() const {
  return true;
}

void GetListUserDexRequest::InternalSwap(GetListUserDexRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListUserDexRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_getter, &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_once,
      file_level_metadata_dexintegration_2fv1alpha1_2fdexintegration_2eproto[1]);
}

// ===================================================================

class GetListUserDexResponse::_Internal {
 public:
};

GetListUserDexResponse::GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_dex_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dexintegration.v1alpha1.GetListUserDexResponse)
}
GetListUserDexResponse::GetListUserDexResponse(const GetListUserDexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_dex_(from.users_dex_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dexintegration.v1alpha1.GetListUserDexResponse)
}

inline void GetListUserDexResponse::SharedCtor() {
}

GetListUserDexResponse::~GetListUserDexResponse() {
  // @@protoc_insertion_point(destructor:dexintegration.v1alpha1.GetListUserDexResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetListUserDexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetListUserDexResponse::ArenaDtor(void* object) {
  GetListUserDexResponse* _this = reinterpret_cast< GetListUserDexResponse* >(object);
  (void)_this;
}
void GetListUserDexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListUserDexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetListUserDexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dexintegration.v1alpha1.GetListUserDexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_dex_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListUserDexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dexintegration.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users_dex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListUserDexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dexintegration.v1alpha1.GetListUserDexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dexintegration.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_dex_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users_dex(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dexintegration.v1alpha1.GetListUserDexResponse)
  return target;
}

size_t GetListUserDexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dexintegration.v1alpha1.GetListUserDexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dexintegration.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
  total_size += 1UL * this->_internal_users_dex_size();
  for (const auto& msg : this->users_dex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListUserDexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetListUserDexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListUserDexResponse::GetClassData() const { return &_class_data_; }

void GetListUserDexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetListUserDexResponse *>(to)->MergeFrom(
      static_cast<const GetListUserDexResponse &>(from));
}


void GetListUserDexResponse::MergeFrom(const GetListUserDexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dexintegration.v1alpha1.GetListUserDexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_dex_.MergeFrom(from.users_dex_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListUserDexResponse::CopyFrom(const GetListUserDexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dexintegration.v1alpha1.GetListUserDexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListUserDexResponse::IsInitialized() const {
  return true;
}

void GetListUserDexResponse::InternalSwap(GetListUserDexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_dex_.InternalSwap(&other->users_dex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListUserDexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_getter, &descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto_once,
      file_level_metadata_dexintegration_2fv1alpha1_2fdexintegration_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace dexintegration
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dexintegration::v1alpha1::UsersDex* Arena::CreateMaybeMessage< ::dexintegration::v1alpha1::UsersDex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dexintegration::v1alpha1::UsersDex >(arena);
}
template<> PROTOBUF_NOINLINE ::dexintegration::v1alpha1::GetListUserDexRequest* Arena::CreateMaybeMessage< ::dexintegration::v1alpha1::GetListUserDexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dexintegration::v1alpha1::GetListUserDexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dexintegration::v1alpha1::GetListUserDexResponse* Arena::CreateMaybeMessage< ::dexintegration::v1alpha1::GetListUserDexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dexintegration::v1alpha1::GetListUserDexResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
