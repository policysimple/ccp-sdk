// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dexintegration/v1alpha1/dexintegration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dexintegration_2fv1alpha1_2fdexintegration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dexintegration_2fv1alpha1_2fdexintegration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dexintegration_2fv1alpha1_2fdexintegration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dexintegration_2fv1alpha1_2fdexintegration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dexintegration_2fv1alpha1_2fdexintegration_2eproto;
namespace dexintegration {
namespace v1alpha1 {
class GetListUserDexRequest;
struct GetListUserDexRequestDefaultTypeInternal;
extern GetListUserDexRequestDefaultTypeInternal _GetListUserDexRequest_default_instance_;
class GetListUserDexResponse;
struct GetListUserDexResponseDefaultTypeInternal;
extern GetListUserDexResponseDefaultTypeInternal _GetListUserDexResponse_default_instance_;
class UsersDex;
struct UsersDexDefaultTypeInternal;
extern UsersDexDefaultTypeInternal _UsersDex_default_instance_;
}  // namespace v1alpha1
}  // namespace dexintegration
PROTOBUF_NAMESPACE_OPEN
template<> ::dexintegration::v1alpha1::GetListUserDexRequest* Arena::CreateMaybeMessage<::dexintegration::v1alpha1::GetListUserDexRequest>(Arena*);
template<> ::dexintegration::v1alpha1::GetListUserDexResponse* Arena::CreateMaybeMessage<::dexintegration::v1alpha1::GetListUserDexResponse>(Arena*);
template<> ::dexintegration::v1alpha1::UsersDex* Arena::CreateMaybeMessage<::dexintegration::v1alpha1::UsersDex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dexintegration {
namespace v1alpha1 {

// ===================================================================

class UsersDex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexintegration.v1alpha1.UsersDex) */ {
 public:
  inline UsersDex() : UsersDex(nullptr) {}
  ~UsersDex() override;
  explicit constexpr UsersDex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsersDex(const UsersDex& from);
  UsersDex(UsersDex&& from) noexcept
    : UsersDex() {
    *this = ::std::move(from);
  }

  inline UsersDex& operator=(const UsersDex& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersDex& operator=(UsersDex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsersDex& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsersDex* internal_default_instance() {
    return reinterpret_cast<const UsersDex*>(
               &_UsersDex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsersDex& a, UsersDex& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersDex* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersDex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsersDex* New() const final {
    return new UsersDex();
  }

  UsersDex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsersDex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsersDex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UsersDex& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersDex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexintegration.v1alpha1.UsersDex";
  }
  protected:
  explicit UsersDex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kProviderFieldNumber = 2,
    kRefreshFieldNumber = 3,
    kConnectorDataFieldNumber = 4,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string provider = 2 [json_name = "provider"];
  void clear_provider();
  const std::string& provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // string refresh = 3 [json_name = "refresh"];
  void clear_refresh();
  const std::string& refresh() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refresh(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refresh();
  PROTOBUF_MUST_USE_RESULT std::string* release_refresh();
  void set_allocated_refresh(std::string* refresh);
  private:
  const std::string& _internal_refresh() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refresh(const std::string& value);
  std::string* _internal_mutable_refresh();
  public:

  // string connector_data = 4 [json_name = "connectorData"];
  void clear_connector_data();
  const std::string& connector_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connector_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connector_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_connector_data();
  void set_allocated_connector_data(std::string* connector_data);
  private:
  const std::string& _internal_connector_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connector_data(const std::string& value);
  std::string* _internal_mutable_connector_data();
  public:

  // @@protoc_insertion_point(class_scope:dexintegration.v1alpha1.UsersDex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refresh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connector_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dexintegration_2fv1alpha1_2fdexintegration_2eproto;
};
// -------------------------------------------------------------------

class GetListUserDexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexintegration.v1alpha1.GetListUserDexRequest) */ {
 public:
  inline GetListUserDexRequest() : GetListUserDexRequest(nullptr) {}
  ~GetListUserDexRequest() override;
  explicit constexpr GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetListUserDexRequest(const GetListUserDexRequest& from);
  GetListUserDexRequest(GetListUserDexRequest&& from) noexcept
    : GetListUserDexRequest() {
    *this = ::std::move(from);
  }

  inline GetListUserDexRequest& operator=(const GetListUserDexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListUserDexRequest& operator=(GetListUserDexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetListUserDexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetListUserDexRequest* internal_default_instance() {
    return reinterpret_cast<const GetListUserDexRequest*>(
               &_GetListUserDexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetListUserDexRequest& a, GetListUserDexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListUserDexRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListUserDexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListUserDexRequest* New() const final {
    return new GetListUserDexRequest();
  }

  GetListUserDexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListUserDexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetListUserDexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetListUserDexRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListUserDexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexintegration.v1alpha1.GetListUserDexRequest";
  }
  protected:
  explicit GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dexintegration.v1alpha1.GetListUserDexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dexintegration_2fv1alpha1_2fdexintegration_2eproto;
};
// -------------------------------------------------------------------

class GetListUserDexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dexintegration.v1alpha1.GetListUserDexResponse) */ {
 public:
  inline GetListUserDexResponse() : GetListUserDexResponse(nullptr) {}
  ~GetListUserDexResponse() override;
  explicit constexpr GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetListUserDexResponse(const GetListUserDexResponse& from);
  GetListUserDexResponse(GetListUserDexResponse&& from) noexcept
    : GetListUserDexResponse() {
    *this = ::std::move(from);
  }

  inline GetListUserDexResponse& operator=(const GetListUserDexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListUserDexResponse& operator=(GetListUserDexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetListUserDexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetListUserDexResponse* internal_default_instance() {
    return reinterpret_cast<const GetListUserDexResponse*>(
               &_GetListUserDexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetListUserDexResponse& a, GetListUserDexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListUserDexResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListUserDexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListUserDexResponse* New() const final {
    return new GetListUserDexResponse();
  }

  GetListUserDexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListUserDexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetListUserDexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetListUserDexResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListUserDexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dexintegration.v1alpha1.GetListUserDexResponse";
  }
  protected:
  explicit GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersDexFieldNumber = 1,
  };
  // repeated .dexintegration.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
  int users_dex_size() const;
  private:
  int _internal_users_dex_size() const;
  public:
  void clear_users_dex();
  ::dexintegration::v1alpha1::UsersDex* mutable_users_dex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexintegration::v1alpha1::UsersDex >*
      mutable_users_dex();
  private:
  const ::dexintegration::v1alpha1::UsersDex& _internal_users_dex(int index) const;
  ::dexintegration::v1alpha1::UsersDex* _internal_add_users_dex();
  public:
  const ::dexintegration::v1alpha1::UsersDex& users_dex(int index) const;
  ::dexintegration::v1alpha1::UsersDex* add_users_dex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexintegration::v1alpha1::UsersDex >&
      users_dex() const;

  // @@protoc_insertion_point(class_scope:dexintegration.v1alpha1.GetListUserDexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexintegration::v1alpha1::UsersDex > users_dex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dexintegration_2fv1alpha1_2fdexintegration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsersDex

// string user_id = 1 [json_name = "userId"];
inline void UsersDex::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UsersDex::user_id() const {
  // @@protoc_insertion_point(field_get:dexintegration.v1alpha1.UsersDex.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dexintegration.v1alpha1.UsersDex.user_id)
}
inline std::string* UsersDex::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:dexintegration.v1alpha1.UsersDex.user_id)
  return _s;
}
inline const std::string& UsersDex::_internal_user_id() const {
  return user_id_.Get();
}
inline void UsersDex::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_user_id() {
  // @@protoc_insertion_point(field_release:dexintegration.v1alpha1.UsersDex.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dexintegration.v1alpha1.UsersDex.user_id)
}

// string provider = 2 [json_name = "provider"];
inline void UsersDex::clear_provider() {
  provider_.ClearToEmpty();
}
inline const std::string& UsersDex::provider() const {
  // @@protoc_insertion_point(field_get:dexintegration.v1alpha1.UsersDex.provider)
  return _internal_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_provider(ArgT0&& arg0, ArgT... args) {
 
 provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dexintegration.v1alpha1.UsersDex.provider)
}
inline std::string* UsersDex::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:dexintegration.v1alpha1.UsersDex.provider)
  return _s;
}
inline const std::string& UsersDex::_internal_provider() const {
  return provider_.Get();
}
inline void UsersDex::_internal_set_provider(const std::string& value) {
  
  provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_provider() {
  
  return provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_provider() {
  // @@protoc_insertion_point(field_release:dexintegration.v1alpha1.UsersDex.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dexintegration.v1alpha1.UsersDex.provider)
}

// string refresh = 3 [json_name = "refresh"];
inline void UsersDex::clear_refresh() {
  refresh_.ClearToEmpty();
}
inline const std::string& UsersDex::refresh() const {
  // @@protoc_insertion_point(field_get:dexintegration.v1alpha1.UsersDex.refresh)
  return _internal_refresh();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_refresh(ArgT0&& arg0, ArgT... args) {
 
 refresh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dexintegration.v1alpha1.UsersDex.refresh)
}
inline std::string* UsersDex::mutable_refresh() {
  std::string* _s = _internal_mutable_refresh();
  // @@protoc_insertion_point(field_mutable:dexintegration.v1alpha1.UsersDex.refresh)
  return _s;
}
inline const std::string& UsersDex::_internal_refresh() const {
  return refresh_.Get();
}
inline void UsersDex::_internal_set_refresh(const std::string& value) {
  
  refresh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_refresh() {
  
  return refresh_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_refresh() {
  // @@protoc_insertion_point(field_release:dexintegration.v1alpha1.UsersDex.refresh)
  return refresh_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_refresh(std::string* refresh) {
  if (refresh != nullptr) {
    
  } else {
    
  }
  refresh_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refresh,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dexintegration.v1alpha1.UsersDex.refresh)
}

// string connector_data = 4 [json_name = "connectorData"];
inline void UsersDex::clear_connector_data() {
  connector_data_.ClearToEmpty();
}
inline const std::string& UsersDex::connector_data() const {
  // @@protoc_insertion_point(field_get:dexintegration.v1alpha1.UsersDex.connector_data)
  return _internal_connector_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_connector_data(ArgT0&& arg0, ArgT... args) {
 
 connector_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dexintegration.v1alpha1.UsersDex.connector_data)
}
inline std::string* UsersDex::mutable_connector_data() {
  std::string* _s = _internal_mutable_connector_data();
  // @@protoc_insertion_point(field_mutable:dexintegration.v1alpha1.UsersDex.connector_data)
  return _s;
}
inline const std::string& UsersDex::_internal_connector_data() const {
  return connector_data_.Get();
}
inline void UsersDex::_internal_set_connector_data(const std::string& value) {
  
  connector_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_connector_data() {
  
  return connector_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_connector_data() {
  // @@protoc_insertion_point(field_release:dexintegration.v1alpha1.UsersDex.connector_data)
  return connector_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_connector_data(std::string* connector_data) {
  if (connector_data != nullptr) {
    
  } else {
    
  }
  connector_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connector_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:dexintegration.v1alpha1.UsersDex.connector_data)
}

// -------------------------------------------------------------------

// GetListUserDexRequest

// -------------------------------------------------------------------

// GetListUserDexResponse

// repeated .dexintegration.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
inline int GetListUserDexResponse::_internal_users_dex_size() const {
  return users_dex_.size();
}
inline int GetListUserDexResponse::users_dex_size() const {
  return _internal_users_dex_size();
}
inline void GetListUserDexResponse::clear_users_dex() {
  users_dex_.Clear();
}
inline ::dexintegration::v1alpha1::UsersDex* GetListUserDexResponse::mutable_users_dex(int index) {
  // @@protoc_insertion_point(field_mutable:dexintegration.v1alpha1.GetListUserDexResponse.users_dex)
  return users_dex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexintegration::v1alpha1::UsersDex >*
GetListUserDexResponse::mutable_users_dex() {
  // @@protoc_insertion_point(field_mutable_list:dexintegration.v1alpha1.GetListUserDexResponse.users_dex)
  return &users_dex_;
}
inline const ::dexintegration::v1alpha1::UsersDex& GetListUserDexResponse::_internal_users_dex(int index) const {
  return users_dex_.Get(index);
}
inline const ::dexintegration::v1alpha1::UsersDex& GetListUserDexResponse::users_dex(int index) const {
  // @@protoc_insertion_point(field_get:dexintegration.v1alpha1.GetListUserDexResponse.users_dex)
  return _internal_users_dex(index);
}
inline ::dexintegration::v1alpha1::UsersDex* GetListUserDexResponse::_internal_add_users_dex() {
  return users_dex_.Add();
}
inline ::dexintegration::v1alpha1::UsersDex* GetListUserDexResponse::add_users_dex() {
  ::dexintegration::v1alpha1::UsersDex* _add = _internal_add_users_dex();
  // @@protoc_insertion_point(field_add:dexintegration.v1alpha1.GetListUserDexResponse.users_dex)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dexintegration::v1alpha1::UsersDex >&
GetListUserDexResponse::users_dex() const {
  // @@protoc_insertion_point(field_list:dexintegration.v1alpha1.GetListUserDexResponse.users_dex)
  return users_dex_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace dexintegration

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dexintegration_2fv1alpha1_2fdexintegration_2eproto
