// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vault/v1alpha1/vault.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vault_2fv1alpha1_2fvault_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vault_2fv1alpha1_2fvault_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vault_2fv1alpha1_2fvault_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vault_2fv1alpha1_2fvault_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vault_2fv1alpha1_2fvault_2eproto;
namespace vault {
namespace v1alpha1 {
class DeleteSecretRequest;
struct DeleteSecretRequestDefaultTypeInternal;
extern DeleteSecretRequestDefaultTypeInternal _DeleteSecretRequest_default_instance_;
class DeleteSecretResponse;
struct DeleteSecretResponseDefaultTypeInternal;
extern DeleteSecretResponseDefaultTypeInternal _DeleteSecretResponse_default_instance_;
class ListSecretsRequest;
struct ListSecretsRequestDefaultTypeInternal;
extern ListSecretsRequestDefaultTypeInternal _ListSecretsRequest_default_instance_;
class ListSecretsResponse;
struct ListSecretsResponseDefaultTypeInternal;
extern ListSecretsResponseDefaultTypeInternal _ListSecretsResponse_default_instance_;
class ReadSecretRequest;
struct ReadSecretRequestDefaultTypeInternal;
extern ReadSecretRequestDefaultTypeInternal _ReadSecretRequest_default_instance_;
class ReadSecretResponse;
struct ReadSecretResponseDefaultTypeInternal;
extern ReadSecretResponseDefaultTypeInternal _ReadSecretResponse_default_instance_;
class ReadSecretResponse_MetadataEntry_DoNotUse;
struct ReadSecretResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ReadSecretResponse_MetadataEntry_DoNotUseDefaultTypeInternal _ReadSecretResponse_MetadataEntry_DoNotUse_default_instance_;
class Secret;
struct SecretDefaultTypeInternal;
extern SecretDefaultTypeInternal _Secret_default_instance_;
class SecretData;
struct SecretDataDefaultTypeInternal;
extern SecretDataDefaultTypeInternal _SecretData_default_instance_;
class SecretData_DataEntry_DoNotUse;
struct SecretData_DataEntry_DoNotUseDefaultTypeInternal;
extern SecretData_DataEntry_DoNotUseDefaultTypeInternal _SecretData_DataEntry_DoNotUse_default_instance_;
class SecretWarnings;
struct SecretWarningsDefaultTypeInternal;
extern SecretWarningsDefaultTypeInternal _SecretWarnings_default_instance_;
class WriteSecretRequest;
struct WriteSecretRequestDefaultTypeInternal;
extern WriteSecretRequestDefaultTypeInternal _WriteSecretRequest_default_instance_;
class WriteSecretResponse;
struct WriteSecretResponseDefaultTypeInternal;
extern WriteSecretResponseDefaultTypeInternal _WriteSecretResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace vault
PROTOBUF_NAMESPACE_OPEN
template<> ::vault::v1alpha1::DeleteSecretRequest* Arena::CreateMaybeMessage<::vault::v1alpha1::DeleteSecretRequest>(Arena*);
template<> ::vault::v1alpha1::DeleteSecretResponse* Arena::CreateMaybeMessage<::vault::v1alpha1::DeleteSecretResponse>(Arena*);
template<> ::vault::v1alpha1::ListSecretsRequest* Arena::CreateMaybeMessage<::vault::v1alpha1::ListSecretsRequest>(Arena*);
template<> ::vault::v1alpha1::ListSecretsResponse* Arena::CreateMaybeMessage<::vault::v1alpha1::ListSecretsResponse>(Arena*);
template<> ::vault::v1alpha1::ReadSecretRequest* Arena::CreateMaybeMessage<::vault::v1alpha1::ReadSecretRequest>(Arena*);
template<> ::vault::v1alpha1::ReadSecretResponse* Arena::CreateMaybeMessage<::vault::v1alpha1::ReadSecretResponse>(Arena*);
template<> ::vault::v1alpha1::ReadSecretResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::vault::v1alpha1::ReadSecretResponse_MetadataEntry_DoNotUse>(Arena*);
template<> ::vault::v1alpha1::Secret* Arena::CreateMaybeMessage<::vault::v1alpha1::Secret>(Arena*);
template<> ::vault::v1alpha1::SecretData* Arena::CreateMaybeMessage<::vault::v1alpha1::SecretData>(Arena*);
template<> ::vault::v1alpha1::SecretData_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::vault::v1alpha1::SecretData_DataEntry_DoNotUse>(Arena*);
template<> ::vault::v1alpha1::SecretWarnings* Arena::CreateMaybeMessage<::vault::v1alpha1::SecretWarnings>(Arena*);
template<> ::vault::v1alpha1::WriteSecretRequest* Arena::CreateMaybeMessage<::vault::v1alpha1::WriteSecretRequest>(Arena*);
template<> ::vault::v1alpha1::WriteSecretResponse* Arena::CreateMaybeMessage<::vault::v1alpha1::WriteSecretResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vault {
namespace v1alpha1 {

// ===================================================================

class SecretData_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecretData_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecretData_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SecretData_DataEntry_DoNotUse();
  explicit constexpr SecretData_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SecretData_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SecretData_DataEntry_DoNotUse& other);
  static const SecretData_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SecretData_DataEntry_DoNotUse*>(&_SecretData_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vault.v1alpha1.SecretData.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vault.v1alpha1.SecretData.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SecretData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.SecretData) */ {
 public:
  inline SecretData() : SecretData(nullptr) {}
  ~SecretData() override;
  explicit constexpr SecretData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecretData(const SecretData& from);
  SecretData(SecretData&& from) noexcept
    : SecretData() {
    *this = ::std::move(from);
  }

  inline SecretData& operator=(const SecretData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecretData& operator=(SecretData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecretData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecretData* internal_default_instance() {
    return reinterpret_cast<const SecretData*>(
               &_SecretData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SecretData& a, SecretData& b) {
    a.Swap(&b);
  }
  inline void Swap(SecretData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecretData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecretData* New() const final {
    return new SecretData();
  }

  SecretData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecretData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecretData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecretData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecretData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.SecretData";
  }
  protected:
  explicit SecretData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, string> data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.SecretData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SecretData_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecretWarnings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.SecretWarnings) */ {
 public:
  inline SecretWarnings() : SecretWarnings(nullptr) {}
  ~SecretWarnings() override;
  explicit constexpr SecretWarnings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecretWarnings(const SecretWarnings& from);
  SecretWarnings(SecretWarnings&& from) noexcept
    : SecretWarnings() {
    *this = ::std::move(from);
  }

  inline SecretWarnings& operator=(const SecretWarnings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecretWarnings& operator=(SecretWarnings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecretWarnings& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecretWarnings* internal_default_instance() {
    return reinterpret_cast<const SecretWarnings*>(
               &_SecretWarnings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecretWarnings& a, SecretWarnings& b) {
    a.Swap(&b);
  }
  inline void Swap(SecretWarnings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecretWarnings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecretWarnings* New() const final {
    return new SecretWarnings();
  }

  SecretWarnings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecretWarnings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecretWarnings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecretWarnings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecretWarnings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.SecretWarnings";
  }
  protected:
  explicit SecretWarnings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarningsFieldNumber = 1,
  };
  // repeated string warnings = 1 [json_name = "warnings"];
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;
  public:
  void clear_warnings();
  const std::string& warnings(int index) const;
  std::string* mutable_warnings(int index);
  void set_warnings(int index, const std::string& value);
  void set_warnings(int index, std::string&& value);
  void set_warnings(int index, const char* value);
  void set_warnings(int index, const char* value, size_t size);
  std::string* add_warnings();
  void add_warnings(const std::string& value);
  void add_warnings(std::string&& value);
  void add_warnings(const char* value);
  void add_warnings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& warnings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_warnings();
  private:
  const std::string& _internal_warnings(int index) const;
  std::string* _internal_add_warnings();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.SecretWarnings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> warnings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class Secret final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.Secret) */ {
 public:
  inline Secret() : Secret(nullptr) {}
  ~Secret() override;
  explicit constexpr Secret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Secret(const Secret& from);
  Secret(Secret&& from) noexcept
    : Secret() {
    *this = ::std::move(from);
  }

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secret& operator=(Secret&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secret& default_instance() {
    return *internal_default_instance();
  }
  static inline const Secret* internal_default_instance() {
    return reinterpret_cast<const Secret*>(
               &_Secret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Secret& a, Secret& b) {
    a.Swap(&b);
  }
  inline void Swap(Secret* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Secret* New() const final {
    return new Secret();
  }

  Secret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Secret>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Secret& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Secret& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Secret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.Secret";
  }
  protected:
  explicit Secret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kLeaseIdFieldNumber = 2,
    kDataFieldNumber = 5,
    kWarningsFieldNumber = 6,
    kLeaseDurationFieldNumber = 3,
    kRenewableFieldNumber = 4,
  };
  // string request_id = 1 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string lease_id = 2 [json_name = "leaseId"];
  void clear_lease_id();
  const std::string& lease_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lease_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lease_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_lease_id();
  void set_allocated_lease_id(std::string* lease_id);
  private:
  const std::string& _internal_lease_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lease_id(const std::string& value);
  std::string* _internal_mutable_lease_id();
  public:

  // .vault.v1alpha1.SecretData data = 5 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vault::v1alpha1::SecretData& data() const;
  PROTOBUF_MUST_USE_RESULT ::vault::v1alpha1::SecretData* release_data();
  ::vault::v1alpha1::SecretData* mutable_data();
  void set_allocated_data(::vault::v1alpha1::SecretData* data);
  private:
  const ::vault::v1alpha1::SecretData& _internal_data() const;
  ::vault::v1alpha1::SecretData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vault::v1alpha1::SecretData* data);
  ::vault::v1alpha1::SecretData* unsafe_arena_release_data();

  // .vault.v1alpha1.SecretWarnings warnings = 6 [json_name = "warnings"];
  bool has_warnings() const;
  private:
  bool _internal_has_warnings() const;
  public:
  void clear_warnings();
  const ::vault::v1alpha1::SecretWarnings& warnings() const;
  PROTOBUF_MUST_USE_RESULT ::vault::v1alpha1::SecretWarnings* release_warnings();
  ::vault::v1alpha1::SecretWarnings* mutable_warnings();
  void set_allocated_warnings(::vault::v1alpha1::SecretWarnings* warnings);
  private:
  const ::vault::v1alpha1::SecretWarnings& _internal_warnings() const;
  ::vault::v1alpha1::SecretWarnings* _internal_mutable_warnings();
  public:
  void unsafe_arena_set_allocated_warnings(
      ::vault::v1alpha1::SecretWarnings* warnings);
  ::vault::v1alpha1::SecretWarnings* unsafe_arena_release_warnings();

  // int64 lease_duration = 3 [json_name = "leaseDuration"];
  void clear_lease_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 lease_duration() const;
  void set_lease_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lease_duration() const;
  void _internal_set_lease_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool renewable = 4 [json_name = "renewable"];
  void clear_renewable();
  bool renewable() const;
  void set_renewable(bool value);
  private:
  bool _internal_renewable() const;
  void _internal_set_renewable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.Secret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lease_id_;
  ::vault::v1alpha1::SecretData* data_;
  ::vault::v1alpha1::SecretWarnings* warnings_;
  ::PROTOBUF_NAMESPACE_ID::int64 lease_duration_;
  bool renewable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class WriteSecretRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.WriteSecretRequest) */ {
 public:
  inline WriteSecretRequest() : WriteSecretRequest(nullptr) {}
  ~WriteSecretRequest() override;
  explicit constexpr WriteSecretRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteSecretRequest(const WriteSecretRequest& from);
  WriteSecretRequest(WriteSecretRequest&& from) noexcept
    : WriteSecretRequest() {
    *this = ::std::move(from);
  }

  inline WriteSecretRequest& operator=(const WriteSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteSecretRequest& operator=(WriteSecretRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteSecretRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteSecretRequest* internal_default_instance() {
    return reinterpret_cast<const WriteSecretRequest*>(
               &_WriteSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteSecretRequest& a, WriteSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteSecretRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteSecretRequest* New() const final {
    return new WriteSecretRequest();
  }

  WriteSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteSecretRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteSecretRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteSecretRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.WriteSecretRequest";
  }
  protected:
  explicit WriteSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.WriteSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class WriteSecretResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.WriteSecretResponse) */ {
 public:
  inline WriteSecretResponse() : WriteSecretResponse(nullptr) {}
  ~WriteSecretResponse() override;
  explicit constexpr WriteSecretResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteSecretResponse(const WriteSecretResponse& from);
  WriteSecretResponse(WriteSecretResponse&& from) noexcept
    : WriteSecretResponse() {
    *this = ::std::move(from);
  }

  inline WriteSecretResponse& operator=(const WriteSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteSecretResponse& operator=(WriteSecretResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteSecretResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteSecretResponse* internal_default_instance() {
    return reinterpret_cast<const WriteSecretResponse*>(
               &_WriteSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WriteSecretResponse& a, WriteSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteSecretResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteSecretResponse* New() const final {
    return new WriteSecretResponse();
  }

  WriteSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteSecretResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteSecretResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteSecretResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.WriteSecretResponse";
  }
  protected:
  explicit WriteSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kMsgFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string msg = 3 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 4 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.WriteSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class ReadSecretRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.ReadSecretRequest) */ {
 public:
  inline ReadSecretRequest() : ReadSecretRequest(nullptr) {}
  ~ReadSecretRequest() override;
  explicit constexpr ReadSecretRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadSecretRequest(const ReadSecretRequest& from);
  ReadSecretRequest(ReadSecretRequest&& from) noexcept
    : ReadSecretRequest() {
    *this = ::std::move(from);
  }

  inline ReadSecretRequest& operator=(const ReadSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadSecretRequest& operator=(ReadSecretRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadSecretRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadSecretRequest* internal_default_instance() {
    return reinterpret_cast<const ReadSecretRequest*>(
               &_ReadSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadSecretRequest& a, ReadSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadSecretRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadSecretRequest* New() const final {
    return new ReadSecretRequest();
  }

  ReadSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadSecretRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadSecretRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadSecretRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.ReadSecretRequest";
  }
  protected:
  explicit ReadSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.ReadSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class ReadSecretResponse_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReadSecretResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReadSecretResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ReadSecretResponse_MetadataEntry_DoNotUse();
  explicit constexpr ReadSecretResponse_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ReadSecretResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ReadSecretResponse_MetadataEntry_DoNotUse& other);
  static const ReadSecretResponse_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ReadSecretResponse_MetadataEntry_DoNotUse*>(&_ReadSecretResponse_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vault.v1alpha1.ReadSecretResponse.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vault.v1alpha1.ReadSecretResponse.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ReadSecretResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.ReadSecretResponse) */ {
 public:
  inline ReadSecretResponse() : ReadSecretResponse(nullptr) {}
  ~ReadSecretResponse() override;
  explicit constexpr ReadSecretResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadSecretResponse(const ReadSecretResponse& from);
  ReadSecretResponse(ReadSecretResponse&& from) noexcept
    : ReadSecretResponse() {
    *this = ::std::move(from);
  }

  inline ReadSecretResponse& operator=(const ReadSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadSecretResponse& operator=(ReadSecretResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadSecretResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadSecretResponse* internal_default_instance() {
    return reinterpret_cast<const ReadSecretResponse*>(
               &_ReadSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadSecretResponse& a, ReadSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadSecretResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadSecretResponse* New() const final {
    return new ReadSecretResponse();
  }

  ReadSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadSecretResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadSecretResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadSecretResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.ReadSecretResponse";
  }
  protected:
  explicit ReadSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // map<string, string> metadata = 3 [json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.ReadSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ReadSecretResponse_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class ListSecretsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.ListSecretsRequest) */ {
 public:
  inline ListSecretsRequest() : ListSecretsRequest(nullptr) {}
  ~ListSecretsRequest() override;
  explicit constexpr ListSecretsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecretsRequest(const ListSecretsRequest& from);
  ListSecretsRequest(ListSecretsRequest&& from) noexcept
    : ListSecretsRequest() {
    *this = ::std::move(from);
  }

  inline ListSecretsRequest& operator=(const ListSecretsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecretsRequest& operator=(ListSecretsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecretsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecretsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSecretsRequest*>(
               &_ListSecretsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListSecretsRequest& a, ListSecretsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecretsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecretsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSecretsRequest* New() const final {
    return new ListSecretsRequest();
  }

  ListSecretsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSecretsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecretsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecretsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecretsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.ListSecretsRequest";
  }
  protected:
  explicit ListSecretsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
  };
  // string prefix = 1 [json_name = "prefix"];
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.ListSecretsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class ListSecretsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.ListSecretsResponse) */ {
 public:
  inline ListSecretsResponse() : ListSecretsResponse(nullptr) {}
  ~ListSecretsResponse() override;
  explicit constexpr ListSecretsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecretsResponse(const ListSecretsResponse& from);
  ListSecretsResponse(ListSecretsResponse&& from) noexcept
    : ListSecretsResponse() {
    *this = ::std::move(from);
  }

  inline ListSecretsResponse& operator=(const ListSecretsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecretsResponse& operator=(ListSecretsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecretsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecretsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSecretsResponse*>(
               &_ListSecretsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListSecretsResponse& a, ListSecretsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecretsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecretsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSecretsResponse* New() const final {
    return new ListSecretsResponse();
  }

  ListSecretsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSecretsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecretsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecretsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecretsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.ListSecretsResponse";
  }
  protected:
  explicit ListSecretsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretFieldNumber = 1,
  };
  // repeated .vault.v1alpha1.Secret secret = 1 [json_name = "secret"];
  int secret_size() const;
  private:
  int _internal_secret_size() const;
  public:
  void clear_secret();
  ::vault::v1alpha1::Secret* mutable_secret(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vault::v1alpha1::Secret >*
      mutable_secret();
  private:
  const ::vault::v1alpha1::Secret& _internal_secret(int index) const;
  ::vault::v1alpha1::Secret* _internal_add_secret();
  public:
  const ::vault::v1alpha1::Secret& secret(int index) const;
  ::vault::v1alpha1::Secret* add_secret();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vault::v1alpha1::Secret >&
      secret() const;

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.ListSecretsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vault::v1alpha1::Secret > secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class DeleteSecretRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.DeleteSecretRequest) */ {
 public:
  inline DeleteSecretRequest() : DeleteSecretRequest(nullptr) {}
  ~DeleteSecretRequest() override;
  explicit constexpr DeleteSecretRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSecretRequest(const DeleteSecretRequest& from);
  DeleteSecretRequest(DeleteSecretRequest&& from) noexcept
    : DeleteSecretRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSecretRequest& operator=(const DeleteSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSecretRequest& operator=(DeleteSecretRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSecretRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSecretRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSecretRequest*>(
               &_DeleteSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteSecretRequest& a, DeleteSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSecretRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSecretRequest* New() const final {
    return new DeleteSecretRequest();
  }

  DeleteSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSecretRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSecretRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSecretRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.DeleteSecretRequest";
  }
  protected:
  explicit DeleteSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.DeleteSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class DeleteSecretResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.DeleteSecretResponse) */ {
 public:
  inline DeleteSecretResponse() : DeleteSecretResponse(nullptr) {}
  ~DeleteSecretResponse() override;
  explicit constexpr DeleteSecretResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSecretResponse(const DeleteSecretResponse& from);
  DeleteSecretResponse(DeleteSecretResponse&& from) noexcept
    : DeleteSecretResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSecretResponse& operator=(const DeleteSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSecretResponse& operator=(DeleteSecretResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSecretResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSecretResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSecretResponse*>(
               &_DeleteSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteSecretResponse& a, DeleteSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSecretResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSecretResponse* New() const final {
    return new DeleteSecretResponse();
  }

  DeleteSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSecretResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSecretResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSecretResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.DeleteSecretResponse";
  }
  protected:
  explicit DeleteSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.DeleteSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SecretData

// map<string, string> data = 1 [json_name = "data"];
inline int SecretData::_internal_data_size() const {
  return data_.size();
}
inline int SecretData::data_size() const {
  return _internal_data_size();
}
inline void SecretData::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SecretData::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SecretData::data() const {
  // @@protoc_insertion_point(field_map:vault.v1alpha1.SecretData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SecretData::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SecretData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:vault.v1alpha1.SecretData.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// SecretWarnings

// repeated string warnings = 1 [json_name = "warnings"];
inline int SecretWarnings::_internal_warnings_size() const {
  return warnings_.size();
}
inline int SecretWarnings::warnings_size() const {
  return _internal_warnings_size();
}
inline void SecretWarnings::clear_warnings() {
  warnings_.Clear();
}
inline std::string* SecretWarnings::add_warnings() {
  std::string* _s = _internal_add_warnings();
  // @@protoc_insertion_point(field_add_mutable:vault.v1alpha1.SecretWarnings.warnings)
  return _s;
}
inline const std::string& SecretWarnings::_internal_warnings(int index) const {
  return warnings_.Get(index);
}
inline const std::string& SecretWarnings::warnings(int index) const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.SecretWarnings.warnings)
  return _internal_warnings(index);
}
inline std::string* SecretWarnings::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.SecretWarnings.warnings)
  return warnings_.Mutable(index);
}
inline void SecretWarnings::set_warnings(int index, const std::string& value) {
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::set_warnings(int index, std::string&& value) {
  warnings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::set_warnings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::set_warnings(int index, const char* value, size_t size) {
  warnings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vault.v1alpha1.SecretWarnings.warnings)
}
inline std::string* SecretWarnings::_internal_add_warnings() {
  return warnings_.Add();
}
inline void SecretWarnings::add_warnings(const std::string& value) {
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::add_warnings(std::string&& value) {
  warnings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::add_warnings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::add_warnings(const char* value, size_t size) {
  warnings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vault.v1alpha1.SecretWarnings.warnings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SecretWarnings::warnings() const {
  // @@protoc_insertion_point(field_list:vault.v1alpha1.SecretWarnings.warnings)
  return warnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SecretWarnings::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:vault.v1alpha1.SecretWarnings.warnings)
  return &warnings_;
}

// -------------------------------------------------------------------

// Secret

// string request_id = 1 [json_name = "requestId"];
inline void Secret::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& Secret::request_id() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Secret::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.request_id)
}
inline std::string* Secret::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.request_id)
  return _s;
}
inline const std::string& Secret::_internal_request_id() const {
  return request_id_.Get();
}
inline void Secret::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Secret::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Secret::release_request_id() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Secret::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.request_id)
}

// string lease_id = 2 [json_name = "leaseId"];
inline void Secret::clear_lease_id() {
  lease_id_.ClearToEmpty();
}
inline const std::string& Secret::lease_id() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.lease_id)
  return _internal_lease_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Secret::set_lease_id(ArgT0&& arg0, ArgT... args) {
 
 lease_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.lease_id)
}
inline std::string* Secret::mutable_lease_id() {
  std::string* _s = _internal_mutable_lease_id();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.lease_id)
  return _s;
}
inline const std::string& Secret::_internal_lease_id() const {
  return lease_id_.Get();
}
inline void Secret::_internal_set_lease_id(const std::string& value) {
  
  lease_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Secret::_internal_mutable_lease_id() {
  
  return lease_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Secret::release_lease_id() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.lease_id)
  return lease_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Secret::set_allocated_lease_id(std::string* lease_id) {
  if (lease_id != nullptr) {
    
  } else {
    
  }
  lease_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lease_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.lease_id)
}

// int64 lease_duration = 3 [json_name = "leaseDuration"];
inline void Secret::clear_lease_duration() {
  lease_duration_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Secret::_internal_lease_duration() const {
  return lease_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Secret::lease_duration() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.lease_duration)
  return _internal_lease_duration();
}
inline void Secret::_internal_set_lease_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lease_duration_ = value;
}
inline void Secret::set_lease_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lease_duration(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.lease_duration)
}

// bool renewable = 4 [json_name = "renewable"];
inline void Secret::clear_renewable() {
  renewable_ = false;
}
inline bool Secret::_internal_renewable() const {
  return renewable_;
}
inline bool Secret::renewable() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.renewable)
  return _internal_renewable();
}
inline void Secret::_internal_set_renewable(bool value) {
  
  renewable_ = value;
}
inline void Secret::set_renewable(bool value) {
  _internal_set_renewable(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.renewable)
}

// .vault.v1alpha1.SecretData data = 5 [json_name = "data"];
inline bool Secret::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Secret::has_data() const {
  return _internal_has_data();
}
inline void Secret::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::vault::v1alpha1::SecretData& Secret::_internal_data() const {
  const ::vault::v1alpha1::SecretData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vault::v1alpha1::SecretData&>(
      ::vault::v1alpha1::_SecretData_default_instance_);
}
inline const ::vault::v1alpha1::SecretData& Secret::data() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.data)
  return _internal_data();
}
inline void Secret::unsafe_arena_set_allocated_data(
    ::vault::v1alpha1::SecretData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vault.v1alpha1.Secret.data)
}
inline ::vault::v1alpha1::SecretData* Secret::release_data() {
  
  ::vault::v1alpha1::SecretData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vault::v1alpha1::SecretData* Secret::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.data)
  
  ::vault::v1alpha1::SecretData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vault::v1alpha1::SecretData* Secret::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vault::v1alpha1::SecretData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::vault::v1alpha1::SecretData* Secret::mutable_data() {
  ::vault::v1alpha1::SecretData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.data)
  return _msg;
}
inline void Secret::set_allocated_data(::vault::v1alpha1::SecretData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vault::v1alpha1::SecretData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.data)
}

// .vault.v1alpha1.SecretWarnings warnings = 6 [json_name = "warnings"];
inline bool Secret::_internal_has_warnings() const {
  return this != internal_default_instance() && warnings_ != nullptr;
}
inline bool Secret::has_warnings() const {
  return _internal_has_warnings();
}
inline void Secret::clear_warnings() {
  if (GetArenaForAllocation() == nullptr && warnings_ != nullptr) {
    delete warnings_;
  }
  warnings_ = nullptr;
}
inline const ::vault::v1alpha1::SecretWarnings& Secret::_internal_warnings() const {
  const ::vault::v1alpha1::SecretWarnings* p = warnings_;
  return p != nullptr ? *p : reinterpret_cast<const ::vault::v1alpha1::SecretWarnings&>(
      ::vault::v1alpha1::_SecretWarnings_default_instance_);
}
inline const ::vault::v1alpha1::SecretWarnings& Secret::warnings() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.warnings)
  return _internal_warnings();
}
inline void Secret::unsafe_arena_set_allocated_warnings(
    ::vault::v1alpha1::SecretWarnings* warnings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(warnings_);
  }
  warnings_ = warnings;
  if (warnings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vault.v1alpha1.Secret.warnings)
}
inline ::vault::v1alpha1::SecretWarnings* Secret::release_warnings() {
  
  ::vault::v1alpha1::SecretWarnings* temp = warnings_;
  warnings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vault::v1alpha1::SecretWarnings* Secret::unsafe_arena_release_warnings() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.warnings)
  
  ::vault::v1alpha1::SecretWarnings* temp = warnings_;
  warnings_ = nullptr;
  return temp;
}
inline ::vault::v1alpha1::SecretWarnings* Secret::_internal_mutable_warnings() {
  
  if (warnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::vault::v1alpha1::SecretWarnings>(GetArenaForAllocation());
    warnings_ = p;
  }
  return warnings_;
}
inline ::vault::v1alpha1::SecretWarnings* Secret::mutable_warnings() {
  ::vault::v1alpha1::SecretWarnings* _msg = _internal_mutable_warnings();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.warnings)
  return _msg;
}
inline void Secret::set_allocated_warnings(::vault::v1alpha1::SecretWarnings* warnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete warnings_;
  }
  if (warnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vault::v1alpha1::SecretWarnings>::GetOwningArena(warnings);
    if (message_arena != submessage_arena) {
      warnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warnings, submessage_arena);
    }
    
  } else {
    
  }
  warnings_ = warnings;
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.warnings)
}

// -------------------------------------------------------------------

// WriteSecretRequest

// string name = 1 [json_name = "name"];
inline void WriteSecretRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WriteSecretRequest::name() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.WriteSecretRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteSecretRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.WriteSecretRequest.name)
}
inline std::string* WriteSecretRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.WriteSecretRequest.name)
  return _s;
}
inline const std::string& WriteSecretRequest::_internal_name() const {
  return name_.Get();
}
inline void WriteSecretRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteSecretRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteSecretRequest::release_name() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.WriteSecretRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteSecretRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.WriteSecretRequest.name)
}

// string value = 2 [json_name = "value"];
inline void WriteSecretRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& WriteSecretRequest::value() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.WriteSecretRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteSecretRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.WriteSecretRequest.value)
}
inline std::string* WriteSecretRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.WriteSecretRequest.value)
  return _s;
}
inline const std::string& WriteSecretRequest::_internal_value() const {
  return value_.Get();
}
inline void WriteSecretRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteSecretRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteSecretRequest::release_value() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.WriteSecretRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteSecretRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.WriteSecretRequest.value)
}

// -------------------------------------------------------------------

// WriteSecretResponse

// string name = 1 [json_name = "name"];
inline void WriteSecretResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WriteSecretResponse::name() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.WriteSecretResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteSecretResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.WriteSecretResponse.name)
}
inline std::string* WriteSecretResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.WriteSecretResponse.name)
  return _s;
}
inline const std::string& WriteSecretResponse::_internal_name() const {
  return name_.Get();
}
inline void WriteSecretResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::release_name() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.WriteSecretResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteSecretResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.WriteSecretResponse.name)
}

// string value = 2 [json_name = "value"];
inline void WriteSecretResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& WriteSecretResponse::value() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.WriteSecretResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteSecretResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.WriteSecretResponse.value)
}
inline std::string* WriteSecretResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.WriteSecretResponse.value)
  return _s;
}
inline const std::string& WriteSecretResponse::_internal_value() const {
  return value_.Get();
}
inline void WriteSecretResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::release_value() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.WriteSecretResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteSecretResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.WriteSecretResponse.value)
}

// string msg = 3 [json_name = "msg"];
inline void WriteSecretResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& WriteSecretResponse::msg() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.WriteSecretResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteSecretResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.WriteSecretResponse.msg)
}
inline std::string* WriteSecretResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.WriteSecretResponse.msg)
  return _s;
}
inline const std::string& WriteSecretResponse::_internal_msg() const {
  return msg_.Get();
}
inline void WriteSecretResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::release_msg() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.WriteSecretResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteSecretResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.WriteSecretResponse.msg)
}

// string error = 4 [json_name = "error"];
inline void WriteSecretResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& WriteSecretResponse::error() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.WriteSecretResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteSecretResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.WriteSecretResponse.error)
}
inline std::string* WriteSecretResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.WriteSecretResponse.error)
  return _s;
}
inline const std::string& WriteSecretResponse::_internal_error() const {
  return error_.Get();
}
inline void WriteSecretResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteSecretResponse::release_error() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.WriteSecretResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteSecretResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.WriteSecretResponse.error)
}

// -------------------------------------------------------------------

// ReadSecretRequest

// string name = 1 [json_name = "name"];
inline void ReadSecretRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReadSecretRequest::name() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.ReadSecretRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadSecretRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.ReadSecretRequest.name)
}
inline std::string* ReadSecretRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.ReadSecretRequest.name)
  return _s;
}
inline const std::string& ReadSecretRequest::_internal_name() const {
  return name_.Get();
}
inline void ReadSecretRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadSecretRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadSecretRequest::release_name() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.ReadSecretRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadSecretRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.ReadSecretRequest.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ReadSecretResponse

// string name = 1 [json_name = "name"];
inline void ReadSecretResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReadSecretResponse::name() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.ReadSecretResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadSecretResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.ReadSecretResponse.name)
}
inline std::string* ReadSecretResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.ReadSecretResponse.name)
  return _s;
}
inline const std::string& ReadSecretResponse::_internal_name() const {
  return name_.Get();
}
inline void ReadSecretResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadSecretResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadSecretResponse::release_name() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.ReadSecretResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadSecretResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.ReadSecretResponse.name)
}

// string value = 2 [json_name = "value"];
inline void ReadSecretResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& ReadSecretResponse::value() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.ReadSecretResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadSecretResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.ReadSecretResponse.value)
}
inline std::string* ReadSecretResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.ReadSecretResponse.value)
  return _s;
}
inline const std::string& ReadSecretResponse::_internal_value() const {
  return value_.Get();
}
inline void ReadSecretResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadSecretResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadSecretResponse::release_value() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.ReadSecretResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadSecretResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.ReadSecretResponse.value)
}

// map<string, string> metadata = 3 [json_name = "metadata"];
inline int ReadSecretResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int ReadSecretResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void ReadSecretResponse::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ReadSecretResponse::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ReadSecretResponse::metadata() const {
  // @@protoc_insertion_point(field_map:vault.v1alpha1.ReadSecretResponse.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ReadSecretResponse::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ReadSecretResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:vault.v1alpha1.ReadSecretResponse.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// ListSecretsRequest

// string prefix = 1 [json_name = "prefix"];
inline void ListSecretsRequest::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& ListSecretsRequest::prefix() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.ListSecretsRequest.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecretsRequest::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.ListSecretsRequest.prefix)
}
inline std::string* ListSecretsRequest::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.ListSecretsRequest.prefix)
  return _s;
}
inline const std::string& ListSecretsRequest::_internal_prefix() const {
  return prefix_.Get();
}
inline void ListSecretsRequest::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecretsRequest::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecretsRequest::release_prefix() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.ListSecretsRequest.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecretsRequest::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.ListSecretsRequest.prefix)
}

// -------------------------------------------------------------------

// ListSecretsResponse

// repeated .vault.v1alpha1.Secret secret = 1 [json_name = "secret"];
inline int ListSecretsResponse::_internal_secret_size() const {
  return secret_.size();
}
inline int ListSecretsResponse::secret_size() const {
  return _internal_secret_size();
}
inline void ListSecretsResponse::clear_secret() {
  secret_.Clear();
}
inline ::vault::v1alpha1::Secret* ListSecretsResponse::mutable_secret(int index) {
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.ListSecretsResponse.secret)
  return secret_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vault::v1alpha1::Secret >*
ListSecretsResponse::mutable_secret() {
  // @@protoc_insertion_point(field_mutable_list:vault.v1alpha1.ListSecretsResponse.secret)
  return &secret_;
}
inline const ::vault::v1alpha1::Secret& ListSecretsResponse::_internal_secret(int index) const {
  return secret_.Get(index);
}
inline const ::vault::v1alpha1::Secret& ListSecretsResponse::secret(int index) const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.ListSecretsResponse.secret)
  return _internal_secret(index);
}
inline ::vault::v1alpha1::Secret* ListSecretsResponse::_internal_add_secret() {
  return secret_.Add();
}
inline ::vault::v1alpha1::Secret* ListSecretsResponse::add_secret() {
  ::vault::v1alpha1::Secret* _add = _internal_add_secret();
  // @@protoc_insertion_point(field_add:vault.v1alpha1.ListSecretsResponse.secret)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vault::v1alpha1::Secret >&
ListSecretsResponse::secret() const {
  // @@protoc_insertion_point(field_list:vault.v1alpha1.ListSecretsResponse.secret)
  return secret_;
}

// -------------------------------------------------------------------

// DeleteSecretRequest

// string name = 1 [json_name = "name"];
inline void DeleteSecretRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteSecretRequest::name() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.DeleteSecretRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSecretRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.DeleteSecretRequest.name)
}
inline std::string* DeleteSecretRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.DeleteSecretRequest.name)
  return _s;
}
inline const std::string& DeleteSecretRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteSecretRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSecretRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSecretRequest::release_name() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.DeleteSecretRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSecretRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.DeleteSecretRequest.name)
}

// -------------------------------------------------------------------

// DeleteSecretResponse

// string name = 1 [json_name = "name"];
inline void DeleteSecretResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteSecretResponse::name() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.DeleteSecretResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSecretResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.DeleteSecretResponse.name)
}
inline std::string* DeleteSecretResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.DeleteSecretResponse.name)
  return _s;
}
inline const std::string& DeleteSecretResponse::_internal_name() const {
  return name_.Get();
}
inline void DeleteSecretResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSecretResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSecretResponse::release_name() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.DeleteSecretResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSecretResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.DeleteSecretResponse.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace vault

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vault_2fv1alpha1_2fvault_2eproto
