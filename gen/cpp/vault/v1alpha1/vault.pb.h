// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vault/v1alpha1/vault.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vault_2fv1alpha1_2fvault_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vault_2fv1alpha1_2fvault_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vault_2fv1alpha1_2fvault_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vault_2fv1alpha1_2fvault_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vault_2fv1alpha1_2fvault_2eproto;
namespace vault {
namespace v1alpha1 {
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Secret;
struct SecretDefaultTypeInternal;
extern SecretDefaultTypeInternal _Secret_default_instance_;
class SecretData;
struct SecretDataDefaultTypeInternal;
extern SecretDataDefaultTypeInternal _SecretData_default_instance_;
class SecretData_DataEntry_DoNotUse;
struct SecretData_DataEntry_DoNotUseDefaultTypeInternal;
extern SecretData_DataEntry_DoNotUseDefaultTypeInternal _SecretData_DataEntry_DoNotUse_default_instance_;
class SecretWarnings;
struct SecretWarningsDefaultTypeInternal;
extern SecretWarningsDefaultTypeInternal _SecretWarnings_default_instance_;
class TokenIntegration;
struct TokenIntegrationDefaultTypeInternal;
extern TokenIntegrationDefaultTypeInternal _TokenIntegration_default_instance_;
}  // namespace v1alpha1
}  // namespace vault
PROTOBUF_NAMESPACE_OPEN
template<> ::vault::v1alpha1::Metadata* Arena::CreateMaybeMessage<::vault::v1alpha1::Metadata>(Arena*);
template<> ::vault::v1alpha1::Secret* Arena::CreateMaybeMessage<::vault::v1alpha1::Secret>(Arena*);
template<> ::vault::v1alpha1::SecretData* Arena::CreateMaybeMessage<::vault::v1alpha1::SecretData>(Arena*);
template<> ::vault::v1alpha1::SecretData_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::vault::v1alpha1::SecretData_DataEntry_DoNotUse>(Arena*);
template<> ::vault::v1alpha1::SecretWarnings* Arena::CreateMaybeMessage<::vault::v1alpha1::SecretWarnings>(Arena*);
template<> ::vault::v1alpha1::TokenIntegration* Arena::CreateMaybeMessage<::vault::v1alpha1::TokenIntegration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vault {
namespace v1alpha1 {

// ===================================================================

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return new Metadata();
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kCreatedTimeFieldNumber = 2,
    kCustomMetadataFieldNumber = 3,
    kDeletionTimeFieldNumber = 4,
    kDestroyedFieldNumber = 5,
    kVersionFieldNumber = 6,
  };
  // string key = 1 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string created_time = 2 [json_name = "createdTime"];
  void clear_created_time();
  const std::string& created_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_time();
  void set_allocated_created_time(std::string* created_time);
  private:
  const std::string& _internal_created_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_time(const std::string& value);
  std::string* _internal_mutable_created_time();
  public:

  // string custom_metadata = 3 [json_name = "customMetadata"];
  void clear_custom_metadata();
  const std::string& custom_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_metadata();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_metadata();
  void set_allocated_custom_metadata(std::string* custom_metadata);
  private:
  const std::string& _internal_custom_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_metadata(const std::string& value);
  std::string* _internal_mutable_custom_metadata();
  public:

  // string deletion_time = 4 [json_name = "deletionTime"];
  void clear_deletion_time();
  const std::string& deletion_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deletion_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deletion_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_deletion_time();
  void set_allocated_deletion_time(std::string* deletion_time);
  private:
  const std::string& _internal_deletion_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deletion_time(const std::string& value);
  std::string* _internal_mutable_deletion_time();
  public:

  // bool destroyed = 5 [json_name = "destroyed"];
  void clear_destroyed();
  bool destroyed() const;
  void set_destroyed(bool value);
  private:
  bool _internal_destroyed() const;
  void _internal_set_destroyed(bool value);
  public:

  // int32 version = 6 [json_name = "version"];
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deletion_time_;
  bool destroyed_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecretData_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecretData_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecretData_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SecretData_DataEntry_DoNotUse();
  explicit constexpr SecretData_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SecretData_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SecretData_DataEntry_DoNotUse& other);
  static const SecretData_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SecretData_DataEntry_DoNotUse*>(&_SecretData_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vault.v1alpha1.SecretData.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vault.v1alpha1.SecretData.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SecretData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.SecretData) */ {
 public:
  inline SecretData() : SecretData(nullptr) {}
  ~SecretData() override;
  explicit constexpr SecretData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecretData(const SecretData& from);
  SecretData(SecretData&& from) noexcept
    : SecretData() {
    *this = ::std::move(from);
  }

  inline SecretData& operator=(const SecretData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecretData& operator=(SecretData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecretData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecretData* internal_default_instance() {
    return reinterpret_cast<const SecretData*>(
               &_SecretData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecretData& a, SecretData& b) {
    a.Swap(&b);
  }
  inline void Swap(SecretData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecretData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecretData* New() const final {
    return new SecretData();
  }

  SecretData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecretData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecretData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecretData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecretData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.SecretData";
  }
  protected:
  explicit SecretData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, string> data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.SecretData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SecretData_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecretWarnings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.SecretWarnings) */ {
 public:
  inline SecretWarnings() : SecretWarnings(nullptr) {}
  ~SecretWarnings() override;
  explicit constexpr SecretWarnings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecretWarnings(const SecretWarnings& from);
  SecretWarnings(SecretWarnings&& from) noexcept
    : SecretWarnings() {
    *this = ::std::move(from);
  }

  inline SecretWarnings& operator=(const SecretWarnings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecretWarnings& operator=(SecretWarnings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecretWarnings& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecretWarnings* internal_default_instance() {
    return reinterpret_cast<const SecretWarnings*>(
               &_SecretWarnings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SecretWarnings& a, SecretWarnings& b) {
    a.Swap(&b);
  }
  inline void Swap(SecretWarnings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecretWarnings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecretWarnings* New() const final {
    return new SecretWarnings();
  }

  SecretWarnings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecretWarnings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecretWarnings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecretWarnings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecretWarnings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.SecretWarnings";
  }
  protected:
  explicit SecretWarnings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarningsFieldNumber = 1,
  };
  // repeated string warnings = 1 [json_name = "warnings"];
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;
  public:
  void clear_warnings();
  const std::string& warnings(int index) const;
  std::string* mutable_warnings(int index);
  void set_warnings(int index, const std::string& value);
  void set_warnings(int index, std::string&& value);
  void set_warnings(int index, const char* value);
  void set_warnings(int index, const char* value, size_t size);
  std::string* add_warnings();
  void add_warnings(const std::string& value);
  void add_warnings(std::string&& value);
  void add_warnings(const char* value);
  void add_warnings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& warnings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_warnings();
  private:
  const std::string& _internal_warnings(int index) const;
  std::string* _internal_add_warnings();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.SecretWarnings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> warnings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class Secret final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.Secret) */ {
 public:
  inline Secret() : Secret(nullptr) {}
  ~Secret() override;
  explicit constexpr Secret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Secret(const Secret& from);
  Secret(Secret&& from) noexcept
    : Secret() {
    *this = ::std::move(from);
  }

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secret& operator=(Secret&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secret& default_instance() {
    return *internal_default_instance();
  }
  static inline const Secret* internal_default_instance() {
    return reinterpret_cast<const Secret*>(
               &_Secret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Secret& a, Secret& b) {
    a.Swap(&b);
  }
  inline void Swap(Secret* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Secret* New() const final {
    return new Secret();
  }

  Secret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Secret>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Secret& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Secret& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Secret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.Secret";
  }
  protected:
  explicit Secret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 3,
    kNamespaceFieldNumber = 4,
    kNameFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kDataFieldNumber = 7,
    kWarningsFieldNumber = 8,
    kOrganizationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
  };
  // string application_id = 3 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string namespace = 4 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string name = 5 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vault.v1alpha1.Metadata metadata = 6 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::vault::v1alpha1::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::vault::v1alpha1::Metadata* release_metadata();
  ::vault::v1alpha1::Metadata* mutable_metadata();
  void set_allocated_metadata(::vault::v1alpha1::Metadata* metadata);
  private:
  const ::vault::v1alpha1::Metadata& _internal_metadata() const;
  ::vault::v1alpha1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::vault::v1alpha1::Metadata* metadata);
  ::vault::v1alpha1::Metadata* unsafe_arena_release_metadata();

  // .vault.v1alpha1.SecretData data = 7 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vault::v1alpha1::SecretData& data() const;
  PROTOBUF_MUST_USE_RESULT ::vault::v1alpha1::SecretData* release_data();
  ::vault::v1alpha1::SecretData* mutable_data();
  void set_allocated_data(::vault::v1alpha1::SecretData* data);
  private:
  const ::vault::v1alpha1::SecretData& _internal_data() const;
  ::vault::v1alpha1::SecretData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vault::v1alpha1::SecretData* data);
  ::vault::v1alpha1::SecretData* unsafe_arena_release_data();

  // .vault.v1alpha1.SecretWarnings warnings = 8 [json_name = "warnings"];
  bool has_warnings() const;
  private:
  bool _internal_has_warnings() const;
  public:
  void clear_warnings();
  const ::vault::v1alpha1::SecretWarnings& warnings() const;
  PROTOBUF_MUST_USE_RESULT ::vault::v1alpha1::SecretWarnings* release_warnings();
  ::vault::v1alpha1::SecretWarnings* mutable_warnings();
  void set_allocated_warnings(::vault::v1alpha1::SecretWarnings* warnings);
  private:
  const ::vault::v1alpha1::SecretWarnings& _internal_warnings() const;
  ::vault::v1alpha1::SecretWarnings* _internal_mutable_warnings();
  public:
  void unsafe_arena_set_allocated_warnings(
      ::vault::v1alpha1::SecretWarnings* warnings);
  ::vault::v1alpha1::SecretWarnings* unsafe_arena_release_warnings();

  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.Secret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::vault::v1alpha1::Metadata* metadata_;
  ::vault::v1alpha1::SecretData* data_;
  ::vault::v1alpha1::SecretWarnings* warnings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class TokenIntegration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vault.v1alpha1.TokenIntegration) */ {
 public:
  inline TokenIntegration() : TokenIntegration(nullptr) {}
  ~TokenIntegration() override;
  explicit constexpr TokenIntegration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenIntegration(const TokenIntegration& from);
  TokenIntegration(TokenIntegration&& from) noexcept
    : TokenIntegration() {
    *this = ::std::move(from);
  }

  inline TokenIntegration& operator=(const TokenIntegration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenIntegration& operator=(TokenIntegration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenIntegration& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenIntegration* internal_default_instance() {
    return reinterpret_cast<const TokenIntegration*>(
               &_TokenIntegration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TokenIntegration& a, TokenIntegration& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenIntegration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenIntegration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenIntegration* New() const final {
    return new TokenIntegration();
  }

  TokenIntegration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenIntegration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenIntegration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TokenIntegration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenIntegration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vault.v1alpha1.TokenIntegration";
  }
  protected:
  explicit TokenIntegration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kIntegrationIdFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string integration_id = 2 [json_name = "integrationId"];
  void clear_integration_id();
  const std::string& integration_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration_id();
  void set_allocated_integration_id(std::string* integration_id);
  private:
  const std::string& _internal_integration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_id(const std::string& value);
  std::string* _internal_mutable_integration_id();
  public:

  // string token = 3 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:vault.v1alpha1.TokenIntegration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vault_2fv1alpha1_2fvault_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Metadata

// string key = 1 [json_name = "key"];
inline void Metadata::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Metadata::key() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Metadata.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Metadata.key)
}
inline std::string* Metadata::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Metadata.key)
  return _s;
}
inline const std::string& Metadata::_internal_key() const {
  return key_.Get();
}
inline void Metadata::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_key() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Metadata.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Metadata.key)
}

// string created_time = 2 [json_name = "createdTime"];
inline void Metadata::clear_created_time() {
  created_time_.ClearToEmpty();
}
inline const std::string& Metadata::created_time() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Metadata.created_time)
  return _internal_created_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_created_time(ArgT0&& arg0, ArgT... args) {
 
 created_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Metadata.created_time)
}
inline std::string* Metadata::mutable_created_time() {
  std::string* _s = _internal_mutable_created_time();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Metadata.created_time)
  return _s;
}
inline const std::string& Metadata::_internal_created_time() const {
  return created_time_.Get();
}
inline void Metadata::_internal_set_created_time(const std::string& value) {
  
  created_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_created_time() {
  
  return created_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_created_time() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Metadata.created_time)
  return created_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_created_time(std::string* created_time) {
  if (created_time != nullptr) {
    
  } else {
    
  }
  created_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Metadata.created_time)
}

// string custom_metadata = 3 [json_name = "customMetadata"];
inline void Metadata::clear_custom_metadata() {
  custom_metadata_.ClearToEmpty();
}
inline const std::string& Metadata::custom_metadata() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Metadata.custom_metadata)
  return _internal_custom_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_custom_metadata(ArgT0&& arg0, ArgT... args) {
 
 custom_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Metadata.custom_metadata)
}
inline std::string* Metadata::mutable_custom_metadata() {
  std::string* _s = _internal_mutable_custom_metadata();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Metadata.custom_metadata)
  return _s;
}
inline const std::string& Metadata::_internal_custom_metadata() const {
  return custom_metadata_.Get();
}
inline void Metadata::_internal_set_custom_metadata(const std::string& value) {
  
  custom_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_custom_metadata() {
  
  return custom_metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_custom_metadata() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Metadata.custom_metadata)
  return custom_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_custom_metadata(std::string* custom_metadata) {
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_metadata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Metadata.custom_metadata)
}

// string deletion_time = 4 [json_name = "deletionTime"];
inline void Metadata::clear_deletion_time() {
  deletion_time_.ClearToEmpty();
}
inline const std::string& Metadata::deletion_time() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Metadata.deletion_time)
  return _internal_deletion_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_deletion_time(ArgT0&& arg0, ArgT... args) {
 
 deletion_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Metadata.deletion_time)
}
inline std::string* Metadata::mutable_deletion_time() {
  std::string* _s = _internal_mutable_deletion_time();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Metadata.deletion_time)
  return _s;
}
inline const std::string& Metadata::_internal_deletion_time() const {
  return deletion_time_.Get();
}
inline void Metadata::_internal_set_deletion_time(const std::string& value) {
  
  deletion_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_deletion_time() {
  
  return deletion_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_deletion_time() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Metadata.deletion_time)
  return deletion_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_deletion_time(std::string* deletion_time) {
  if (deletion_time != nullptr) {
    
  } else {
    
  }
  deletion_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deletion_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Metadata.deletion_time)
}

// bool destroyed = 5 [json_name = "destroyed"];
inline void Metadata::clear_destroyed() {
  destroyed_ = false;
}
inline bool Metadata::_internal_destroyed() const {
  return destroyed_;
}
inline bool Metadata::destroyed() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Metadata.destroyed)
  return _internal_destroyed();
}
inline void Metadata::_internal_set_destroyed(bool value) {
  
  destroyed_ = value;
}
inline void Metadata::set_destroyed(bool value) {
  _internal_set_destroyed(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Metadata.destroyed)
}

// int32 version = 6 [json_name = "version"];
inline void Metadata::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metadata::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metadata::version() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Metadata.version)
  return _internal_version();
}
inline void Metadata::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void Metadata::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Metadata.version)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SecretData

// map<string, string> data = 1 [json_name = "data"];
inline int SecretData::_internal_data_size() const {
  return data_.size();
}
inline int SecretData::data_size() const {
  return _internal_data_size();
}
inline void SecretData::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SecretData::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SecretData::data() const {
  // @@protoc_insertion_point(field_map:vault.v1alpha1.SecretData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SecretData::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SecretData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:vault.v1alpha1.SecretData.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// SecretWarnings

// repeated string warnings = 1 [json_name = "warnings"];
inline int SecretWarnings::_internal_warnings_size() const {
  return warnings_.size();
}
inline int SecretWarnings::warnings_size() const {
  return _internal_warnings_size();
}
inline void SecretWarnings::clear_warnings() {
  warnings_.Clear();
}
inline std::string* SecretWarnings::add_warnings() {
  std::string* _s = _internal_add_warnings();
  // @@protoc_insertion_point(field_add_mutable:vault.v1alpha1.SecretWarnings.warnings)
  return _s;
}
inline const std::string& SecretWarnings::_internal_warnings(int index) const {
  return warnings_.Get(index);
}
inline const std::string& SecretWarnings::warnings(int index) const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.SecretWarnings.warnings)
  return _internal_warnings(index);
}
inline std::string* SecretWarnings::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.SecretWarnings.warnings)
  return warnings_.Mutable(index);
}
inline void SecretWarnings::set_warnings(int index, const std::string& value) {
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::set_warnings(int index, std::string&& value) {
  warnings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::set_warnings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::set_warnings(int index, const char* value, size_t size) {
  warnings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vault.v1alpha1.SecretWarnings.warnings)
}
inline std::string* SecretWarnings::_internal_add_warnings() {
  return warnings_.Add();
}
inline void SecretWarnings::add_warnings(const std::string& value) {
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::add_warnings(std::string&& value) {
  warnings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::add_warnings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vault.v1alpha1.SecretWarnings.warnings)
}
inline void SecretWarnings::add_warnings(const char* value, size_t size) {
  warnings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vault.v1alpha1.SecretWarnings.warnings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SecretWarnings::warnings() const {
  // @@protoc_insertion_point(field_list:vault.v1alpha1.SecretWarnings.warnings)
  return warnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SecretWarnings::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:vault.v1alpha1.SecretWarnings.warnings)
  return &warnings_;
}

// -------------------------------------------------------------------

// Secret

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void Secret::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secret::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secret::organization_id() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.organization_id)
  return _internal_organization_id();
}
inline void Secret::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Secret::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.organization_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void Secret::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secret::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secret::project_id() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.project_id)
  return _internal_project_id();
}
inline void Secret::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Secret::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.project_id)
}

// string application_id = 3 [json_name = "applicationId"];
inline void Secret::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& Secret::application_id() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Secret::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.application_id)
}
inline std::string* Secret::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.application_id)
  return _s;
}
inline const std::string& Secret::_internal_application_id() const {
  return application_id_.Get();
}
inline void Secret::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Secret::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Secret::release_application_id() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Secret::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.application_id)
}

// string namespace = 4 [json_name = "namespace"];
inline void Secret::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& Secret::namespace_() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Secret::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.namespace)
}
inline std::string* Secret::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.namespace)
  return _s;
}
inline const std::string& Secret::_internal_namespace_() const {
  return namespace__.Get();
}
inline void Secret::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Secret::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Secret::release_namespace_() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Secret::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.namespace)
}

// string name = 5 [json_name = "name"];
inline void Secret::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Secret::name() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Secret::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.Secret.name)
}
inline std::string* Secret::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.name)
  return _s;
}
inline const std::string& Secret::_internal_name() const {
  return name_.Get();
}
inline void Secret::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Secret::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Secret::release_name() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Secret::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.name)
}

// .vault.v1alpha1.Metadata metadata = 6 [json_name = "metadata"];
inline bool Secret::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Secret::has_metadata() const {
  return _internal_has_metadata();
}
inline void Secret::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::vault::v1alpha1::Metadata& Secret::_internal_metadata() const {
  const ::vault::v1alpha1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::vault::v1alpha1::Metadata&>(
      ::vault::v1alpha1::_Metadata_default_instance_);
}
inline const ::vault::v1alpha1::Metadata& Secret::metadata() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.metadata)
  return _internal_metadata();
}
inline void Secret::unsafe_arena_set_allocated_metadata(
    ::vault::v1alpha1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vault.v1alpha1.Secret.metadata)
}
inline ::vault::v1alpha1::Metadata* Secret::release_metadata() {
  
  ::vault::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vault::v1alpha1::Metadata* Secret::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.metadata)
  
  ::vault::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::vault::v1alpha1::Metadata* Secret::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::vault::v1alpha1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::vault::v1alpha1::Metadata* Secret::mutable_metadata() {
  ::vault::v1alpha1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.metadata)
  return _msg;
}
inline void Secret::set_allocated_metadata(::vault::v1alpha1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vault::v1alpha1::Metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.metadata)
}

// .vault.v1alpha1.SecretData data = 7 [json_name = "data"];
inline bool Secret::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Secret::has_data() const {
  return _internal_has_data();
}
inline void Secret::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::vault::v1alpha1::SecretData& Secret::_internal_data() const {
  const ::vault::v1alpha1::SecretData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vault::v1alpha1::SecretData&>(
      ::vault::v1alpha1::_SecretData_default_instance_);
}
inline const ::vault::v1alpha1::SecretData& Secret::data() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.data)
  return _internal_data();
}
inline void Secret::unsafe_arena_set_allocated_data(
    ::vault::v1alpha1::SecretData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vault.v1alpha1.Secret.data)
}
inline ::vault::v1alpha1::SecretData* Secret::release_data() {
  
  ::vault::v1alpha1::SecretData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vault::v1alpha1::SecretData* Secret::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.data)
  
  ::vault::v1alpha1::SecretData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vault::v1alpha1::SecretData* Secret::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vault::v1alpha1::SecretData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::vault::v1alpha1::SecretData* Secret::mutable_data() {
  ::vault::v1alpha1::SecretData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.data)
  return _msg;
}
inline void Secret::set_allocated_data(::vault::v1alpha1::SecretData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vault::v1alpha1::SecretData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.data)
}

// .vault.v1alpha1.SecretWarnings warnings = 8 [json_name = "warnings"];
inline bool Secret::_internal_has_warnings() const {
  return this != internal_default_instance() && warnings_ != nullptr;
}
inline bool Secret::has_warnings() const {
  return _internal_has_warnings();
}
inline void Secret::clear_warnings() {
  if (GetArenaForAllocation() == nullptr && warnings_ != nullptr) {
    delete warnings_;
  }
  warnings_ = nullptr;
}
inline const ::vault::v1alpha1::SecretWarnings& Secret::_internal_warnings() const {
  const ::vault::v1alpha1::SecretWarnings* p = warnings_;
  return p != nullptr ? *p : reinterpret_cast<const ::vault::v1alpha1::SecretWarnings&>(
      ::vault::v1alpha1::_SecretWarnings_default_instance_);
}
inline const ::vault::v1alpha1::SecretWarnings& Secret::warnings() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.Secret.warnings)
  return _internal_warnings();
}
inline void Secret::unsafe_arena_set_allocated_warnings(
    ::vault::v1alpha1::SecretWarnings* warnings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(warnings_);
  }
  warnings_ = warnings;
  if (warnings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vault.v1alpha1.Secret.warnings)
}
inline ::vault::v1alpha1::SecretWarnings* Secret::release_warnings() {
  
  ::vault::v1alpha1::SecretWarnings* temp = warnings_;
  warnings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vault::v1alpha1::SecretWarnings* Secret::unsafe_arena_release_warnings() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.Secret.warnings)
  
  ::vault::v1alpha1::SecretWarnings* temp = warnings_;
  warnings_ = nullptr;
  return temp;
}
inline ::vault::v1alpha1::SecretWarnings* Secret::_internal_mutable_warnings() {
  
  if (warnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::vault::v1alpha1::SecretWarnings>(GetArenaForAllocation());
    warnings_ = p;
  }
  return warnings_;
}
inline ::vault::v1alpha1::SecretWarnings* Secret::mutable_warnings() {
  ::vault::v1alpha1::SecretWarnings* _msg = _internal_mutable_warnings();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.Secret.warnings)
  return _msg;
}
inline void Secret::set_allocated_warnings(::vault::v1alpha1::SecretWarnings* warnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete warnings_;
  }
  if (warnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vault::v1alpha1::SecretWarnings>::GetOwningArena(warnings);
    if (message_arena != submessage_arena) {
      warnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warnings, submessage_arena);
    }
    
  } else {
    
  }
  warnings_ = warnings;
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.Secret.warnings)
}

// -------------------------------------------------------------------

// TokenIntegration

// string organization_id = 1 [json_name = "organizationId"];
inline void TokenIntegration::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& TokenIntegration::organization_id() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.TokenIntegration.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenIntegration::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.TokenIntegration.organization_id)
}
inline std::string* TokenIntegration::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.TokenIntegration.organization_id)
  return _s;
}
inline const std::string& TokenIntegration::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void TokenIntegration::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenIntegration::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenIntegration::release_organization_id() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.TokenIntegration.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenIntegration::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.TokenIntegration.organization_id)
}

// string integration_id = 2 [json_name = "integrationId"];
inline void TokenIntegration::clear_integration_id() {
  integration_id_.ClearToEmpty();
}
inline const std::string& TokenIntegration::integration_id() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.TokenIntegration.integration_id)
  return _internal_integration_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenIntegration::set_integration_id(ArgT0&& arg0, ArgT... args) {
 
 integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.TokenIntegration.integration_id)
}
inline std::string* TokenIntegration::mutable_integration_id() {
  std::string* _s = _internal_mutable_integration_id();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.TokenIntegration.integration_id)
  return _s;
}
inline const std::string& TokenIntegration::_internal_integration_id() const {
  return integration_id_.Get();
}
inline void TokenIntegration::_internal_set_integration_id(const std::string& value) {
  
  integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenIntegration::_internal_mutable_integration_id() {
  
  return integration_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenIntegration::release_integration_id() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.TokenIntegration.integration_id)
  return integration_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenIntegration::set_allocated_integration_id(std::string* integration_id) {
  if (integration_id != nullptr) {
    
  } else {
    
  }
  integration_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.TokenIntegration.integration_id)
}

// string token = 3 [json_name = "token"];
inline void TokenIntegration::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& TokenIntegration::token() const {
  // @@protoc_insertion_point(field_get:vault.v1alpha1.TokenIntegration.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenIntegration::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vault.v1alpha1.TokenIntegration.token)
}
inline std::string* TokenIntegration::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:vault.v1alpha1.TokenIntegration.token)
  return _s;
}
inline const std::string& TokenIntegration::_internal_token() const {
  return token_.Get();
}
inline void TokenIntegration::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TokenIntegration::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TokenIntegration::release_token() {
  // @@protoc_insertion_point(field_release:vault.v1alpha1.TokenIntegration.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TokenIntegration::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vault.v1alpha1.TokenIntegration.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace vault

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vault_2fv1alpha1_2fvault_2eproto
