// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vault/v1alpha1/vault_api.proto

#include "vault/v1alpha1/vault_api.pb.h"
#include "vault/v1alpha1/vault_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vault {
namespace v1alpha1 {

static const char* VaultAPIService_method_names[] = {
  "/vault.v1alpha1.VaultAPIService/CreateSecret",
  "/vault.v1alpha1.VaultAPIService/UpdateSecret",
  "/vault.v1alpha1.VaultAPIService/DeleteSecret",
  "/vault.v1alpha1.VaultAPIService/GetSecret",
  "/vault.v1alpha1.VaultAPIService/DeleteOrganization",
};

std::unique_ptr< VaultAPIService::Stub> VaultAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VaultAPIService::Stub> stub(new VaultAPIService::Stub(channel));
  return stub;
}

VaultAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSecret_(VaultAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSecret_(VaultAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSecret_(VaultAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSecret_(VaultAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOrganization_(VaultAPIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VaultAPIService::Stub::CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::vault::v1alpha1::CreateSecretResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSecret_, context, request, response);
}

void VaultAPIService::Stub::experimental_async::CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSecret_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>* VaultAPIService::Stub::AsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::CreateSecretResponse>::Create(channel_.get(), cq, rpcmethod_CreateSecret_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>* VaultAPIService::Stub::PrepareAsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::CreateSecretResponse>::Create(channel_.get(), cq, rpcmethod_CreateSecret_, context, request, false);
}

::grpc::Status VaultAPIService::Stub::UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::vault::v1alpha1::UpdateSecretResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateSecret_, context, request, response);
}

void VaultAPIService::Stub::experimental_async::UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateSecret_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>* VaultAPIService::Stub::AsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::UpdateSecretResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSecret_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>* VaultAPIService::Stub::PrepareAsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::UpdateSecretResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSecret_, context, request, false);
}

::grpc::Status VaultAPIService::Stub::DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::vault::v1alpha1::DeleteSecretResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSecret_, context, request, response);
}

void VaultAPIService::Stub::experimental_async::DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSecret_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* VaultAPIService::Stub::AsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::DeleteSecretResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSecret_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* VaultAPIService::Stub::PrepareAsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::DeleteSecretResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSecret_, context, request, false);
}

::grpc::Status VaultAPIService::Stub::GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::vault::v1alpha1::GetSecretResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSecret_, context, request, response);
}

void VaultAPIService::Stub::experimental_async::GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSecret_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>* VaultAPIService::Stub::AsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::GetSecretResponse>::Create(channel_.get(), cq, rpcmethod_GetSecret_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>* VaultAPIService::Stub::PrepareAsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::GetSecretResponse>::Create(channel_.get(), cq, rpcmethod_GetSecret_, context, request, false);
}

::grpc::Status VaultAPIService::Stub::DeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::vault::v1alpha1::DeleteOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOrganization_, context, request, response);
}

void VaultAPIService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>* VaultAPIService::Stub::AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>* VaultAPIService::Stub::PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, false);
}

VaultAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultAPIService::Service, ::vault::v1alpha1::CreateSecretRequest, ::vault::v1alpha1::CreateSecretResponse>(
          std::mem_fn(&VaultAPIService::Service::CreateSecret), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultAPIService::Service, ::vault::v1alpha1::UpdateSecretRequest, ::vault::v1alpha1::UpdateSecretResponse>(
          std::mem_fn(&VaultAPIService::Service::UpdateSecret), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultAPIService::Service, ::vault::v1alpha1::DeleteSecretRequest, ::vault::v1alpha1::DeleteSecretResponse>(
          std::mem_fn(&VaultAPIService::Service::DeleteSecret), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultAPIService::Service, ::vault::v1alpha1::GetSecretRequest, ::vault::v1alpha1::GetSecretResponse>(
          std::mem_fn(&VaultAPIService::Service::GetSecret), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultAPIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultAPIService::Service, ::vault::v1alpha1::DeleteOrganizationRequest, ::vault::v1alpha1::DeleteOrganizationResponse>(
          std::mem_fn(&VaultAPIService::Service::DeleteOrganization), this)));
}

VaultAPIService::Service::~Service() {
}

::grpc::Status VaultAPIService::Service::CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultAPIService::Service::UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultAPIService::Service::DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultAPIService::Service::GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultAPIService::Service::DeleteOrganization(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vault
}  // namespace v1alpha1

