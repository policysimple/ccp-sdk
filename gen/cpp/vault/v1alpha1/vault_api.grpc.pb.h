// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vault/v1alpha1/vault_api.proto
#ifndef GRPC_vault_2fv1alpha1_2fvault_5fapi_2eproto__INCLUDED
#define GRPC_vault_2fv1alpha1_2fvault_5fapi_2eproto__INCLUDED

#include "vault/v1alpha1/vault_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace vault {
namespace v1alpha1 {

// ======= Metadata =======
// Key                Value
// ---                -----
// created_time       2022-01-21T16:44:14.254178235Z
// custom_metadata    <nil>
// deletion_time      n/a
// destroyed          false
// version            1
//
// ====== Data ======
// Key         Value
// ---         -----
// password    static-password
// username    static-user
//
class VaultAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "vault.v1alpha1.VaultAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::vault::v1alpha1::CreateSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>> AsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>>(AsyncCreateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>> PrepareAsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>>(PrepareAsyncCreateSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::vault::v1alpha1::UpdateSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>> AsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>>(AsyncUpdateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>> PrepareAsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>>(PrepareAsyncUpdateSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::vault::v1alpha1::DeleteSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>> AsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>>(AsyncDeleteSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>> PrepareAsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>>(PrepareAsyncDeleteSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::vault::v1alpha1::GetSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>> AsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>>(AsyncGetSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>> PrepareAsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>>(PrepareAsyncGetSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status ListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::vault::v1alpha1::ListSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::ListSecretResponse>> AsyncListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::ListSecretResponse>>(AsyncListSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::ListSecretResponse>> PrepareAsyncListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::ListSecretResponse>>(PrepareAsyncListSecretRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest* request, ::vault::v1alpha1::ListSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>* AsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>* PrepareAsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>* AsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>* PrepareAsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>* AsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>* PrepareAsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>* AsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>* PrepareAsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::ListSecretResponse>* AsyncListSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::ListSecretResponse>* PrepareAsyncListSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::vault::v1alpha1::CreateSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>> AsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>>(AsyncCreateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>> PrepareAsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>>(PrepareAsyncCreateSecretRaw(context, request, cq));
    }
    ::grpc::Status UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::vault::v1alpha1::UpdateSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>> AsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>>(AsyncUpdateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>> PrepareAsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>>(PrepareAsyncUpdateSecretRaw(context, request, cq));
    }
    ::grpc::Status DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::vault::v1alpha1::DeleteSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>> AsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>>(AsyncDeleteSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>> PrepareAsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>>(PrepareAsyncDeleteSecretRaw(context, request, cq));
    }
    ::grpc::Status GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::vault::v1alpha1::GetSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>> AsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>>(AsyncGetSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>> PrepareAsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>>(PrepareAsyncGetSecretRaw(context, request, cq));
    }
    ::grpc::Status ListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::vault::v1alpha1::ListSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretResponse>> AsyncListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretResponse>>(AsyncListSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretResponse>> PrepareAsyncListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretResponse>>(PrepareAsyncListSecretRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest* request, ::vault::v1alpha1::ListSecretResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>* AsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>* PrepareAsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>* AsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>* PrepareAsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* AsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* PrepareAsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>* AsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>* PrepareAsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretResponse>* AsyncListSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretResponse>* PrepareAsyncListSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSecret_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response);
    virtual ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response);
    virtual ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response);
    virtual ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response);
    virtual ::grpc::Status ListSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::ListSecretRequest* request, ::vault::v1alpha1::ListSecretResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSecret() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSecret(::grpc::ServerContext* context, ::vault::v1alpha1::CreateSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::CreateSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSecret(::grpc::ServerContext* context, ::vault::v1alpha1::UpdateSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::UpdateSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSecret(::grpc::ServerContext* context, ::vault::v1alpha1::DeleteSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::DeleteSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSecret() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecret(::grpc::ServerContext* context, ::vault::v1alpha1::GetSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::GetSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListSecret() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::ListSecretRequest* request, ::vault::v1alpha1::ListSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSecret(::grpc::ServerContext* context, ::vault::v1alpha1::ListSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::ListSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSecret<WithAsyncMethod_UpdateSecret<WithAsyncMethod_DeleteSecret<WithAsyncMethod_GetSecret<WithAsyncMethod_ListSecret<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSecret() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSecret() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListSecret() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::ListSecretRequest* request, ::vault::v1alpha1::ListSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateSecret() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSecret() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListSecret() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::ListSecretRequest* request, ::vault::v1alpha1::ListSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateSecret() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::CreateSecretRequest, ::vault::v1alpha1::CreateSecretResponse>(std::bind(&WithStreamedUnaryMethod_CreateSecret<BaseClass>::StreamedCreateSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::CreateSecretRequest,::vault::v1alpha1::CreateSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::UpdateSecretRequest, ::vault::v1alpha1::UpdateSecretResponse>(std::bind(&WithStreamedUnaryMethod_UpdateSecret<BaseClass>::StreamedUpdateSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::UpdateSecretRequest,::vault::v1alpha1::UpdateSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::DeleteSecretRequest, ::vault::v1alpha1::DeleteSecretResponse>(std::bind(&WithStreamedUnaryMethod_DeleteSecret<BaseClass>::StreamedDeleteSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::DeleteSecretRequest,::vault::v1alpha1::DeleteSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSecret() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::GetSecretRequest, ::vault::v1alpha1::GetSecretResponse>(std::bind(&WithStreamedUnaryMethod_GetSecret<BaseClass>::StreamedGetSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::GetSecretRequest,::vault::v1alpha1::GetSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListSecret() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::ListSecretRequest, ::vault::v1alpha1::ListSecretResponse>(std::bind(&WithStreamedUnaryMethod_ListSecret<BaseClass>::StreamedListSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::ListSecretRequest* request, ::vault::v1alpha1::ListSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::ListSecretRequest,::vault::v1alpha1::ListSecretResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSecret<WithStreamedUnaryMethod_UpdateSecret<WithStreamedUnaryMethod_DeleteSecret<WithStreamedUnaryMethod_GetSecret<WithStreamedUnaryMethod_ListSecret<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSecret<WithStreamedUnaryMethod_UpdateSecret<WithStreamedUnaryMethod_DeleteSecret<WithStreamedUnaryMethod_GetSecret<WithStreamedUnaryMethod_ListSecret<Service > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace vault


#endif  // GRPC_vault_2fv1alpha1_2fvault_5fapi_2eproto__INCLUDED
