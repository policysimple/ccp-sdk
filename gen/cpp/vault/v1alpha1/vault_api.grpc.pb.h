// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vault/v1alpha1/vault_api.proto
#ifndef GRPC_vault_2fv1alpha1_2fvault_5fapi_2eproto__INCLUDED
#define GRPC_vault_2fv1alpha1_2fvault_5fapi_2eproto__INCLUDED

#include "vault/v1alpha1/vault_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace vault {
namespace v1alpha1 {

class VaultAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "vault.v1alpha1.VaultAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::vault::v1alpha1::CreateSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>> AsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>>(AsyncCreateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>> PrepareAsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>>(PrepareAsyncCreateSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::vault::v1alpha1::UpdateSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>> AsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>>(AsyncUpdateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>> PrepareAsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>>(PrepareAsyncUpdateSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::vault::v1alpha1::DeleteSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>> AsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>>(AsyncDeleteSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>> PrepareAsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>>(PrepareAsyncDeleteSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::vault::v1alpha1::GetSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>> AsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>>(AsyncGetSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>> PrepareAsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>>(PrepareAsyncGetSecretRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::vault::v1alpha1::DeleteOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenIntegrationsResponse>> AsyncSaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenIntegrationsResponse>>(AsyncSaveTokenIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenIntegrationsResponse>> PrepareAsyncSaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenIntegrationsResponse>>(PrepareAsyncSaveTokenIntegrationsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenIntegrationsResponse>> AsyncGetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenIntegrationsResponse>>(AsyncGetTokenIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenIntegrationsResponse>> PrepareAsyncGetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenIntegrationsResponse>>(PrepareAsyncGetTokenIntegrationsRaw(context, request, cq));
    }
    // BlockChain
    virtual ::grpc::Status SaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenBlockChainResponse>> AsyncSaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenBlockChainResponse>>(AsyncSaveTokenBlockChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenBlockChainResponse>> PrepareAsyncSaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenBlockChainResponse>>(PrepareAsyncSaveTokenBlockChainRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::vault::v1alpha1::GetTokenBlockChainResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenBlockChainResponse>> AsyncGetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenBlockChainResponse>>(AsyncGetTokenBlockChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenBlockChainResponse>> PrepareAsyncGetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenBlockChainResponse>>(PrepareAsyncGetTokenBlockChainRaw(context, request, cq));
    }
    // Firebase
    virtual ::grpc::Status SaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenFirebaseResponse>> AsyncSaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenFirebaseResponse>>(AsyncSaveTokenFirebaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenFirebaseResponse>> PrepareAsyncSaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenFirebaseResponse>>(PrepareAsyncSaveTokenFirebaseRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::vault::v1alpha1::GetTokenFirebaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenFirebaseResponse>> AsyncGetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenFirebaseResponse>>(AsyncGetTokenFirebaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenFirebaseResponse>> PrepareAsyncGetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenFirebaseResponse>>(PrepareAsyncGetTokenFirebaseRaw(context, request, cq));
    }
    // Getsecret to service
    virtual ::grpc::Status GetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::vault::v1alpha1::GetSecretsServiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceResponse>> AsyncGetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceResponse>>(AsyncGetSecretsServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceResponse>> PrepareAsyncGetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceResponse>>(PrepareAsyncGetSecretsServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>> AsyncGetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>>(AsyncGetSecretsServiceNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>> PrepareAsyncGetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>>(PrepareAsyncGetSecretsServiceNotificationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // BlockChain
      virtual void SaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::vault::v1alpha1::GetTokenBlockChainResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Firebase
      virtual void SaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::vault::v1alpha1::GetTokenFirebaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Getsecret to service
      virtual void GetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest* request, ::vault::v1alpha1::GetSecretsServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>* AsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::CreateSecretResponse>* PrepareAsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>* AsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::UpdateSecretResponse>* PrepareAsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>* AsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteSecretResponse>* PrepareAsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>* AsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretResponse>* PrepareAsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenIntegrationsResponse>* AsyncSaveTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenIntegrationsResponse>* PrepareAsyncSaveTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenIntegrationsResponse>* AsyncGetTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenIntegrationsResponse>* PrepareAsyncGetTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenBlockChainResponse>* AsyncSaveTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenBlockChainResponse>* PrepareAsyncSaveTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenBlockChainResponse>* AsyncGetTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenBlockChainResponse>* PrepareAsyncGetTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenFirebaseResponse>* AsyncSaveTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::SaveTokenFirebaseResponse>* PrepareAsyncSaveTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenFirebaseResponse>* AsyncGetTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetTokenFirebaseResponse>* PrepareAsyncGetTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceResponse>* AsyncGetSecretsServiceRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceResponse>* PrepareAsyncGetSecretsServiceRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>* AsyncGetSecretsServiceNotificationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>* PrepareAsyncGetSecretsServiceNotificationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::vault::v1alpha1::CreateSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>> AsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>>(AsyncCreateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>> PrepareAsyncCreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>>(PrepareAsyncCreateSecretRaw(context, request, cq));
    }
    ::grpc::Status UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::vault::v1alpha1::UpdateSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>> AsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>>(AsyncUpdateSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>> PrepareAsyncUpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>>(PrepareAsyncUpdateSecretRaw(context, request, cq));
    }
    ::grpc::Status DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::vault::v1alpha1::DeleteSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>> AsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>>(AsyncDeleteSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>> PrepareAsyncDeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>>(PrepareAsyncDeleteSecretRaw(context, request, cq));
    }
    ::grpc::Status GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::vault::v1alpha1::GetSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>> AsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>>(AsyncGetSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>> PrepareAsyncGetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>>(PrepareAsyncGetSecretRaw(context, request, cq));
    }
    ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::vault::v1alpha1::DeleteOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    ::grpc::Status SaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenIntegrationsResponse>> AsyncSaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenIntegrationsResponse>>(AsyncSaveTokenIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenIntegrationsResponse>> PrepareAsyncSaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenIntegrationsResponse>>(PrepareAsyncSaveTokenIntegrationsRaw(context, request, cq));
    }
    ::grpc::Status GetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenIntegrationsResponse>> AsyncGetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenIntegrationsResponse>>(AsyncGetTokenIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenIntegrationsResponse>> PrepareAsyncGetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenIntegrationsResponse>>(PrepareAsyncGetTokenIntegrationsRaw(context, request, cq));
    }
    ::grpc::Status SaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenBlockChainResponse>> AsyncSaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenBlockChainResponse>>(AsyncSaveTokenBlockChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenBlockChainResponse>> PrepareAsyncSaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenBlockChainResponse>>(PrepareAsyncSaveTokenBlockChainRaw(context, request, cq));
    }
    ::grpc::Status GetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::vault::v1alpha1::GetTokenBlockChainResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenBlockChainResponse>> AsyncGetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenBlockChainResponse>>(AsyncGetTokenBlockChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenBlockChainResponse>> PrepareAsyncGetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenBlockChainResponse>>(PrepareAsyncGetTokenBlockChainRaw(context, request, cq));
    }
    ::grpc::Status SaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenFirebaseResponse>> AsyncSaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenFirebaseResponse>>(AsyncSaveTokenFirebaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenFirebaseResponse>> PrepareAsyncSaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenFirebaseResponse>>(PrepareAsyncSaveTokenFirebaseRaw(context, request, cq));
    }
    ::grpc::Status GetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::vault::v1alpha1::GetTokenFirebaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenFirebaseResponse>> AsyncGetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenFirebaseResponse>>(AsyncGetTokenFirebaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenFirebaseResponse>> PrepareAsyncGetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenFirebaseResponse>>(PrepareAsyncGetTokenFirebaseRaw(context, request, cq));
    }
    ::grpc::Status GetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::vault::v1alpha1::GetSecretsServiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceResponse>> AsyncGetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceResponse>>(AsyncGetSecretsServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceResponse>> PrepareAsyncGetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceResponse>>(PrepareAsyncGetSecretsServiceRaw(context, request, cq));
    }
    ::grpc::Status GetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>> AsyncGetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>>(AsyncGetSecretsServiceNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>> PrepareAsyncGetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>>(PrepareAsyncGetSecretsServiceNotificationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOrganization(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void SaveTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTokenIntegrations(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response, std::function<void(::grpc::Status)>) override;
      void SaveTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTokenBlockChain(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::vault::v1alpha1::GetTokenBlockChainResponse* response, std::function<void(::grpc::Status)>) override;
      void SaveTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTokenFirebase(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::vault::v1alpha1::GetTokenFirebaseResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSecretsService(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest* request, ::vault::v1alpha1::GetSecretsServiceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSecretsServiceNotification(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>* AsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::CreateSecretResponse>* PrepareAsyncCreateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::CreateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>* AsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::UpdateSecretResponse>* PrepareAsyncUpdateSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::UpdateSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* AsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* PrepareAsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>* AsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretResponse>* PrepareAsyncGetSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenIntegrationsResponse>* AsyncSaveTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenIntegrationsResponse>* PrepareAsyncSaveTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenIntegrationsResponse>* AsyncGetTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenIntegrationsResponse>* PrepareAsyncGetTokenIntegrationsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenBlockChainResponse>* AsyncSaveTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenBlockChainResponse>* PrepareAsyncSaveTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenBlockChainResponse>* AsyncGetTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenBlockChainResponse>* PrepareAsyncGetTokenBlockChainRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenFirebaseResponse>* AsyncSaveTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::SaveTokenFirebaseResponse>* PrepareAsyncSaveTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenFirebaseResponse>* AsyncGetTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetTokenFirebaseResponse>* PrepareAsyncGetTokenFirebaseRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceResponse>* AsyncGetSecretsServiceRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceResponse>* PrepareAsyncGetSecretsServiceRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>* AsyncGetSecretsServiceNotificationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>* PrepareAsyncGetSecretsServiceNotificationRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveTokenIntegrations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTokenIntegrations_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveTokenBlockChain_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTokenBlockChain_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveTokenFirebase_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTokenFirebase_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSecretsService_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSecretsServiceNotification_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response);
    virtual ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response);
    virtual ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response);
    virtual ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response);
    virtual ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response);
    virtual ::grpc::Status SaveTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response);
    virtual ::grpc::Status GetTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response);
    // BlockChain
    virtual ::grpc::Status SaveTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response);
    virtual ::grpc::Status GetTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::vault::v1alpha1::GetTokenBlockChainResponse* response);
    // Firebase
    virtual ::grpc::Status SaveTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response);
    virtual ::grpc::Status GetTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::vault::v1alpha1::GetTokenFirebaseResponse* response);
    // Getsecret to service
    virtual ::grpc::Status GetSecretsService(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest* request, ::vault::v1alpha1::GetSecretsServiceResponse* response);
    virtual ::grpc::Status GetSecretsServiceNotification(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSecret() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSecret(::grpc::ServerContext* context, ::vault::v1alpha1::CreateSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::CreateSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSecret(::grpc::ServerContext* context, ::vault::v1alpha1::UpdateSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::UpdateSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSecret(::grpc::ServerContext* context, ::vault::v1alpha1::DeleteSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::DeleteSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSecret() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecret(::grpc::ServerContext* context, ::vault::v1alpha1::GetSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::GetSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::vault::v1alpha1::DeleteOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::DeleteOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveTokenIntegrations() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SaveTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveTokenIntegrations(::grpc::ServerContext* context, ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::SaveTokenIntegrationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTokenIntegrations() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenIntegrations(::grpc::ServerContext* context, ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::GetTokenIntegrationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveTokenBlockChain() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SaveTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveTokenBlockChain(::grpc::ServerContext* context, ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::SaveTokenBlockChainResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTokenBlockChain() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::vault::v1alpha1::GetTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenBlockChain(::grpc::ServerContext* context, ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::GetTokenBlockChainResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveTokenFirebase() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SaveTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveTokenFirebase(::grpc::ServerContext* context, ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::SaveTokenFirebaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTokenFirebase() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::vault::v1alpha1::GetTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenFirebase(::grpc::ServerContext* context, ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::GetTokenFirebaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSecretsService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSecretsService() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetSecretsService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecretsService(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest* request, ::vault::v1alpha1::GetSecretsServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecretsService(::grpc::ServerContext* context, ::vault::v1alpha1::GetSecretsServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::GetSecretsServiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSecretsServiceNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSecretsServiceNotification() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetSecretsServiceNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecretsServiceNotification(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecretsServiceNotification(::grpc::ServerContext* context, ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::vault::v1alpha1::GetSecretsServiceNotificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSecret<WithAsyncMethod_UpdateSecret<WithAsyncMethod_DeleteSecret<WithAsyncMethod_GetSecret<WithAsyncMethod_DeleteOrganization<WithAsyncMethod_SaveTokenIntegrations<WithAsyncMethod_GetTokenIntegrations<WithAsyncMethod_SaveTokenBlockChain<WithAsyncMethod_GetTokenBlockChain<WithAsyncMethod_SaveTokenFirebase<WithAsyncMethod_GetTokenFirebase<WithAsyncMethod_GetSecretsService<WithAsyncMethod_GetSecretsServiceNotification<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSecret() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSecret() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveTokenIntegrations() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SaveTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTokenIntegrations() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveTokenBlockChain() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SaveTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTokenBlockChain() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::vault::v1alpha1::GetTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveTokenFirebase() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SaveTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTokenFirebase() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::vault::v1alpha1::GetTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSecretsService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSecretsService() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetSecretsService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecretsService(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest* request, ::vault::v1alpha1::GetSecretsServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSecretsServiceNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSecretsServiceNotification() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetSecretsServiceNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecretsServiceNotification(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateSecret() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSecret() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SaveTokenIntegrations() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SaveTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveTokenIntegrations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTokenIntegrations() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenIntegrations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SaveTokenBlockChain() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SaveTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveTokenBlockChain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTokenBlockChain() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::vault::v1alpha1::GetTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenBlockChain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SaveTokenFirebase() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SaveTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveTokenFirebase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTokenFirebase() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::vault::v1alpha1::GetTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenFirebase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSecretsService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSecretsService() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetSecretsService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecretsService(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest* request, ::vault::v1alpha1::GetSecretsServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecretsService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSecretsServiceNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSecretsServiceNotification() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetSecretsServiceNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSecretsServiceNotification(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSecretsServiceNotification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateSecret() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::CreateSecretRequest, ::vault::v1alpha1::CreateSecretResponse>(std::bind(&WithStreamedUnaryMethod_CreateSecret<BaseClass>::StreamedCreateSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::CreateSecretRequest* request, ::vault::v1alpha1::CreateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::CreateSecretRequest,::vault::v1alpha1::CreateSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateSecret() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::UpdateSecretRequest, ::vault::v1alpha1::UpdateSecretResponse>(std::bind(&WithStreamedUnaryMethod_UpdateSecret<BaseClass>::StreamedUpdateSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::UpdateSecretRequest* request, ::vault::v1alpha1::UpdateSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::UpdateSecretRequest,::vault::v1alpha1::UpdateSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSecret() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::DeleteSecretRequest, ::vault::v1alpha1::DeleteSecretResponse>(std::bind(&WithStreamedUnaryMethod_DeleteSecret<BaseClass>::StreamedDeleteSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::DeleteSecretRequest,::vault::v1alpha1::DeleteSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSecret() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::GetSecretRequest, ::vault::v1alpha1::GetSecretResponse>(std::bind(&WithStreamedUnaryMethod_GetSecret<BaseClass>::StreamedGetSecret, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretRequest* request, ::vault::v1alpha1::GetSecretResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::GetSecretRequest,::vault::v1alpha1::GetSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::DeleteOrganizationRequest, ::vault::v1alpha1::DeleteOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_DeleteOrganization<BaseClass>::StreamedDeleteOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteOrganizationRequest* request, ::vault::v1alpha1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::DeleteOrganizationRequest,::vault::v1alpha1::DeleteOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveTokenIntegrations() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::SaveTokenIntegrationsRequest, ::vault::v1alpha1::SaveTokenIntegrationsResponse>(std::bind(&WithStreamedUnaryMethod_SaveTokenIntegrations<BaseClass>::StreamedSaveTokenIntegrations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenIntegrationsRequest* request, ::vault::v1alpha1::SaveTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveTokenIntegrations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::SaveTokenIntegrationsRequest,::vault::v1alpha1::SaveTokenIntegrationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTokenIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTokenIntegrations() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::GetTokenIntegrationsRequest, ::vault::v1alpha1::GetTokenIntegrationsResponse>(std::bind(&WithStreamedUnaryMethod_GetTokenIntegrations<BaseClass>::StreamedGetTokenIntegrations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTokenIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTokenIntegrations(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenIntegrationsRequest* request, ::vault::v1alpha1::GetTokenIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTokenIntegrations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::GetTokenIntegrationsRequest,::vault::v1alpha1::GetTokenIntegrationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveTokenBlockChain() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::SaveTokenBlockChainRequest, ::vault::v1alpha1::SaveTokenBlockChainResponse>(std::bind(&WithStreamedUnaryMethod_SaveTokenBlockChain<BaseClass>::StreamedSaveTokenBlockChain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenBlockChainRequest* request, ::vault::v1alpha1::SaveTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveTokenBlockChain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::SaveTokenBlockChainRequest,::vault::v1alpha1::SaveTokenBlockChainResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTokenBlockChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTokenBlockChain() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::GetTokenBlockChainRequest, ::vault::v1alpha1::GetTokenBlockChainResponse>(std::bind(&WithStreamedUnaryMethod_GetTokenBlockChain<BaseClass>::StreamedGetTokenBlockChain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTokenBlockChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTokenBlockChain(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenBlockChainRequest* request, ::vault::v1alpha1::GetTokenBlockChainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTokenBlockChain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::GetTokenBlockChainRequest,::vault::v1alpha1::GetTokenBlockChainResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveTokenFirebase() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::SaveTokenFirebaseRequest, ::vault::v1alpha1::SaveTokenFirebaseResponse>(std::bind(&WithStreamedUnaryMethod_SaveTokenFirebase<BaseClass>::StreamedSaveTokenFirebase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::SaveTokenFirebaseRequest* request, ::vault::v1alpha1::SaveTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveTokenFirebase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::SaveTokenFirebaseRequest,::vault::v1alpha1::SaveTokenFirebaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTokenFirebase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTokenFirebase() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::GetTokenFirebaseRequest, ::vault::v1alpha1::GetTokenFirebaseResponse>(std::bind(&WithStreamedUnaryMethod_GetTokenFirebase<BaseClass>::StreamedGetTokenFirebase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTokenFirebase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTokenFirebase(::grpc::ServerContext* context, const ::vault::v1alpha1::GetTokenFirebaseRequest* request, ::vault::v1alpha1::GetTokenFirebaseResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTokenFirebase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::GetTokenFirebaseRequest,::vault::v1alpha1::GetTokenFirebaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSecretsService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSecretsService() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::GetSecretsServiceRequest, ::vault::v1alpha1::GetSecretsServiceResponse>(std::bind(&WithStreamedUnaryMethod_GetSecretsService<BaseClass>::StreamedGetSecretsService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSecretsService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSecretsService(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceRequest* request, ::vault::v1alpha1::GetSecretsServiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSecretsService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::GetSecretsServiceRequest,::vault::v1alpha1::GetSecretsServiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSecretsServiceNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSecretsServiceNotification() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::vault::v1alpha1::GetSecretsServiceNotificationRequest, ::vault::v1alpha1::GetSecretsServiceNotificationResponse>(std::bind(&WithStreamedUnaryMethod_GetSecretsServiceNotification<BaseClass>::StreamedGetSecretsServiceNotification, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSecretsServiceNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSecretsServiceNotification(::grpc::ServerContext* context, const ::vault::v1alpha1::GetSecretsServiceNotificationRequest* request, ::vault::v1alpha1::GetSecretsServiceNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSecretsServiceNotification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vault::v1alpha1::GetSecretsServiceNotificationRequest,::vault::v1alpha1::GetSecretsServiceNotificationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSecret<WithStreamedUnaryMethod_UpdateSecret<WithStreamedUnaryMethod_DeleteSecret<WithStreamedUnaryMethod_GetSecret<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_SaveTokenIntegrations<WithStreamedUnaryMethod_GetTokenIntegrations<WithStreamedUnaryMethod_SaveTokenBlockChain<WithStreamedUnaryMethod_GetTokenBlockChain<WithStreamedUnaryMethod_SaveTokenFirebase<WithStreamedUnaryMethod_GetTokenFirebase<WithStreamedUnaryMethod_GetSecretsService<WithStreamedUnaryMethod_GetSecretsServiceNotification<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSecret<WithStreamedUnaryMethod_UpdateSecret<WithStreamedUnaryMethod_DeleteSecret<WithStreamedUnaryMethod_GetSecret<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_SaveTokenIntegrations<WithStreamedUnaryMethod_GetTokenIntegrations<WithStreamedUnaryMethod_SaveTokenBlockChain<WithStreamedUnaryMethod_GetTokenBlockChain<WithStreamedUnaryMethod_SaveTokenFirebase<WithStreamedUnaryMethod_GetTokenFirebase<WithStreamedUnaryMethod_GetSecretsService<WithStreamedUnaryMethod_GetSecretsServiceNotification<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace vault


#endif  // GRPC_vault_2fv1alpha1_2fvault_5fapi_2eproto__INCLUDED
