// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vault/v1alpha1/vault.proto

#include "vault/v1alpha1/vault.pb.h"
#include "vault/v1alpha1/vault.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vault {
namespace v1alpha1 {

static const char* VaultService_method_names[] = {
  "/vault.v1alpha1.VaultService/WriteSecret",
  "/vault.v1alpha1.VaultService/ReadSecret",
  "/vault.v1alpha1.VaultService/DeleteSecret",
  "/vault.v1alpha1.VaultService/ListSecrets",
};

std::unique_ptr< VaultService::Stub> VaultService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VaultService::Stub> stub(new VaultService::Stub(channel));
  return stub;
}

VaultService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_WriteSecret_(VaultService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadSecret_(VaultService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSecret_(VaultService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSecrets_(VaultService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VaultService::Stub::WriteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::WriteSecretRequest& request, ::vault::v1alpha1::WriteSecretResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteSecret_, context, request, response);
}

void VaultService::Stub::experimental_async::WriteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::WriteSecretRequest* request, ::vault::v1alpha1::WriteSecretResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteSecret_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::WriteSecretResponse>* VaultService::Stub::AsyncWriteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::WriteSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::WriteSecretResponse>::Create(channel_.get(), cq, rpcmethod_WriteSecret_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::WriteSecretResponse>* VaultService::Stub::PrepareAsyncWriteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::WriteSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::WriteSecretResponse>::Create(channel_.get(), cq, rpcmethod_WriteSecret_, context, request, false);
}

::grpc::Status VaultService::Stub::ReadSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ReadSecretRequest& request, ::vault::v1alpha1::ReadSecretResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadSecret_, context, request, response);
}

void VaultService::Stub::experimental_async::ReadSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::ReadSecretRequest* request, ::vault::v1alpha1::ReadSecretResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadSecret_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ReadSecretResponse>* VaultService::Stub::AsyncReadSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ReadSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::ReadSecretResponse>::Create(channel_.get(), cq, rpcmethod_ReadSecret_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ReadSecretResponse>* VaultService::Stub::PrepareAsyncReadSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ReadSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::ReadSecretResponse>::Create(channel_.get(), cq, rpcmethod_ReadSecret_, context, request, false);
}

::grpc::Status VaultService::Stub::DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::vault::v1alpha1::DeleteSecretResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSecret_, context, request, response);
}

void VaultService::Stub::experimental_async::DeleteSecret(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSecret_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* VaultService::Stub::AsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::DeleteSecretResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSecret_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::DeleteSecretResponse>* VaultService::Stub::PrepareAsyncDeleteSecretRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::DeleteSecretRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::DeleteSecretResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSecret_, context, request, false);
}

::grpc::Status VaultService::Stub::ListSecrets(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretsRequest& request, ::vault::v1alpha1::ListSecretsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSecrets_, context, request, response);
}

void VaultService::Stub::experimental_async::ListSecrets(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretsRequest* request, ::vault::v1alpha1::ListSecretsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSecrets_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretsResponse>* VaultService::Stub::AsyncListSecretsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::ListSecretsResponse>::Create(channel_.get(), cq, rpcmethod_ListSecrets_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vault::v1alpha1::ListSecretsResponse>* VaultService::Stub::PrepareAsyncListSecretsRaw(::grpc::ClientContext* context, const ::vault::v1alpha1::ListSecretsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vault::v1alpha1::ListSecretsResponse>::Create(channel_.get(), cq, rpcmethod_ListSecrets_, context, request, false);
}

VaultService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultService::Service, ::vault::v1alpha1::WriteSecretRequest, ::vault::v1alpha1::WriteSecretResponse>(
          std::mem_fn(&VaultService::Service::WriteSecret), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultService::Service, ::vault::v1alpha1::ReadSecretRequest, ::vault::v1alpha1::ReadSecretResponse>(
          std::mem_fn(&VaultService::Service::ReadSecret), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultService::Service, ::vault::v1alpha1::DeleteSecretRequest, ::vault::v1alpha1::DeleteSecretResponse>(
          std::mem_fn(&VaultService::Service::DeleteSecret), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VaultService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VaultService::Service, ::vault::v1alpha1::ListSecretsRequest, ::vault::v1alpha1::ListSecretsResponse>(
          std::mem_fn(&VaultService::Service::ListSecrets), this)));
}

VaultService::Service::~Service() {
}

::grpc::Status VaultService::Service::WriteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::WriteSecretRequest* request, ::vault::v1alpha1::WriteSecretResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultService::Service::ReadSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::ReadSecretRequest* request, ::vault::v1alpha1::ReadSecretResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultService::Service::DeleteSecret(::grpc::ServerContext* context, const ::vault::v1alpha1::DeleteSecretRequest* request, ::vault::v1alpha1::DeleteSecretResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VaultService::Service::ListSecrets(::grpc::ServerContext* context, const ::vault::v1alpha1::ListSecretsRequest* request, ::vault::v1alpha1::ListSecretsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vault
}  // namespace v1alpha1

