// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment/v1alpha1/payment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payment_2fv1alpha1_2fpayment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payment_2fv1alpha1_2fpayment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payment_2fv1alpha1_2fpayment_2eproto;
namespace payment {
namespace v1alpha1 {
class Customer;
struct CustomerDefaultTypeInternal;
extern CustomerDefaultTypeInternal _Customer_default_instance_;
class Invoice;
struct InvoiceDefaultTypeInternal;
extern InvoiceDefaultTypeInternal _Invoice_default_instance_;
class Payment;
struct PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;
class PaymentList;
struct PaymentListDefaultTypeInternal;
extern PaymentListDefaultTypeInternal _PaymentList_default_instance_;
class Suscription;
struct SuscriptionDefaultTypeInternal;
extern SuscriptionDefaultTypeInternal _Suscription_default_instance_;
}  // namespace v1alpha1
}  // namespace payment
PROTOBUF_NAMESPACE_OPEN
template<> ::payment::v1alpha1::Customer* Arena::CreateMaybeMessage<::payment::v1alpha1::Customer>(Arena*);
template<> ::payment::v1alpha1::Invoice* Arena::CreateMaybeMessage<::payment::v1alpha1::Invoice>(Arena*);
template<> ::payment::v1alpha1::Payment* Arena::CreateMaybeMessage<::payment::v1alpha1::Payment>(Arena*);
template<> ::payment::v1alpha1::PaymentList* Arena::CreateMaybeMessage<::payment::v1alpha1::PaymentList>(Arena*);
template<> ::payment::v1alpha1::Suscription* Arena::CreateMaybeMessage<::payment::v1alpha1::Suscription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace payment {
namespace v1alpha1 {

// ===================================================================

class Customer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Customer) */ {
 public:
  inline Customer() : Customer(nullptr) {}
  ~Customer() override;
  explicit constexpr Customer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Customer(const Customer& from);
  Customer(Customer&& from) noexcept
    : Customer() {
    *this = ::std::move(from);
  }

  inline Customer& operator=(const Customer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Customer& operator=(Customer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Customer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Customer* internal_default_instance() {
    return reinterpret_cast<const Customer*>(
               &_Customer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Customer& a, Customer& b) {
    a.Swap(&b);
  }
  inline void Swap(Customer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Customer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Customer* New() const final {
    return new Customer();
  }

  Customer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Customer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Customer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Customer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Customer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Customer";
  }
  protected:
  explicit Customer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kOrganizationIdFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Customer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Suscription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Suscription) */ {
 public:
  inline Suscription() : Suscription(nullptr) {}
  ~Suscription() override;
  explicit constexpr Suscription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Suscription(const Suscription& from);
  Suscription(Suscription&& from) noexcept
    : Suscription() {
    *this = ::std::move(from);
  }

  inline Suscription& operator=(const Suscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Suscription& operator=(Suscription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Suscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Suscription* internal_default_instance() {
    return reinterpret_cast<const Suscription*>(
               &_Suscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Suscription& a, Suscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Suscription* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Suscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Suscription* New() const final {
    return new Suscription();
  }

  Suscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Suscription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Suscription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Suscription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Suscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Suscription";
  }
  protected:
  explicit Suscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPriceFieldNumber = 3,
    kCustomerFieldNumber = 2,
    kCancelFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string price = 3 [json_name = "price"];
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_MUST_USE_RESULT std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // .payment.v1alpha1.Customer customer = 2 [json_name = "customer"];
  bool has_customer() const;
  private:
  bool _internal_has_customer() const;
  public:
  void clear_customer();
  const ::payment::v1alpha1::Customer& customer() const;
  PROTOBUF_MUST_USE_RESULT ::payment::v1alpha1::Customer* release_customer();
  ::payment::v1alpha1::Customer* mutable_customer();
  void set_allocated_customer(::payment::v1alpha1::Customer* customer);
  private:
  const ::payment::v1alpha1::Customer& _internal_customer() const;
  ::payment::v1alpha1::Customer* _internal_mutable_customer();
  public:
  void unsafe_arena_set_allocated_customer(
      ::payment::v1alpha1::Customer* customer);
  ::payment::v1alpha1::Customer* unsafe_arena_release_customer();

  // bool cancel = 4 [json_name = "cancel"];
  void clear_cancel();
  bool cancel() const;
  void set_cancel(bool value);
  private:
  bool _internal_cancel() const;
  void _internal_set_cancel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Suscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::payment::v1alpha1::Customer* customer_;
  bool cancel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Payment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Payment) */ {
 public:
  inline Payment() : Payment(nullptr) {}
  ~Payment() override;
  explicit constexpr Payment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payment(const Payment& from);
  Payment(Payment&& from) noexcept
    : Payment() {
    *this = ::std::move(from);
  }

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment& operator=(Payment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Payment& a, Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(Payment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payment* New() const final {
    return new Payment();
  }

  Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Payment";
  }
  protected:
  explicit Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTokenCardFieldNumber = 4,
    kCustomerFieldNumber = 2,
    kSuscriptionFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string token_card = 4 [json_name = "tokenCard"];
  void clear_token_card();
  const std::string& token_card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_card();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_card();
  void set_allocated_token_card(std::string* token_card);
  private:
  const std::string& _internal_token_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_card(const std::string& value);
  std::string* _internal_mutable_token_card();
  public:

  // .payment.v1alpha1.Customer customer = 2 [json_name = "customer"];
  bool has_customer() const;
  private:
  bool _internal_has_customer() const;
  public:
  void clear_customer();
  const ::payment::v1alpha1::Customer& customer() const;
  PROTOBUF_MUST_USE_RESULT ::payment::v1alpha1::Customer* release_customer();
  ::payment::v1alpha1::Customer* mutable_customer();
  void set_allocated_customer(::payment::v1alpha1::Customer* customer);
  private:
  const ::payment::v1alpha1::Customer& _internal_customer() const;
  ::payment::v1alpha1::Customer* _internal_mutable_customer();
  public:
  void unsafe_arena_set_allocated_customer(
      ::payment::v1alpha1::Customer* customer);
  ::payment::v1alpha1::Customer* unsafe_arena_release_customer();

  // .payment.v1alpha1.Suscription suscription = 3 [json_name = "suscription"];
  bool has_suscription() const;
  private:
  bool _internal_has_suscription() const;
  public:
  void clear_suscription();
  const ::payment::v1alpha1::Suscription& suscription() const;
  PROTOBUF_MUST_USE_RESULT ::payment::v1alpha1::Suscription* release_suscription();
  ::payment::v1alpha1::Suscription* mutable_suscription();
  void set_allocated_suscription(::payment::v1alpha1::Suscription* suscription);
  private:
  const ::payment::v1alpha1::Suscription& _internal_suscription() const;
  ::payment::v1alpha1::Suscription* _internal_mutable_suscription();
  public:
  void unsafe_arena_set_allocated_suscription(
      ::payment::v1alpha1::Suscription* suscription);
  ::payment::v1alpha1::Suscription* unsafe_arena_release_suscription();

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Payment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_card_;
  ::payment::v1alpha1::Customer* customer_;
  ::payment::v1alpha1::Suscription* suscription_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Invoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Invoice) */ {
 public:
  inline Invoice() : Invoice(nullptr) {}
  ~Invoice() override;
  explicit constexpr Invoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Invoice(const Invoice& from);
  Invoice(Invoice&& from) noexcept
    : Invoice() {
    *this = ::std::move(from);
  }

  inline Invoice& operator=(const Invoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invoice& operator=(Invoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Invoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Invoice* internal_default_instance() {
    return reinterpret_cast<const Invoice*>(
               &_Invoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Invoice& a, Invoice& b) {
    a.Swap(&b);
  }
  inline void Swap(Invoice* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Invoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invoice* New() const final {
    return new Invoice();
  }

  Invoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Invoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Invoice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invoice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Invoice";
  }
  protected:
  explicit Invoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCustomerFieldNumber = 2,
    kSuscriptionFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .payment.v1alpha1.Customer customer = 2 [json_name = "customer"];
  bool has_customer() const;
  private:
  bool _internal_has_customer() const;
  public:
  void clear_customer();
  const ::payment::v1alpha1::Customer& customer() const;
  PROTOBUF_MUST_USE_RESULT ::payment::v1alpha1::Customer* release_customer();
  ::payment::v1alpha1::Customer* mutable_customer();
  void set_allocated_customer(::payment::v1alpha1::Customer* customer);
  private:
  const ::payment::v1alpha1::Customer& _internal_customer() const;
  ::payment::v1alpha1::Customer* _internal_mutable_customer();
  public:
  void unsafe_arena_set_allocated_customer(
      ::payment::v1alpha1::Customer* customer);
  ::payment::v1alpha1::Customer* unsafe_arena_release_customer();

  // .payment.v1alpha1.Suscription suscription = 3 [json_name = "suscription"];
  bool has_suscription() const;
  private:
  bool _internal_has_suscription() const;
  public:
  void clear_suscription();
  const ::payment::v1alpha1::Suscription& suscription() const;
  PROTOBUF_MUST_USE_RESULT ::payment::v1alpha1::Suscription* release_suscription();
  ::payment::v1alpha1::Suscription* mutable_suscription();
  void set_allocated_suscription(::payment::v1alpha1::Suscription* suscription);
  private:
  const ::payment::v1alpha1::Suscription& _internal_suscription() const;
  ::payment::v1alpha1::Suscription* _internal_mutable_suscription();
  public:
  void unsafe_arena_set_allocated_suscription(
      ::payment::v1alpha1::Suscription* suscription);
  ::payment::v1alpha1::Suscription* unsafe_arena_release_suscription();

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Invoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::payment::v1alpha1::Customer* customer_;
  ::payment::v1alpha1::Suscription* suscription_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.PaymentList) */ {
 public:
  inline PaymentList() : PaymentList(nullptr) {}
  ~PaymentList() override;
  explicit constexpr PaymentList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentList(const PaymentList& from);
  PaymentList(PaymentList&& from) noexcept
    : PaymentList() {
    *this = ::std::move(from);
  }

  inline PaymentList& operator=(const PaymentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentList& operator=(PaymentList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentList* internal_default_instance() {
    return reinterpret_cast<const PaymentList*>(
               &_PaymentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PaymentList& a, PaymentList& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentList* New() const final {
    return new PaymentList();
  }

  PaymentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.PaymentList";
  }
  protected:
  explicit PaymentList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::payment::v1alpha1::Payment* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >*
      mutable_items();
  private:
  const ::payment::v1alpha1::Payment& _internal_items(int index) const;
  ::payment::v1alpha1::Payment* _internal_add_items();
  public:
  const ::payment::v1alpha1::Payment& items(int index) const;
  ::payment::v1alpha1::Payment* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >&
      items() const;

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.PaymentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Customer

// string id = 1 [json_name = "id"];
inline void Customer::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Customer::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Customer::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.id)
}
inline std::string* Customer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Customer.id)
  return _s;
}
inline const std::string& Customer::_internal_id() const {
  return id_.Get();
}
inline void Customer::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Customer::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Customer::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Customer.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Customer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Customer.id)
}

// string name = 2 [json_name = "name"];
inline void Customer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Customer::name() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Customer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.name)
}
inline std::string* Customer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Customer.name)
  return _s;
}
inline const std::string& Customer::_internal_name() const {
  return name_.Get();
}
inline void Customer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Customer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Customer::release_name() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Customer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Customer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Customer.name)
}

// string email = 3 [json_name = "email"];
inline void Customer::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& Customer::email() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Customer::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.email)
}
inline std::string* Customer::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Customer.email)
  return _s;
}
inline const std::string& Customer::_internal_email() const {
  return email_.Get();
}
inline void Customer::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Customer::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Customer::release_email() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Customer.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Customer::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Customer.email)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void Customer::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Customer::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Customer::organization_id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.organization_id)
  return _internal_organization_id();
}
inline void Customer::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Customer::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.organization_id)
}

// -------------------------------------------------------------------

// Suscription

// string id = 1 [json_name = "id"];
inline void Suscription::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Suscription::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Suscription.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Suscription::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Suscription.id)
}
inline std::string* Suscription::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Suscription.id)
  return _s;
}
inline const std::string& Suscription::_internal_id() const {
  return id_.Get();
}
inline void Suscription::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Suscription::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Suscription::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Suscription.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Suscription::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Suscription.id)
}

// .payment.v1alpha1.Customer customer = 2 [json_name = "customer"];
inline bool Suscription::_internal_has_customer() const {
  return this != internal_default_instance() && customer_ != nullptr;
}
inline bool Suscription::has_customer() const {
  return _internal_has_customer();
}
inline void Suscription::clear_customer() {
  if (GetArenaForAllocation() == nullptr && customer_ != nullptr) {
    delete customer_;
  }
  customer_ = nullptr;
}
inline const ::payment::v1alpha1::Customer& Suscription::_internal_customer() const {
  const ::payment::v1alpha1::Customer* p = customer_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::v1alpha1::Customer&>(
      ::payment::v1alpha1::_Customer_default_instance_);
}
inline const ::payment::v1alpha1::Customer& Suscription::customer() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Suscription.customer)
  return _internal_customer();
}
inline void Suscription::unsafe_arena_set_allocated_customer(
    ::payment::v1alpha1::Customer* customer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_);
  }
  customer_ = customer;
  if (customer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.v1alpha1.Suscription.customer)
}
inline ::payment::v1alpha1::Customer* Suscription::release_customer() {
  
  ::payment::v1alpha1::Customer* temp = customer_;
  customer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::v1alpha1::Customer* Suscription::unsafe_arena_release_customer() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Suscription.customer)
  
  ::payment::v1alpha1::Customer* temp = customer_;
  customer_ = nullptr;
  return temp;
}
inline ::payment::v1alpha1::Customer* Suscription::_internal_mutable_customer() {
  
  if (customer_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::v1alpha1::Customer>(GetArenaForAllocation());
    customer_ = p;
  }
  return customer_;
}
inline ::payment::v1alpha1::Customer* Suscription::mutable_customer() {
  ::payment::v1alpha1::Customer* _msg = _internal_mutable_customer();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Suscription.customer)
  return _msg;
}
inline void Suscription::set_allocated_customer(::payment::v1alpha1::Customer* customer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete customer_;
  }
  if (customer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::v1alpha1::Customer>::GetOwningArena(customer);
    if (message_arena != submessage_arena) {
      customer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer, submessage_arena);
    }
    
  } else {
    
  }
  customer_ = customer;
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Suscription.customer)
}

// string price = 3 [json_name = "price"];
inline void Suscription::clear_price() {
  price_.ClearToEmpty();
}
inline const std::string& Suscription::price() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Suscription.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Suscription::set_price(ArgT0&& arg0, ArgT... args) {
 
 price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Suscription.price)
}
inline std::string* Suscription::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Suscription.price)
  return _s;
}
inline const std::string& Suscription::_internal_price() const {
  return price_.Get();
}
inline void Suscription::_internal_set_price(const std::string& value) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Suscription::_internal_mutable_price() {
  
  return price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Suscription::release_price() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Suscription.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Suscription::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Suscription.price)
}

// bool cancel = 4 [json_name = "cancel"];
inline void Suscription::clear_cancel() {
  cancel_ = false;
}
inline bool Suscription::_internal_cancel() const {
  return cancel_;
}
inline bool Suscription::cancel() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Suscription.cancel)
  return _internal_cancel();
}
inline void Suscription::_internal_set_cancel(bool value) {
  
  cancel_ = value;
}
inline void Suscription::set_cancel(bool value) {
  _internal_set_cancel(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Suscription.cancel)
}

// -------------------------------------------------------------------

// Payment

// string id = 1 [json_name = "id"];
inline void Payment::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Payment::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.id)
}
inline std::string* Payment::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.id)
  return _s;
}
inline const std::string& Payment::_internal_id() const {
  return id_.Get();
}
inline void Payment::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.id)
}

// .payment.v1alpha1.Customer customer = 2 [json_name = "customer"];
inline bool Payment::_internal_has_customer() const {
  return this != internal_default_instance() && customer_ != nullptr;
}
inline bool Payment::has_customer() const {
  return _internal_has_customer();
}
inline void Payment::clear_customer() {
  if (GetArenaForAllocation() == nullptr && customer_ != nullptr) {
    delete customer_;
  }
  customer_ = nullptr;
}
inline const ::payment::v1alpha1::Customer& Payment::_internal_customer() const {
  const ::payment::v1alpha1::Customer* p = customer_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::v1alpha1::Customer&>(
      ::payment::v1alpha1::_Customer_default_instance_);
}
inline const ::payment::v1alpha1::Customer& Payment::customer() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.customer)
  return _internal_customer();
}
inline void Payment::unsafe_arena_set_allocated_customer(
    ::payment::v1alpha1::Customer* customer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_);
  }
  customer_ = customer;
  if (customer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.v1alpha1.Payment.customer)
}
inline ::payment::v1alpha1::Customer* Payment::release_customer() {
  
  ::payment::v1alpha1::Customer* temp = customer_;
  customer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::v1alpha1::Customer* Payment::unsafe_arena_release_customer() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.customer)
  
  ::payment::v1alpha1::Customer* temp = customer_;
  customer_ = nullptr;
  return temp;
}
inline ::payment::v1alpha1::Customer* Payment::_internal_mutable_customer() {
  
  if (customer_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::v1alpha1::Customer>(GetArenaForAllocation());
    customer_ = p;
  }
  return customer_;
}
inline ::payment::v1alpha1::Customer* Payment::mutable_customer() {
  ::payment::v1alpha1::Customer* _msg = _internal_mutable_customer();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.customer)
  return _msg;
}
inline void Payment::set_allocated_customer(::payment::v1alpha1::Customer* customer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete customer_;
  }
  if (customer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::v1alpha1::Customer>::GetOwningArena(customer);
    if (message_arena != submessage_arena) {
      customer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer, submessage_arena);
    }
    
  } else {
    
  }
  customer_ = customer;
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.customer)
}

// .payment.v1alpha1.Suscription suscription = 3 [json_name = "suscription"];
inline bool Payment::_internal_has_suscription() const {
  return this != internal_default_instance() && suscription_ != nullptr;
}
inline bool Payment::has_suscription() const {
  return _internal_has_suscription();
}
inline void Payment::clear_suscription() {
  if (GetArenaForAllocation() == nullptr && suscription_ != nullptr) {
    delete suscription_;
  }
  suscription_ = nullptr;
}
inline const ::payment::v1alpha1::Suscription& Payment::_internal_suscription() const {
  const ::payment::v1alpha1::Suscription* p = suscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::v1alpha1::Suscription&>(
      ::payment::v1alpha1::_Suscription_default_instance_);
}
inline const ::payment::v1alpha1::Suscription& Payment::suscription() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.suscription)
  return _internal_suscription();
}
inline void Payment::unsafe_arena_set_allocated_suscription(
    ::payment::v1alpha1::Suscription* suscription) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suscription_);
  }
  suscription_ = suscription;
  if (suscription) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.v1alpha1.Payment.suscription)
}
inline ::payment::v1alpha1::Suscription* Payment::release_suscription() {
  
  ::payment::v1alpha1::Suscription* temp = suscription_;
  suscription_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::v1alpha1::Suscription* Payment::unsafe_arena_release_suscription() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.suscription)
  
  ::payment::v1alpha1::Suscription* temp = suscription_;
  suscription_ = nullptr;
  return temp;
}
inline ::payment::v1alpha1::Suscription* Payment::_internal_mutable_suscription() {
  
  if (suscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::v1alpha1::Suscription>(GetArenaForAllocation());
    suscription_ = p;
  }
  return suscription_;
}
inline ::payment::v1alpha1::Suscription* Payment::mutable_suscription() {
  ::payment::v1alpha1::Suscription* _msg = _internal_mutable_suscription();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.suscription)
  return _msg;
}
inline void Payment::set_allocated_suscription(::payment::v1alpha1::Suscription* suscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete suscription_;
  }
  if (suscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::v1alpha1::Suscription>::GetOwningArena(suscription);
    if (message_arena != submessage_arena) {
      suscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suscription, submessage_arena);
    }
    
  } else {
    
  }
  suscription_ = suscription;
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.suscription)
}

// string token_card = 4 [json_name = "tokenCard"];
inline void Payment::clear_token_card() {
  token_card_.ClearToEmpty();
}
inline const std::string& Payment::token_card() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.token_card)
  return _internal_token_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_token_card(ArgT0&& arg0, ArgT... args) {
 
 token_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.token_card)
}
inline std::string* Payment::mutable_token_card() {
  std::string* _s = _internal_mutable_token_card();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.token_card)
  return _s;
}
inline const std::string& Payment::_internal_token_card() const {
  return token_card_.Get();
}
inline void Payment::_internal_set_token_card(const std::string& value) {
  
  token_card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_token_card() {
  
  return token_card_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_token_card() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.token_card)
  return token_card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_token_card(std::string* token_card) {
  if (token_card != nullptr) {
    
  } else {
    
  }
  token_card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_card,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.token_card)
}

// -------------------------------------------------------------------

// Invoice

// string id = 1 [json_name = "id"];
inline void Invoice::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Invoice::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Invoice.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invoice::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Invoice.id)
}
inline std::string* Invoice::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Invoice.id)
  return _s;
}
inline const std::string& Invoice::_internal_id() const {
  return id_.Get();
}
inline void Invoice::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invoice::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invoice::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Invoice.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invoice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Invoice.id)
}

// .payment.v1alpha1.Customer customer = 2 [json_name = "customer"];
inline bool Invoice::_internal_has_customer() const {
  return this != internal_default_instance() && customer_ != nullptr;
}
inline bool Invoice::has_customer() const {
  return _internal_has_customer();
}
inline void Invoice::clear_customer() {
  if (GetArenaForAllocation() == nullptr && customer_ != nullptr) {
    delete customer_;
  }
  customer_ = nullptr;
}
inline const ::payment::v1alpha1::Customer& Invoice::_internal_customer() const {
  const ::payment::v1alpha1::Customer* p = customer_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::v1alpha1::Customer&>(
      ::payment::v1alpha1::_Customer_default_instance_);
}
inline const ::payment::v1alpha1::Customer& Invoice::customer() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Invoice.customer)
  return _internal_customer();
}
inline void Invoice::unsafe_arena_set_allocated_customer(
    ::payment::v1alpha1::Customer* customer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_);
  }
  customer_ = customer;
  if (customer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.v1alpha1.Invoice.customer)
}
inline ::payment::v1alpha1::Customer* Invoice::release_customer() {
  
  ::payment::v1alpha1::Customer* temp = customer_;
  customer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::v1alpha1::Customer* Invoice::unsafe_arena_release_customer() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Invoice.customer)
  
  ::payment::v1alpha1::Customer* temp = customer_;
  customer_ = nullptr;
  return temp;
}
inline ::payment::v1alpha1::Customer* Invoice::_internal_mutable_customer() {
  
  if (customer_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::v1alpha1::Customer>(GetArenaForAllocation());
    customer_ = p;
  }
  return customer_;
}
inline ::payment::v1alpha1::Customer* Invoice::mutable_customer() {
  ::payment::v1alpha1::Customer* _msg = _internal_mutable_customer();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Invoice.customer)
  return _msg;
}
inline void Invoice::set_allocated_customer(::payment::v1alpha1::Customer* customer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete customer_;
  }
  if (customer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::v1alpha1::Customer>::GetOwningArena(customer);
    if (message_arena != submessage_arena) {
      customer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer, submessage_arena);
    }
    
  } else {
    
  }
  customer_ = customer;
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Invoice.customer)
}

// .payment.v1alpha1.Suscription suscription = 3 [json_name = "suscription"];
inline bool Invoice::_internal_has_suscription() const {
  return this != internal_default_instance() && suscription_ != nullptr;
}
inline bool Invoice::has_suscription() const {
  return _internal_has_suscription();
}
inline void Invoice::clear_suscription() {
  if (GetArenaForAllocation() == nullptr && suscription_ != nullptr) {
    delete suscription_;
  }
  suscription_ = nullptr;
}
inline const ::payment::v1alpha1::Suscription& Invoice::_internal_suscription() const {
  const ::payment::v1alpha1::Suscription* p = suscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::v1alpha1::Suscription&>(
      ::payment::v1alpha1::_Suscription_default_instance_);
}
inline const ::payment::v1alpha1::Suscription& Invoice::suscription() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Invoice.suscription)
  return _internal_suscription();
}
inline void Invoice::unsafe_arena_set_allocated_suscription(
    ::payment::v1alpha1::Suscription* suscription) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suscription_);
  }
  suscription_ = suscription;
  if (suscription) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.v1alpha1.Invoice.suscription)
}
inline ::payment::v1alpha1::Suscription* Invoice::release_suscription() {
  
  ::payment::v1alpha1::Suscription* temp = suscription_;
  suscription_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::v1alpha1::Suscription* Invoice::unsafe_arena_release_suscription() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Invoice.suscription)
  
  ::payment::v1alpha1::Suscription* temp = suscription_;
  suscription_ = nullptr;
  return temp;
}
inline ::payment::v1alpha1::Suscription* Invoice::_internal_mutable_suscription() {
  
  if (suscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::v1alpha1::Suscription>(GetArenaForAllocation());
    suscription_ = p;
  }
  return suscription_;
}
inline ::payment::v1alpha1::Suscription* Invoice::mutable_suscription() {
  ::payment::v1alpha1::Suscription* _msg = _internal_mutable_suscription();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Invoice.suscription)
  return _msg;
}
inline void Invoice::set_allocated_suscription(::payment::v1alpha1::Suscription* suscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete suscription_;
  }
  if (suscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::v1alpha1::Suscription>::GetOwningArena(suscription);
    if (message_arena != submessage_arena) {
      suscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suscription, submessage_arena);
    }
    
  } else {
    
  }
  suscription_ = suscription;
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Invoice.suscription)
}

// -------------------------------------------------------------------

// PaymentList

// repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
inline int PaymentList::_internal_items_size() const {
  return items_.size();
}
inline int PaymentList::items_size() const {
  return _internal_items_size();
}
inline void PaymentList::clear_items() {
  items_.Clear();
}
inline ::payment::v1alpha1::Payment* PaymentList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.PaymentList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >*
PaymentList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:payment.v1alpha1.PaymentList.items)
  return &items_;
}
inline const ::payment::v1alpha1::Payment& PaymentList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::payment::v1alpha1::Payment& PaymentList::items(int index) const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.PaymentList.items)
  return _internal_items(index);
}
inline ::payment::v1alpha1::Payment* PaymentList::_internal_add_items() {
  return items_.Add();
}
inline ::payment::v1alpha1::Payment* PaymentList::add_items() {
  ::payment::v1alpha1::Payment* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:payment.v1alpha1.PaymentList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >&
PaymentList::items() const {
  // @@protoc_insertion_point(field_list:payment.v1alpha1.PaymentList.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace payment

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto
