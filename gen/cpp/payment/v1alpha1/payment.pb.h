// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment/v1alpha1/payment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payment_2fv1alpha1_2fpayment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payment_2fv1alpha1_2fpayment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payment_2fv1alpha1_2fpayment_2eproto;
namespace payment {
namespace v1alpha1 {
class Biling;
struct BilingDefaultTypeInternal;
extern BilingDefaultTypeInternal _Biling_default_instance_;
class Card;
struct CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class Customer;
struct CustomerDefaultTypeInternal;
extern CustomerDefaultTypeInternal _Customer_default_instance_;
class Customer_BilingEntry_DoNotUse;
struct Customer_BilingEntry_DoNotUseDefaultTypeInternal;
extern Customer_BilingEntry_DoNotUseDefaultTypeInternal _Customer_BilingEntry_DoNotUse_default_instance_;
class Customer_InvoiceEntry_DoNotUse;
struct Customer_InvoiceEntry_DoNotUseDefaultTypeInternal;
extern Customer_InvoiceEntry_DoNotUseDefaultTypeInternal _Customer_InvoiceEntry_DoNotUse_default_instance_;
class Customer_PaymentEntry_DoNotUse;
struct Customer_PaymentEntry_DoNotUseDefaultTypeInternal;
extern Customer_PaymentEntry_DoNotUseDefaultTypeInternal _Customer_PaymentEntry_DoNotUse_default_instance_;
class Customer_SuscriptionEntry_DoNotUse;
struct Customer_SuscriptionEntry_DoNotUseDefaultTypeInternal;
extern Customer_SuscriptionEntry_DoNotUseDefaultTypeInternal _Customer_SuscriptionEntry_DoNotUse_default_instance_;
class Invoice;
struct InvoiceDefaultTypeInternal;
extern InvoiceDefaultTypeInternal _Invoice_default_instance_;
class Payment;
struct PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;
class PaymentList;
struct PaymentListDefaultTypeInternal;
extern PaymentListDefaultTypeInternal _PaymentList_default_instance_;
class Payment_CardEntry_DoNotUse;
struct Payment_CardEntry_DoNotUseDefaultTypeInternal;
extern Payment_CardEntry_DoNotUseDefaultTypeInternal _Payment_CardEntry_DoNotUse_default_instance_;
class Suscription;
struct SuscriptionDefaultTypeInternal;
extern SuscriptionDefaultTypeInternal _Suscription_default_instance_;
}  // namespace v1alpha1
}  // namespace payment
PROTOBUF_NAMESPACE_OPEN
template<> ::payment::v1alpha1::Biling* Arena::CreateMaybeMessage<::payment::v1alpha1::Biling>(Arena*);
template<> ::payment::v1alpha1::Card* Arena::CreateMaybeMessage<::payment::v1alpha1::Card>(Arena*);
template<> ::payment::v1alpha1::Customer* Arena::CreateMaybeMessage<::payment::v1alpha1::Customer>(Arena*);
template<> ::payment::v1alpha1::Customer_BilingEntry_DoNotUse* Arena::CreateMaybeMessage<::payment::v1alpha1::Customer_BilingEntry_DoNotUse>(Arena*);
template<> ::payment::v1alpha1::Customer_InvoiceEntry_DoNotUse* Arena::CreateMaybeMessage<::payment::v1alpha1::Customer_InvoiceEntry_DoNotUse>(Arena*);
template<> ::payment::v1alpha1::Customer_PaymentEntry_DoNotUse* Arena::CreateMaybeMessage<::payment::v1alpha1::Customer_PaymentEntry_DoNotUse>(Arena*);
template<> ::payment::v1alpha1::Customer_SuscriptionEntry_DoNotUse* Arena::CreateMaybeMessage<::payment::v1alpha1::Customer_SuscriptionEntry_DoNotUse>(Arena*);
template<> ::payment::v1alpha1::Invoice* Arena::CreateMaybeMessage<::payment::v1alpha1::Invoice>(Arena*);
template<> ::payment::v1alpha1::Payment* Arena::CreateMaybeMessage<::payment::v1alpha1::Payment>(Arena*);
template<> ::payment::v1alpha1::PaymentList* Arena::CreateMaybeMessage<::payment::v1alpha1::PaymentList>(Arena*);
template<> ::payment::v1alpha1::Payment_CardEntry_DoNotUse* Arena::CreateMaybeMessage<::payment::v1alpha1::Payment_CardEntry_DoNotUse>(Arena*);
template<> ::payment::v1alpha1::Suscription* Arena::CreateMaybeMessage<::payment::v1alpha1::Suscription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace payment {
namespace v1alpha1 {

// ===================================================================

class Customer_SuscriptionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_SuscriptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_SuscriptionEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Customer_SuscriptionEntry_DoNotUse();
  explicit constexpr Customer_SuscriptionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Customer_SuscriptionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Customer_SuscriptionEntry_DoNotUse& other);
  static const Customer_SuscriptionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Customer_SuscriptionEntry_DoNotUse*>(&_Customer_SuscriptionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.SuscriptionEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.SuscriptionEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Customer_PaymentEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_PaymentEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_PaymentEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Customer_PaymentEntry_DoNotUse();
  explicit constexpr Customer_PaymentEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Customer_PaymentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Customer_PaymentEntry_DoNotUse& other);
  static const Customer_PaymentEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Customer_PaymentEntry_DoNotUse*>(&_Customer_PaymentEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.PaymentEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.PaymentEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Customer_InvoiceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_InvoiceEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_InvoiceEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Customer_InvoiceEntry_DoNotUse();
  explicit constexpr Customer_InvoiceEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Customer_InvoiceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Customer_InvoiceEntry_DoNotUse& other);
  static const Customer_InvoiceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Customer_InvoiceEntry_DoNotUse*>(&_Customer_InvoiceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.InvoiceEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.InvoiceEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Customer_BilingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_BilingEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Customer_BilingEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Customer_BilingEntry_DoNotUse();
  explicit constexpr Customer_BilingEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Customer_BilingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Customer_BilingEntry_DoNotUse& other);
  static const Customer_BilingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Customer_BilingEntry_DoNotUse*>(&_Customer_BilingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.BilingEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Customer.BilingEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Customer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Customer) */ {
 public:
  inline Customer() : Customer(nullptr) {}
  ~Customer() override;
  explicit constexpr Customer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Customer(const Customer& from);
  Customer(Customer&& from) noexcept
    : Customer() {
    *this = ::std::move(from);
  }

  inline Customer& operator=(const Customer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Customer& operator=(Customer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Customer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Customer* internal_default_instance() {
    return reinterpret_cast<const Customer*>(
               &_Customer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Customer& a, Customer& b) {
    a.Swap(&b);
  }
  inline void Swap(Customer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Customer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Customer* New() const final {
    return new Customer();
  }

  Customer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Customer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Customer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Customer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Customer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Customer";
  }
  protected:
  explicit Customer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSuscriptionFieldNumber = 5,
    kPaymentFieldNumber = 6,
    kInvoiceFieldNumber = 7,
    kBilingFieldNumber = 8,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kOrganizationIdFieldNumber = 4,
  };
  // map<string, string> suscription = 5 [json_name = "suscription"];
  int suscription_size() const;
  private:
  int _internal_suscription_size() const;
  public:
  void clear_suscription();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_suscription() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_suscription();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      suscription() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_suscription();

  // map<string, string> payment = 6 [json_name = "payment"];
  int payment_size() const;
  private:
  int _internal_payment_size() const;
  public:
  void clear_payment();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_payment() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_payment();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      payment() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_payment();

  // map<string, string> invoice = 7 [json_name = "invoice"];
  int invoice_size() const;
  private:
  int _internal_invoice_size() const;
  public:
  void clear_invoice();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_invoice() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_invoice();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      invoice() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_invoice();

  // map<string, string> biling = 8 [json_name = "biling"];
  int biling_size() const;
  private:
  int _internal_biling_size() const;
  public:
  void clear_biling();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_biling() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_biling();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      biling() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_biling();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Customer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Customer_SuscriptionEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> suscription_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Customer_PaymentEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> payment_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Customer_InvoiceEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> invoice_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Customer_BilingEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> biling_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Suscription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Suscription) */ {
 public:
  inline Suscription() : Suscription(nullptr) {}
  ~Suscription() override;
  explicit constexpr Suscription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Suscription(const Suscription& from);
  Suscription(Suscription&& from) noexcept
    : Suscription() {
    *this = ::std::move(from);
  }

  inline Suscription& operator=(const Suscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Suscription& operator=(Suscription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Suscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Suscription* internal_default_instance() {
    return reinterpret_cast<const Suscription*>(
               &_Suscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Suscription& a, Suscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Suscription* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Suscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Suscription* New() const final {
    return new Suscription();
  }

  Suscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Suscription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Suscription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Suscription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Suscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Suscription";
  }
  protected:
  explicit Suscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPriceFieldNumber = 2,
    kCancelFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string price = 2 [json_name = "price"];
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_MUST_USE_RESULT std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // bool cancel = 3 [json_name = "cancel"];
  void clear_cancel();
  bool cancel() const;
  void set_cancel(bool value);
  private:
  bool _internal_cancel() const;
  void _internal_set_cancel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Suscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  bool cancel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Payment_CardEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Payment_CardEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Payment_CardEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Payment_CardEntry_DoNotUse();
  explicit constexpr Payment_CardEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Payment_CardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Payment_CardEntry_DoNotUse& other);
  static const Payment_CardEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Payment_CardEntry_DoNotUse*>(&_Payment_CardEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Payment.CardEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "payment.v1alpha1.Payment.CardEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Payment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Payment) */ {
 public:
  inline Payment() : Payment(nullptr) {}
  ~Payment() override;
  explicit constexpr Payment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payment(const Payment& from);
  Payment(Payment&& from) noexcept
    : Payment() {
    *this = ::std::move(from);
  }

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment& operator=(Payment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Payment& a, Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(Payment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payment* New() const final {
    return new Payment();
  }

  Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Payment";
  }
  protected:
  explicit Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 5,
    kIdFieldNumber = 1,
    kAliasFieldNumber = 4,
    kDefaultFieldNumber = 2,
    kEnabledFieldNumber = 3,
  };
  // map<string, string> card = 5 [json_name = "card"];
  int card_size() const;
  private:
  int _internal_card_size() const;
  public:
  void clear_card();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_card() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_card();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      card() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_card();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string alias = 4 [json_name = "alias"];
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_MUST_USE_RESULT std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // bool default = 2 [json_name = "default"];
  void clear_default_();
  bool default_() const;
  void set_default_(bool value);
  private:
  bool _internal_default_() const;
  void _internal_set_default_(bool value);
  public:

  // bool enabled = 3 [json_name = "enabled"];
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Payment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Payment_CardEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  bool default__;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Card final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Card) */ {
 public:
  inline Card() : Card(nullptr) {}
  ~Card() override;
  explicit constexpr Card(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Card(const Card& from);
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  inline Card& operator=(Card&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Card& default_instance() {
    return *internal_default_instance();
  }
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }
  inline void Swap(Card* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return new Card();
  }

  Card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Card& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Card& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Card";
  }
  protected:
  explicit Card(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumberFieldNumber = 2,
    kExpmonthFieldNumber = 3,
    kExpyearFieldNumber = 4,
    kCvcFieldNumber = 5,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string number = 2 [json_name = "number"];
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string expmonth = 3 [json_name = "expmonth"];
  void clear_expmonth();
  const std::string& expmonth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expmonth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expmonth();
  PROTOBUF_MUST_USE_RESULT std::string* release_expmonth();
  void set_allocated_expmonth(std::string* expmonth);
  private:
  const std::string& _internal_expmonth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expmonth(const std::string& value);
  std::string* _internal_mutable_expmonth();
  public:

  // string expyear = 4 [json_name = "expyear"];
  void clear_expyear();
  const std::string& expyear() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expyear(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expyear();
  PROTOBUF_MUST_USE_RESULT std::string* release_expyear();
  void set_allocated_expyear(std::string* expyear);
  private:
  const std::string& _internal_expyear() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expyear(const std::string& value);
  std::string* _internal_mutable_expyear();
  public:

  // string cvc = 5 [json_name = "cvc"];
  void clear_cvc();
  const std::string& cvc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cvc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cvc();
  PROTOBUF_MUST_USE_RESULT std::string* release_cvc();
  void set_allocated_cvc(std::string* cvc);
  private:
  const std::string& _internal_cvc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cvc(const std::string& value);
  std::string* _internal_mutable_cvc();
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expmonth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expyear_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cvc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Invoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Invoice) */ {
 public:
  inline Invoice() : Invoice(nullptr) {}
  ~Invoice() override;
  explicit constexpr Invoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Invoice(const Invoice& from);
  Invoice(Invoice&& from) noexcept
    : Invoice() {
    *this = ::std::move(from);
  }

  inline Invoice& operator=(const Invoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invoice& operator=(Invoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Invoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Invoice* internal_default_instance() {
    return reinterpret_cast<const Invoice*>(
               &_Invoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Invoice& a, Invoice& b) {
    a.Swap(&b);
  }
  inline void Swap(Invoice* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Invoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invoice* New() const final {
    return new Invoice();
  }

  Invoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Invoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Invoice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invoice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Invoice";
  }
  protected:
  explicit Invoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAccountNameFieldNumber = 2,
    kInvoiceIdFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string account_name = 2 [json_name = "accountName"];
  void clear_account_name();
  const std::string& account_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // string invoice_id = 3 [json_name = "invoiceId"];
  void clear_invoice_id();
  const std::string& invoice_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invoice_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invoice_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_invoice_id();
  void set_allocated_invoice_id(std::string* invoice_id);
  private:
  const std::string& _internal_invoice_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invoice_id(const std::string& value);
  std::string* _internal_mutable_invoice_id();
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Invoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invoice_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Biling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Biling) */ {
 public:
  inline Biling() : Biling(nullptr) {}
  ~Biling() override;
  explicit constexpr Biling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Biling(const Biling& from);
  Biling(Biling&& from) noexcept
    : Biling() {
    *this = ::std::move(from);
  }

  inline Biling& operator=(const Biling& from) {
    CopyFrom(from);
    return *this;
  }
  inline Biling& operator=(Biling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Biling& default_instance() {
    return *internal_default_instance();
  }
  static inline const Biling* internal_default_instance() {
    return reinterpret_cast<const Biling*>(
               &_Biling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Biling& a, Biling& b) {
    a.Swap(&b);
  }
  inline void Swap(Biling* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Biling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Biling* New() const final {
    return new Biling();
  }

  Biling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Biling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Biling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Biling& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Biling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Biling";
  }
  protected:
  explicit Biling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kListparamsFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string listparams = 2 [json_name = "listparams"];
  void clear_listparams();
  const std::string& listparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listparams();
  PROTOBUF_MUST_USE_RESULT std::string* release_listparams();
  void set_allocated_listparams(std::string* listparams);
  private:
  const std::string& _internal_listparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listparams(const std::string& value);
  std::string* _internal_mutable_listparams();
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Biling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listparams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.PaymentList) */ {
 public:
  inline PaymentList() : PaymentList(nullptr) {}
  ~PaymentList() override;
  explicit constexpr PaymentList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentList(const PaymentList& from);
  PaymentList(PaymentList&& from) noexcept
    : PaymentList() {
    *this = ::std::move(from);
  }

  inline PaymentList& operator=(const PaymentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentList& operator=(PaymentList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentList* internal_default_instance() {
    return reinterpret_cast<const PaymentList*>(
               &_PaymentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PaymentList& a, PaymentList& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentList* New() const final {
    return new PaymentList();
  }

  PaymentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.PaymentList";
  }
  protected:
  explicit PaymentList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::payment::v1alpha1::Payment* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >*
      mutable_items();
  private:
  const ::payment::v1alpha1::Payment& _internal_items(int index) const;
  ::payment::v1alpha1::Payment* _internal_add_items();
  public:
  const ::payment::v1alpha1::Payment& items(int index) const;
  ::payment::v1alpha1::Payment* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >&
      items() const;

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.PaymentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Customer

// string id = 1 [json_name = "id"];
inline void Customer::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Customer::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Customer::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.id)
}
inline std::string* Customer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Customer.id)
  return _s;
}
inline const std::string& Customer::_internal_id() const {
  return id_.Get();
}
inline void Customer::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Customer::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Customer::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Customer.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Customer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Customer.id)
}

// string name = 2 [json_name = "name"];
inline void Customer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Customer::name() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Customer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.name)
}
inline std::string* Customer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Customer.name)
  return _s;
}
inline const std::string& Customer::_internal_name() const {
  return name_.Get();
}
inline void Customer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Customer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Customer::release_name() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Customer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Customer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Customer.name)
}

// string email = 3 [json_name = "email"];
inline void Customer::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& Customer::email() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Customer::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.email)
}
inline std::string* Customer::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Customer.email)
  return _s;
}
inline const std::string& Customer::_internal_email() const {
  return email_.Get();
}
inline void Customer::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Customer::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Customer::release_email() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Customer.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Customer::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Customer.email)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void Customer::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Customer::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Customer::organization_id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Customer.organization_id)
  return _internal_organization_id();
}
inline void Customer::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Customer::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Customer.organization_id)
}

// map<string, string> suscription = 5 [json_name = "suscription"];
inline int Customer::_internal_suscription_size() const {
  return suscription_.size();
}
inline int Customer::suscription_size() const {
  return _internal_suscription_size();
}
inline void Customer::clear_suscription() {
  suscription_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::_internal_suscription() const {
  return suscription_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::suscription() const {
  // @@protoc_insertion_point(field_map:payment.v1alpha1.Customer.suscription)
  return _internal_suscription();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::_internal_mutable_suscription() {
  return suscription_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::mutable_suscription() {
  // @@protoc_insertion_point(field_mutable_map:payment.v1alpha1.Customer.suscription)
  return _internal_mutable_suscription();
}

// map<string, string> payment = 6 [json_name = "payment"];
inline int Customer::_internal_payment_size() const {
  return payment_.size();
}
inline int Customer::payment_size() const {
  return _internal_payment_size();
}
inline void Customer::clear_payment() {
  payment_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::_internal_payment() const {
  return payment_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::payment() const {
  // @@protoc_insertion_point(field_map:payment.v1alpha1.Customer.payment)
  return _internal_payment();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::_internal_mutable_payment() {
  return payment_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::mutable_payment() {
  // @@protoc_insertion_point(field_mutable_map:payment.v1alpha1.Customer.payment)
  return _internal_mutable_payment();
}

// map<string, string> invoice = 7 [json_name = "invoice"];
inline int Customer::_internal_invoice_size() const {
  return invoice_.size();
}
inline int Customer::invoice_size() const {
  return _internal_invoice_size();
}
inline void Customer::clear_invoice() {
  invoice_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::_internal_invoice() const {
  return invoice_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::invoice() const {
  // @@protoc_insertion_point(field_map:payment.v1alpha1.Customer.invoice)
  return _internal_invoice();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::_internal_mutable_invoice() {
  return invoice_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::mutable_invoice() {
  // @@protoc_insertion_point(field_mutable_map:payment.v1alpha1.Customer.invoice)
  return _internal_mutable_invoice();
}

// map<string, string> biling = 8 [json_name = "biling"];
inline int Customer::_internal_biling_size() const {
  return biling_.size();
}
inline int Customer::biling_size() const {
  return _internal_biling_size();
}
inline void Customer::clear_biling() {
  biling_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::_internal_biling() const {
  return biling_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Customer::biling() const {
  // @@protoc_insertion_point(field_map:payment.v1alpha1.Customer.biling)
  return _internal_biling();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::_internal_mutable_biling() {
  return biling_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Customer::mutable_biling() {
  // @@protoc_insertion_point(field_mutable_map:payment.v1alpha1.Customer.biling)
  return _internal_mutable_biling();
}

// -------------------------------------------------------------------

// Suscription

// string id = 1 [json_name = "id"];
inline void Suscription::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Suscription::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Suscription.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Suscription::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Suscription.id)
}
inline std::string* Suscription::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Suscription.id)
  return _s;
}
inline const std::string& Suscription::_internal_id() const {
  return id_.Get();
}
inline void Suscription::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Suscription::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Suscription::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Suscription.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Suscription::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Suscription.id)
}

// string price = 2 [json_name = "price"];
inline void Suscription::clear_price() {
  price_.ClearToEmpty();
}
inline const std::string& Suscription::price() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Suscription.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Suscription::set_price(ArgT0&& arg0, ArgT... args) {
 
 price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Suscription.price)
}
inline std::string* Suscription::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Suscription.price)
  return _s;
}
inline const std::string& Suscription::_internal_price() const {
  return price_.Get();
}
inline void Suscription::_internal_set_price(const std::string& value) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Suscription::_internal_mutable_price() {
  
  return price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Suscription::release_price() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Suscription.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Suscription::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Suscription.price)
}

// bool cancel = 3 [json_name = "cancel"];
inline void Suscription::clear_cancel() {
  cancel_ = false;
}
inline bool Suscription::_internal_cancel() const {
  return cancel_;
}
inline bool Suscription::cancel() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Suscription.cancel)
  return _internal_cancel();
}
inline void Suscription::_internal_set_cancel(bool value) {
  
  cancel_ = value;
}
inline void Suscription::set_cancel(bool value) {
  _internal_set_cancel(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Suscription.cancel)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Payment

// string id = 1 [json_name = "id"];
inline void Payment::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Payment::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.id)
}
inline std::string* Payment::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.id)
  return _s;
}
inline const std::string& Payment::_internal_id() const {
  return id_.Get();
}
inline void Payment::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.id)
}

// bool default = 2 [json_name = "default"];
inline void Payment::clear_default_() {
  default__ = false;
}
inline bool Payment::_internal_default_() const {
  return default__;
}
inline bool Payment::default_() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.default)
  return _internal_default_();
}
inline void Payment::_internal_set_default_(bool value) {
  
  default__ = value;
}
inline void Payment::set_default_(bool value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.default)
}

// bool enabled = 3 [json_name = "enabled"];
inline void Payment::clear_enabled() {
  enabled_ = false;
}
inline bool Payment::_internal_enabled() const {
  return enabled_;
}
inline bool Payment::enabled() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.enabled)
  return _internal_enabled();
}
inline void Payment::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Payment::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.enabled)
}

// string alias = 4 [json_name = "alias"];
inline void Payment::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& Payment::alias() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_alias(ArgT0&& arg0, ArgT... args) {
 
 alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.alias)
}
inline std::string* Payment::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.alias)
  return _s;
}
inline const std::string& Payment::_internal_alias() const {
  return alias_.Get();
}
inline void Payment::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_alias() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.alias)
}

// map<string, string> card = 5 [json_name = "card"];
inline int Payment::_internal_card_size() const {
  return card_.size();
}
inline int Payment::card_size() const {
  return _internal_card_size();
}
inline void Payment::clear_card() {
  card_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Payment::_internal_card() const {
  return card_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Payment::card() const {
  // @@protoc_insertion_point(field_map:payment.v1alpha1.Payment.card)
  return _internal_card();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Payment::_internal_mutable_card() {
  return card_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Payment::mutable_card() {
  // @@protoc_insertion_point(field_mutable_map:payment.v1alpha1.Payment.card)
  return _internal_mutable_card();
}

// -------------------------------------------------------------------

// Card

// string id = 1 [json_name = "id"];
inline void Card::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Card::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Card.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Card::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Card.id)
}
inline std::string* Card::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Card.id)
  return _s;
}
inline const std::string& Card::_internal_id() const {
  return id_.Get();
}
inline void Card::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Card::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Card::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Card.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Card::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Card.id)
}

// string number = 2 [json_name = "number"];
inline void Card::clear_number() {
  number_.ClearToEmpty();
}
inline const std::string& Card::number() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Card.number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Card::set_number(ArgT0&& arg0, ArgT... args) {
 
 number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Card.number)
}
inline std::string* Card::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Card.number)
  return _s;
}
inline const std::string& Card::_internal_number() const {
  return number_.Get();
}
inline void Card::_internal_set_number(const std::string& value) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Card::_internal_mutable_number() {
  
  return number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Card::release_number() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Card.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Card::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Card.number)
}

// string expmonth = 3 [json_name = "expmonth"];
inline void Card::clear_expmonth() {
  expmonth_.ClearToEmpty();
}
inline const std::string& Card::expmonth() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Card.expmonth)
  return _internal_expmonth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Card::set_expmonth(ArgT0&& arg0, ArgT... args) {
 
 expmonth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Card.expmonth)
}
inline std::string* Card::mutable_expmonth() {
  std::string* _s = _internal_mutable_expmonth();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Card.expmonth)
  return _s;
}
inline const std::string& Card::_internal_expmonth() const {
  return expmonth_.Get();
}
inline void Card::_internal_set_expmonth(const std::string& value) {
  
  expmonth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Card::_internal_mutable_expmonth() {
  
  return expmonth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Card::release_expmonth() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Card.expmonth)
  return expmonth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Card::set_allocated_expmonth(std::string* expmonth) {
  if (expmonth != nullptr) {
    
  } else {
    
  }
  expmonth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expmonth,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Card.expmonth)
}

// string expyear = 4 [json_name = "expyear"];
inline void Card::clear_expyear() {
  expyear_.ClearToEmpty();
}
inline const std::string& Card::expyear() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Card.expyear)
  return _internal_expyear();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Card::set_expyear(ArgT0&& arg0, ArgT... args) {
 
 expyear_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Card.expyear)
}
inline std::string* Card::mutable_expyear() {
  std::string* _s = _internal_mutable_expyear();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Card.expyear)
  return _s;
}
inline const std::string& Card::_internal_expyear() const {
  return expyear_.Get();
}
inline void Card::_internal_set_expyear(const std::string& value) {
  
  expyear_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Card::_internal_mutable_expyear() {
  
  return expyear_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Card::release_expyear() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Card.expyear)
  return expyear_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Card::set_allocated_expyear(std::string* expyear) {
  if (expyear != nullptr) {
    
  } else {
    
  }
  expyear_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expyear,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Card.expyear)
}

// string cvc = 5 [json_name = "cvc"];
inline void Card::clear_cvc() {
  cvc_.ClearToEmpty();
}
inline const std::string& Card::cvc() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Card.cvc)
  return _internal_cvc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Card::set_cvc(ArgT0&& arg0, ArgT... args) {
 
 cvc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Card.cvc)
}
inline std::string* Card::mutable_cvc() {
  std::string* _s = _internal_mutable_cvc();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Card.cvc)
  return _s;
}
inline const std::string& Card::_internal_cvc() const {
  return cvc_.Get();
}
inline void Card::_internal_set_cvc(const std::string& value) {
  
  cvc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Card::_internal_mutable_cvc() {
  
  return cvc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Card::release_cvc() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Card.cvc)
  return cvc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Card::set_allocated_cvc(std::string* cvc) {
  if (cvc != nullptr) {
    
  } else {
    
  }
  cvc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cvc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Card.cvc)
}

// -------------------------------------------------------------------

// Invoice

// string id = 1 [json_name = "id"];
inline void Invoice::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Invoice::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Invoice.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invoice::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Invoice.id)
}
inline std::string* Invoice::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Invoice.id)
  return _s;
}
inline const std::string& Invoice::_internal_id() const {
  return id_.Get();
}
inline void Invoice::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invoice::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invoice::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Invoice.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invoice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Invoice.id)
}

// string account_name = 2 [json_name = "accountName"];
inline void Invoice::clear_account_name() {
  account_name_.ClearToEmpty();
}
inline const std::string& Invoice::account_name() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Invoice.account_name)
  return _internal_account_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invoice::set_account_name(ArgT0&& arg0, ArgT... args) {
 
 account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Invoice.account_name)
}
inline std::string* Invoice::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Invoice.account_name)
  return _s;
}
inline const std::string& Invoice::_internal_account_name() const {
  return account_name_.Get();
}
inline void Invoice::_internal_set_account_name(const std::string& value) {
  
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invoice::_internal_mutable_account_name() {
  
  return account_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invoice::release_account_name() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Invoice.account_name)
  return account_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invoice::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Invoice.account_name)
}

// string invoice_id = 3 [json_name = "invoiceId"];
inline void Invoice::clear_invoice_id() {
  invoice_id_.ClearToEmpty();
}
inline const std::string& Invoice::invoice_id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Invoice.invoice_id)
  return _internal_invoice_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invoice::set_invoice_id(ArgT0&& arg0, ArgT... args) {
 
 invoice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Invoice.invoice_id)
}
inline std::string* Invoice::mutable_invoice_id() {
  std::string* _s = _internal_mutable_invoice_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Invoice.invoice_id)
  return _s;
}
inline const std::string& Invoice::_internal_invoice_id() const {
  return invoice_id_.Get();
}
inline void Invoice::_internal_set_invoice_id(const std::string& value) {
  
  invoice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invoice::_internal_mutable_invoice_id() {
  
  return invoice_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invoice::release_invoice_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Invoice.invoice_id)
  return invoice_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invoice::set_allocated_invoice_id(std::string* invoice_id) {
  if (invoice_id != nullptr) {
    
  } else {
    
  }
  invoice_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invoice_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Invoice.invoice_id)
}

// -------------------------------------------------------------------

// Biling

// string id = 1 [json_name = "id"];
inline void Biling::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Biling::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Biling.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Biling::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Biling.id)
}
inline std::string* Biling::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Biling.id)
  return _s;
}
inline const std::string& Biling::_internal_id() const {
  return id_.Get();
}
inline void Biling::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Biling::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Biling::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Biling.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Biling::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Biling.id)
}

// string listparams = 2 [json_name = "listparams"];
inline void Biling::clear_listparams() {
  listparams_.ClearToEmpty();
}
inline const std::string& Biling::listparams() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Biling.listparams)
  return _internal_listparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Biling::set_listparams(ArgT0&& arg0, ArgT... args) {
 
 listparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Biling.listparams)
}
inline std::string* Biling::mutable_listparams() {
  std::string* _s = _internal_mutable_listparams();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Biling.listparams)
  return _s;
}
inline const std::string& Biling::_internal_listparams() const {
  return listparams_.Get();
}
inline void Biling::_internal_set_listparams(const std::string& value) {
  
  listparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Biling::_internal_mutable_listparams() {
  
  return listparams_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Biling::release_listparams() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Biling.listparams)
  return listparams_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Biling::set_allocated_listparams(std::string* listparams) {
  if (listparams != nullptr) {
    
  } else {
    
  }
  listparams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listparams,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Biling.listparams)
}

// -------------------------------------------------------------------

// PaymentList

// repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
inline int PaymentList::_internal_items_size() const {
  return items_.size();
}
inline int PaymentList::items_size() const {
  return _internal_items_size();
}
inline void PaymentList::clear_items() {
  items_.Clear();
}
inline ::payment::v1alpha1::Payment* PaymentList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.PaymentList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >*
PaymentList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:payment.v1alpha1.PaymentList.items)
  return &items_;
}
inline const ::payment::v1alpha1::Payment& PaymentList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::payment::v1alpha1::Payment& PaymentList::items(int index) const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.PaymentList.items)
  return _internal_items(index);
}
inline ::payment::v1alpha1::Payment* PaymentList::_internal_add_items() {
  return items_.Add();
}
inline ::payment::v1alpha1::Payment* PaymentList::add_items() {
  ::payment::v1alpha1::Payment* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:payment.v1alpha1.PaymentList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >&
PaymentList::items() const {
  // @@protoc_insertion_point(field_list:payment.v1alpha1.PaymentList.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace payment

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto
