// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment/v1alpha1/payment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payment_2fv1alpha1_2fpayment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payment_2fv1alpha1_2fpayment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payment_2fv1alpha1_2fpayment_2eproto;
namespace payment {
namespace v1alpha1 {
class Payment;
struct PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;
class PaymentList;
struct PaymentListDefaultTypeInternal;
extern PaymentListDefaultTypeInternal _PaymentList_default_instance_;
}  // namespace v1alpha1
}  // namespace payment
PROTOBUF_NAMESPACE_OPEN
template<> ::payment::v1alpha1::Payment* Arena::CreateMaybeMessage<::payment::v1alpha1::Payment>(Arena*);
template<> ::payment::v1alpha1::PaymentList* Arena::CreateMaybeMessage<::payment::v1alpha1::PaymentList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace payment {
namespace v1alpha1 {

// ===================================================================

class Payment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.Payment) */ {
 public:
  inline Payment() : Payment(nullptr) {}
  ~Payment() override;
  explicit constexpr Payment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payment(const Payment& from);
  Payment(Payment&& from) noexcept
    : Payment() {
    *this = ::std::move(from);
  }

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment& operator=(Payment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Payment& a, Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(Payment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payment* New() const final {
    return new Payment();
  }

  Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.Payment";
  }
  protected:
  explicit Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCardHolderNameFieldNumber = 2,
    kCardTypeFieldNumber = 3,
    kExpiryDateFieldNumber = 6,
    kApplicationIdFieldNumber = 9,
    kCardNumberFieldNumber = 4,
    kCvvNumberFieldNumber = 5,
    kOrganizationIdFieldNumber = 7,
    kProjectIdFieldNumber = 8,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string card_holder_name = 2 [json_name = "cardHolderName"];
  void clear_card_holder_name();
  const std::string& card_holder_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_holder_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_holder_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_holder_name();
  void set_allocated_card_holder_name(std::string* card_holder_name);
  private:
  const std::string& _internal_card_holder_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_holder_name(const std::string& value);
  std::string* _internal_mutable_card_holder_name();
  public:

  // string card_type = 3 [json_name = "cardType"];
  void clear_card_type();
  const std::string& card_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_type();
  void set_allocated_card_type(std::string* card_type);
  private:
  const std::string& _internal_card_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_type(const std::string& value);
  std::string* _internal_mutable_card_type();
  public:

  // string expiry_date = 6 [json_name = "expiryDate"];
  void clear_expiry_date();
  const std::string& expiry_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expiry_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expiry_date();
  PROTOBUF_MUST_USE_RESULT std::string* release_expiry_date();
  void set_allocated_expiry_date(std::string* expiry_date);
  private:
  const std::string& _internal_expiry_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry_date(const std::string& value);
  std::string* _internal_mutable_expiry_date();
  public:

  // string application_id = 9 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // int32 card_number = 4 [json_name = "cardNumber"];
  void clear_card_number();
  ::PROTOBUF_NAMESPACE_ID::int32 card_number() const;
  void set_card_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_number() const;
  void _internal_set_card_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cvv_number = 5 [json_name = "cvvNumber"];
  void clear_cvv_number();
  ::PROTOBUF_NAMESPACE_ID::int32 cvv_number() const;
  void set_cvv_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cvv_number() const;
  void _internal_set_cvv_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 organization_id = 7 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 8 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.Payment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_holder_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiry_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 cvv_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.v1alpha1.PaymentList) */ {
 public:
  inline PaymentList() : PaymentList(nullptr) {}
  ~PaymentList() override;
  explicit constexpr PaymentList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentList(const PaymentList& from);
  PaymentList(PaymentList&& from) noexcept
    : PaymentList() {
    *this = ::std::move(from);
  }

  inline PaymentList& operator=(const PaymentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentList& operator=(PaymentList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentList* internal_default_instance() {
    return reinterpret_cast<const PaymentList*>(
               &_PaymentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PaymentList& a, PaymentList& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentList* New() const final {
    return new PaymentList();
  }

  PaymentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.v1alpha1.PaymentList";
  }
  protected:
  explicit PaymentList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::payment::v1alpha1::Payment* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >*
      mutable_items();
  private:
  const ::payment::v1alpha1::Payment& _internal_items(int index) const;
  ::payment::v1alpha1::Payment* _internal_add_items();
  public:
  const ::payment::v1alpha1::Payment& items(int index) const;
  ::payment::v1alpha1::Payment* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >&
      items() const;

  // @@protoc_insertion_point(class_scope:payment.v1alpha1.PaymentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payment_2fv1alpha1_2fpayment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Payment

// string id = 1 [json_name = "id"];
inline void Payment::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Payment::id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.id)
}
inline std::string* Payment::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.id)
  return _s;
}
inline const std::string& Payment::_internal_id() const {
  return id_.Get();
}
inline void Payment::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.id)
}

// string card_holder_name = 2 [json_name = "cardHolderName"];
inline void Payment::clear_card_holder_name() {
  card_holder_name_.ClearToEmpty();
}
inline const std::string& Payment::card_holder_name() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.card_holder_name)
  return _internal_card_holder_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_card_holder_name(ArgT0&& arg0, ArgT... args) {
 
 card_holder_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.card_holder_name)
}
inline std::string* Payment::mutable_card_holder_name() {
  std::string* _s = _internal_mutable_card_holder_name();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.card_holder_name)
  return _s;
}
inline const std::string& Payment::_internal_card_holder_name() const {
  return card_holder_name_.Get();
}
inline void Payment::_internal_set_card_holder_name(const std::string& value) {
  
  card_holder_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_card_holder_name() {
  
  return card_holder_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_card_holder_name() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.card_holder_name)
  return card_holder_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_card_holder_name(std::string* card_holder_name) {
  if (card_holder_name != nullptr) {
    
  } else {
    
  }
  card_holder_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_holder_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.card_holder_name)
}

// string card_type = 3 [json_name = "cardType"];
inline void Payment::clear_card_type() {
  card_type_.ClearToEmpty();
}
inline const std::string& Payment::card_type() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.card_type)
  return _internal_card_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_card_type(ArgT0&& arg0, ArgT... args) {
 
 card_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.card_type)
}
inline std::string* Payment::mutable_card_type() {
  std::string* _s = _internal_mutable_card_type();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.card_type)
  return _s;
}
inline const std::string& Payment::_internal_card_type() const {
  return card_type_.Get();
}
inline void Payment::_internal_set_card_type(const std::string& value) {
  
  card_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_card_type() {
  
  return card_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_card_type() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.card_type)
  return card_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_card_type(std::string* card_type) {
  if (card_type != nullptr) {
    
  } else {
    
  }
  card_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.card_type)
}

// int32 card_number = 4 [json_name = "cardNumber"];
inline void Payment::clear_card_number() {
  card_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_card_number() const {
  return card_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::card_number() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.card_number)
  return _internal_card_number();
}
inline void Payment::_internal_set_card_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_number_ = value;
}
inline void Payment::set_card_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_number(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.card_number)
}

// int32 cvv_number = 5 [json_name = "cvvNumber"];
inline void Payment::clear_cvv_number() {
  cvv_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_cvv_number() const {
  return cvv_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::cvv_number() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.cvv_number)
  return _internal_cvv_number();
}
inline void Payment::_internal_set_cvv_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cvv_number_ = value;
}
inline void Payment::set_cvv_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cvv_number(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.cvv_number)
}

// string expiry_date = 6 [json_name = "expiryDate"];
inline void Payment::clear_expiry_date() {
  expiry_date_.ClearToEmpty();
}
inline const std::string& Payment::expiry_date() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.expiry_date)
  return _internal_expiry_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_expiry_date(ArgT0&& arg0, ArgT... args) {
 
 expiry_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.expiry_date)
}
inline std::string* Payment::mutable_expiry_date() {
  std::string* _s = _internal_mutable_expiry_date();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.expiry_date)
  return _s;
}
inline const std::string& Payment::_internal_expiry_date() const {
  return expiry_date_.Get();
}
inline void Payment::_internal_set_expiry_date(const std::string& value) {
  
  expiry_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_expiry_date() {
  
  return expiry_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_expiry_date() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.expiry_date)
  return expiry_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_expiry_date(std::string* expiry_date) {
  if (expiry_date != nullptr) {
    
  } else {
    
  }
  expiry_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiry_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.expiry_date)
}

// uint32 organization_id = 7 [json_name = "organizationId"];
inline void Payment::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payment::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payment::organization_id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.organization_id)
  return _internal_organization_id();
}
inline void Payment::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Payment::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.organization_id)
}

// uint32 project_id = 8 [json_name = "projectId"];
inline void Payment::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payment::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Payment::project_id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.project_id)
  return _internal_project_id();
}
inline void Payment::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Payment::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.project_id)
}

// string application_id = 9 [json_name = "applicationId"];
inline void Payment::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& Payment::application_id() const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.Payment.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.v1alpha1.Payment.application_id)
}
inline std::string* Payment::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.Payment.application_id)
  return _s;
}
inline const std::string& Payment::_internal_application_id() const {
  return application_id_.Get();
}
inline void Payment::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_application_id() {
  // @@protoc_insertion_point(field_release:payment.v1alpha1.Payment.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.v1alpha1.Payment.application_id)
}

// -------------------------------------------------------------------

// PaymentList

// repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
inline int PaymentList::_internal_items_size() const {
  return items_.size();
}
inline int PaymentList::items_size() const {
  return _internal_items_size();
}
inline void PaymentList::clear_items() {
  items_.Clear();
}
inline ::payment::v1alpha1::Payment* PaymentList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:payment.v1alpha1.PaymentList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >*
PaymentList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:payment.v1alpha1.PaymentList.items)
  return &items_;
}
inline const ::payment::v1alpha1::Payment& PaymentList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::payment::v1alpha1::Payment& PaymentList::items(int index) const {
  // @@protoc_insertion_point(field_get:payment.v1alpha1.PaymentList.items)
  return _internal_items(index);
}
inline ::payment::v1alpha1::Payment* PaymentList::_internal_add_items() {
  return items_.Add();
}
inline ::payment::v1alpha1::Payment* PaymentList::add_items() {
  ::payment::v1alpha1::Payment* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:payment.v1alpha1.PaymentList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::v1alpha1::Payment >&
PaymentList::items() const {
  // @@protoc_insertion_point(field_list:payment.v1alpha1.PaymentList.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace payment

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payment_2fv1alpha1_2fpayment_2eproto
