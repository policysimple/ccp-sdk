// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment/v1alpha1/payment.proto

#include "payment/v1alpha1/payment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace payment {
namespace v1alpha1 {
constexpr Customer::Customer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suscription_(nullptr)
  , payments_(nullptr)
  , invoice_(nullptr)
  , biling_(nullptr)
  , organization_id_(0u){}
struct CustomerDefaultTypeInternal {
  constexpr CustomerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomerDefaultTypeInternal() {}
  union {
    Customer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomerDefaultTypeInternal _Customer_default_instance_;
constexpr Project::Project(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProjectDefaultTypeInternal {
  constexpr ProjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectDefaultTypeInternal() {}
  union {
    Project _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectDefaultTypeInternal _Project_default_instance_;
constexpr Suscription::Suscription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suscription_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suscription_item_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invoice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_cpu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SuscriptionDefaultTypeInternal {
  constexpr SuscriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SuscriptionDefaultTypeInternal() {}
  union {
    Suscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SuscriptionDefaultTypeInternal _Suscription_default_instance_;
constexpr Payment::Payment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , card_(nullptr)
  , default__(false)
  , enabled_(false){}
struct PaymentDefaultTypeInternal {
  constexpr PaymentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaymentDefaultTypeInternal() {}
  union {
    Payment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaymentDefaultTypeInternal _Payment_default_instance_;
constexpr Card::Card(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , card_holder_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expmonth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expyear_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cvc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CardDefaultTypeInternal {
  constexpr CardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CardDefaultTypeInternal() {}
  union {
    Card _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CardDefaultTypeInternal _Card_default_instance_;
constexpr Invoice::Invoice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , period_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statuspay_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct InvoiceDefaultTypeInternal {
  constexpr InvoiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvoiceDefaultTypeInternal() {}
  union {
    Invoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvoiceDefaultTypeInternal _Invoice_default_instance_;
constexpr Biling::Biling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invoice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , month_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , year_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , totalusage_(int64_t{0})
  , cpu_(int64_t{0})
  , ram_(int64_t{0}){}
struct BilingDefaultTypeInternal {
  constexpr BilingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BilingDefaultTypeInternal() {}
  union {
    Biling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BilingDefaultTypeInternal _Biling_default_instance_;
constexpr InvoiceList::InvoiceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct InvoiceListDefaultTypeInternal {
  constexpr InvoiceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvoiceListDefaultTypeInternal() {}
  union {
    InvoiceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvoiceListDefaultTypeInternal _InvoiceList_default_instance_;
constexpr CustomerList::CustomerList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct CustomerListDefaultTypeInternal {
  constexpr CustomerListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomerListDefaultTypeInternal() {}
  union {
    CustomerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomerListDefaultTypeInternal _CustomerList_default_instance_;
constexpr BilingList::BilingList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct BilingListDefaultTypeInternal {
  constexpr BilingListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BilingListDefaultTypeInternal() {}
  union {
    BilingList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BilingListDefaultTypeInternal _BilingList_default_instance_;
constexpr SuscriptionList::SuscriptionList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct SuscriptionListDefaultTypeInternal {
  constexpr SuscriptionListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SuscriptionListDefaultTypeInternal() {}
  union {
    SuscriptionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SuscriptionListDefaultTypeInternal _SuscriptionList_default_instance_;
constexpr CardList::CardList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct CardListDefaultTypeInternal {
  constexpr CardListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CardListDefaultTypeInternal() {}
  union {
    CardList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CardListDefaultTypeInternal _CardList_default_instance_;
constexpr PaymentList::PaymentList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct PaymentListDefaultTypeInternal {
  constexpr PaymentListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaymentListDefaultTypeInternal() {}
  union {
    PaymentList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaymentListDefaultTypeInternal _PaymentList_default_instance_;
constexpr ProjectList::ProjectList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct ProjectListDefaultTypeInternal {
  constexpr ProjectListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectListDefaultTypeInternal() {}
  union {
    ProjectList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectListDefaultTypeInternal _ProjectList_default_instance_;
}  // namespace v1alpha1
}  // namespace payment
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_payment_2fv1alpha1_2fpayment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_payment_2fv1alpha1_2fpayment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_payment_2fv1alpha1_2fpayment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, customer_id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, organization_id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, name_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, email_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, suscription_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, payments_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, invoice_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, biling_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Customer, projects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, project_id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, name_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, image_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, description_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, created_at_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Project, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, suscription_id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, suscription_item_id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, invoice_id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, price_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, price_cpu_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, price_bytes_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, currency_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Suscription, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Payment, id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Payment, default__),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Payment, enabled_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Payment, alias_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Payment, card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Card, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Card, id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Card, number_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Card, card_holder_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Card, expmonth_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Card, expyear_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Card, cvc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Invoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Invoice, id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Invoice, amount_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Invoice, period_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Invoice, statuspay_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Invoice, date_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Invoice, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, invoice_id_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, account_name_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, totalusage_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, cpu_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, ram_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, month_),
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::Biling, year_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::InvoiceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::InvoiceList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::CustomerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::CustomerList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::BilingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::BilingList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::SuscriptionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::SuscriptionList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::CardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::CardList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::PaymentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::PaymentList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::ProjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::payment::v1alpha1::ProjectList, items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::payment::v1alpha1::Customer)},
  { 15, -1, sizeof(::payment::v1alpha1::Project)},
  { 27, -1, sizeof(::payment::v1alpha1::Suscription)},
  { 41, -1, sizeof(::payment::v1alpha1::Payment)},
  { 51, -1, sizeof(::payment::v1alpha1::Card)},
  { 62, -1, sizeof(::payment::v1alpha1::Invoice)},
  { 73, -1, sizeof(::payment::v1alpha1::Biling)},
  { 86, -1, sizeof(::payment::v1alpha1::InvoiceList)},
  { 92, -1, sizeof(::payment::v1alpha1::CustomerList)},
  { 98, -1, sizeof(::payment::v1alpha1::BilingList)},
  { 104, -1, sizeof(::payment::v1alpha1::SuscriptionList)},
  { 110, -1, sizeof(::payment::v1alpha1::CardList)},
  { 116, -1, sizeof(::payment::v1alpha1::PaymentList)},
  { 122, -1, sizeof(::payment::v1alpha1::ProjectList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_Customer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_Project_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_Suscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_Card_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_Invoice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_Biling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_InvoiceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_CustomerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_BilingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_SuscriptionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_CardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_PaymentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::payment::v1alpha1::_ProjectList_default_instance_),
};

const char descriptor_table_protodef_payment_2fv1alpha1_2fpayment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036payment/v1alpha1/payment.proto\022\020paymen"
  "t.v1alpha1\"\250\003\n\010Customer\022\016\n\002id\030\001 \001(\tR\002id\022"
  "\037\n\013customer_id\030\002 \001(\tR\ncustomerId\022\'\n\017orga"
  "nization_id\030\003 \001(\rR\016organizationId\022\022\n\004nam"
  "e\030\004 \001(\tR\004name\022\024\n\005email\030\005 \001(\tR\005email\022\?\n\013s"
  "uscription\030\006 \001(\0132\035.payment.v1alpha1.Susc"
  "riptionR\013suscription\0229\n\010payments\030\007 \001(\0132\035"
  ".payment.v1alpha1.PaymentListR\010payments\022"
  "3\n\007invoice\030\010 \001(\0132\031.payment.v1alpha1.Invo"
  "iceR\007invoice\0220\n\006biling\030\t \001(\0132\030.payment.v"
  "1alpha1.BilingR\006biling\0225\n\010projects\030\n \003(\013"
  "2\031.payment.v1alpha1.ProjectR\010projects\"\302\001"
  "\n\007Project\022\016\n\002id\030\001 \001(\tR\002id\022\035\n\nproject_id\030"
  "\002 \001(\tR\tprojectId\022\022\n\004name\030\003 \001(\tR\004name\022\024\n\005"
  "image\030\004 \001(\tR\005image\022 \n\013description\030\005 \001(\tR"
  "\013description\022\035\n\ncreated_at\030\006 \001(\tR\tcreate"
  "dAt\022\035\n\nupdated_at\030\007 \001(\tR\tupdatedAt\"\237\002\n\013S"
  "uscription\022\016\n\002id\030\001 \001(\tR\002id\022%\n\016suscriptio"
  "n_id\030\002 \001(\tR\rsuscriptionId\022.\n\023suscription"
  "_item_id\030\003 \001(\tR\021suscriptionItemId\022\035\n\ninv"
  "oice_id\030\004 \001(\tR\tinvoiceId\022\024\n\005price\030\005 \001(\tR"
  "\005price\022\033\n\tprice_cpu\030\006 \001(\tR\010priceCpu\022\037\n\013p"
  "rice_bytes\030\007 \001(\tR\npriceBytes\022\032\n\010currency"
  "\030\010 \001(\tR\010currency\022\032\n\010interval\030\t \001(\tR\010inte"
  "rval\"\217\001\n\007Payment\022\016\n\002id\030\001 \001(\tR\002id\022\030\n\007defa"
  "ult\030\002 \001(\010R\007default\022\030\n\007enabled\030\003 \001(\010R\007ena"
  "bled\022\024\n\005alias\030\004 \001(\tR\005alias\022*\n\004card\030\005 \001(\013"
  "2\026.payment.v1alpha1.CardR\004card\"\227\001\n\004Card\022"
  "\016\n\002id\030\001 \001(\tR\002id\022\026\n\006number\030\002 \001(\tR\006number\022"
  "\037\n\013card_holder\030\003 \001(\tR\ncardHolder\022\032\n\010expm"
  "onth\030\004 \001(\tR\010expmonth\022\030\n\007expyear\030\005 \001(\tR\007e"
  "xpyear\022\020\n\003cvc\030\006 \001(\tR\003cvc\"\225\001\n\007Invoice\022\016\n\002"
  "id\030\001 \001(\tR\002id\022\026\n\006amount\030\002 \001(\003R\006amount\022\026\n\006"
  "period\030\003 \001(\tR\006period\022\034\n\tstatuspay\030\004 \001(\tR"
  "\tstatuspay\022\022\n\004date\030\005 \001(\tR\004date\022\030\n\007produc"
  "t\030\006 \001(\tR\007product\"\310\001\n\006Biling\022\016\n\002id\030\001 \001(\tR"
  "\002id\022\035\n\ninvoice_id\030\002 \001(\tR\tinvoiceId\022!\n\014ac"
  "count_name\030\003 \001(\tR\013accountName\022\036\n\ntotalus"
  "age\030\004 \001(\003R\ntotalusage\022\020\n\003cpu\030\005 \001(\003R\003cpu\022"
  "\020\n\003ram\030\006 \001(\003R\003ram\022\024\n\005month\030\007 \001(\tR\005month\022"
  "\022\n\004year\030\010 \001(\tR\004year\">\n\013InvoiceList\022/\n\005it"
  "ems\030\001 \003(\0132\031.payment.v1alpha1.InvoiceR\005it"
  "ems\"@\n\014CustomerList\0220\n\005items\030\001 \003(\0132\032.pay"
  "ment.v1alpha1.CustomerR\005items\"<\n\nBilingL"
  "ist\022.\n\005items\030\001 \003(\0132\030.payment.v1alpha1.Bi"
  "lingR\005items\"F\n\017SuscriptionList\0223\n\005items\030"
  "\001 \003(\0132\035.payment.v1alpha1.SuscriptionR\005it"
  "ems\"8\n\010CardList\022,\n\005items\030\001 \003(\0132\026.payment"
  ".v1alpha1.CardR\005items\">\n\013PaymentList\022/\n\005"
  "items\030\001 \003(\0132\031.payment.v1alpha1.PaymentR\005"
  "items\">\n\013ProjectList\022/\n\005items\030\001 \003(\0132\031.pa"
  "yment.v1alpha1.ProjectR\005itemsB8Z6github."
  "com/cuemby/ccp-payment-service/payment/v"
  "1alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payment_2fv1alpha1_2fpayment_2eproto = {
  false, false, 2135, descriptor_table_protodef_payment_2fv1alpha1_2fpayment_2eproto, "payment/v1alpha1/payment.proto", 
  &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_payment_2fv1alpha1_2fpayment_2eproto::offsets,
  file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto, file_level_enum_descriptors_payment_2fv1alpha1_2fpayment_2eproto, file_level_service_descriptors_payment_2fv1alpha1_2fpayment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter() {
  return &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_payment_2fv1alpha1_2fpayment_2eproto(&descriptor_table_payment_2fv1alpha1_2fpayment_2eproto);
namespace payment {
namespace v1alpha1 {

// ===================================================================

class Customer::_Internal {
 public:
  static const ::payment::v1alpha1::Suscription& suscription(const Customer* msg);
  static const ::payment::v1alpha1::PaymentList& payments(const Customer* msg);
  static const ::payment::v1alpha1::Invoice& invoice(const Customer* msg);
  static const ::payment::v1alpha1::Biling& biling(const Customer* msg);
};

const ::payment::v1alpha1::Suscription&
Customer::_Internal::suscription(const Customer* msg) {
  return *msg->suscription_;
}
const ::payment::v1alpha1::PaymentList&
Customer::_Internal::payments(const Customer* msg) {
  return *msg->payments_;
}
const ::payment::v1alpha1::Invoice&
Customer::_Internal::invoice(const Customer* msg) {
  return *msg->invoice_;
}
const ::payment::v1alpha1::Biling&
Customer::_Internal::biling(const Customer* msg) {
  return *msg->biling_;
}
Customer::Customer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.Customer)
}
Customer::Customer(const Customer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projects_(from.projects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_id().empty()) {
    customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_suscription()) {
    suscription_ = new ::payment::v1alpha1::Suscription(*from.suscription_);
  } else {
    suscription_ = nullptr;
  }
  if (from._internal_has_payments()) {
    payments_ = new ::payment::v1alpha1::PaymentList(*from.payments_);
  } else {
    payments_ = nullptr;
  }
  if (from._internal_has_invoice()) {
    invoice_ = new ::payment::v1alpha1::Invoice(*from.invoice_);
  } else {
    invoice_ = nullptr;
  }
  if (from._internal_has_biling()) {
    biling_ = new ::payment::v1alpha1::Biling(*from.biling_);
  } else {
    biling_ = nullptr;
  }
  organization_id_ = from.organization_id_;
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.Customer)
}

inline void Customer::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&suscription_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&suscription_)) + sizeof(organization_id_));
}

Customer::~Customer() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.Customer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Customer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete suscription_;
  if (this != internal_default_instance()) delete payments_;
  if (this != internal_default_instance()) delete invoice_;
  if (this != internal_default_instance()) delete biling_;
}

void Customer::ArenaDtor(void* object) {
  Customer* _this = reinterpret_cast< Customer* >(object);
  (void)_this;
}
void Customer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Customer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Customer::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.Customer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  id_.ClearToEmpty();
  customer_id_.ClearToEmpty();
  name_.ClearToEmpty();
  email_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && suscription_ != nullptr) {
    delete suscription_;
  }
  suscription_ = nullptr;
  if (GetArenaForAllocation() == nullptr && payments_ != nullptr) {
    delete payments_;
  }
  payments_ = nullptr;
  if (GetArenaForAllocation() == nullptr && invoice_ != nullptr) {
    delete invoice_;
  }
  invoice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && biling_ != nullptr) {
    delete biling_;
  }
  biling_ = nullptr;
  organization_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Customer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Customer.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_id = 2 [json_name = "customerId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Customer.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 3 [json_name = "organizationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4 [json_name = "name"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Customer.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 5 [json_name = "email"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Customer.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .payment.v1alpha1.Suscription suscription = 6 [json_name = "suscription"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_suscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .payment.v1alpha1.PaymentList payments = 7 [json_name = "payments"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_payments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .payment.v1alpha1.Invoice invoice = 8 [json_name = "invoice"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .payment.v1alpha1.Biling biling = 9 [json_name = "biling"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_biling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .payment.v1alpha1.Project projects = 10 [json_name = "projects"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Customer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.Customer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Customer.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string customer_id = 2 [json_name = "customerId"];
  if (!this->_internal_customer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Customer.customer_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_customer_id(), target);
  }

  // uint32 organization_id = 3 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_organization_id(), target);
  }

  // string name = 4 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Customer.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string email = 5 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Customer.email");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_email(), target);
  }

  // .payment.v1alpha1.Suscription suscription = 6 [json_name = "suscription"];
  if (this->_internal_has_suscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::suscription(this), target, stream);
  }

  // .payment.v1alpha1.PaymentList payments = 7 [json_name = "payments"];
  if (this->_internal_has_payments()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::payments(this), target, stream);
  }

  // .payment.v1alpha1.Invoice invoice = 8 [json_name = "invoice"];
  if (this->_internal_has_invoice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::invoice(this), target, stream);
  }

  // .payment.v1alpha1.Biling biling = 9 [json_name = "biling"];
  if (this->_internal_has_biling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::biling(this), target, stream);
  }

  // repeated .payment.v1alpha1.Project projects = 10 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_projects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.Customer)
  return target;
}

size_t Customer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.Customer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Project projects = 10 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string customer_id = 2 [json_name = "customerId"];
  if (!this->_internal_customer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_id());
  }

  // string name = 4 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 5 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // .payment.v1alpha1.Suscription suscription = 6 [json_name = "suscription"];
  if (this->_internal_has_suscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suscription_);
  }

  // .payment.v1alpha1.PaymentList payments = 7 [json_name = "payments"];
  if (this->_internal_has_payments()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payments_);
  }

  // .payment.v1alpha1.Invoice invoice = 8 [json_name = "invoice"];
  if (this->_internal_has_invoice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_);
  }

  // .payment.v1alpha1.Biling biling = 9 [json_name = "biling"];
  if (this->_internal_has_biling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *biling_);
  }

  // uint32 organization_id = 3 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Customer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Customer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Customer::GetClassData() const { return &_class_data_; }

void Customer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Customer *>(to)->MergeFrom(
      static_cast<const Customer &>(from));
}


void Customer::MergeFrom(const Customer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.Customer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_customer_id().empty()) {
    _internal_set_customer_id(from._internal_customer_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (from._internal_has_suscription()) {
    _internal_mutable_suscription()->::payment::v1alpha1::Suscription::MergeFrom(from._internal_suscription());
  }
  if (from._internal_has_payments()) {
    _internal_mutable_payments()->::payment::v1alpha1::PaymentList::MergeFrom(from._internal_payments());
  }
  if (from._internal_has_invoice()) {
    _internal_mutable_invoice()->::payment::v1alpha1::Invoice::MergeFrom(from._internal_invoice());
  }
  if (from._internal_has_biling()) {
    _internal_mutable_biling()->::payment::v1alpha1::Biling::MergeFrom(from._internal_biling());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Customer::CopyFrom(const Customer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.Customer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Customer::IsInitialized() const {
  return true;
}

void Customer::InternalSwap(Customer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  projects_.InternalSwap(&other->projects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &customer_id_, GetArenaForAllocation(),
      &other->customer_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Customer, organization_id_)
      + sizeof(Customer::organization_id_)
      - PROTOBUF_FIELD_OFFSET(Customer, suscription_)>(
          reinterpret_cast<char*>(&suscription_),
          reinterpret_cast<char*>(&other->suscription_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Customer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[0]);
}

// ===================================================================

class Project::_Internal {
 public:
};

Project::Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.Project)
}
Project::Project(const Project& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.Project)
}

inline void Project::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.Project)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Project::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Project::ArenaDtor(void* object) {
  Project* _this = reinterpret_cast< Project* >(object);
  (void)_this;
}
void Project::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Project::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.Project)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  name_.ClearToEmpty();
  image_.ClearToEmpty();
  description_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Project::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Project.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Project.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Project.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 4 [json_name = "image"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Project.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5 [json_name = "description"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Project.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created_at = 6 [json_name = "createdAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Project.created_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updated_at = 7 [json_name = "updatedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Project.updated_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Project::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.Project)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Project.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Project.project_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_id(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Project.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string image = 4 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Project.image");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image(), target);
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Project.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Project.created_at");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_created_at(), target);
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Project.updated_at");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.Project)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 4 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Project::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Project::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Project::GetClassData() const { return &_class_data_; }

void Project::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Project *>(to)->MergeFrom(
      static_cast<const Project &>(from));
}


void Project::MergeFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.Project)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::InternalSwap(Project* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, GetArenaForAllocation(),
      &other->created_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, GetArenaForAllocation(),
      &other->updated_at_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Project::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[1]);
}

// ===================================================================

class Suscription::_Internal {
 public:
};

Suscription::Suscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.Suscription)
}
Suscription::Suscription(const Suscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  suscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suscription_id().empty()) {
    suscription_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suscription_id(), 
      GetArenaForAllocation());
  }
  suscription_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suscription_item_id().empty()) {
    suscription_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suscription_item_id(), 
      GetArenaForAllocation());
  }
  invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invoice_id().empty()) {
    invoice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invoice_id(), 
      GetArenaForAllocation());
  }
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price().empty()) {
    price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price(), 
      GetArenaForAllocation());
  }
  price_cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price_cpu().empty()) {
    price_cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price_cpu(), 
      GetArenaForAllocation());
  }
  price_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price_bytes().empty()) {
    price_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price_bytes(), 
      GetArenaForAllocation());
  }
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency(), 
      GetArenaForAllocation());
  }
  interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interval().empty()) {
    interval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interval(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.Suscription)
}

inline void Suscription::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
suscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
suscription_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
price_cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
price_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Suscription::~Suscription() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.Suscription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Suscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suscription_item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_cpu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Suscription::ArenaDtor(void* object) {
  Suscription* _this = reinterpret_cast< Suscription* >(object);
  (void)_this;
}
void Suscription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Suscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Suscription::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.Suscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  suscription_id_.ClearToEmpty();
  suscription_item_id_.ClearToEmpty();
  invoice_id_.ClearToEmpty();
  price_.ClearToEmpty();
  price_cpu_.ClearToEmpty();
  price_bytes_.ClearToEmpty();
  currency_.ClearToEmpty();
  interval_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Suscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suscription_id = 2 [json_name = "suscriptionId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_suscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.suscription_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suscription_item_id = 3 [json_name = "suscriptionItemId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_suscription_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.suscription_item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invoice_id = 4 [json_name = "invoiceId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_invoice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.invoice_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price = 5 [json_name = "price"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price_cpu = 6 [json_name = "priceCpu"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_price_cpu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.price_cpu"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price_bytes = 7 [json_name = "priceBytes"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_price_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.price_bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currency = 8 [json_name = "currency"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interval = 9 [json_name = "interval"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_interval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Suscription.interval"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Suscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.Suscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string suscription_id = 2 [json_name = "suscriptionId"];
  if (!this->_internal_suscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suscription_id().data(), static_cast<int>(this->_internal_suscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.suscription_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suscription_id(), target);
  }

  // string suscription_item_id = 3 [json_name = "suscriptionItemId"];
  if (!this->_internal_suscription_item_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suscription_item_id().data(), static_cast<int>(this->_internal_suscription_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.suscription_item_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_suscription_item_id(), target);
  }

  // string invoice_id = 4 [json_name = "invoiceId"];
  if (!this->_internal_invoice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invoice_id().data(), static_cast<int>(this->_internal_invoice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.invoice_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_invoice_id(), target);
  }

  // string price = 5 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.price");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_price(), target);
  }

  // string price_cpu = 6 [json_name = "priceCpu"];
  if (!this->_internal_price_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price_cpu().data(), static_cast<int>(this->_internal_price_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.price_cpu");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_price_cpu(), target);
  }

  // string price_bytes = 7 [json_name = "priceBytes"];
  if (!this->_internal_price_bytes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price_bytes().data(), static_cast<int>(this->_internal_price_bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.price_bytes");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_price_bytes(), target);
  }

  // string currency = 8 [json_name = "currency"];
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.currency");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_currency(), target);
  }

  // string interval = 9 [json_name = "interval"];
  if (!this->_internal_interval().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interval().data(), static_cast<int>(this->_internal_interval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Suscription.interval");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.Suscription)
  return target;
}

size_t Suscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.Suscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string suscription_id = 2 [json_name = "suscriptionId"];
  if (!this->_internal_suscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suscription_id());
  }

  // string suscription_item_id = 3 [json_name = "suscriptionItemId"];
  if (!this->_internal_suscription_item_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suscription_item_id());
  }

  // string invoice_id = 4 [json_name = "invoiceId"];
  if (!this->_internal_invoice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoice_id());
  }

  // string price = 5 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  // string price_cpu = 6 [json_name = "priceCpu"];
  if (!this->_internal_price_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price_cpu());
  }

  // string price_bytes = 7 [json_name = "priceBytes"];
  if (!this->_internal_price_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price_bytes());
  }

  // string currency = 8 [json_name = "currency"];
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string interval = 9 [json_name = "interval"];
  if (!this->_internal_interval().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Suscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Suscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Suscription::GetClassData() const { return &_class_data_; }

void Suscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Suscription *>(to)->MergeFrom(
      static_cast<const Suscription &>(from));
}


void Suscription::MergeFrom(const Suscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.Suscription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_suscription_id().empty()) {
    _internal_set_suscription_id(from._internal_suscription_id());
  }
  if (!from._internal_suscription_item_id().empty()) {
    _internal_set_suscription_item_id(from._internal_suscription_item_id());
  }
  if (!from._internal_invoice_id().empty()) {
    _internal_set_invoice_id(from._internal_invoice_id());
  }
  if (!from._internal_price().empty()) {
    _internal_set_price(from._internal_price());
  }
  if (!from._internal_price_cpu().empty()) {
    _internal_set_price_cpu(from._internal_price_cpu());
  }
  if (!from._internal_price_bytes().empty()) {
    _internal_set_price_bytes(from._internal_price_bytes());
  }
  if (!from._internal_currency().empty()) {
    _internal_set_currency(from._internal_currency());
  }
  if (!from._internal_interval().empty()) {
    _internal_set_interval(from._internal_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Suscription::CopyFrom(const Suscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.Suscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Suscription::IsInitialized() const {
  return true;
}

void Suscription::InternalSwap(Suscription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &suscription_id_, GetArenaForAllocation(),
      &other->suscription_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &suscription_item_id_, GetArenaForAllocation(),
      &other->suscription_item_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invoice_id_, GetArenaForAllocation(),
      &other->invoice_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_, GetArenaForAllocation(),
      &other->price_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_cpu_, GetArenaForAllocation(),
      &other->price_cpu_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_bytes_, GetArenaForAllocation(),
      &other->price_bytes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_, GetArenaForAllocation(),
      &other->currency_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &interval_, GetArenaForAllocation(),
      &other->interval_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Suscription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[2]);
}

// ===================================================================

class Payment::_Internal {
 public:
  static const ::payment::v1alpha1::Card& card(const Payment* msg);
};

const ::payment::v1alpha1::Card&
Payment::_Internal::card(const Payment* msg) {
  return *msg->card_;
}
Payment::Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.Payment)
}
Payment::Payment(const Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_card()) {
    card_ = new ::payment::v1alpha1::Card(*from.card_);
  } else {
    card_ = nullptr;
  }
  ::memcpy(&default__, &from.default__,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&default__)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.Payment)
}

inline void Payment::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&card_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&card_)) + sizeof(enabled_));
}

Payment::~Payment() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.Payment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete card_;
}

void Payment::ArenaDtor(void* object) {
  Payment* _this = reinterpret_cast< Payment* >(object);
  (void)_this;
}
void Payment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
  ::memset(&default__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&default__)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Payment.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool default = 2 [json_name = "default"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 3 [json_name = "enabled"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 4 [json_name = "alias"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Payment.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .payment.v1alpha1.Card card = 5 [json_name = "card"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Payment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool default = 2 [json_name = "default"];
  if (this->_internal_default_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_default_(), target);
  }

  // bool enabled = 3 [json_name = "enabled"];
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  // string alias = 4 [json_name = "alias"];
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Payment.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  // .payment.v1alpha1.Card card = 5 [json_name = "card"];
  if (this->_internal_has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::card(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.Payment)
  return target;
}

size_t Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.Payment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string alias = 4 [json_name = "alias"];
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .payment.v1alpha1.Card card = 5 [json_name = "card"];
  if (this->_internal_has_card()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_);
  }

  // bool default = 2 [json_name = "default"];
  if (this->_internal_default_() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 3 [json_name = "enabled"];
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payment::GetClassData() const { return &_class_data_; }

void Payment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Payment *>(to)->MergeFrom(
      static_cast<const Payment &>(from));
}


void Payment::MergeFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_alias().empty()) {
    _internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_card()) {
    _internal_mutable_card()->::payment::v1alpha1::Card::MergeFrom(from._internal_card());
  }
  if (from._internal_default_() != 0) {
    _internal_set_default_(from._internal_default_());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payment::CopyFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  return true;
}

void Payment::InternalSwap(Payment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alias_, GetArenaForAllocation(),
      &other->alias_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payment, enabled_)
      + sizeof(Payment::enabled_)
      - PROTOBUF_FIELD_OFFSET(Payment, card_)>(
          reinterpret_cast<char*>(&card_),
          reinterpret_cast<char*>(&other->card_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[3]);
}

// ===================================================================

class Card::_Internal {
 public:
};

Card::Card(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.Card)
}
Card::Card(const Card& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_number(), 
      GetArenaForAllocation());
  }
  card_holder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card_holder().empty()) {
    card_holder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card_holder(), 
      GetArenaForAllocation());
  }
  expmonth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expmonth().empty()) {
    expmonth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expmonth(), 
      GetArenaForAllocation());
  }
  expyear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expyear().empty()) {
    expyear_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expyear(), 
      GetArenaForAllocation());
  }
  cvc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cvc().empty()) {
    cvc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cvc(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.Card)
}

inline void Card::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
card_holder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
expmonth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
expyear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cvc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.Card)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Card::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_holder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expmonth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expyear_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cvc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Card::ArenaDtor(void* object) {
  Card* _this = reinterpret_cast< Card* >(object);
  (void)_this;
}
void Card::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Card::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.Card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  number_.ClearToEmpty();
  card_holder_.ClearToEmpty();
  expmonth_.ClearToEmpty();
  expyear_.ClearToEmpty();
  cvc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Card::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Card.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string number = 2 [json_name = "number"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Card.number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string card_holder = 3 [json_name = "cardHolder"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_card_holder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Card.card_holder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expmonth = 4 [json_name = "expmonth"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_expmonth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Card.expmonth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expyear = 5 [json_name = "expyear"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_expyear();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Card.expyear"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cvc = 6 [json_name = "cvc"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cvc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Card.cvc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Card::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.Card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Card.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string number = 2 [json_name = "number"];
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Card.number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_number(), target);
  }

  // string card_holder = 3 [json_name = "cardHolder"];
  if (!this->_internal_card_holder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card_holder().data(), static_cast<int>(this->_internal_card_holder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Card.card_holder");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_card_holder(), target);
  }

  // string expmonth = 4 [json_name = "expmonth"];
  if (!this->_internal_expmonth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expmonth().data(), static_cast<int>(this->_internal_expmonth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Card.expmonth");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_expmonth(), target);
  }

  // string expyear = 5 [json_name = "expyear"];
  if (!this->_internal_expyear().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expyear().data(), static_cast<int>(this->_internal_expyear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Card.expyear");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_expyear(), target);
  }

  // string cvc = 6 [json_name = "cvc"];
  if (!this->_internal_cvc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cvc().data(), static_cast<int>(this->_internal_cvc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Card.cvc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cvc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.Card)
  return target;
}

size_t Card::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.Card)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string number = 2 [json_name = "number"];
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // string card_holder = 3 [json_name = "cardHolder"];
  if (!this->_internal_card_holder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card_holder());
  }

  // string expmonth = 4 [json_name = "expmonth"];
  if (!this->_internal_expmonth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expmonth());
  }

  // string expyear = 5 [json_name = "expyear"];
  if (!this->_internal_expyear().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expyear());
  }

  // string cvc = 6 [json_name = "cvc"];
  if (!this->_internal_cvc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cvc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Card::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Card::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Card::GetClassData() const { return &_class_data_; }

void Card::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Card *>(to)->MergeFrom(
      static_cast<const Card &>(from));
}


void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.Card)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_number().empty()) {
    _internal_set_number(from._internal_number());
  }
  if (!from._internal_card_holder().empty()) {
    _internal_set_card_holder(from._internal_card_holder());
  }
  if (!from._internal_expmonth().empty()) {
    _internal_set_expmonth(from._internal_expmonth());
  }
  if (!from._internal_expyear().empty()) {
    _internal_set_expyear(from._internal_expyear());
  }
  if (!from._internal_cvc().empty()) {
    _internal_set_cvc(from._internal_cvc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  return true;
}

void Card::InternalSwap(Card* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &number_, GetArenaForAllocation(),
      &other->number_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &card_holder_, GetArenaForAllocation(),
      &other->card_holder_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &expmonth_, GetArenaForAllocation(),
      &other->expmonth_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &expyear_, GetArenaForAllocation(),
      &other->expyear_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cvc_, GetArenaForAllocation(),
      &other->cvc_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Card::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[4]);
}

// ===================================================================

class Invoice::_Internal {
 public:
};

Invoice::Invoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.Invoice)
}
Invoice::Invoice(const Invoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_period().empty()) {
    period_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_period(), 
      GetArenaForAllocation());
  }
  statuspay_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statuspay().empty()) {
    statuspay_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statuspay(), 
      GetArenaForAllocation());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date(), 
      GetArenaForAllocation());
  }
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product().empty()) {
    product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.Invoice)
}

inline void Invoice::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
statuspay_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = int64_t{0};
}

Invoice::~Invoice() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.Invoice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Invoice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statuspay_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Invoice::ArenaDtor(void* object) {
  Invoice* _this = reinterpret_cast< Invoice* >(object);
  (void)_this;
}
void Invoice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Invoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Invoice::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.Invoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  period_.ClearToEmpty();
  statuspay_.ClearToEmpty();
  date_.ClearToEmpty();
  product_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Invoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Invoice.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string period = 3 [json_name = "period"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_period();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Invoice.period"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string statuspay = 4 [json_name = "statuspay"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_statuspay();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Invoice.statuspay"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 5 [json_name = "date"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Invoice.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product = 6 [json_name = "product"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Invoice.product"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Invoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.Invoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Invoice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 amount = 2 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // string period = 3 [json_name = "period"];
  if (!this->_internal_period().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_period().data(), static_cast<int>(this->_internal_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Invoice.period");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_period(), target);
  }

  // string statuspay = 4 [json_name = "statuspay"];
  if (!this->_internal_statuspay().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statuspay().data(), static_cast<int>(this->_internal_statuspay().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Invoice.statuspay");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statuspay(), target);
  }

  // string date = 5 [json_name = "date"];
  if (!this->_internal_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Invoice.date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_date(), target);
  }

  // string product = 6 [json_name = "product"];
  if (!this->_internal_product().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Invoice.product");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_product(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.Invoice)
  return target;
}

size_t Invoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.Invoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string period = 3 [json_name = "period"];
  if (!this->_internal_period().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_period());
  }

  // string statuspay = 4 [json_name = "statuspay"];
  if (!this->_internal_statuspay().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statuspay());
  }

  // string date = 5 [json_name = "date"];
  if (!this->_internal_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string product = 6 [json_name = "product"];
  if (!this->_internal_product().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  // int64 amount = 2 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Invoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Invoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Invoice::GetClassData() const { return &_class_data_; }

void Invoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Invoice *>(to)->MergeFrom(
      static_cast<const Invoice &>(from));
}


void Invoice::MergeFrom(const Invoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.Invoice)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_period().empty()) {
    _internal_set_period(from._internal_period());
  }
  if (!from._internal_statuspay().empty()) {
    _internal_set_statuspay(from._internal_statuspay());
  }
  if (!from._internal_date().empty()) {
    _internal_set_date(from._internal_date());
  }
  if (!from._internal_product().empty()) {
    _internal_set_product(from._internal_product());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Invoice::CopyFrom(const Invoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.Invoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoice::IsInitialized() const {
  return true;
}

void Invoice::InternalSwap(Invoice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &period_, GetArenaForAllocation(),
      &other->period_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &statuspay_, GetArenaForAllocation(),
      &other->statuspay_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_, GetArenaForAllocation(),
      &other->date_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_, GetArenaForAllocation(),
      &other->product_, other->GetArenaForAllocation()
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Invoice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[5]);
}

// ===================================================================

class Biling::_Internal {
 public:
};

Biling::Biling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.Biling)
}
Biling::Biling(const Biling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invoice_id().empty()) {
    invoice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invoice_id(), 
      GetArenaForAllocation());
  }
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_name().empty()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  month_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_month().empty()) {
    month_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_month(), 
      GetArenaForAllocation());
  }
  year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_year().empty()) {
    year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_year(), 
      GetArenaForAllocation());
  }
  ::memcpy(&totalusage_, &from.totalusage_,
    static_cast<size_t>(reinterpret_cast<char*>(&ram_) -
    reinterpret_cast<char*>(&totalusage_)) + sizeof(ram_));
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.Biling)
}

inline void Biling::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
month_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&totalusage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ram_) -
    reinterpret_cast<char*>(&totalusage_)) + sizeof(ram_));
}

Biling::~Biling() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.Biling)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Biling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  month_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Biling::ArenaDtor(void* object) {
  Biling* _this = reinterpret_cast< Biling* >(object);
  (void)_this;
}
void Biling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Biling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Biling::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.Biling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  invoice_id_.ClearToEmpty();
  account_name_.ClearToEmpty();
  month_.ClearToEmpty();
  year_.ClearToEmpty();
  ::memset(&totalusage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ram_) -
      reinterpret_cast<char*>(&totalusage_)) + sizeof(ram_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Biling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Biling.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invoice_id = 2 [json_name = "invoiceId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invoice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Biling.invoice_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_name = 3 [json_name = "accountName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Biling.account_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalusage = 4 [json_name = "totalusage"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalusage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu = 5 [json_name = "cpu"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ram = 6 [json_name = "ram"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string month = 7 [json_name = "month"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_month();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Biling.month"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string year = 8 [json_name = "year"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_year();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "payment.v1alpha1.Biling.year"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Biling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.Biling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Biling.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string invoice_id = 2 [json_name = "invoiceId"];
  if (!this->_internal_invoice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invoice_id().data(), static_cast<int>(this->_internal_invoice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Biling.invoice_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invoice_id(), target);
  }

  // string account_name = 3 [json_name = "accountName"];
  if (!this->_internal_account_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Biling.account_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account_name(), target);
  }

  // int64 totalusage = 4 [json_name = "totalusage"];
  if (this->_internal_totalusage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_totalusage(), target);
  }

  // int64 cpu = 5 [json_name = "cpu"];
  if (this->_internal_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_cpu(), target);
  }

  // int64 ram = 6 [json_name = "ram"];
  if (this->_internal_ram() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ram(), target);
  }

  // string month = 7 [json_name = "month"];
  if (!this->_internal_month().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_month().data(), static_cast<int>(this->_internal_month().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Biling.month");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_month(), target);
  }

  // string year = 8 [json_name = "year"];
  if (!this->_internal_year().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_year().data(), static_cast<int>(this->_internal_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "payment.v1alpha1.Biling.year");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.Biling)
  return target;
}

size_t Biling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.Biling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string invoice_id = 2 [json_name = "invoiceId"];
  if (!this->_internal_invoice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoice_id());
  }

  // string account_name = 3 [json_name = "accountName"];
  if (!this->_internal_account_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_name());
  }

  // string month = 7 [json_name = "month"];
  if (!this->_internal_month().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_month());
  }

  // string year = 8 [json_name = "year"];
  if (!this->_internal_year().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_year());
  }

  // int64 totalusage = 4 [json_name = "totalusage"];
  if (this->_internal_totalusage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalusage());
  }

  // int64 cpu = 5 [json_name = "cpu"];
  if (this->_internal_cpu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu());
  }

  // int64 ram = 6 [json_name = "ram"];
  if (this->_internal_ram() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ram());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Biling::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Biling::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Biling::GetClassData() const { return &_class_data_; }

void Biling::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Biling *>(to)->MergeFrom(
      static_cast<const Biling &>(from));
}


void Biling::MergeFrom(const Biling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.Biling)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_invoice_id().empty()) {
    _internal_set_invoice_id(from._internal_invoice_id());
  }
  if (!from._internal_account_name().empty()) {
    _internal_set_account_name(from._internal_account_name());
  }
  if (!from._internal_month().empty()) {
    _internal_set_month(from._internal_month());
  }
  if (!from._internal_year().empty()) {
    _internal_set_year(from._internal_year());
  }
  if (from._internal_totalusage() != 0) {
    _internal_set_totalusage(from._internal_totalusage());
  }
  if (from._internal_cpu() != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (from._internal_ram() != 0) {
    _internal_set_ram(from._internal_ram());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Biling::CopyFrom(const Biling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.Biling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Biling::IsInitialized() const {
  return true;
}

void Biling::InternalSwap(Biling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invoice_id_, GetArenaForAllocation(),
      &other->invoice_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, GetArenaForAllocation(),
      &other->account_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &month_, GetArenaForAllocation(),
      &other->month_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &year_, GetArenaForAllocation(),
      &other->year_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Biling, ram_)
      + sizeof(Biling::ram_)
      - PROTOBUF_FIELD_OFFSET(Biling, totalusage_)>(
          reinterpret_cast<char*>(&totalusage_),
          reinterpret_cast<char*>(&other->totalusage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Biling::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[6]);
}

// ===================================================================

class InvoiceList::_Internal {
 public:
};

InvoiceList::InvoiceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.InvoiceList)
}
InvoiceList::InvoiceList(const InvoiceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.InvoiceList)
}

inline void InvoiceList::SharedCtor() {
}

InvoiceList::~InvoiceList() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.InvoiceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvoiceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvoiceList::ArenaDtor(void* object) {
  InvoiceList* _this = reinterpret_cast< InvoiceList* >(object);
  (void)_this;
}
void InvoiceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvoiceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvoiceList::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.InvoiceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvoiceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .payment.v1alpha1.Invoice items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvoiceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.InvoiceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Invoice items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.InvoiceList)
  return target;
}

size_t InvoiceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.InvoiceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Invoice items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvoiceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvoiceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvoiceList::GetClassData() const { return &_class_data_; }

void InvoiceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InvoiceList *>(to)->MergeFrom(
      static_cast<const InvoiceList &>(from));
}


void InvoiceList::MergeFrom(const InvoiceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.InvoiceList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvoiceList::CopyFrom(const InvoiceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.InvoiceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceList::IsInitialized() const {
  return true;
}

void InvoiceList::InternalSwap(InvoiceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[7]);
}

// ===================================================================

class CustomerList::_Internal {
 public:
};

CustomerList::CustomerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.CustomerList)
}
CustomerList::CustomerList(const CustomerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.CustomerList)
}

inline void CustomerList::SharedCtor() {
}

CustomerList::~CustomerList() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.CustomerList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CustomerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CustomerList::ArenaDtor(void* object) {
  CustomerList* _this = reinterpret_cast< CustomerList* >(object);
  (void)_this;
}
void CustomerList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomerList::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.CustomerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .payment.v1alpha1.Customer items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.CustomerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Customer items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.CustomerList)
  return target;
}

size_t CustomerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.CustomerList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Customer items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomerList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CustomerList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomerList::GetClassData() const { return &_class_data_; }

void CustomerList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CustomerList *>(to)->MergeFrom(
      static_cast<const CustomerList &>(from));
}


void CustomerList::MergeFrom(const CustomerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.CustomerList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomerList::CopyFrom(const CustomerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.CustomerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerList::IsInitialized() const {
  return true;
}

void CustomerList::InternalSwap(CustomerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[8]);
}

// ===================================================================

class BilingList::_Internal {
 public:
};

BilingList::BilingList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.BilingList)
}
BilingList::BilingList(const BilingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.BilingList)
}

inline void BilingList::SharedCtor() {
}

BilingList::~BilingList() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.BilingList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BilingList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BilingList::ArenaDtor(void* object) {
  BilingList* _this = reinterpret_cast< BilingList* >(object);
  (void)_this;
}
void BilingList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BilingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BilingList::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.BilingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BilingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .payment.v1alpha1.Biling items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BilingList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.BilingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Biling items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.BilingList)
  return target;
}

size_t BilingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.BilingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Biling items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BilingList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BilingList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BilingList::GetClassData() const { return &_class_data_; }

void BilingList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BilingList *>(to)->MergeFrom(
      static_cast<const BilingList &>(from));
}


void BilingList::MergeFrom(const BilingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.BilingList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BilingList::CopyFrom(const BilingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.BilingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BilingList::IsInitialized() const {
  return true;
}

void BilingList::InternalSwap(BilingList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BilingList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[9]);
}

// ===================================================================

class SuscriptionList::_Internal {
 public:
};

SuscriptionList::SuscriptionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.SuscriptionList)
}
SuscriptionList::SuscriptionList(const SuscriptionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.SuscriptionList)
}

inline void SuscriptionList::SharedCtor() {
}

SuscriptionList::~SuscriptionList() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.SuscriptionList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SuscriptionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SuscriptionList::ArenaDtor(void* object) {
  SuscriptionList* _this = reinterpret_cast< SuscriptionList* >(object);
  (void)_this;
}
void SuscriptionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuscriptionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SuscriptionList::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.SuscriptionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuscriptionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .payment.v1alpha1.Suscription items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuscriptionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.SuscriptionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Suscription items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.SuscriptionList)
  return target;
}

size_t SuscriptionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.SuscriptionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Suscription items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SuscriptionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SuscriptionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SuscriptionList::GetClassData() const { return &_class_data_; }

void SuscriptionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SuscriptionList *>(to)->MergeFrom(
      static_cast<const SuscriptionList &>(from));
}


void SuscriptionList::MergeFrom(const SuscriptionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.SuscriptionList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SuscriptionList::CopyFrom(const SuscriptionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.SuscriptionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuscriptionList::IsInitialized() const {
  return true;
}

void SuscriptionList::InternalSwap(SuscriptionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuscriptionList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[10]);
}

// ===================================================================

class CardList::_Internal {
 public:
};

CardList::CardList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.CardList)
}
CardList::CardList(const CardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.CardList)
}

inline void CardList::SharedCtor() {
}

CardList::~CardList() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.CardList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CardList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CardList::ArenaDtor(void* object) {
  CardList* _this = reinterpret_cast< CardList* >(object);
  (void)_this;
}
void CardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CardList::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.CardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .payment.v1alpha1.Card items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.CardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Card items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.CardList)
  return target;
}

size_t CardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.CardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Card items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CardList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CardList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CardList::GetClassData() const { return &_class_data_; }

void CardList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CardList *>(to)->MergeFrom(
      static_cast<const CardList &>(from));
}


void CardList::MergeFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.CardList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CardList::CopyFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardList::IsInitialized() const {
  return true;
}

void CardList::InternalSwap(CardList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[11]);
}

// ===================================================================

class PaymentList::_Internal {
 public:
};

PaymentList::PaymentList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.PaymentList)
}
PaymentList::PaymentList(const PaymentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.PaymentList)
}

inline void PaymentList::SharedCtor() {
}

PaymentList::~PaymentList() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.PaymentList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaymentList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PaymentList::ArenaDtor(void* object) {
  PaymentList* _this = reinterpret_cast< PaymentList* >(object);
  (void)_this;
}
void PaymentList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaymentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaymentList::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.PaymentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.PaymentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.PaymentList)
  return target;
}

size_t PaymentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.PaymentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Payment items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaymentList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentList::GetClassData() const { return &_class_data_; }

void PaymentList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PaymentList *>(to)->MergeFrom(
      static_cast<const PaymentList &>(from));
}


void PaymentList::MergeFrom(const PaymentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.PaymentList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentList::CopyFrom(const PaymentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.PaymentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentList::IsInitialized() const {
  return true;
}

void PaymentList::InternalSwap(PaymentList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[12]);
}

// ===================================================================

class ProjectList::_Internal {
 public:
};

ProjectList::ProjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:payment.v1alpha1.ProjectList)
}
ProjectList::ProjectList(const ProjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payment.v1alpha1.ProjectList)
}

inline void ProjectList::SharedCtor() {
}

ProjectList::~ProjectList() {
  // @@protoc_insertion_point(destructor:payment.v1alpha1.ProjectList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProjectList::ArenaDtor(void* object) {
  ProjectList* _this = reinterpret_cast< ProjectList* >(object);
  (void)_this;
}
void ProjectList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:payment.v1alpha1.ProjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .payment.v1alpha1.Project items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payment.v1alpha1.ProjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Project items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payment.v1alpha1.ProjectList)
  return target;
}

size_t ProjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payment.v1alpha1.ProjectList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.v1alpha1.Project items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProjectList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectList::GetClassData() const { return &_class_data_; }

void ProjectList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProjectList *>(to)->MergeFrom(
      static_cast<const ProjectList &>(from));
}


void ProjectList::MergeFrom(const ProjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payment.v1alpha1.ProjectList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectList::CopyFrom(const ProjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payment.v1alpha1.ProjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectList::IsInitialized() const {
  return true;
}

void ProjectList::InternalSwap(ProjectList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_getter, &descriptor_table_payment_2fv1alpha1_2fpayment_2eproto_once,
      file_level_metadata_payment_2fv1alpha1_2fpayment_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace payment
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::Customer* Arena::CreateMaybeMessage< ::payment::v1alpha1::Customer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::Customer >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::Project* Arena::CreateMaybeMessage< ::payment::v1alpha1::Project >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::Project >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::Suscription* Arena::CreateMaybeMessage< ::payment::v1alpha1::Suscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::Suscription >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::Payment* Arena::CreateMaybeMessage< ::payment::v1alpha1::Payment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::Card* Arena::CreateMaybeMessage< ::payment::v1alpha1::Card >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::Card >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::Invoice* Arena::CreateMaybeMessage< ::payment::v1alpha1::Invoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::Invoice >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::Biling* Arena::CreateMaybeMessage< ::payment::v1alpha1::Biling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::Biling >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::InvoiceList* Arena::CreateMaybeMessage< ::payment::v1alpha1::InvoiceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::InvoiceList >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::CustomerList* Arena::CreateMaybeMessage< ::payment::v1alpha1::CustomerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::CustomerList >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::BilingList* Arena::CreateMaybeMessage< ::payment::v1alpha1::BilingList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::BilingList >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::SuscriptionList* Arena::CreateMaybeMessage< ::payment::v1alpha1::SuscriptionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::SuscriptionList >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::CardList* Arena::CreateMaybeMessage< ::payment::v1alpha1::CardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::CardList >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::PaymentList* Arena::CreateMaybeMessage< ::payment::v1alpha1::PaymentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::PaymentList >(arena);
}
template<> PROTOBUF_NOINLINE ::payment::v1alpha1::ProjectList* Arena::CreateMaybeMessage< ::payment::v1alpha1::ProjectList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payment::v1alpha1::ProjectList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
