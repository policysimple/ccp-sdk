// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: payment/v1alpha1/payment_api.proto
#ifndef GRPC_payment_2fv1alpha1_2fpayment_5fapi_2eproto__INCLUDED
#define GRPC_payment_2fv1alpha1_2fpayment_5fapi_2eproto__INCLUDED

#include "payment/v1alpha1/payment_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace payment {
namespace v1alpha1 {

class PaymentAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "payment.v1alpha1.PaymentAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a new service 
    virtual ::grpc::Status CreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::payment::v1alpha1::CreateCustomerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCustomerResponse>> AsyncCreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCustomerResponse>>(AsyncCreateCustomerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCustomerResponse>> PrepareAsyncCreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCustomerResponse>>(PrepareAsyncCreateCustomerRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::payment::v1alpha1::CreateSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateSubscriptionResponse>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateSubscriptionResponse>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateSubscriptionResponse>> PrepareAsyncCreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateSubscriptionResponse>>(PrepareAsyncCreateSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::payment::v1alpha1::CreatePaymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreatePaymentResponse>> AsyncCreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreatePaymentResponse>>(AsyncCreatePaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreatePaymentResponse>> PrepareAsyncCreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreatePaymentResponse>>(PrepareAsyncCreatePaymentRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::payment::v1alpha1::CreateCardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCardResponse>> AsyncCreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCardResponse>>(AsyncCreateCardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCardResponse>> PrepareAsyncCreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCardResponse>>(PrepareAsyncCreateCardRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::payment::v1alpha1::CreateProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateProjectResponse>> AsyncCreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateProjectResponse>>(AsyncCreateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateProjectResponse>> PrepareAsyncCreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateProjectResponse>>(PrepareAsyncCreateProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::payment::v1alpha1::CreateInvoiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateInvoiceResponse>> AsyncCreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateInvoiceResponse>>(AsyncCreateInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateInvoiceResponse>> PrepareAsyncCreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateInvoiceResponse>>(PrepareAsyncCreateInvoiceRaw(context, request, cq));
    }
    // Get the service
    virtual ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::payment::v1alpha1::GetOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetOrganizationResponse>> AsyncGetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetOrganizationResponse>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetOrganizationResponse>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetOrganizationResponse>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::payment::v1alpha1::GetSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetSubscriptionResponse>> AsyncGetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetSubscriptionResponse>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetSubscriptionResponse>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetSubscriptionResponse>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::payment::v1alpha1::GetPaymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentResponse>> AsyncGetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentResponse>>(AsyncGetPaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentResponse>> PrepareAsyncGetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentResponse>>(PrepareAsyncGetPaymentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::payment::v1alpha1::GetCustomerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetCustomerResponse>> AsyncGetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetCustomerResponse>>(AsyncGetCustomerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetCustomerResponse>> PrepareAsyncGetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetCustomerResponse>>(PrepareAsyncGetCustomerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::payment::v1alpha1::GetBilingMonthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetBilingMonthResponse>> AsyncGetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetBilingMonthResponse>>(AsyncGetBilingMonthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetBilingMonthResponse>> PrepareAsyncGetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetBilingMonthResponse>>(PrepareAsyncGetBilingMonthRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::payment::v1alpha1::GetPaymentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentsResponse>> AsyncGetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentsResponse>>(AsyncGetPaymentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentsResponse>> PrepareAsyncGetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentsResponse>>(PrepareAsyncGetPaymentsRaw(context, request, cq));
    }
    // List the service
    virtual ::grpc::Status ListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::payment::v1alpha1::ListProjectsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListProjectsResponse>> AsyncListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListProjectsResponse>>(AsyncListProjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListProjectsResponse>> PrepareAsyncListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListProjectsResponse>>(PrepareAsyncListProjectsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::payment::v1alpha1::ListPaymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListPaymentResponse>> AsyncListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListPaymentResponse>>(AsyncListPaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListPaymentResponse>> PrepareAsyncListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListPaymentResponse>>(PrepareAsyncListPaymentRaw(context, request, cq));
    }
    virtual ::grpc::Status ListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListSubscriptionItemsResponse>> AsyncListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListSubscriptionItemsResponse>>(AsyncListSubscriptionItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListSubscriptionItemsResponse>> PrepareAsyncListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListSubscriptionItemsResponse>>(PrepareAsyncListSubscriptionItemsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::payment::v1alpha1::ListCustomersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListCustomersResponse>> AsyncListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListCustomersResponse>>(AsyncListCustomersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListCustomersResponse>> PrepareAsyncListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListCustomersResponse>>(PrepareAsyncListCustomersRaw(context, request, cq));
    }
    // Update service
    virtual ::grpc::Status UpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::UpdateSubscriptionResponse>> AsyncUpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::UpdateSubscriptionResponse>>(AsyncUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::UpdateSubscriptionResponse>> PrepareAsyncUpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::UpdateSubscriptionResponse>>(PrepareAsyncUpdateSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status SetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>> AsyncSetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>>(AsyncSetDefaultPaymentMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>> PrepareAsyncSetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>>(PrepareAsyncSetDefaultPaymentMethodRaw(context, request, cq));
    }
    // Delete service
    virtual ::grpc::Status DeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::payment::v1alpha1::DeleteProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteProjectResponse>> AsyncDeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteProjectResponse>>(AsyncDeleteProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteProjectResponse>> PrepareAsyncDeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteProjectResponse>>(PrepareAsyncDeleteProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::payment::v1alpha1::DeletePaymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeletePaymentResponse>> AsyncDeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeletePaymentResponse>>(AsyncDeletePaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeletePaymentResponse>> PrepareAsyncDeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeletePaymentResponse>>(PrepareAsyncDeletePaymentRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::payment::v1alpha1::CancelSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CancelSubscriptionResponse>> AsyncCancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CancelSubscriptionResponse>>(AsyncCancelSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CancelSubscriptionResponse>> PrepareAsyncCancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CancelSubscriptionResponse>>(PrepareAsyncCancelSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::payment::v1alpha1::DeleteCustomerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteCustomerResponse>> AsyncDeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteCustomerResponse>>(AsyncDeleteCustomerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteCustomerResponse>> PrepareAsyncDeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteCustomerResponse>>(PrepareAsyncDeleteCustomerRaw(context, request, cq));
    }
    // Filter service
    virtual ::grpc::Status InvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::payment::v1alpha1::InvoiceFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::InvoiceFilterResponse>> AsyncInvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::InvoiceFilterResponse>>(AsyncInvoiceFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::InvoiceFilterResponse>> PrepareAsyncInvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::InvoiceFilterResponse>>(PrepareAsyncInvoiceFilterRaw(context, request, cq));
    }
    virtual ::grpc::Status ConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::payment::v1alpha1::ConsumeByProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ConsumeByProjectResponse>> AsyncConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ConsumeByProjectResponse>>(AsyncConsumeByProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ConsumeByProjectResponse>> PrepareAsyncConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ConsumeByProjectResponse>>(PrepareAsyncConsumeByProjectRaw(context, request, cq));
    }
    // Pause Project Consumption
    virtual ::grpc::Status StopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::payment::v1alpha1::StopProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::StopProjectResponse>> AsyncStopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::StopProjectResponse>>(AsyncStopProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::StopProjectResponse>> PrepareAsyncStopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::StopProjectResponse>>(PrepareAsyncStopProjectRaw(context, request, cq));
    }
    // BlockChain Subscription
    virtual ::grpc::Status BlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::BlockChainSubscriptionResponse>> AsyncBlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::BlockChainSubscriptionResponse>>(AsyncBlockChainSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::BlockChainSubscriptionResponse>> PrepareAsyncBlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::BlockChainSubscriptionResponse>>(PrepareAsyncBlockChainSubscriptionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a new service 
      virtual void CreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get the service
      virtual void GetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // List the service
      virtual void ListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest* request, ::payment::v1alpha1::ListCustomersResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Update service
      virtual void UpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Delete service
      virtual void DeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Filter service
      virtual void InvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Pause Project Consumption
      virtual void StopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      // BlockChain Subscription
      virtual void BlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCustomerResponse>* AsyncCreateCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCustomerResponse>* PrepareAsyncCreateCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateSubscriptionResponse>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateSubscriptionResponse>* PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreatePaymentResponse>* AsyncCreatePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreatePaymentResponse>* PrepareAsyncCreatePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCardResponse>* AsyncCreateCardRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateCardResponse>* PrepareAsyncCreateCardRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateProjectResponse>* AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateProjectResponse>* PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateInvoiceResponse>* AsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CreateInvoiceResponse>* PrepareAsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetOrganizationResponse>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetOrganizationResponse>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetSubscriptionResponse>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetSubscriptionResponse>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentResponse>* AsyncGetPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentResponse>* PrepareAsyncGetPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetCustomerResponse>* AsyncGetCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetCustomerResponse>* PrepareAsyncGetCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetBilingMonthResponse>* AsyncGetBilingMonthRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetBilingMonthResponse>* PrepareAsyncGetBilingMonthRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentsResponse>* AsyncGetPaymentsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::GetPaymentsResponse>* PrepareAsyncGetPaymentsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListProjectsResponse>* AsyncListProjectsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListProjectsResponse>* PrepareAsyncListProjectsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListPaymentResponse>* AsyncListPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListPaymentResponse>* PrepareAsyncListPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListSubscriptionItemsResponse>* AsyncListSubscriptionItemsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListSubscriptionItemsResponse>* PrepareAsyncListSubscriptionItemsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListCustomersResponse>* AsyncListCustomersRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ListCustomersResponse>* PrepareAsyncListCustomersRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::UpdateSubscriptionResponse>* AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::UpdateSubscriptionResponse>* PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>* AsyncSetDefaultPaymentMethodRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>* PrepareAsyncSetDefaultPaymentMethodRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteProjectResponse>* AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteProjectResponse>* PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeletePaymentResponse>* AsyncDeletePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeletePaymentResponse>* PrepareAsyncDeletePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CancelSubscriptionResponse>* AsyncCancelSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::CancelSubscriptionResponse>* PrepareAsyncCancelSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteCustomerResponse>* AsyncDeleteCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::DeleteCustomerResponse>* PrepareAsyncDeleteCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::InvoiceFilterResponse>* AsyncInvoiceFilterRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::InvoiceFilterResponse>* PrepareAsyncInvoiceFilterRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ConsumeByProjectResponse>* AsyncConsumeByProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::ConsumeByProjectResponse>* PrepareAsyncConsumeByProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::StopProjectResponse>* AsyncStopProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::StopProjectResponse>* PrepareAsyncStopProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::BlockChainSubscriptionResponse>* AsyncBlockChainSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::payment::v1alpha1::BlockChainSubscriptionResponse>* PrepareAsyncBlockChainSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::payment::v1alpha1::CreateCustomerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>> AsyncCreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>>(AsyncCreateCustomerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>> PrepareAsyncCreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>>(PrepareAsyncCreateCustomerRaw(context, request, cq));
    }
    ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::payment::v1alpha1::CreateSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>> PrepareAsyncCreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>>(PrepareAsyncCreateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status CreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::payment::v1alpha1::CreatePaymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>> AsyncCreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>>(AsyncCreatePaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>> PrepareAsyncCreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>>(PrepareAsyncCreatePaymentRaw(context, request, cq));
    }
    ::grpc::Status CreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::payment::v1alpha1::CreateCardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>> AsyncCreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>>(AsyncCreateCardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>> PrepareAsyncCreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>>(PrepareAsyncCreateCardRaw(context, request, cq));
    }
    ::grpc::Status CreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::payment::v1alpha1::CreateProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>> AsyncCreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>>(AsyncCreateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>> PrepareAsyncCreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>>(PrepareAsyncCreateProjectRaw(context, request, cq));
    }
    ::grpc::Status CreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::payment::v1alpha1::CreateInvoiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>> AsyncCreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>>(AsyncCreateInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>> PrepareAsyncCreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>>(PrepareAsyncCreateInvoiceRaw(context, request, cq));
    }
    ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::payment::v1alpha1::GetOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>> AsyncGetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::payment::v1alpha1::GetSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>> AsyncGetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status GetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::payment::v1alpha1::GetPaymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>> AsyncGetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>>(AsyncGetPaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>> PrepareAsyncGetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>>(PrepareAsyncGetPaymentRaw(context, request, cq));
    }
    ::grpc::Status GetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::payment::v1alpha1::GetCustomerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>> AsyncGetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>>(AsyncGetCustomerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>> PrepareAsyncGetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>>(PrepareAsyncGetCustomerRaw(context, request, cq));
    }
    ::grpc::Status GetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::payment::v1alpha1::GetBilingMonthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>> AsyncGetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>>(AsyncGetBilingMonthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>> PrepareAsyncGetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>>(PrepareAsyncGetBilingMonthRaw(context, request, cq));
    }
    ::grpc::Status GetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::payment::v1alpha1::GetPaymentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>> AsyncGetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>>(AsyncGetPaymentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>> PrepareAsyncGetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>>(PrepareAsyncGetPaymentsRaw(context, request, cq));
    }
    ::grpc::Status ListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::payment::v1alpha1::ListProjectsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>> AsyncListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>>(AsyncListProjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>> PrepareAsyncListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>>(PrepareAsyncListProjectsRaw(context, request, cq));
    }
    ::grpc::Status ListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::payment::v1alpha1::ListPaymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>> AsyncListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>>(AsyncListPaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>> PrepareAsyncListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>>(PrepareAsyncListPaymentRaw(context, request, cq));
    }
    ::grpc::Status ListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>> AsyncListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>>(AsyncListSubscriptionItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>> PrepareAsyncListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>>(PrepareAsyncListSubscriptionItemsRaw(context, request, cq));
    }
    ::grpc::Status ListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::payment::v1alpha1::ListCustomersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListCustomersResponse>> AsyncListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListCustomersResponse>>(AsyncListCustomersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListCustomersResponse>> PrepareAsyncListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListCustomersResponse>>(PrepareAsyncListCustomersRaw(context, request, cq));
    }
    ::grpc::Status UpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>> AsyncUpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>>(AsyncUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>> PrepareAsyncUpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>>(PrepareAsyncUpdateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status SetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>> AsyncSetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>>(AsyncSetDefaultPaymentMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>> PrepareAsyncSetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>>(PrepareAsyncSetDefaultPaymentMethodRaw(context, request, cq));
    }
    ::grpc::Status DeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::payment::v1alpha1::DeleteProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>> AsyncDeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>>(AsyncDeleteProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>> PrepareAsyncDeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>>(PrepareAsyncDeleteProjectRaw(context, request, cq));
    }
    ::grpc::Status DeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::payment::v1alpha1::DeletePaymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>> AsyncDeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>>(AsyncDeletePaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>> PrepareAsyncDeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>>(PrepareAsyncDeletePaymentRaw(context, request, cq));
    }
    ::grpc::Status CancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::payment::v1alpha1::CancelSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>> AsyncCancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>>(AsyncCancelSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>> PrepareAsyncCancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>>(PrepareAsyncCancelSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status DeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::payment::v1alpha1::DeleteCustomerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>> AsyncDeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>>(AsyncDeleteCustomerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>> PrepareAsyncDeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>>(PrepareAsyncDeleteCustomerRaw(context, request, cq));
    }
    ::grpc::Status InvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::payment::v1alpha1::InvoiceFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>> AsyncInvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>>(AsyncInvoiceFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>> PrepareAsyncInvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>>(PrepareAsyncInvoiceFilterRaw(context, request, cq));
    }
    ::grpc::Status ConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::payment::v1alpha1::ConsumeByProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>> AsyncConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>>(AsyncConsumeByProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>> PrepareAsyncConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>>(PrepareAsyncConsumeByProjectRaw(context, request, cq));
    }
    ::grpc::Status StopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::payment::v1alpha1::StopProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>> AsyncStopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>>(AsyncStopProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>> PrepareAsyncStopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>>(PrepareAsyncStopProjectRaw(context, request, cq));
    }
    ::grpc::Status BlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::BlockChainSubscriptionResponse>> AsyncBlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::BlockChainSubscriptionResponse>>(AsyncBlockChainSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::BlockChainSubscriptionResponse>> PrepareAsyncBlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::BlockChainSubscriptionResponse>>(PrepareAsyncBlockChainSubscriptionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCustomers(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest* request, ::payment::v1alpha1::ListCustomersResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void DeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response, std::function<void(::grpc::Status)>) override;
      void InvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void StopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void BlockChainSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>* AsyncCreateCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>* PrepareAsyncCreateCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>* PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>* AsyncCreatePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>* PrepareAsyncCreatePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>* AsyncCreateCardRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>* PrepareAsyncCreateCardRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>* AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>* PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>* AsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>* PrepareAsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>* AsyncGetPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>* PrepareAsyncGetPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>* AsyncGetCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>* PrepareAsyncGetCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>* AsyncGetBilingMonthRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>* PrepareAsyncGetBilingMonthRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>* AsyncGetPaymentsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>* PrepareAsyncGetPaymentsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>* AsyncListProjectsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>* PrepareAsyncListProjectsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>* AsyncListPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>* PrepareAsyncListPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>* AsyncListSubscriptionItemsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>* PrepareAsyncListSubscriptionItemsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListCustomersResponse>* AsyncListCustomersRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListCustomersResponse>* PrepareAsyncListCustomersRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListCustomersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>* AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>* PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>* AsyncSetDefaultPaymentMethodRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>* PrepareAsyncSetDefaultPaymentMethodRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>* AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>* PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>* AsyncDeletePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>* PrepareAsyncDeletePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>* AsyncCancelSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>* PrepareAsyncCancelSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>* AsyncDeleteCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>* PrepareAsyncDeleteCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>* AsyncInvoiceFilterRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>* PrepareAsyncInvoiceFilterRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>* AsyncConsumeByProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>* PrepareAsyncConsumeByProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>* AsyncStopProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>* PrepareAsyncStopProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::BlockChainSubscriptionResponse>* AsyncBlockChainSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::BlockChainSubscriptionResponse>* PrepareAsyncBlockChainSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCustomer_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePayment_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCard_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProject_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInvoice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPayment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCustomer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBilingMonth_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPayments_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProjects_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPayment_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSubscriptionItems_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCustomers_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDefaultPaymentMethod_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteProject_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePayment_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCustomer_;
    const ::grpc::internal::RpcMethod rpcmethod_InvoiceFilter_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsumeByProject_;
    const ::grpc::internal::RpcMethod rpcmethod_StopProject_;
    const ::grpc::internal::RpcMethod rpcmethod_BlockChainSubscription_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a new service 
    virtual ::grpc::Status CreateCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response);
    virtual ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response);
    virtual ::grpc::Status CreatePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response);
    virtual ::grpc::Status CreateCard(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response);
    virtual ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response);
    virtual ::grpc::Status CreateInvoice(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response);
    // Get the service
    virtual ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response);
    virtual ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response);
    virtual ::grpc::Status GetPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response);
    virtual ::grpc::Status GetCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response);
    virtual ::grpc::Status GetBilingMonth(::grpc::ServerContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response);
    virtual ::grpc::Status GetPayments(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response);
    // List the service
    virtual ::grpc::Status ListProjects(::grpc::ServerContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response);
    virtual ::grpc::Status ListPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response);
    virtual ::grpc::Status ListSubscriptionItems(::grpc::ServerContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response);
    virtual ::grpc::Status ListCustomers(::grpc::ServerContext* context, const ::payment::v1alpha1::ListCustomersRequest* request, ::payment::v1alpha1::ListCustomersResponse* response);
    // Update service
    virtual ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response);
    virtual ::grpc::Status SetDefaultPaymentMethod(::grpc::ServerContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response);
    // Delete service
    virtual ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response);
    virtual ::grpc::Status DeletePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response);
    virtual ::grpc::Status CancelSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response);
    virtual ::grpc::Status DeleteCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response);
    // Filter service
    virtual ::grpc::Status InvoiceFilter(::grpc::ServerContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response);
    virtual ::grpc::Status ConsumeByProject(::grpc::ServerContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response);
    // Pause Project Consumption
    virtual ::grpc::Status StopProject(::grpc::ServerContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response);
    // BlockChain Subscription
    virtual ::grpc::Status BlockChainSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCustomer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCustomer(::grpc::ServerContext* context, ::payment::v1alpha1::CreateCustomerRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::CreateCustomerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubscription(::grpc::ServerContext* context, ::payment::v1alpha1::CreateSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::CreateSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreatePayment() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreatePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePayment(::grpc::ServerContext* context, ::payment::v1alpha1::CreatePaymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::CreatePaymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCard() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCard(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCard(::grpc::ServerContext* context, ::payment::v1alpha1::CreateCardRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::CreateCardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateProject() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProject(::grpc::ServerContext* context, ::payment::v1alpha1::CreateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::CreateProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInvoice(::grpc::ServerContext* context, ::payment::v1alpha1::CreateInvoiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::CreateInvoiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOrganization() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::payment::v1alpha1::GetOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::GetOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSubscription() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::payment::v1alpha1::GetSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::GetSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPayment() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayment(::grpc::ServerContext* context, ::payment::v1alpha1::GetPaymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::GetPaymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCustomer() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCustomer(::grpc::ServerContext* context, ::payment::v1alpha1::GetCustomerRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::GetCustomerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBilingMonth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBilingMonth() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetBilingMonth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBilingMonth(::grpc::ServerContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBilingMonth(::grpc::ServerContext* context, ::payment::v1alpha1::GetBilingMonthRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::GetBilingMonthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPayments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPayments() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetPayments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayments(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayments(::grpc::ServerContext* context, ::payment::v1alpha1::GetPaymentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::GetPaymentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListProjects() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ListProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProjects(::grpc::ServerContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProjects(::grpc::ServerContext* context, ::payment::v1alpha1::ListProjectsRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::ListProjectsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListPayment() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ListPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPayment(::grpc::ServerContext* context, ::payment::v1alpha1::ListPaymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::ListPaymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSubscriptionItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListSubscriptionItems() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ListSubscriptionItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptionItems(::grpc::ServerContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptionItems(::grpc::ServerContext* context, ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::ListSubscriptionItemsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCustomers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListCustomers() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ListCustomers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCustomers(::grpc::ServerContext* context, const ::payment::v1alpha1::ListCustomersRequest* request, ::payment::v1alpha1::ListCustomersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCustomers(::grpc::ServerContext* context, ::payment::v1alpha1::ListCustomersRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::ListCustomersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSubscription(::grpc::ServerContext* context, ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::UpdateSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDefaultPaymentMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetDefaultPaymentMethod() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_SetDefaultPaymentMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDefaultPaymentMethod(::grpc::ServerContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDefaultPaymentMethod(::grpc::ServerContext* context, ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteProject() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProject(::grpc::ServerContext* context, ::payment::v1alpha1::DeleteProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::DeleteProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeletePayment() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DeletePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePayment(::grpc::ServerContext* context, ::payment::v1alpha1::DeletePaymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::DeletePaymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CancelSubscription() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_CancelSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelSubscription(::grpc::ServerContext* context, ::payment::v1alpha1::CancelSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::CancelSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteCustomer() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_DeleteCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCustomer(::grpc::ServerContext* context, ::payment::v1alpha1::DeleteCustomerRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::DeleteCustomerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvoiceFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InvoiceFilter() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_InvoiceFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvoiceFilter(::grpc::ServerContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvoiceFilter(::grpc::ServerContext* context, ::payment::v1alpha1::InvoiceFilterRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::InvoiceFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsumeByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ConsumeByProject() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_ConsumeByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeByProject(::grpc::ServerContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeByProject(::grpc::ServerContext* context, ::payment::v1alpha1::ConsumeByProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::ConsumeByProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopProject() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_StopProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopProject(::grpc::ServerContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopProject(::grpc::ServerContext* context, ::payment::v1alpha1::StopProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::StopProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BlockChainSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BlockChainSubscription() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_BlockChainSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BlockChainSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBlockChainSubscription(::grpc::ServerContext* context, ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::payment::v1alpha1::BlockChainSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateCustomer<WithAsyncMethod_CreateSubscription<WithAsyncMethod_CreatePayment<WithAsyncMethod_CreateCard<WithAsyncMethod_CreateProject<WithAsyncMethod_CreateInvoice<WithAsyncMethod_GetOrganization<WithAsyncMethod_GetSubscription<WithAsyncMethod_GetPayment<WithAsyncMethod_GetCustomer<WithAsyncMethod_GetBilingMonth<WithAsyncMethod_GetPayments<WithAsyncMethod_ListProjects<WithAsyncMethod_ListPayment<WithAsyncMethod_ListSubscriptionItems<WithAsyncMethod_ListCustomers<WithAsyncMethod_UpdateSubscription<WithAsyncMethod_SetDefaultPaymentMethod<WithAsyncMethod_DeleteProject<WithAsyncMethod_DeletePayment<WithAsyncMethod_CancelSubscription<WithAsyncMethod_DeleteCustomer<WithAsyncMethod_InvoiceFilter<WithAsyncMethod_ConsumeByProject<WithAsyncMethod_StopProject<WithAsyncMethod_BlockChainSubscription<Service > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCustomer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreatePayment() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreatePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCard() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCard(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateProject() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOrganization() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSubscription() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPayment() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCustomer() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBilingMonth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBilingMonth() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetBilingMonth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBilingMonth(::grpc::ServerContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPayments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPayments() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetPayments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayments(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListProjects() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ListProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProjects(::grpc::ServerContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListPayment() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ListPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSubscriptionItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListSubscriptionItems() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ListSubscriptionItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptionItems(::grpc::ServerContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCustomers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListCustomers() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ListCustomers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCustomers(::grpc::ServerContext* context, const ::payment::v1alpha1::ListCustomersRequest* request, ::payment::v1alpha1::ListCustomersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDefaultPaymentMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetDefaultPaymentMethod() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_SetDefaultPaymentMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDefaultPaymentMethod(::grpc::ServerContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteProject() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeletePayment() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DeletePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CancelSubscription() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_CancelSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteCustomer() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_DeleteCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvoiceFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InvoiceFilter() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_InvoiceFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvoiceFilter(::grpc::ServerContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsumeByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ConsumeByProject() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_ConsumeByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeByProject(::grpc::ServerContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopProject() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_StopProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopProject(::grpc::ServerContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BlockChainSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BlockChainSubscription() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_BlockChainSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BlockChainSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateCustomer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCustomer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreatePayment() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreatePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePayment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateCard() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCard(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateProject() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOrganization() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSubscription() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPayment() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetCustomer() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCustomer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBilingMonth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetBilingMonth() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetBilingMonth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBilingMonth(::grpc::ServerContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBilingMonth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPayments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPayments() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetPayments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayments(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListProjects() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ListProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProjects(::grpc::ServerContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListPayment() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ListPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPayment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSubscriptionItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListSubscriptionItems() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ListSubscriptionItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptionItems(::grpc::ServerContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptionItems(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCustomers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListCustomers() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ListCustomers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCustomers(::grpc::ServerContext* context, const ::payment::v1alpha1::ListCustomersRequest* request, ::payment::v1alpha1::ListCustomersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCustomers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDefaultPaymentMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetDefaultPaymentMethod() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_SetDefaultPaymentMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDefaultPaymentMethod(::grpc::ServerContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDefaultPaymentMethod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteProject() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeletePayment() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_DeletePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePayment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CancelSubscription() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_CancelSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteCustomer() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_DeleteCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCustomer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvoiceFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_InvoiceFilter() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_InvoiceFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvoiceFilter(::grpc::ServerContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvoiceFilter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsumeByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ConsumeByProject() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_ConsumeByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeByProject(::grpc::ServerContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeByProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StopProject() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_StopProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopProject(::grpc::ServerContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BlockChainSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BlockChainSubscription() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_BlockChainSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BlockChainSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBlockChainSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCustomer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::CreateCustomerRequest, ::payment::v1alpha1::CreateCustomerResponse>(std::bind(&WithStreamedUnaryMethod_CreateCustomer<BaseClass>::StreamedCreateCustomer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCustomer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::CreateCustomerRequest,::payment::v1alpha1::CreateCustomerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::CreateSubscriptionRequest, ::payment::v1alpha1::CreateSubscriptionResponse>(std::bind(&WithStreamedUnaryMethod_CreateSubscription<BaseClass>::StreamedCreateSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::CreateSubscriptionRequest,::payment::v1alpha1::CreateSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreatePayment() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::CreatePaymentRequest, ::payment::v1alpha1::CreatePaymentResponse>(std::bind(&WithStreamedUnaryMethod_CreatePayment<BaseClass>::StreamedCreatePayment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreatePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePayment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::CreatePaymentRequest,::payment::v1alpha1::CreatePaymentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCard() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::CreateCardRequest, ::payment::v1alpha1::CreateCardResponse>(std::bind(&WithStreamedUnaryMethod_CreateCard<BaseClass>::StreamedCreateCard, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCard(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::CreateCardRequest,::payment::v1alpha1::CreateCardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateProject() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::CreateProjectRequest, ::payment::v1alpha1::CreateProjectResponse>(std::bind(&WithStreamedUnaryMethod_CreateProject<BaseClass>::StreamedCreateProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::CreateProjectRequest,::payment::v1alpha1::CreateProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::CreateInvoiceRequest, ::payment::v1alpha1::CreateInvoiceResponse>(std::bind(&WithStreamedUnaryMethod_CreateInvoice<BaseClass>::StreamedCreateInvoice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInvoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::CreateInvoiceRequest,::payment::v1alpha1::CreateInvoiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOrganization() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::GetOrganizationRequest, ::payment::v1alpha1::GetOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_GetOrganization<BaseClass>::StreamedGetOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::GetOrganizationRequest,::payment::v1alpha1::GetOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSubscription() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::GetSubscriptionRequest, ::payment::v1alpha1::GetSubscriptionResponse>(std::bind(&WithStreamedUnaryMethod_GetSubscription<BaseClass>::StreamedGetSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::GetSubscriptionRequest,::payment::v1alpha1::GetSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPayment() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::GetPaymentRequest, ::payment::v1alpha1::GetPaymentResponse>(std::bind(&WithStreamedUnaryMethod_GetPayment<BaseClass>::StreamedGetPayment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPayment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::GetPaymentRequest,::payment::v1alpha1::GetPaymentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCustomer() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::GetCustomerRequest, ::payment::v1alpha1::GetCustomerResponse>(std::bind(&WithStreamedUnaryMethod_GetCustomer<BaseClass>::StreamedGetCustomer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCustomer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::GetCustomerRequest,::payment::v1alpha1::GetCustomerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBilingMonth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBilingMonth() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::GetBilingMonthRequest, ::payment::v1alpha1::GetBilingMonthResponse>(std::bind(&WithStreamedUnaryMethod_GetBilingMonth<BaseClass>::StreamedGetBilingMonth, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBilingMonth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBilingMonth(::grpc::ServerContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBilingMonth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::GetBilingMonthRequest,::payment::v1alpha1::GetBilingMonthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPayments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPayments() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::GetPaymentsRequest, ::payment::v1alpha1::GetPaymentsResponse>(std::bind(&WithStreamedUnaryMethod_GetPayments<BaseClass>::StreamedGetPayments, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPayments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPayments(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPayments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::GetPaymentsRequest,::payment::v1alpha1::GetPaymentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListProjects() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::ListProjectsRequest, ::payment::v1alpha1::ListProjectsResponse>(std::bind(&WithStreamedUnaryMethod_ListProjects<BaseClass>::StreamedListProjects, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListProjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProjects(::grpc::ServerContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProjects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::ListProjectsRequest,::payment::v1alpha1::ListProjectsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListPayment() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::ListPaymentRequest, ::payment::v1alpha1::ListPaymentResponse>(std::bind(&WithStreamedUnaryMethod_ListPayment<BaseClass>::StreamedListPayment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPayment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::ListPaymentRequest,::payment::v1alpha1::ListPaymentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSubscriptionItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListSubscriptionItems() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::ListSubscriptionItemsRequest, ::payment::v1alpha1::ListSubscriptionItemsResponse>(std::bind(&WithStreamedUnaryMethod_ListSubscriptionItems<BaseClass>::StreamedListSubscriptionItems, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListSubscriptionItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSubscriptionItems(::grpc::ServerContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSubscriptionItems(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::ListSubscriptionItemsRequest,::payment::v1alpha1::ListSubscriptionItemsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCustomers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListCustomers() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::ListCustomersRequest, ::payment::v1alpha1::ListCustomersResponse>(std::bind(&WithStreamedUnaryMethod_ListCustomers<BaseClass>::StreamedListCustomers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListCustomers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCustomers(::grpc::ServerContext* context, const ::payment::v1alpha1::ListCustomersRequest* request, ::payment::v1alpha1::ListCustomersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCustomers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::ListCustomersRequest,::payment::v1alpha1::ListCustomersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::UpdateSubscriptionRequest, ::payment::v1alpha1::UpdateSubscriptionResponse>(std::bind(&WithStreamedUnaryMethod_UpdateSubscription<BaseClass>::StreamedUpdateSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::UpdateSubscriptionRequest,::payment::v1alpha1::UpdateSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDefaultPaymentMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetDefaultPaymentMethod() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::SetDefaultPaymentMethodRequest, ::payment::v1alpha1::SetDefaultPaymentMethodResponse>(std::bind(&WithStreamedUnaryMethod_SetDefaultPaymentMethod<BaseClass>::StreamedSetDefaultPaymentMethod, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDefaultPaymentMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDefaultPaymentMethod(::grpc::ServerContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDefaultPaymentMethod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::SetDefaultPaymentMethodRequest,::payment::v1alpha1::SetDefaultPaymentMethodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteProject() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::DeleteProjectRequest, ::payment::v1alpha1::DeleteProjectResponse>(std::bind(&WithStreamedUnaryMethod_DeleteProject<BaseClass>::StreamedDeleteProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::DeleteProjectRequest,::payment::v1alpha1::DeleteProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeletePayment() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::DeletePaymentRequest, ::payment::v1alpha1::DeletePaymentResponse>(std::bind(&WithStreamedUnaryMethod_DeletePayment<BaseClass>::StreamedDeletePayment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeletePayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePayment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::DeletePaymentRequest,::payment::v1alpha1::DeletePaymentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CancelSubscription() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::CancelSubscriptionRequest, ::payment::v1alpha1::CancelSubscriptionResponse>(std::bind(&WithStreamedUnaryMethod_CancelSubscription<BaseClass>::StreamedCancelSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CancelSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::CancelSubscriptionRequest,::payment::v1alpha1::CancelSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCustomer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteCustomer() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::DeleteCustomerRequest, ::payment::v1alpha1::DeleteCustomerResponse>(std::bind(&WithStreamedUnaryMethod_DeleteCustomer<BaseClass>::StreamedDeleteCustomer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteCustomer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCustomer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::DeleteCustomerRequest,::payment::v1alpha1::DeleteCustomerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InvoiceFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InvoiceFilter() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::InvoiceFilterRequest, ::payment::v1alpha1::InvoiceFilterResponse>(std::bind(&WithStreamedUnaryMethod_InvoiceFilter<BaseClass>::StreamedInvoiceFilter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InvoiceFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InvoiceFilter(::grpc::ServerContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvoiceFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::InvoiceFilterRequest,::payment::v1alpha1::InvoiceFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsumeByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ConsumeByProject() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::ConsumeByProjectRequest, ::payment::v1alpha1::ConsumeByProjectResponse>(std::bind(&WithStreamedUnaryMethod_ConsumeByProject<BaseClass>::StreamedConsumeByProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConsumeByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsumeByProject(::grpc::ServerContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsumeByProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::ConsumeByProjectRequest,::payment::v1alpha1::ConsumeByProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopProject() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::StopProjectRequest, ::payment::v1alpha1::StopProjectResponse>(std::bind(&WithStreamedUnaryMethod_StopProject<BaseClass>::StreamedStopProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopProject(::grpc::ServerContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::StopProjectRequest,::payment::v1alpha1::StopProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BlockChainSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BlockChainSubscription() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler< ::payment::v1alpha1::BlockChainSubscriptionRequest, ::payment::v1alpha1::BlockChainSubscriptionResponse>(std::bind(&WithStreamedUnaryMethod_BlockChainSubscription<BaseClass>::StreamedBlockChainSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BlockChainSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BlockChainSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::BlockChainSubscriptionRequest* request, ::payment::v1alpha1::BlockChainSubscriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBlockChainSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::payment::v1alpha1::BlockChainSubscriptionRequest,::payment::v1alpha1::BlockChainSubscriptionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateCustomer<WithStreamedUnaryMethod_CreateSubscription<WithStreamedUnaryMethod_CreatePayment<WithStreamedUnaryMethod_CreateCard<WithStreamedUnaryMethod_CreateProject<WithStreamedUnaryMethod_CreateInvoice<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_GetPayment<WithStreamedUnaryMethod_GetCustomer<WithStreamedUnaryMethod_GetBilingMonth<WithStreamedUnaryMethod_GetPayments<WithStreamedUnaryMethod_ListProjects<WithStreamedUnaryMethod_ListPayment<WithStreamedUnaryMethod_ListSubscriptionItems<WithStreamedUnaryMethod_ListCustomers<WithStreamedUnaryMethod_UpdateSubscription<WithStreamedUnaryMethod_SetDefaultPaymentMethod<WithStreamedUnaryMethod_DeleteProject<WithStreamedUnaryMethod_DeletePayment<WithStreamedUnaryMethod_CancelSubscription<WithStreamedUnaryMethod_DeleteCustomer<WithStreamedUnaryMethod_InvoiceFilter<WithStreamedUnaryMethod_ConsumeByProject<WithStreamedUnaryMethod_StopProject<WithStreamedUnaryMethod_BlockChainSubscription<Service > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateCustomer<WithStreamedUnaryMethod_CreateSubscription<WithStreamedUnaryMethod_CreatePayment<WithStreamedUnaryMethod_CreateCard<WithStreamedUnaryMethod_CreateProject<WithStreamedUnaryMethod_CreateInvoice<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_GetPayment<WithStreamedUnaryMethod_GetCustomer<WithStreamedUnaryMethod_GetBilingMonth<WithStreamedUnaryMethod_GetPayments<WithStreamedUnaryMethod_ListProjects<WithStreamedUnaryMethod_ListPayment<WithStreamedUnaryMethod_ListSubscriptionItems<WithStreamedUnaryMethod_ListCustomers<WithStreamedUnaryMethod_UpdateSubscription<WithStreamedUnaryMethod_SetDefaultPaymentMethod<WithStreamedUnaryMethod_DeleteProject<WithStreamedUnaryMethod_DeletePayment<WithStreamedUnaryMethod_CancelSubscription<WithStreamedUnaryMethod_DeleteCustomer<WithStreamedUnaryMethod_InvoiceFilter<WithStreamedUnaryMethod_ConsumeByProject<WithStreamedUnaryMethod_StopProject<WithStreamedUnaryMethod_BlockChainSubscription<Service > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace payment


#endif  // GRPC_payment_2fv1alpha1_2fpayment_5fapi_2eproto__INCLUDED
