// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: payment/v1alpha1/payment_api.proto

#include "payment/v1alpha1/payment_api.pb.h"
#include "payment/v1alpha1/payment_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace payment {
namespace v1alpha1 {

static const char* PaymentAPIService_method_names[] = {
  "/payment.v1alpha1.PaymentAPIService/CreateCustomer",
  "/payment.v1alpha1.PaymentAPIService/CreateSubscription",
  "/payment.v1alpha1.PaymentAPIService/CreatePayment",
  "/payment.v1alpha1.PaymentAPIService/CreateCard",
  "/payment.v1alpha1.PaymentAPIService/CreateProject",
  "/payment.v1alpha1.PaymentAPIService/CreateInvoice",
  "/payment.v1alpha1.PaymentAPIService/GetOrganization",
  "/payment.v1alpha1.PaymentAPIService/GetSubscription",
  "/payment.v1alpha1.PaymentAPIService/GetPayment",
  "/payment.v1alpha1.PaymentAPIService/GetCustomer",
  "/payment.v1alpha1.PaymentAPIService/GetBilingMonth",
  "/payment.v1alpha1.PaymentAPIService/GetPayments",
  "/payment.v1alpha1.PaymentAPIService/ListProjects",
  "/payment.v1alpha1.PaymentAPIService/ListPayment",
  "/payment.v1alpha1.PaymentAPIService/ListSubscriptionItems",
  "/payment.v1alpha1.PaymentAPIService/UpdateSubscription",
  "/payment.v1alpha1.PaymentAPIService/SetDefaultPaymentMethod",
  "/payment.v1alpha1.PaymentAPIService/DeleteProject",
  "/payment.v1alpha1.PaymentAPIService/DeletePayment",
  "/payment.v1alpha1.PaymentAPIService/CancelSubscription",
  "/payment.v1alpha1.PaymentAPIService/DeleteCustomer",
  "/payment.v1alpha1.PaymentAPIService/InvoiceFilter",
  "/payment.v1alpha1.PaymentAPIService/ConsumeByProject",
  "/payment.v1alpha1.PaymentAPIService/StopProject",
};

std::unique_ptr< PaymentAPIService::Stub> PaymentAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PaymentAPIService::Stub> stub(new PaymentAPIService::Stub(channel));
  return stub;
}

PaymentAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateCustomer_(PaymentAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSubscription_(PaymentAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePayment_(PaymentAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCard_(PaymentAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProject_(PaymentAPIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInvoice_(PaymentAPIService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrganization_(PaymentAPIService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubscription_(PaymentAPIService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPayment_(PaymentAPIService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCustomer_(PaymentAPIService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBilingMonth_(PaymentAPIService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPayments_(PaymentAPIService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProjects_(PaymentAPIService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPayment_(PaymentAPIService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSubscriptionItems_(PaymentAPIService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSubscription_(PaymentAPIService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDefaultPaymentMethod_(PaymentAPIService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProject_(PaymentAPIService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePayment_(PaymentAPIService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelSubscription_(PaymentAPIService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCustomer_(PaymentAPIService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvoiceFilter_(PaymentAPIService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsumeByProject_(PaymentAPIService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopProject_(PaymentAPIService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PaymentAPIService::Stub::CreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::payment::v1alpha1::CreateCustomerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCustomer_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::CreateCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCustomer_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>* PaymentAPIService::Stub::AsyncCreateCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateCustomerResponse>::Create(channel_.get(), cq, rpcmethod_CreateCustomer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCustomerResponse>* PaymentAPIService::Stub::PrepareAsyncCreateCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCustomerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateCustomerResponse>::Create(channel_.get(), cq, rpcmethod_CreateCustomer_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::CreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::payment::v1alpha1::CreateSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSubscription_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::CreateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSubscription_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>* PaymentAPIService::Stub::AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_CreateSubscription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateSubscriptionResponse>* PaymentAPIService::Stub::PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_CreateSubscription_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::CreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::payment::v1alpha1::CreatePaymentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreatePayment_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::CreatePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatePayment_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>* PaymentAPIService::Stub::AsyncCreatePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreatePaymentResponse>::Create(channel_.get(), cq, rpcmethod_CreatePayment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreatePaymentResponse>* PaymentAPIService::Stub::PrepareAsyncCreatePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreatePaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreatePaymentResponse>::Create(channel_.get(), cq, rpcmethod_CreatePayment_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::CreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::payment::v1alpha1::CreateCardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCard_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::CreateCard(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCard_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>* PaymentAPIService::Stub::AsyncCreateCardRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateCardResponse>::Create(channel_.get(), cq, rpcmethod_CreateCard_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateCardResponse>* PaymentAPIService::Stub::PrepareAsyncCreateCardRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateCardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateCardResponse>::Create(channel_.get(), cq, rpcmethod_CreateCard_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::CreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::payment::v1alpha1::CreateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateProject_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::CreateProject(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>* PaymentAPIService::Stub::AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateProjectResponse>* PaymentAPIService::Stub::PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::CreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::payment::v1alpha1::CreateInvoiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateInvoice_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::CreateInvoice(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateInvoice_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>* PaymentAPIService::Stub::AsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateInvoiceResponse>::Create(channel_.get(), cq, rpcmethod_CreateInvoice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CreateInvoiceResponse>* PaymentAPIService::Stub::PrepareAsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CreateInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CreateInvoiceResponse>::Create(channel_.get(), cq, rpcmethod_CreateInvoice_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::GetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::payment::v1alpha1::GetOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOrganization_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::GetOrganization(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>* PaymentAPIService::Stub::AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetOrganizationResponse>* PaymentAPIService::Stub::PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOrganization_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::GetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::payment::v1alpha1::GetSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSubscription_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::GetSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSubscription_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>* PaymentAPIService::Stub::AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetSubscription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetSubscriptionResponse>* PaymentAPIService::Stub::PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetSubscription_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::GetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::payment::v1alpha1::GetPaymentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPayment_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::GetPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPayment_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>* PaymentAPIService::Stub::AsyncGetPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetPaymentResponse>::Create(channel_.get(), cq, rpcmethod_GetPayment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentResponse>* PaymentAPIService::Stub::PrepareAsyncGetPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetPaymentResponse>::Create(channel_.get(), cq, rpcmethod_GetPayment_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::GetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::payment::v1alpha1::GetCustomerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCustomer_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::GetCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCustomer_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>* PaymentAPIService::Stub::AsyncGetCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetCustomerResponse>::Create(channel_.get(), cq, rpcmethod_GetCustomer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetCustomerResponse>* PaymentAPIService::Stub::PrepareAsyncGetCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetCustomerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetCustomerResponse>::Create(channel_.get(), cq, rpcmethod_GetCustomer_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::GetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::payment::v1alpha1::GetBilingMonthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBilingMonth_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::GetBilingMonth(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBilingMonth_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>* PaymentAPIService::Stub::AsyncGetBilingMonthRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetBilingMonthResponse>::Create(channel_.get(), cq, rpcmethod_GetBilingMonth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetBilingMonthResponse>* PaymentAPIService::Stub::PrepareAsyncGetBilingMonthRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetBilingMonthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetBilingMonthResponse>::Create(channel_.get(), cq, rpcmethod_GetBilingMonth_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::GetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::payment::v1alpha1::GetPaymentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPayments_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::GetPayments(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPayments_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>* PaymentAPIService::Stub::AsyncGetPaymentsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetPaymentsResponse>::Create(channel_.get(), cq, rpcmethod_GetPayments_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::GetPaymentsResponse>* PaymentAPIService::Stub::PrepareAsyncGetPaymentsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::GetPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::GetPaymentsResponse>::Create(channel_.get(), cq, rpcmethod_GetPayments_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::ListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::payment::v1alpha1::ListProjectsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProjects_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::ListProjects(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProjects_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>* PaymentAPIService::Stub::AsyncListProjectsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ListProjectsResponse>::Create(channel_.get(), cq, rpcmethod_ListProjects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListProjectsResponse>* PaymentAPIService::Stub::PrepareAsyncListProjectsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListProjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ListProjectsResponse>::Create(channel_.get(), cq, rpcmethod_ListProjects_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::ListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::payment::v1alpha1::ListPaymentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPayment_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::ListPayment(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPayment_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>* PaymentAPIService::Stub::AsyncListPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ListPaymentResponse>::Create(channel_.get(), cq, rpcmethod_ListPayment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListPaymentResponse>* PaymentAPIService::Stub::PrepareAsyncListPaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ListPaymentResponse>::Create(channel_.get(), cq, rpcmethod_ListPayment_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::ListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSubscriptionItems_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::ListSubscriptionItems(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSubscriptionItems_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>* PaymentAPIService::Stub::AsyncListSubscriptionItemsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ListSubscriptionItemsResponse>::Create(channel_.get(), cq, rpcmethod_ListSubscriptionItems_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ListSubscriptionItemsResponse>* PaymentAPIService::Stub::PrepareAsyncListSubscriptionItemsRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ListSubscriptionItemsResponse>::Create(channel_.get(), cq, rpcmethod_ListSubscriptionItems_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::UpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateSubscription_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::UpdateSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateSubscription_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>* PaymentAPIService::Stub::AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::UpdateSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSubscription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::UpdateSubscriptionResponse>* PaymentAPIService::Stub::PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::UpdateSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSubscription_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::SetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDefaultPaymentMethod_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::SetDefaultPaymentMethod(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDefaultPaymentMethod_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>* PaymentAPIService::Stub::AsyncSetDefaultPaymentMethodRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>::Create(channel_.get(), cq, rpcmethod_SetDefaultPaymentMethod_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>* PaymentAPIService::Stub::PrepareAsyncSetDefaultPaymentMethodRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::SetDefaultPaymentMethodResponse>::Create(channel_.get(), cq, rpcmethod_SetDefaultPaymentMethod_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::DeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::payment::v1alpha1::DeleteProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProject_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::DeleteProject(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>* PaymentAPIService::Stub::AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::DeleteProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteProjectResponse>* PaymentAPIService::Stub::PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::DeleteProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProject_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::DeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::payment::v1alpha1::DeletePaymentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeletePayment_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::DeletePayment(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePayment_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>* PaymentAPIService::Stub::AsyncDeletePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::DeletePaymentResponse>::Create(channel_.get(), cq, rpcmethod_DeletePayment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeletePaymentResponse>* PaymentAPIService::Stub::PrepareAsyncDeletePaymentRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeletePaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::DeletePaymentResponse>::Create(channel_.get(), cq, rpcmethod_DeletePayment_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::CancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::payment::v1alpha1::CancelSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelSubscription_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::CancelSubscription(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelSubscription_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>* PaymentAPIService::Stub::AsyncCancelSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CancelSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_CancelSubscription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::CancelSubscriptionResponse>* PaymentAPIService::Stub::PrepareAsyncCancelSubscriptionRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::CancelSubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_CancelSubscription_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::DeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::payment::v1alpha1::DeleteCustomerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCustomer_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::DeleteCustomer(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCustomer_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>* PaymentAPIService::Stub::AsyncDeleteCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::DeleteCustomerResponse>::Create(channel_.get(), cq, rpcmethod_DeleteCustomer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::DeleteCustomerResponse>* PaymentAPIService::Stub::PrepareAsyncDeleteCustomerRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::DeleteCustomerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::DeleteCustomerResponse>::Create(channel_.get(), cq, rpcmethod_DeleteCustomer_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::InvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::payment::v1alpha1::InvoiceFilterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InvoiceFilter_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::InvoiceFilter(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InvoiceFilter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>* PaymentAPIService::Stub::AsyncInvoiceFilterRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::InvoiceFilterResponse>::Create(channel_.get(), cq, rpcmethod_InvoiceFilter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::InvoiceFilterResponse>* PaymentAPIService::Stub::PrepareAsyncInvoiceFilterRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::InvoiceFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::InvoiceFilterResponse>::Create(channel_.get(), cq, rpcmethod_InvoiceFilter_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::ConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::payment::v1alpha1::ConsumeByProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConsumeByProject_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::ConsumeByProject(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConsumeByProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>* PaymentAPIService::Stub::AsyncConsumeByProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ConsumeByProjectResponse>::Create(channel_.get(), cq, rpcmethod_ConsumeByProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::ConsumeByProjectResponse>* PaymentAPIService::Stub::PrepareAsyncConsumeByProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::ConsumeByProjectResponse>::Create(channel_.get(), cq, rpcmethod_ConsumeByProject_, context, request, false);
}

::grpc::Status PaymentAPIService::Stub::StopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::payment::v1alpha1::StopProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopProject_, context, request, response);
}

void PaymentAPIService::Stub::experimental_async::StopProject(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>* PaymentAPIService::Stub::AsyncStopProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::StopProjectResponse>::Create(channel_.get(), cq, rpcmethod_StopProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::payment::v1alpha1::StopProjectResponse>* PaymentAPIService::Stub::PrepareAsyncStopProjectRaw(::grpc::ClientContext* context, const ::payment::v1alpha1::StopProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::payment::v1alpha1::StopProjectResponse>::Create(channel_.get(), cq, rpcmethod_StopProject_, context, request, false);
}

PaymentAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::CreateCustomerRequest, ::payment::v1alpha1::CreateCustomerResponse>(
          std::mem_fn(&PaymentAPIService::Service::CreateCustomer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::CreateSubscriptionRequest, ::payment::v1alpha1::CreateSubscriptionResponse>(
          std::mem_fn(&PaymentAPIService::Service::CreateSubscription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::CreatePaymentRequest, ::payment::v1alpha1::CreatePaymentResponse>(
          std::mem_fn(&PaymentAPIService::Service::CreatePayment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::CreateCardRequest, ::payment::v1alpha1::CreateCardResponse>(
          std::mem_fn(&PaymentAPIService::Service::CreateCard), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::CreateProjectRequest, ::payment::v1alpha1::CreateProjectResponse>(
          std::mem_fn(&PaymentAPIService::Service::CreateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::CreateInvoiceRequest, ::payment::v1alpha1::CreateInvoiceResponse>(
          std::mem_fn(&PaymentAPIService::Service::CreateInvoice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::GetOrganizationRequest, ::payment::v1alpha1::GetOrganizationResponse>(
          std::mem_fn(&PaymentAPIService::Service::GetOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::GetSubscriptionRequest, ::payment::v1alpha1::GetSubscriptionResponse>(
          std::mem_fn(&PaymentAPIService::Service::GetSubscription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::GetPaymentRequest, ::payment::v1alpha1::GetPaymentResponse>(
          std::mem_fn(&PaymentAPIService::Service::GetPayment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::GetCustomerRequest, ::payment::v1alpha1::GetCustomerResponse>(
          std::mem_fn(&PaymentAPIService::Service::GetCustomer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::GetBilingMonthRequest, ::payment::v1alpha1::GetBilingMonthResponse>(
          std::mem_fn(&PaymentAPIService::Service::GetBilingMonth), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::GetPaymentsRequest, ::payment::v1alpha1::GetPaymentsResponse>(
          std::mem_fn(&PaymentAPIService::Service::GetPayments), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::ListProjectsRequest, ::payment::v1alpha1::ListProjectsResponse>(
          std::mem_fn(&PaymentAPIService::Service::ListProjects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::ListPaymentRequest, ::payment::v1alpha1::ListPaymentResponse>(
          std::mem_fn(&PaymentAPIService::Service::ListPayment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::ListSubscriptionItemsRequest, ::payment::v1alpha1::ListSubscriptionItemsResponse>(
          std::mem_fn(&PaymentAPIService::Service::ListSubscriptionItems), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::UpdateSubscriptionRequest, ::payment::v1alpha1::UpdateSubscriptionResponse>(
          std::mem_fn(&PaymentAPIService::Service::UpdateSubscription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::SetDefaultPaymentMethodRequest, ::payment::v1alpha1::SetDefaultPaymentMethodResponse>(
          std::mem_fn(&PaymentAPIService::Service::SetDefaultPaymentMethod), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::DeleteProjectRequest, ::payment::v1alpha1::DeleteProjectResponse>(
          std::mem_fn(&PaymentAPIService::Service::DeleteProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::DeletePaymentRequest, ::payment::v1alpha1::DeletePaymentResponse>(
          std::mem_fn(&PaymentAPIService::Service::DeletePayment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::CancelSubscriptionRequest, ::payment::v1alpha1::CancelSubscriptionResponse>(
          std::mem_fn(&PaymentAPIService::Service::CancelSubscription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::DeleteCustomerRequest, ::payment::v1alpha1::DeleteCustomerResponse>(
          std::mem_fn(&PaymentAPIService::Service::DeleteCustomer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::InvoiceFilterRequest, ::payment::v1alpha1::InvoiceFilterResponse>(
          std::mem_fn(&PaymentAPIService::Service::InvoiceFilter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::ConsumeByProjectRequest, ::payment::v1alpha1::ConsumeByProjectResponse>(
          std::mem_fn(&PaymentAPIService::Service::ConsumeByProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PaymentAPIService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PaymentAPIService::Service, ::payment::v1alpha1::StopProjectRequest, ::payment::v1alpha1::StopProjectResponse>(
          std::mem_fn(&PaymentAPIService::Service::StopProject), this)));
}

PaymentAPIService::Service::~Service() {
}

::grpc::Status PaymentAPIService::Service::CreateCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCustomerRequest* request, ::payment::v1alpha1::CreateCustomerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::CreateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateSubscriptionRequest* request, ::payment::v1alpha1::CreateSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::CreatePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::CreatePaymentRequest* request, ::payment::v1alpha1::CreatePaymentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::CreateCard(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateCardRequest* request, ::payment::v1alpha1::CreateCardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::CreateProject(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateProjectRequest* request, ::payment::v1alpha1::CreateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::CreateInvoice(::grpc::ServerContext* context, const ::payment::v1alpha1::CreateInvoiceRequest* request, ::payment::v1alpha1::CreateInvoiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::GetOrganization(::grpc::ServerContext* context, const ::payment::v1alpha1::GetOrganizationRequest* request, ::payment::v1alpha1::GetOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::GetSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::GetSubscriptionRequest* request, ::payment::v1alpha1::GetSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::GetPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentRequest* request, ::payment::v1alpha1::GetPaymentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::GetCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::GetCustomerRequest* request, ::payment::v1alpha1::GetCustomerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::GetBilingMonth(::grpc::ServerContext* context, const ::payment::v1alpha1::GetBilingMonthRequest* request, ::payment::v1alpha1::GetBilingMonthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::GetPayments(::grpc::ServerContext* context, const ::payment::v1alpha1::GetPaymentsRequest* request, ::payment::v1alpha1::GetPaymentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::ListProjects(::grpc::ServerContext* context, const ::payment::v1alpha1::ListProjectsRequest* request, ::payment::v1alpha1::ListProjectsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::ListPayment(::grpc::ServerContext* context, const ::payment::v1alpha1::ListPaymentRequest* request, ::payment::v1alpha1::ListPaymentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::ListSubscriptionItems(::grpc::ServerContext* context, const ::payment::v1alpha1::ListSubscriptionItemsRequest* request, ::payment::v1alpha1::ListSubscriptionItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::UpdateSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::UpdateSubscriptionRequest* request, ::payment::v1alpha1::UpdateSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::SetDefaultPaymentMethod(::grpc::ServerContext* context, const ::payment::v1alpha1::SetDefaultPaymentMethodRequest* request, ::payment::v1alpha1::SetDefaultPaymentMethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::DeleteProject(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteProjectRequest* request, ::payment::v1alpha1::DeleteProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::DeletePayment(::grpc::ServerContext* context, const ::payment::v1alpha1::DeletePaymentRequest* request, ::payment::v1alpha1::DeletePaymentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::CancelSubscription(::grpc::ServerContext* context, const ::payment::v1alpha1::CancelSubscriptionRequest* request, ::payment::v1alpha1::CancelSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::DeleteCustomer(::grpc::ServerContext* context, const ::payment::v1alpha1::DeleteCustomerRequest* request, ::payment::v1alpha1::DeleteCustomerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::InvoiceFilter(::grpc::ServerContext* context, const ::payment::v1alpha1::InvoiceFilterRequest* request, ::payment::v1alpha1::InvoiceFilterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::ConsumeByProject(::grpc::ServerContext* context, const ::payment::v1alpha1::ConsumeByProjectRequest* request, ::payment::v1alpha1::ConsumeByProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PaymentAPIService::Service::StopProject(::grpc::ServerContext* context, const ::payment::v1alpha1::StopProjectRequest* request, ::payment::v1alpha1::StopProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace payment
}  // namespace v1alpha1

