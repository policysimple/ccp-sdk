// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search/v1alpha1/search.proto

#include "search/v1alpha1/search.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace search {
namespace v1alpha1 {
constexpr SearchItem_DataEntry_DoNotUse::SearchItem_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SearchItem_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr SearchItem_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchItem_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SearchItem_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchItem_DataEntry_DoNotUseDefaultTypeInternal _SearchItem_DataEntry_DoNotUse_default_instance_;
constexpr SearchItem::SearchItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , org_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SearchItemDefaultTypeInternal {
  constexpr SearchItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchItemDefaultTypeInternal() {}
  union {
    SearchItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchItemDefaultTypeInternal _SearchItem_default_instance_;
}  // namespace v1alpha1
}  // namespace search
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_search_2fv1alpha1_2fsearch_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_search_2fv1alpha1_2fsearch_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_search_2fv1alpha1_2fsearch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_search_2fv1alpha1_2fsearch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, object_id_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, type_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, name_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, org_id_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, description_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, metadata_),
  PROTOBUF_FIELD_OFFSET(::search::v1alpha1::SearchItem, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::search::v1alpha1::SearchItem_DataEntry_DoNotUse)},
  { 9, -1, sizeof(::search::v1alpha1::SearchItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::search::v1alpha1::_SearchItem_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::search::v1alpha1::_SearchItem_default_instance_),
};

const char descriptor_table_protodef_search_2fv1alpha1_2fsearch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034search/v1alpha1/search.proto\022\017search.v"
  "1alpha1\"\232\002\n\nSearchItem\022\033\n\tobject_id\030\001 \001("
  "\tR\010objectId\022\022\n\004type\030\002 \001(\tR\004type\022\022\n\004name\030"
  "\003 \001(\tR\004name\022\025\n\006org_id\030\004 \001(\tR\005orgId\022 \n\013de"
  "scription\030\005 \001(\tR\013description\022\032\n\010metadata"
  "\030\006 \001(\tR\010metadata\0229\n\004data\030\007 \003(\0132%.search."
  "v1alpha1.SearchItem.DataEntryR\004data\0327\n\tD"
  "ataEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001("
  "\tR\005value:\0028\001B2Z0github.com/cuemby/ccp-sd"
  "k/gen/go/search/v1alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_search_2fv1alpha1_2fsearch_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_2fv1alpha1_2fsearch_2eproto = {
  false, false, 392, descriptor_table_protodef_search_2fv1alpha1_2fsearch_2eproto, "search/v1alpha1/search.proto", 
  &descriptor_table_search_2fv1alpha1_2fsearch_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_search_2fv1alpha1_2fsearch_2eproto::offsets,
  file_level_metadata_search_2fv1alpha1_2fsearch_2eproto, file_level_enum_descriptors_search_2fv1alpha1_2fsearch_2eproto, file_level_service_descriptors_search_2fv1alpha1_2fsearch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_search_2fv1alpha1_2fsearch_2eproto_getter() {
  return &descriptor_table_search_2fv1alpha1_2fsearch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_search_2fv1alpha1_2fsearch_2eproto(&descriptor_table_search_2fv1alpha1_2fsearch_2eproto);
namespace search {
namespace v1alpha1 {

// ===================================================================

SearchItem_DataEntry_DoNotUse::SearchItem_DataEntry_DoNotUse() {}
SearchItem_DataEntry_DoNotUse::SearchItem_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SearchItem_DataEntry_DoNotUse::MergeFrom(const SearchItem_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SearchItem_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_search_2fv1alpha1_2fsearch_2eproto_getter, &descriptor_table_search_2fv1alpha1_2fsearch_2eproto_once,
      file_level_metadata_search_2fv1alpha1_2fsearch_2eproto[0]);
}

// ===================================================================

class SearchItem::_Internal {
 public:
};

SearchItem::SearchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:search.v1alpha1.SearchItem)
}
SearchItem::SearchItem(const SearchItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_org_id().empty()) {
    org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_org_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:search.v1alpha1.SearchItem)
}

inline void SearchItem::SharedCtor() {
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SearchItem::~SearchItem() {
  // @@protoc_insertion_point(destructor:search.v1alpha1.SearchItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  org_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchItem::ArenaDtor(void* object) {
  SearchItem* _this = reinterpret_cast< SearchItem* >(object);
  (void)_this;
  _this->data_. ~MapField();
}
inline void SearchItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SearchItem::ArenaDtor);
  }
}
void SearchItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchItem::Clear() {
// @@protoc_insertion_point(message_clear_start:search.v1alpha1.SearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  object_id_.ClearToEmpty();
  type_.ClearToEmpty();
  name_.ClearToEmpty();
  org_id_.ClearToEmpty();
  description_.ClearToEmpty();
  metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_id = 1 [json_name = "objectId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "search.v1alpha1.SearchItem.object_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "search.v1alpha1.SearchItem.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "search.v1alpha1.SearchItem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string org_id = 4 [json_name = "orgId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_org_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "search.v1alpha1.SearchItem.org_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5 [json_name = "description"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "search.v1alpha1.SearchItem.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata = 6 [json_name = "metadata"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "search.v1alpha1.SearchItem.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> data = 7 [json_name = "data"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search.v1alpha1.SearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1 [json_name = "objectId"];
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search.v1alpha1.SearchItem.object_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_object_id(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search.v1alpha1.SearchItem.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search.v1alpha1.SearchItem.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string org_id = 4 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search.v1alpha1.SearchItem.org_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_org_id(), target);
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search.v1alpha1.SearchItem.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string metadata = 6 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search.v1alpha1.SearchItem.metadata");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_metadata(), target);
  }

  // map<string, string> data = 7 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "search.v1alpha1.SearchItem.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "search.v1alpha1.SearchItem.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SearchItem_DataEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = SearchItem_DataEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search.v1alpha1.SearchItem)
  return target;
}

size_t SearchItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search.v1alpha1.SearchItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 7 [json_name = "data"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += SearchItem_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string object_id = 1 [json_name = "objectId"];
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string org_id = 4 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string metadata = 6 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchItem::GetClassData() const { return &_class_data_; }

void SearchItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SearchItem *>(to)->MergeFrom(
      static_cast<const SearchItem &>(from));
}


void SearchItem::MergeFrom(const SearchItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search.v1alpha1.SearchItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_metadata().empty()) {
    _internal_set_metadata(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchItem::CopyFrom(const SearchItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search.v1alpha1.SearchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchItem::IsInitialized() const {
  return true;
}

void SearchItem::InternalSwap(SearchItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, GetArenaForAllocation(),
      &other->object_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &org_id_, GetArenaForAllocation(),
      &other->org_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, GetArenaForAllocation(),
      &other->metadata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_search_2fv1alpha1_2fsearch_2eproto_getter, &descriptor_table_search_2fv1alpha1_2fsearch_2eproto_once,
      file_level_metadata_search_2fv1alpha1_2fsearch_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace search
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::search::v1alpha1::SearchItem_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::search::v1alpha1::SearchItem_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search::v1alpha1::SearchItem_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::search::v1alpha1::SearchItem* Arena::CreateMaybeMessage< ::search::v1alpha1::SearchItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search::v1alpha1::SearchItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
