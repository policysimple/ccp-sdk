// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search/v1alpha1/search_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_search_2fv1alpha1_2fsearch_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_search_2fv1alpha1_2fsearch_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "search/v1alpha1/search.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_2fv1alpha1_2fsearch_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2fv1alpha1_2fsearch_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_2fv1alpha1_2fsearch_5fapi_2eproto;
namespace search {
namespace v1alpha1 {
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace search
PROTOBUF_NAMESPACE_OPEN
template<> ::search::v1alpha1::SearchRequest* Arena::CreateMaybeMessage<::search::v1alpha1::SearchRequest>(Arena*);
template<> ::search::v1alpha1::SearchResponse* Arena::CreateMaybeMessage<::search::v1alpha1::SearchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace search {
namespace v1alpha1 {

// ===================================================================

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search.v1alpha1.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit constexpr SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return new SearchRequest();
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search.v1alpha1.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 3,
    kQueryFieldNumber = 4,
    kSizeFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // string org_id = 3 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string query = 4 [json_name = "query"];
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_MUST_USE_RESULT std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // uint32 size = 1 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 page = 2 [json_name = "page"];
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:search.v1alpha1.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2fv1alpha1_2fsearch_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search.v1alpha1.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit constexpr SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return new SearchResponse();
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search.v1alpha1.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
    kTotalHitsFieldNumber = 2,
    kTotalPagesFieldNumber = 3,
  };
  // repeated .search.v1alpha1.SearchItem results = 1 [json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::search::v1alpha1::SearchItem* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::v1alpha1::SearchItem >*
      mutable_results();
  private:
  const ::search::v1alpha1::SearchItem& _internal_results(int index) const;
  ::search::v1alpha1::SearchItem* _internal_add_results();
  public:
  const ::search::v1alpha1::SearchItem& results(int index) const;
  ::search::v1alpha1::SearchItem* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::v1alpha1::SearchItem >&
      results() const;

  // uint32 total_hits = 2 [json_name = "totalHits"];
  void clear_total_hits();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_hits() const;
  void set_total_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_hits() const;
  void _internal_set_total_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_pages = 3 [json_name = "totalPages"];
  void clear_total_pages();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_pages() const;
  void set_total_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_pages() const;
  void _internal_set_total_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:search.v1alpha1.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::v1alpha1::SearchItem > results_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_hits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_pages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2fv1alpha1_2fsearch_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchRequest

// uint32 size = 1 [json_name = "size"];
inline void SearchRequest::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequest::size() const {
  // @@protoc_insertion_point(field_get:search.v1alpha1.SearchRequest.size)
  return _internal_size();
}
inline void SearchRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void SearchRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:search.v1alpha1.SearchRequest.size)
}

// uint32 page = 2 [json_name = "page"];
inline void SearchRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequest::page() const {
  // @@protoc_insertion_point(field_get:search.v1alpha1.SearchRequest.page)
  return _internal_page();
}
inline void SearchRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void SearchRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:search.v1alpha1.SearchRequest.page)
}

// string org_id = 3 [json_name = "orgId"];
inline void SearchRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& SearchRequest::org_id() const {
  // @@protoc_insertion_point(field_get:search.v1alpha1.SearchRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search.v1alpha1.SearchRequest.org_id)
}
inline std::string* SearchRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:search.v1alpha1.SearchRequest.org_id)
  return _s;
}
inline const std::string& SearchRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void SearchRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:search.v1alpha1.SearchRequest.org_id)
  return org_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), org_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:search.v1alpha1.SearchRequest.org_id)
}

// string query = 4 [json_name = "query"];
inline void SearchRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:search.v1alpha1.SearchRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search.v1alpha1.SearchRequest.query)
}
inline std::string* SearchRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:search.v1alpha1.SearchRequest.query)
  return _s;
}
inline const std::string& SearchRequest::_internal_query() const {
  return query_.Get();
}
inline void SearchRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:search.v1alpha1.SearchRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:search.v1alpha1.SearchRequest.query)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .search.v1alpha1.SearchItem results = 1 [json_name = "results"];
inline int SearchResponse::_internal_results_size() const {
  return results_.size();
}
inline int SearchResponse::results_size() const {
  return _internal_results_size();
}
inline ::search::v1alpha1::SearchItem* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:search.v1alpha1.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::v1alpha1::SearchItem >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:search.v1alpha1.SearchResponse.results)
  return &results_;
}
inline const ::search::v1alpha1::SearchItem& SearchResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::search::v1alpha1::SearchItem& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:search.v1alpha1.SearchResponse.results)
  return _internal_results(index);
}
inline ::search::v1alpha1::SearchItem* SearchResponse::_internal_add_results() {
  return results_.Add();
}
inline ::search::v1alpha1::SearchItem* SearchResponse::add_results() {
  ::search::v1alpha1::SearchItem* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:search.v1alpha1.SearchResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::v1alpha1::SearchItem >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:search.v1alpha1.SearchResponse.results)
  return results_;
}

// uint32 total_hits = 2 [json_name = "totalHits"];
inline void SearchResponse::clear_total_hits() {
  total_hits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchResponse::_internal_total_hits() const {
  return total_hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchResponse::total_hits() const {
  // @@protoc_insertion_point(field_get:search.v1alpha1.SearchResponse.total_hits)
  return _internal_total_hits();
}
inline void SearchResponse::_internal_set_total_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_hits_ = value;
}
inline void SearchResponse::set_total_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_hits(value);
  // @@protoc_insertion_point(field_set:search.v1alpha1.SearchResponse.total_hits)
}

// uint32 total_pages = 3 [json_name = "totalPages"];
inline void SearchResponse::clear_total_pages() {
  total_pages_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchResponse::_internal_total_pages() const {
  return total_pages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchResponse::total_pages() const {
  // @@protoc_insertion_point(field_get:search.v1alpha1.SearchResponse.total_pages)
  return _internal_total_pages();
}
inline void SearchResponse::_internal_set_total_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_pages_ = value;
}
inline void SearchResponse::set_total_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_pages(value);
  // @@protoc_insertion_point(field_set:search.v1alpha1.SearchResponse.total_pages)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace search

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_search_2fv1alpha1_2fsearch_5fapi_2eproto
