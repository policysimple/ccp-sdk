// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: search/v1alpha1/search_api.proto

#include "search/v1alpha1/search_api.pb.h"
#include "search/v1alpha1/search_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace search {
namespace v1alpha1 {

static const char* SearchAPIService_method_names[] = {
  "/search.v1alpha1.SearchAPIService/Search",
};

std::unique_ptr< SearchAPIService::Stub> SearchAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SearchAPIService::Stub> stub(new SearchAPIService::Stub(channel));
  return stub;
}

SearchAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Search_(SearchAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SearchAPIService::Stub::Search(::grpc::ClientContext* context, const ::search::v1alpha1::SearchRequest& request, ::search::v1alpha1::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

void SearchAPIService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::search::v1alpha1::SearchRequest* request, ::search::v1alpha1::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::search::v1alpha1::SearchResponse>* SearchAPIService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::search::v1alpha1::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::search::v1alpha1::SearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::search::v1alpha1::SearchResponse>* SearchAPIService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::search::v1alpha1::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::search::v1alpha1::SearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false);
}

SearchAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SearchAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SearchAPIService::Service, ::search::v1alpha1::SearchRequest, ::search::v1alpha1::SearchResponse>(
          std::mem_fn(&SearchAPIService::Service::Search), this)));
}

SearchAPIService::Service::~Service() {
}

::grpc::Status SearchAPIService::Service::Search(::grpc::ServerContext* context, const ::search::v1alpha1::SearchRequest* request, ::search::v1alpha1::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace search
}  // namespace v1alpha1

