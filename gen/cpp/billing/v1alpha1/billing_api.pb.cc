// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: billing/v1alpha1/billing_api.proto

#include "billing/v1alpha1/billing_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace billing {
namespace v1alpha1 {
constexpr ReadBillingRequest::ReadBillingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReadBillingRequestDefaultTypeInternal {
  constexpr ReadBillingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadBillingRequestDefaultTypeInternal() {}
  union {
    ReadBillingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadBillingRequestDefaultTypeInternal _ReadBillingRequest_default_instance_;
constexpr ReadBillingResponse::ReadBillingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : billing_(nullptr){}
struct ReadBillingResponseDefaultTypeInternal {
  constexpr ReadBillingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadBillingResponseDefaultTypeInternal() {}
  union {
    ReadBillingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadBillingResponseDefaultTypeInternal _ReadBillingResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace billing
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_billing_2fv1alpha1_2fbilling_5fapi_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_billing_2fv1alpha1_2fbilling_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_billing_2fv1alpha1_2fbilling_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::ReadBillingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::ReadBillingRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::ReadBillingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::ReadBillingResponse, billing_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::billing::v1alpha1::ReadBillingRequest)},
  { 6, -1, sizeof(::billing::v1alpha1::ReadBillingResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::billing::v1alpha1::_ReadBillingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::billing::v1alpha1::_ReadBillingResponse_default_instance_),
};

const char descriptor_table_protodef_billing_2fv1alpha1_2fbilling_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"billing/v1alpha1/billing_api.proto\022\020bi"
  "lling.v1alpha1\032\036billing/v1alpha1/billing"
  ".proto\"=\n\022ReadBillingRequest\022\'\n\017organiza"
  "tion_id\030\001 \001(\tR\016organizationId\"J\n\023ReadBil"
  "lingResponse\0223\n\007billing\030\001 \001(\0132\031.billing."
  "v1alpha1.BillingR\007billing2n\n\016BillingServ"
  "ice\022\\\n\013ReadBilling\022$.billing.v1alpha1.Re"
  "adBillingRequest\032%.billing.v1alpha1.Read"
  "BillingResponse\"\000B7Z5github.com/cuemby/c"
  "cp-billing-service/billingv1alpha1b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_deps[1] = {
  &::descriptor_table_billing_2fv1alpha1_2fbilling_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto = {
  false, false, 402, descriptor_table_protodef_billing_2fv1alpha1_2fbilling_5fapi_2eproto, "billing/v1alpha1/billing_api.proto", 
  &descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_once, descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto::offsets,
  file_level_metadata_billing_2fv1alpha1_2fbilling_5fapi_2eproto, file_level_enum_descriptors_billing_2fv1alpha1_2fbilling_5fapi_2eproto, file_level_service_descriptors_billing_2fv1alpha1_2fbilling_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_getter() {
  return &descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_billing_2fv1alpha1_2fbilling_5fapi_2eproto(&descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto);
namespace billing {
namespace v1alpha1 {

// ===================================================================

class ReadBillingRequest::_Internal {
 public:
};

ReadBillingRequest::ReadBillingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:billing.v1alpha1.ReadBillingRequest)
}
ReadBillingRequest::ReadBillingRequest(const ReadBillingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:billing.v1alpha1.ReadBillingRequest)
}

inline void ReadBillingRequest::SharedCtor() {
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadBillingRequest::~ReadBillingRequest() {
  // @@protoc_insertion_point(destructor:billing.v1alpha1.ReadBillingRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadBillingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadBillingRequest::ArenaDtor(void* object) {
  ReadBillingRequest* _this = reinterpret_cast< ReadBillingRequest* >(object);
  (void)_this;
}
void ReadBillingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadBillingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadBillingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:billing.v1alpha1.ReadBillingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadBillingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "billing.v1alpha1.ReadBillingRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadBillingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:billing.v1alpha1.ReadBillingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "billing.v1alpha1.ReadBillingRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:billing.v1alpha1.ReadBillingRequest)
  return target;
}

size_t ReadBillingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:billing.v1alpha1.ReadBillingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadBillingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadBillingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadBillingRequest::GetClassData() const { return &_class_data_; }

void ReadBillingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReadBillingRequest *>(to)->MergeFrom(
      static_cast<const ReadBillingRequest &>(from));
}


void ReadBillingRequest::MergeFrom(const ReadBillingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:billing.v1alpha1.ReadBillingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadBillingRequest::CopyFrom(const ReadBillingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:billing.v1alpha1.ReadBillingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadBillingRequest::IsInitialized() const {
  return true;
}

void ReadBillingRequest::InternalSwap(ReadBillingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadBillingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_getter, &descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_once,
      file_level_metadata_billing_2fv1alpha1_2fbilling_5fapi_2eproto[0]);
}

// ===================================================================

class ReadBillingResponse::_Internal {
 public:
  static const ::billing::v1alpha1::Billing& billing(const ReadBillingResponse* msg);
};

const ::billing::v1alpha1::Billing&
ReadBillingResponse::_Internal::billing(const ReadBillingResponse* msg) {
  return *msg->billing_;
}
void ReadBillingResponse::clear_billing() {
  if (GetArenaForAllocation() == nullptr && billing_ != nullptr) {
    delete billing_;
  }
  billing_ = nullptr;
}
ReadBillingResponse::ReadBillingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:billing.v1alpha1.ReadBillingResponse)
}
ReadBillingResponse::ReadBillingResponse(const ReadBillingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_billing()) {
    billing_ = new ::billing::v1alpha1::Billing(*from.billing_);
  } else {
    billing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:billing.v1alpha1.ReadBillingResponse)
}

inline void ReadBillingResponse::SharedCtor() {
billing_ = nullptr;
}

ReadBillingResponse::~ReadBillingResponse() {
  // @@protoc_insertion_point(destructor:billing.v1alpha1.ReadBillingResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadBillingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete billing_;
}

void ReadBillingResponse::ArenaDtor(void* object) {
  ReadBillingResponse* _this = reinterpret_cast< ReadBillingResponse* >(object);
  (void)_this;
}
void ReadBillingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadBillingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadBillingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:billing.v1alpha1.ReadBillingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && billing_ != nullptr) {
    delete billing_;
  }
  billing_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadBillingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_billing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadBillingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:billing.v1alpha1.ReadBillingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
  if (this->_internal_has_billing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::billing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:billing.v1alpha1.ReadBillingResponse)
  return target;
}

size_t ReadBillingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:billing.v1alpha1.ReadBillingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
  if (this->_internal_has_billing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billing_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadBillingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadBillingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadBillingResponse::GetClassData() const { return &_class_data_; }

void ReadBillingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReadBillingResponse *>(to)->MergeFrom(
      static_cast<const ReadBillingResponse &>(from));
}


void ReadBillingResponse::MergeFrom(const ReadBillingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:billing.v1alpha1.ReadBillingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_billing()) {
    _internal_mutable_billing()->::billing::v1alpha1::Billing::MergeFrom(from._internal_billing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadBillingResponse::CopyFrom(const ReadBillingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:billing.v1alpha1.ReadBillingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadBillingResponse::IsInitialized() const {
  return true;
}

void ReadBillingResponse::InternalSwap(ReadBillingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(billing_, other->billing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadBillingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_getter, &descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto_once,
      file_level_metadata_billing_2fv1alpha1_2fbilling_5fapi_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace billing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::billing::v1alpha1::ReadBillingRequest* Arena::CreateMaybeMessage< ::billing::v1alpha1::ReadBillingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::billing::v1alpha1::ReadBillingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::billing::v1alpha1::ReadBillingResponse* Arena::CreateMaybeMessage< ::billing::v1alpha1::ReadBillingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::billing::v1alpha1::ReadBillingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
