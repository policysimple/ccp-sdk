// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: billing/v1alpha1/billing.proto

#include "billing/v1alpha1/billing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace billing {
namespace v1alpha1 {
constexpr Billing::Billing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_metric_(0)
  , cpu_bill_(0)
  , ram_metric_(0)
  , ram_bill_(0)
  , storage_metric_(0)
  , storage_bill_(0)
  , total_to_pay_(0){}
struct BillingDefaultTypeInternal {
  constexpr BillingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BillingDefaultTypeInternal() {}
  union {
    Billing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BillingDefaultTypeInternal _Billing_default_instance_;
}  // namespace v1alpha1
}  // namespace billing
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_billing_2fv1alpha1_2fbilling_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_billing_2fv1alpha1_2fbilling_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_billing_2fv1alpha1_2fbilling_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_billing_2fv1alpha1_2fbilling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, organization_id_),
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, cpu_metric_),
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, cpu_bill_),
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, ram_metric_),
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, ram_bill_),
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, storage_metric_),
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, storage_bill_),
  PROTOBUF_FIELD_OFFSET(::billing::v1alpha1::Billing, total_to_pay_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::billing::v1alpha1::Billing)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::billing::v1alpha1::_Billing_default_instance_),
};

const char descriptor_table_protodef_billing_2fv1alpha1_2fbilling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036billing/v1alpha1/billing.proto\022\020billin"
  "g.v1alpha1\"\222\002\n\007Billing\022\'\n\017organization_i"
  "d\030\001 \001(\tR\016organizationId\022\035\n\ncpu_metric\030\002 "
  "\001(\001R\tcpuMetric\022\031\n\010cpu_bill\030\003 \001(\001R\007cpuBil"
  "l\022\035\n\nram_metric\030\004 \001(\001R\tramMetric\022\031\n\010ram_"
  "bill\030\005 \001(\001R\007ramBill\022%\n\016storage_metric\030\006 "
  "\001(\001R\rstorageMetric\022!\n\014storage_bill\030\007 \001(\001"
  "R\013storageBill\022 \n\014total_to_pay\030\010 \001(\001R\ntot"
  "alToPayB7Z5github.com/cuemby/ccp-billing"
  "-service/billingv1alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_billing_2fv1alpha1_2fbilling_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_billing_2fv1alpha1_2fbilling_2eproto = {
  false, false, 392, descriptor_table_protodef_billing_2fv1alpha1_2fbilling_2eproto, "billing/v1alpha1/billing.proto", 
  &descriptor_table_billing_2fv1alpha1_2fbilling_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_billing_2fv1alpha1_2fbilling_2eproto::offsets,
  file_level_metadata_billing_2fv1alpha1_2fbilling_2eproto, file_level_enum_descriptors_billing_2fv1alpha1_2fbilling_2eproto, file_level_service_descriptors_billing_2fv1alpha1_2fbilling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_billing_2fv1alpha1_2fbilling_2eproto_getter() {
  return &descriptor_table_billing_2fv1alpha1_2fbilling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_billing_2fv1alpha1_2fbilling_2eproto(&descriptor_table_billing_2fv1alpha1_2fbilling_2eproto);
namespace billing {
namespace v1alpha1 {

// ===================================================================

class Billing::_Internal {
 public:
};

Billing::Billing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:billing.v1alpha1.Billing)
}
Billing::Billing(const Billing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cpu_metric_, &from.cpu_metric_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_to_pay_) -
    reinterpret_cast<char*>(&cpu_metric_)) + sizeof(total_to_pay_));
  // @@protoc_insertion_point(copy_constructor:billing.v1alpha1.Billing)
}

inline void Billing::SharedCtor() {
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_metric_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_to_pay_) -
    reinterpret_cast<char*>(&cpu_metric_)) + sizeof(total_to_pay_));
}

Billing::~Billing() {
  // @@protoc_insertion_point(destructor:billing.v1alpha1.Billing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Billing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Billing::ArenaDtor(void* object) {
  Billing* _this = reinterpret_cast< Billing* >(object);
  (void)_this;
}
void Billing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Billing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Billing::Clear() {
// @@protoc_insertion_point(message_clear_start:billing.v1alpha1.Billing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_id_.ClearToEmpty();
  ::memset(&cpu_metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_to_pay_) -
      reinterpret_cast<char*>(&cpu_metric_)) + sizeof(total_to_pay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Billing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "billing.v1alpha1.Billing.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cpu_metric = 2 [json_name = "cpuMetric"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cpu_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cpu_bill = 3 [json_name = "cpuBill"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cpu_bill_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ram_metric = 4 [json_name = "ramMetric"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ram_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ram_bill = 5 [json_name = "ramBill"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ram_bill_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double storage_metric = 6 [json_name = "storageMetric"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          storage_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double storage_bill = 7 [json_name = "storageBill"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          storage_bill_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_to_pay = 8 [json_name = "totalToPay"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          total_to_pay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Billing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:billing.v1alpha1.Billing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "billing.v1alpha1.Billing.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  // double cpu_metric = 2 [json_name = "cpuMetric"];
  if (!(this->_internal_cpu_metric() <= 0 && this->_internal_cpu_metric() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cpu_metric(), target);
  }

  // double cpu_bill = 3 [json_name = "cpuBill"];
  if (!(this->_internal_cpu_bill() <= 0 && this->_internal_cpu_bill() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cpu_bill(), target);
  }

  // double ram_metric = 4 [json_name = "ramMetric"];
  if (!(this->_internal_ram_metric() <= 0 && this->_internal_ram_metric() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ram_metric(), target);
  }

  // double ram_bill = 5 [json_name = "ramBill"];
  if (!(this->_internal_ram_bill() <= 0 && this->_internal_ram_bill() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ram_bill(), target);
  }

  // double storage_metric = 6 [json_name = "storageMetric"];
  if (!(this->_internal_storage_metric() <= 0 && this->_internal_storage_metric() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_storage_metric(), target);
  }

  // double storage_bill = 7 [json_name = "storageBill"];
  if (!(this->_internal_storage_bill() <= 0 && this->_internal_storage_bill() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_storage_bill(), target);
  }

  // double total_to_pay = 8 [json_name = "totalToPay"];
  if (!(this->_internal_total_to_pay() <= 0 && this->_internal_total_to_pay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_total_to_pay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:billing.v1alpha1.Billing)
  return target;
}

size_t Billing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:billing.v1alpha1.Billing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // double cpu_metric = 2 [json_name = "cpuMetric"];
  if (!(this->_internal_cpu_metric() <= 0 && this->_internal_cpu_metric() >= 0)) {
    total_size += 1 + 8;
  }

  // double cpu_bill = 3 [json_name = "cpuBill"];
  if (!(this->_internal_cpu_bill() <= 0 && this->_internal_cpu_bill() >= 0)) {
    total_size += 1 + 8;
  }

  // double ram_metric = 4 [json_name = "ramMetric"];
  if (!(this->_internal_ram_metric() <= 0 && this->_internal_ram_metric() >= 0)) {
    total_size += 1 + 8;
  }

  // double ram_bill = 5 [json_name = "ramBill"];
  if (!(this->_internal_ram_bill() <= 0 && this->_internal_ram_bill() >= 0)) {
    total_size += 1 + 8;
  }

  // double storage_metric = 6 [json_name = "storageMetric"];
  if (!(this->_internal_storage_metric() <= 0 && this->_internal_storage_metric() >= 0)) {
    total_size += 1 + 8;
  }

  // double storage_bill = 7 [json_name = "storageBill"];
  if (!(this->_internal_storage_bill() <= 0 && this->_internal_storage_bill() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_to_pay = 8 [json_name = "totalToPay"];
  if (!(this->_internal_total_to_pay() <= 0 && this->_internal_total_to_pay() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Billing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Billing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Billing::GetClassData() const { return &_class_data_; }

void Billing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Billing *>(to)->MergeFrom(
      static_cast<const Billing &>(from));
}


void Billing::MergeFrom(const Billing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:billing.v1alpha1.Billing)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!(from._internal_cpu_metric() <= 0 && from._internal_cpu_metric() >= 0)) {
    _internal_set_cpu_metric(from._internal_cpu_metric());
  }
  if (!(from._internal_cpu_bill() <= 0 && from._internal_cpu_bill() >= 0)) {
    _internal_set_cpu_bill(from._internal_cpu_bill());
  }
  if (!(from._internal_ram_metric() <= 0 && from._internal_ram_metric() >= 0)) {
    _internal_set_ram_metric(from._internal_ram_metric());
  }
  if (!(from._internal_ram_bill() <= 0 && from._internal_ram_bill() >= 0)) {
    _internal_set_ram_bill(from._internal_ram_bill());
  }
  if (!(from._internal_storage_metric() <= 0 && from._internal_storage_metric() >= 0)) {
    _internal_set_storage_metric(from._internal_storage_metric());
  }
  if (!(from._internal_storage_bill() <= 0 && from._internal_storage_bill() >= 0)) {
    _internal_set_storage_bill(from._internal_storage_bill());
  }
  if (!(from._internal_total_to_pay() <= 0 && from._internal_total_to_pay() >= 0)) {
    _internal_set_total_to_pay(from._internal_total_to_pay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Billing::CopyFrom(const Billing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:billing.v1alpha1.Billing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Billing::IsInitialized() const {
  return true;
}

void Billing::InternalSwap(Billing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Billing, total_to_pay_)
      + sizeof(Billing::total_to_pay_)
      - PROTOBUF_FIELD_OFFSET(Billing, cpu_metric_)>(
          reinterpret_cast<char*>(&cpu_metric_),
          reinterpret_cast<char*>(&other->cpu_metric_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Billing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_billing_2fv1alpha1_2fbilling_2eproto_getter, &descriptor_table_billing_2fv1alpha1_2fbilling_2eproto_once,
      file_level_metadata_billing_2fv1alpha1_2fbilling_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace billing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::billing::v1alpha1::Billing* Arena::CreateMaybeMessage< ::billing::v1alpha1::Billing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::billing::v1alpha1::Billing >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
