// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: billing/v1alpha1/billing_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "billing/v1alpha1/billing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_billing_2fv1alpha1_2fbilling_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
namespace billing {
namespace v1alpha1 {
class CreateBillingRequest;
struct CreateBillingRequestDefaultTypeInternal;
extern CreateBillingRequestDefaultTypeInternal _CreateBillingRequest_default_instance_;
class CreateBillingResponse;
struct CreateBillingResponseDefaultTypeInternal;
extern CreateBillingResponseDefaultTypeInternal _CreateBillingResponse_default_instance_;
class GetBillingRequest;
struct GetBillingRequestDefaultTypeInternal;
extern GetBillingRequestDefaultTypeInternal _GetBillingRequest_default_instance_;
class GetBillingResponse;
struct GetBillingResponseDefaultTypeInternal;
extern GetBillingResponseDefaultTypeInternal _GetBillingResponse_default_instance_;
class UpdateBillingRequest;
struct UpdateBillingRequestDefaultTypeInternal;
extern UpdateBillingRequestDefaultTypeInternal _UpdateBillingRequest_default_instance_;
class UpdateBillingResponse;
struct UpdateBillingResponseDefaultTypeInternal;
extern UpdateBillingResponseDefaultTypeInternal _UpdateBillingResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace billing
PROTOBUF_NAMESPACE_OPEN
template<> ::billing::v1alpha1::CreateBillingRequest* Arena::CreateMaybeMessage<::billing::v1alpha1::CreateBillingRequest>(Arena*);
template<> ::billing::v1alpha1::CreateBillingResponse* Arena::CreateMaybeMessage<::billing::v1alpha1::CreateBillingResponse>(Arena*);
template<> ::billing::v1alpha1::GetBillingRequest* Arena::CreateMaybeMessage<::billing::v1alpha1::GetBillingRequest>(Arena*);
template<> ::billing::v1alpha1::GetBillingResponse* Arena::CreateMaybeMessage<::billing::v1alpha1::GetBillingResponse>(Arena*);
template<> ::billing::v1alpha1::UpdateBillingRequest* Arena::CreateMaybeMessage<::billing::v1alpha1::UpdateBillingRequest>(Arena*);
template<> ::billing::v1alpha1::UpdateBillingResponse* Arena::CreateMaybeMessage<::billing::v1alpha1::UpdateBillingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace billing {
namespace v1alpha1 {

// ===================================================================

class CreateBillingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.CreateBillingRequest) */ {
 public:
  inline CreateBillingRequest() : CreateBillingRequest(nullptr) {}
  ~CreateBillingRequest() override;
  explicit constexpr CreateBillingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBillingRequest(const CreateBillingRequest& from);
  CreateBillingRequest(CreateBillingRequest&& from) noexcept
    : CreateBillingRequest() {
    *this = ::std::move(from);
  }

  inline CreateBillingRequest& operator=(const CreateBillingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBillingRequest& operator=(CreateBillingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBillingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBillingRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBillingRequest*>(
               &_CreateBillingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateBillingRequest& a, CreateBillingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBillingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBillingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateBillingRequest* New() const final {
    return new CreateBillingRequest();
  }

  CreateBillingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateBillingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBillingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBillingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBillingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.CreateBillingRequest";
  }
  protected:
  explicit CreateBillingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingFieldNumber = 1,
  };
  // .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
  bool has_billing() const;
  private:
  bool _internal_has_billing() const;
  public:
  void clear_billing();
  const ::billing::v1alpha1::Billing& billing() const;
  PROTOBUF_MUST_USE_RESULT ::billing::v1alpha1::Billing* release_billing();
  ::billing::v1alpha1::Billing* mutable_billing();
  void set_allocated_billing(::billing::v1alpha1::Billing* billing);
  private:
  const ::billing::v1alpha1::Billing& _internal_billing() const;
  ::billing::v1alpha1::Billing* _internal_mutable_billing();
  public:
  void unsafe_arena_set_allocated_billing(
      ::billing::v1alpha1::Billing* billing);
  ::billing::v1alpha1::Billing* unsafe_arena_release_billing();

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.CreateBillingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::billing::v1alpha1::Billing* billing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateBillingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.CreateBillingResponse) */ {
 public:
  inline CreateBillingResponse() : CreateBillingResponse(nullptr) {}
  ~CreateBillingResponse() override;
  explicit constexpr CreateBillingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBillingResponse(const CreateBillingResponse& from);
  CreateBillingResponse(CreateBillingResponse&& from) noexcept
    : CreateBillingResponse() {
    *this = ::std::move(from);
  }

  inline CreateBillingResponse& operator=(const CreateBillingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBillingResponse& operator=(CreateBillingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBillingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBillingResponse* internal_default_instance() {
    return reinterpret_cast<const CreateBillingResponse*>(
               &_CreateBillingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateBillingResponse& a, CreateBillingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBillingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBillingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateBillingResponse* New() const final {
    return new CreateBillingResponse();
  }

  CreateBillingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateBillingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBillingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBillingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBillingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.CreateBillingResponse";
  }
  protected:
  explicit CreateBillingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string billing_id = 1 [json_name = "billingId"];
  void clear_billing_id();
  const std::string& billing_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_billing_id();
  void set_allocated_billing_id(std::string* billing_id);
  private:
  const std::string& _internal_billing_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_id(const std::string& value);
  std::string* _internal_mutable_billing_id();
  public:

  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.CreateBillingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBillingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.GetBillingRequest) */ {
 public:
  inline GetBillingRequest() : GetBillingRequest(nullptr) {}
  ~GetBillingRequest() override;
  explicit constexpr GetBillingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBillingRequest(const GetBillingRequest& from);
  GetBillingRequest(GetBillingRequest&& from) noexcept
    : GetBillingRequest() {
    *this = ::std::move(from);
  }

  inline GetBillingRequest& operator=(const GetBillingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBillingRequest& operator=(GetBillingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBillingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBillingRequest* internal_default_instance() {
    return reinterpret_cast<const GetBillingRequest*>(
               &_GetBillingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetBillingRequest& a, GetBillingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBillingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBillingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBillingRequest* New() const final {
    return new GetBillingRequest();
  }

  GetBillingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBillingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBillingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBillingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBillingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.GetBillingRequest";
  }
  protected:
  explicit GetBillingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingIdFieldNumber = 1,
  };
  // string billing_id = 1 [json_name = "billingId"];
  void clear_billing_id();
  const std::string& billing_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_billing_id();
  void set_allocated_billing_id(std::string* billing_id);
  private:
  const std::string& _internal_billing_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_id(const std::string& value);
  std::string* _internal_mutable_billing_id();
  public:

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.GetBillingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBillingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.GetBillingResponse) */ {
 public:
  inline GetBillingResponse() : GetBillingResponse(nullptr) {}
  ~GetBillingResponse() override;
  explicit constexpr GetBillingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBillingResponse(const GetBillingResponse& from);
  GetBillingResponse(GetBillingResponse&& from) noexcept
    : GetBillingResponse() {
    *this = ::std::move(from);
  }

  inline GetBillingResponse& operator=(const GetBillingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBillingResponse& operator=(GetBillingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBillingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBillingResponse* internal_default_instance() {
    return reinterpret_cast<const GetBillingResponse*>(
               &_GetBillingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBillingResponse& a, GetBillingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBillingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBillingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBillingResponse* New() const final {
    return new GetBillingResponse();
  }

  GetBillingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBillingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBillingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBillingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBillingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.GetBillingResponse";
  }
  protected:
  explicit GetBillingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingFieldNumber = 1,
  };
  // .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
  bool has_billing() const;
  private:
  bool _internal_has_billing() const;
  public:
  void clear_billing();
  const ::billing::v1alpha1::Billing& billing() const;
  PROTOBUF_MUST_USE_RESULT ::billing::v1alpha1::Billing* release_billing();
  ::billing::v1alpha1::Billing* mutable_billing();
  void set_allocated_billing(::billing::v1alpha1::Billing* billing);
  private:
  const ::billing::v1alpha1::Billing& _internal_billing() const;
  ::billing::v1alpha1::Billing* _internal_mutable_billing();
  public:
  void unsafe_arena_set_allocated_billing(
      ::billing::v1alpha1::Billing* billing);
  ::billing::v1alpha1::Billing* unsafe_arena_release_billing();

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.GetBillingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::billing::v1alpha1::Billing* billing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateBillingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.UpdateBillingRequest) */ {
 public:
  inline UpdateBillingRequest() : UpdateBillingRequest(nullptr) {}
  ~UpdateBillingRequest() override;
  explicit constexpr UpdateBillingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBillingRequest(const UpdateBillingRequest& from);
  UpdateBillingRequest(UpdateBillingRequest&& from) noexcept
    : UpdateBillingRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBillingRequest& operator=(const UpdateBillingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBillingRequest& operator=(UpdateBillingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBillingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBillingRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBillingRequest*>(
               &_UpdateBillingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateBillingRequest& a, UpdateBillingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBillingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBillingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBillingRequest* New() const final {
    return new UpdateBillingRequest();
  }

  UpdateBillingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBillingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBillingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBillingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBillingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.UpdateBillingRequest";
  }
  protected:
  explicit UpdateBillingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingIdFieldNumber = 1,
  };
  // string billing_id = 1 [json_name = "billingId"];
  void clear_billing_id();
  const std::string& billing_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_billing_id();
  void set_allocated_billing_id(std::string* billing_id);
  private:
  const std::string& _internal_billing_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_id(const std::string& value);
  std::string* _internal_mutable_billing_id();
  public:

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.UpdateBillingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateBillingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.UpdateBillingResponse) */ {
 public:
  inline UpdateBillingResponse() : UpdateBillingResponse(nullptr) {}
  ~UpdateBillingResponse() override;
  explicit constexpr UpdateBillingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBillingResponse(const UpdateBillingResponse& from);
  UpdateBillingResponse(UpdateBillingResponse&& from) noexcept
    : UpdateBillingResponse() {
    *this = ::std::move(from);
  }

  inline UpdateBillingResponse& operator=(const UpdateBillingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBillingResponse& operator=(UpdateBillingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBillingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBillingResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateBillingResponse*>(
               &_UpdateBillingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateBillingResponse& a, UpdateBillingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBillingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBillingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBillingResponse* New() const final {
    return new UpdateBillingResponse();
  }

  UpdateBillingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBillingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBillingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBillingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBillingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.UpdateBillingResponse";
  }
  protected:
  explicit UpdateBillingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string billing_id = 1 [json_name = "billingId"];
  void clear_billing_id();
  const std::string& billing_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_billing_id();
  void set_allocated_billing_id(std::string* billing_id);
  private:
  const std::string& _internal_billing_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_id(const std::string& value);
  std::string* _internal_mutable_billing_id();
  public:

  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.UpdateBillingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateBillingRequest

// .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
inline bool CreateBillingRequest::_internal_has_billing() const {
  return this != internal_default_instance() && billing_ != nullptr;
}
inline bool CreateBillingRequest::has_billing() const {
  return _internal_has_billing();
}
inline const ::billing::v1alpha1::Billing& CreateBillingRequest::_internal_billing() const {
  const ::billing::v1alpha1::Billing* p = billing_;
  return p != nullptr ? *p : reinterpret_cast<const ::billing::v1alpha1::Billing&>(
      ::billing::v1alpha1::_Billing_default_instance_);
}
inline const ::billing::v1alpha1::Billing& CreateBillingRequest::billing() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.CreateBillingRequest.billing)
  return _internal_billing();
}
inline void CreateBillingRequest::unsafe_arena_set_allocated_billing(
    ::billing::v1alpha1::Billing* billing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  billing_ = billing;
  if (billing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:billing.v1alpha1.CreateBillingRequest.billing)
}
inline ::billing::v1alpha1::Billing* CreateBillingRequest::release_billing() {
  
  ::billing::v1alpha1::Billing* temp = billing_;
  billing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::billing::v1alpha1::Billing* CreateBillingRequest::unsafe_arena_release_billing() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.CreateBillingRequest.billing)
  
  ::billing::v1alpha1::Billing* temp = billing_;
  billing_ = nullptr;
  return temp;
}
inline ::billing::v1alpha1::Billing* CreateBillingRequest::_internal_mutable_billing() {
  
  if (billing_ == nullptr) {
    auto* p = CreateMaybeMessage<::billing::v1alpha1::Billing>(GetArenaForAllocation());
    billing_ = p;
  }
  return billing_;
}
inline ::billing::v1alpha1::Billing* CreateBillingRequest::mutable_billing() {
  ::billing::v1alpha1::Billing* _msg = _internal_mutable_billing();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.CreateBillingRequest.billing)
  return _msg;
}
inline void CreateBillingRequest::set_allocated_billing(::billing::v1alpha1::Billing* billing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  if (billing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing));
    if (message_arena != submessage_arena) {
      billing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billing, submessage_arena);
    }
    
  } else {
    
  }
  billing_ = billing;
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.CreateBillingRequest.billing)
}

// -------------------------------------------------------------------

// CreateBillingResponse

// string billing_id = 1 [json_name = "billingId"];
inline void CreateBillingResponse::clear_billing_id() {
  billing_id_.ClearToEmpty();
}
inline const std::string& CreateBillingResponse::billing_id() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.CreateBillingResponse.billing_id)
  return _internal_billing_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBillingResponse::set_billing_id(ArgT0&& arg0, ArgT... args) {
 
 billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.CreateBillingResponse.billing_id)
}
inline std::string* CreateBillingResponse::mutable_billing_id() {
  std::string* _s = _internal_mutable_billing_id();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.CreateBillingResponse.billing_id)
  return _s;
}
inline const std::string& CreateBillingResponse::_internal_billing_id() const {
  return billing_id_.Get();
}
inline void CreateBillingResponse::_internal_set_billing_id(const std::string& value) {
  
  billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBillingResponse::_internal_mutable_billing_id() {
  
  return billing_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBillingResponse::release_billing_id() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.CreateBillingResponse.billing_id)
  return billing_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBillingResponse::set_allocated_billing_id(std::string* billing_id) {
  if (billing_id != nullptr) {
    
  } else {
    
  }
  billing_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), billing_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.CreateBillingResponse.billing_id)
}

// string status = 2 [json_name = "status"];
inline void CreateBillingResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateBillingResponse::status() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.CreateBillingResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBillingResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.CreateBillingResponse.status)
}
inline std::string* CreateBillingResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.CreateBillingResponse.status)
  return _s;
}
inline const std::string& CreateBillingResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateBillingResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBillingResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBillingResponse::release_status() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.CreateBillingResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBillingResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.CreateBillingResponse.status)
}

// -------------------------------------------------------------------

// GetBillingRequest

// string billing_id = 1 [json_name = "billingId"];
inline void GetBillingRequest::clear_billing_id() {
  billing_id_.ClearToEmpty();
}
inline const std::string& GetBillingRequest::billing_id() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.GetBillingRequest.billing_id)
  return _internal_billing_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBillingRequest::set_billing_id(ArgT0&& arg0, ArgT... args) {
 
 billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.GetBillingRequest.billing_id)
}
inline std::string* GetBillingRequest::mutable_billing_id() {
  std::string* _s = _internal_mutable_billing_id();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.GetBillingRequest.billing_id)
  return _s;
}
inline const std::string& GetBillingRequest::_internal_billing_id() const {
  return billing_id_.Get();
}
inline void GetBillingRequest::_internal_set_billing_id(const std::string& value) {
  
  billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBillingRequest::_internal_mutable_billing_id() {
  
  return billing_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBillingRequest::release_billing_id() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.GetBillingRequest.billing_id)
  return billing_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBillingRequest::set_allocated_billing_id(std::string* billing_id) {
  if (billing_id != nullptr) {
    
  } else {
    
  }
  billing_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), billing_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.GetBillingRequest.billing_id)
}

// -------------------------------------------------------------------

// GetBillingResponse

// .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
inline bool GetBillingResponse::_internal_has_billing() const {
  return this != internal_default_instance() && billing_ != nullptr;
}
inline bool GetBillingResponse::has_billing() const {
  return _internal_has_billing();
}
inline const ::billing::v1alpha1::Billing& GetBillingResponse::_internal_billing() const {
  const ::billing::v1alpha1::Billing* p = billing_;
  return p != nullptr ? *p : reinterpret_cast<const ::billing::v1alpha1::Billing&>(
      ::billing::v1alpha1::_Billing_default_instance_);
}
inline const ::billing::v1alpha1::Billing& GetBillingResponse::billing() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.GetBillingResponse.billing)
  return _internal_billing();
}
inline void GetBillingResponse::unsafe_arena_set_allocated_billing(
    ::billing::v1alpha1::Billing* billing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  billing_ = billing;
  if (billing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:billing.v1alpha1.GetBillingResponse.billing)
}
inline ::billing::v1alpha1::Billing* GetBillingResponse::release_billing() {
  
  ::billing::v1alpha1::Billing* temp = billing_;
  billing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::billing::v1alpha1::Billing* GetBillingResponse::unsafe_arena_release_billing() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.GetBillingResponse.billing)
  
  ::billing::v1alpha1::Billing* temp = billing_;
  billing_ = nullptr;
  return temp;
}
inline ::billing::v1alpha1::Billing* GetBillingResponse::_internal_mutable_billing() {
  
  if (billing_ == nullptr) {
    auto* p = CreateMaybeMessage<::billing::v1alpha1::Billing>(GetArenaForAllocation());
    billing_ = p;
  }
  return billing_;
}
inline ::billing::v1alpha1::Billing* GetBillingResponse::mutable_billing() {
  ::billing::v1alpha1::Billing* _msg = _internal_mutable_billing();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.GetBillingResponse.billing)
  return _msg;
}
inline void GetBillingResponse::set_allocated_billing(::billing::v1alpha1::Billing* billing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  if (billing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing));
    if (message_arena != submessage_arena) {
      billing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billing, submessage_arena);
    }
    
  } else {
    
  }
  billing_ = billing;
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.GetBillingResponse.billing)
}

// -------------------------------------------------------------------

// UpdateBillingRequest

// string billing_id = 1 [json_name = "billingId"];
inline void UpdateBillingRequest::clear_billing_id() {
  billing_id_.ClearToEmpty();
}
inline const std::string& UpdateBillingRequest::billing_id() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.UpdateBillingRequest.billing_id)
  return _internal_billing_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateBillingRequest::set_billing_id(ArgT0&& arg0, ArgT... args) {
 
 billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.UpdateBillingRequest.billing_id)
}
inline std::string* UpdateBillingRequest::mutable_billing_id() {
  std::string* _s = _internal_mutable_billing_id();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.UpdateBillingRequest.billing_id)
  return _s;
}
inline const std::string& UpdateBillingRequest::_internal_billing_id() const {
  return billing_id_.Get();
}
inline void UpdateBillingRequest::_internal_set_billing_id(const std::string& value) {
  
  billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateBillingRequest::_internal_mutable_billing_id() {
  
  return billing_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateBillingRequest::release_billing_id() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.UpdateBillingRequest.billing_id)
  return billing_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateBillingRequest::set_allocated_billing_id(std::string* billing_id) {
  if (billing_id != nullptr) {
    
  } else {
    
  }
  billing_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), billing_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.UpdateBillingRequest.billing_id)
}

// -------------------------------------------------------------------

// UpdateBillingResponse

// string billing_id = 1 [json_name = "billingId"];
inline void UpdateBillingResponse::clear_billing_id() {
  billing_id_.ClearToEmpty();
}
inline const std::string& UpdateBillingResponse::billing_id() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.UpdateBillingResponse.billing_id)
  return _internal_billing_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateBillingResponse::set_billing_id(ArgT0&& arg0, ArgT... args) {
 
 billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.UpdateBillingResponse.billing_id)
}
inline std::string* UpdateBillingResponse::mutable_billing_id() {
  std::string* _s = _internal_mutable_billing_id();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.UpdateBillingResponse.billing_id)
  return _s;
}
inline const std::string& UpdateBillingResponse::_internal_billing_id() const {
  return billing_id_.Get();
}
inline void UpdateBillingResponse::_internal_set_billing_id(const std::string& value) {
  
  billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateBillingResponse::_internal_mutable_billing_id() {
  
  return billing_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateBillingResponse::release_billing_id() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.UpdateBillingResponse.billing_id)
  return billing_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateBillingResponse::set_allocated_billing_id(std::string* billing_id) {
  if (billing_id != nullptr) {
    
  } else {
    
  }
  billing_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), billing_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.UpdateBillingResponse.billing_id)
}

// string status = 2 [json_name = "status"];
inline void UpdateBillingResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateBillingResponse::status() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.UpdateBillingResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateBillingResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.UpdateBillingResponse.status)
}
inline std::string* UpdateBillingResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.UpdateBillingResponse.status)
  return _s;
}
inline const std::string& UpdateBillingResponse::_internal_status() const {
  return status_.Get();
}
inline void UpdateBillingResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateBillingResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateBillingResponse::release_status() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.UpdateBillingResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateBillingResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.UpdateBillingResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace billing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_5fapi_2eproto
