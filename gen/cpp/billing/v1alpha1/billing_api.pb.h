// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: billing/v1alpha1/billing_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "billing/v1alpha1/billing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_billing_2fv1alpha1_2fbilling_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
namespace billing {
namespace v1alpha1 {
class ReadBillingRequest;
struct ReadBillingRequestDefaultTypeInternal;
extern ReadBillingRequestDefaultTypeInternal _ReadBillingRequest_default_instance_;
class ReadBillingResponse;
struct ReadBillingResponseDefaultTypeInternal;
extern ReadBillingResponseDefaultTypeInternal _ReadBillingResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace billing
PROTOBUF_NAMESPACE_OPEN
template<> ::billing::v1alpha1::ReadBillingRequest* Arena::CreateMaybeMessage<::billing::v1alpha1::ReadBillingRequest>(Arena*);
template<> ::billing::v1alpha1::ReadBillingResponse* Arena::CreateMaybeMessage<::billing::v1alpha1::ReadBillingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace billing {
namespace v1alpha1 {

// ===================================================================

class ReadBillingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.ReadBillingRequest) */ {
 public:
  inline ReadBillingRequest() : ReadBillingRequest(nullptr) {}
  ~ReadBillingRequest() override;
  explicit constexpr ReadBillingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadBillingRequest(const ReadBillingRequest& from);
  ReadBillingRequest(ReadBillingRequest&& from) noexcept
    : ReadBillingRequest() {
    *this = ::std::move(from);
  }

  inline ReadBillingRequest& operator=(const ReadBillingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadBillingRequest& operator=(ReadBillingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadBillingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadBillingRequest* internal_default_instance() {
    return reinterpret_cast<const ReadBillingRequest*>(
               &_ReadBillingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadBillingRequest& a, ReadBillingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadBillingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadBillingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadBillingRequest* New() const final {
    return new ReadBillingRequest();
  }

  ReadBillingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadBillingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadBillingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadBillingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadBillingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.ReadBillingRequest";
  }
  protected:
  explicit ReadBillingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
  };
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.ReadBillingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ReadBillingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.ReadBillingResponse) */ {
 public:
  inline ReadBillingResponse() : ReadBillingResponse(nullptr) {}
  ~ReadBillingResponse() override;
  explicit constexpr ReadBillingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadBillingResponse(const ReadBillingResponse& from);
  ReadBillingResponse(ReadBillingResponse&& from) noexcept
    : ReadBillingResponse() {
    *this = ::std::move(from);
  }

  inline ReadBillingResponse& operator=(const ReadBillingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadBillingResponse& operator=(ReadBillingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadBillingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadBillingResponse* internal_default_instance() {
    return reinterpret_cast<const ReadBillingResponse*>(
               &_ReadBillingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadBillingResponse& a, ReadBillingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadBillingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadBillingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadBillingResponse* New() const final {
    return new ReadBillingResponse();
  }

  ReadBillingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadBillingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadBillingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadBillingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadBillingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.ReadBillingResponse";
  }
  protected:
  explicit ReadBillingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingFieldNumber = 1,
  };
  // .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
  bool has_billing() const;
  private:
  bool _internal_has_billing() const;
  public:
  void clear_billing();
  const ::billing::v1alpha1::Billing& billing() const;
  PROTOBUF_MUST_USE_RESULT ::billing::v1alpha1::Billing* release_billing();
  ::billing::v1alpha1::Billing* mutable_billing();
  void set_allocated_billing(::billing::v1alpha1::Billing* billing);
  private:
  const ::billing::v1alpha1::Billing& _internal_billing() const;
  ::billing::v1alpha1::Billing* _internal_mutable_billing();
  public:
  void unsafe_arena_set_allocated_billing(
      ::billing::v1alpha1::Billing* billing);
  ::billing::v1alpha1::Billing* unsafe_arena_release_billing();

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.ReadBillingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::billing::v1alpha1::Billing* billing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadBillingRequest

// string organization_id = 1 [json_name = "organizationId"];
inline void ReadBillingRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& ReadBillingRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.ReadBillingRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadBillingRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.ReadBillingRequest.organization_id)
}
inline std::string* ReadBillingRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.ReadBillingRequest.organization_id)
  return _s;
}
inline const std::string& ReadBillingRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void ReadBillingRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadBillingRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadBillingRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.ReadBillingRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadBillingRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.ReadBillingRequest.organization_id)
}

// -------------------------------------------------------------------

// ReadBillingResponse

// .billing.v1alpha1.Billing billing = 1 [json_name = "billing"];
inline bool ReadBillingResponse::_internal_has_billing() const {
  return this != internal_default_instance() && billing_ != nullptr;
}
inline bool ReadBillingResponse::has_billing() const {
  return _internal_has_billing();
}
inline const ::billing::v1alpha1::Billing& ReadBillingResponse::_internal_billing() const {
  const ::billing::v1alpha1::Billing* p = billing_;
  return p != nullptr ? *p : reinterpret_cast<const ::billing::v1alpha1::Billing&>(
      ::billing::v1alpha1::_Billing_default_instance_);
}
inline const ::billing::v1alpha1::Billing& ReadBillingResponse::billing() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.ReadBillingResponse.billing)
  return _internal_billing();
}
inline void ReadBillingResponse::unsafe_arena_set_allocated_billing(
    ::billing::v1alpha1::Billing* billing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  billing_ = billing;
  if (billing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:billing.v1alpha1.ReadBillingResponse.billing)
}
inline ::billing::v1alpha1::Billing* ReadBillingResponse::release_billing() {
  
  ::billing::v1alpha1::Billing* temp = billing_;
  billing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::billing::v1alpha1::Billing* ReadBillingResponse::unsafe_arena_release_billing() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.ReadBillingResponse.billing)
  
  ::billing::v1alpha1::Billing* temp = billing_;
  billing_ = nullptr;
  return temp;
}
inline ::billing::v1alpha1::Billing* ReadBillingResponse::_internal_mutable_billing() {
  
  if (billing_ == nullptr) {
    auto* p = CreateMaybeMessage<::billing::v1alpha1::Billing>(GetArenaForAllocation());
    billing_ = p;
  }
  return billing_;
}
inline ::billing::v1alpha1::Billing* ReadBillingResponse::mutable_billing() {
  ::billing::v1alpha1::Billing* _msg = _internal_mutable_billing();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.ReadBillingResponse.billing)
  return _msg;
}
inline void ReadBillingResponse::set_allocated_billing(::billing::v1alpha1::Billing* billing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  if (billing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing));
    if (message_arena != submessage_arena) {
      billing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billing, submessage_arena);
    }
    
  } else {
    
  }
  billing_ = billing;
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.ReadBillingResponse.billing)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace billing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_5fapi_2eproto
