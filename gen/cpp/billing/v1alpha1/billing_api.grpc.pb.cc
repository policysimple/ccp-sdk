// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: billing/v1alpha1/billing_api.proto

#include "billing/v1alpha1/billing_api.pb.h"
#include "billing/v1alpha1/billing_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace billing {
namespace v1alpha1 {

static const char* BillingService_method_names[] = {
  "/billing.v1alpha1.BillingService/CreateBilling",
  "/billing.v1alpha1.BillingService/GetBilling",
  "/billing.v1alpha1.BillingService/UpdateBilling",
};

std::unique_ptr< BillingService::Stub> BillingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BillingService::Stub> stub(new BillingService::Stub(channel));
  return stub;
}

BillingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateBilling_(BillingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBilling_(BillingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBilling_(BillingService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BillingService::Stub::CreateBilling(::grpc::ClientContext* context, const ::billing::v1alpha1::CreateBillingRequest& request, ::billing::v1alpha1::CreateBillingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateBilling_, context, request, response);
}

void BillingService::Stub::experimental_async::CreateBilling(::grpc::ClientContext* context, const ::billing::v1alpha1::CreateBillingRequest* request, ::billing::v1alpha1::CreateBillingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateBilling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::billing::v1alpha1::CreateBillingResponse>* BillingService::Stub::AsyncCreateBillingRaw(::grpc::ClientContext* context, const ::billing::v1alpha1::CreateBillingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::billing::v1alpha1::CreateBillingResponse>::Create(channel_.get(), cq, rpcmethod_CreateBilling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::billing::v1alpha1::CreateBillingResponse>* BillingService::Stub::PrepareAsyncCreateBillingRaw(::grpc::ClientContext* context, const ::billing::v1alpha1::CreateBillingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::billing::v1alpha1::CreateBillingResponse>::Create(channel_.get(), cq, rpcmethod_CreateBilling_, context, request, false);
}

::grpc::Status BillingService::Stub::GetBilling(::grpc::ClientContext* context, const ::billing::v1alpha1::GetBillingRequest& request, ::billing::v1alpha1::GetBillingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBilling_, context, request, response);
}

void BillingService::Stub::experimental_async::GetBilling(::grpc::ClientContext* context, const ::billing::v1alpha1::GetBillingRequest* request, ::billing::v1alpha1::GetBillingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBilling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::billing::v1alpha1::GetBillingResponse>* BillingService::Stub::AsyncGetBillingRaw(::grpc::ClientContext* context, const ::billing::v1alpha1::GetBillingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::billing::v1alpha1::GetBillingResponse>::Create(channel_.get(), cq, rpcmethod_GetBilling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::billing::v1alpha1::GetBillingResponse>* BillingService::Stub::PrepareAsyncGetBillingRaw(::grpc::ClientContext* context, const ::billing::v1alpha1::GetBillingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::billing::v1alpha1::GetBillingResponse>::Create(channel_.get(), cq, rpcmethod_GetBilling_, context, request, false);
}

::grpc::Status BillingService::Stub::UpdateBilling(::grpc::ClientContext* context, const ::billing::v1alpha1::UpdateBillingRequest& request, ::billing::v1alpha1::UpdateBillingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateBilling_, context, request, response);
}

void BillingService::Stub::experimental_async::UpdateBilling(::grpc::ClientContext* context, const ::billing::v1alpha1::UpdateBillingRequest* request, ::billing::v1alpha1::UpdateBillingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateBilling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::billing::v1alpha1::UpdateBillingResponse>* BillingService::Stub::AsyncUpdateBillingRaw(::grpc::ClientContext* context, const ::billing::v1alpha1::UpdateBillingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::billing::v1alpha1::UpdateBillingResponse>::Create(channel_.get(), cq, rpcmethod_UpdateBilling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::billing::v1alpha1::UpdateBillingResponse>* BillingService::Stub::PrepareAsyncUpdateBillingRaw(::grpc::ClientContext* context, const ::billing::v1alpha1::UpdateBillingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::billing::v1alpha1::UpdateBillingResponse>::Create(channel_.get(), cq, rpcmethod_UpdateBilling_, context, request, false);
}

BillingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BillingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BillingService::Service, ::billing::v1alpha1::CreateBillingRequest, ::billing::v1alpha1::CreateBillingResponse>(
          std::mem_fn(&BillingService::Service::CreateBilling), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BillingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BillingService::Service, ::billing::v1alpha1::GetBillingRequest, ::billing::v1alpha1::GetBillingResponse>(
          std::mem_fn(&BillingService::Service::GetBilling), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BillingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BillingService::Service, ::billing::v1alpha1::UpdateBillingRequest, ::billing::v1alpha1::UpdateBillingResponse>(
          std::mem_fn(&BillingService::Service::UpdateBilling), this)));
}

BillingService::Service::~Service() {
}

::grpc::Status BillingService::Service::CreateBilling(::grpc::ServerContext* context, const ::billing::v1alpha1::CreateBillingRequest* request, ::billing::v1alpha1::CreateBillingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BillingService::Service::GetBilling(::grpc::ServerContext* context, const ::billing::v1alpha1::GetBillingRequest* request, ::billing::v1alpha1::GetBillingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BillingService::Service::UpdateBilling(::grpc::ServerContext* context, const ::billing::v1alpha1::UpdateBillingRequest* request, ::billing::v1alpha1::UpdateBillingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace billing
}  // namespace v1alpha1

