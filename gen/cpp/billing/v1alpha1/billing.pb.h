// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: billing/v1alpha1/billing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_billing_2fv1alpha1_2fbilling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_billing_2fv1alpha1_2fbilling_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_billing_2fv1alpha1_2fbilling_2eproto;
namespace billing {
namespace v1alpha1 {
class Billing;
struct BillingDefaultTypeInternal;
extern BillingDefaultTypeInternal _Billing_default_instance_;
}  // namespace v1alpha1
}  // namespace billing
PROTOBUF_NAMESPACE_OPEN
template<> ::billing::v1alpha1::Billing* Arena::CreateMaybeMessage<::billing::v1alpha1::Billing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace billing {
namespace v1alpha1 {

// ===================================================================

class Billing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.Billing) */ {
 public:
  inline Billing() : Billing(nullptr) {}
  ~Billing() override;
  explicit constexpr Billing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Billing(const Billing& from);
  Billing(Billing&& from) noexcept
    : Billing() {
    *this = ::std::move(from);
  }

  inline Billing& operator=(const Billing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Billing& operator=(Billing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Billing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Billing* internal_default_instance() {
    return reinterpret_cast<const Billing*>(
               &_Billing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Billing& a, Billing& b) {
    a.Swap(&b);
  }
  inline void Swap(Billing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Billing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Billing* New() const final {
    return new Billing();
  }

  Billing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Billing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Billing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Billing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Billing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.Billing";
  }
  protected:
  explicit Billing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingIdFieldNumber = 1,
    kAppNameFieldNumber = 2,
    kCountryFieldNumber = 3,
    kOrganizationFieldNumber = 4,
    kAboutFieldNumber = 5,
  };
  // string billing_id = 1 [json_name = "billingId"];
  void clear_billing_id();
  const std::string& billing_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_billing_id();
  void set_allocated_billing_id(std::string* billing_id);
  private:
  const std::string& _internal_billing_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_id(const std::string& value);
  std::string* _internal_mutable_billing_id();
  public:

  // string app_name = 2 [json_name = "appName"];
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // string country = 3 [json_name = "country"];
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_MUST_USE_RESULT std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string organization = 4 [json_name = "organization"];
  void clear_organization();
  const std::string& organization() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization();
  void set_allocated_organization(std::string* organization);
  private:
  const std::string& _internal_organization() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization(const std::string& value);
  std::string* _internal_mutable_organization();
  public:

  // string about = 5 [json_name = "about"];
  void clear_about();
  const std::string& about() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_about(ArgT0&& arg0, ArgT... args);
  std::string* mutable_about();
  PROTOBUF_MUST_USE_RESULT std::string* release_about();
  void set_allocated_about(std::string* about);
  private:
  const std::string& _internal_about() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_about(const std::string& value);
  std::string* _internal_mutable_about();
  public:

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.Billing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr about_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Billing

// string billing_id = 1 [json_name = "billingId"];
inline void Billing::clear_billing_id() {
  billing_id_.ClearToEmpty();
}
inline const std::string& Billing::billing_id() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.billing_id)
  return _internal_billing_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Billing::set_billing_id(ArgT0&& arg0, ArgT... args) {
 
 billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.billing_id)
}
inline std::string* Billing::mutable_billing_id() {
  std::string* _s = _internal_mutable_billing_id();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.Billing.billing_id)
  return _s;
}
inline const std::string& Billing::_internal_billing_id() const {
  return billing_id_.Get();
}
inline void Billing::_internal_set_billing_id(const std::string& value) {
  
  billing_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Billing::_internal_mutable_billing_id() {
  
  return billing_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Billing::release_billing_id() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.Billing.billing_id)
  return billing_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Billing::set_allocated_billing_id(std::string* billing_id) {
  if (billing_id != nullptr) {
    
  } else {
    
  }
  billing_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), billing_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.Billing.billing_id)
}

// string app_name = 2 [json_name = "appName"];
inline void Billing::clear_app_name() {
  app_name_.ClearToEmpty();
}
inline const std::string& Billing::app_name() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Billing::set_app_name(ArgT0&& arg0, ArgT... args) {
 
 app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.app_name)
}
inline std::string* Billing::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.Billing.app_name)
  return _s;
}
inline const std::string& Billing::_internal_app_name() const {
  return app_name_.Get();
}
inline void Billing::_internal_set_app_name(const std::string& value) {
  
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Billing::_internal_mutable_app_name() {
  
  return app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Billing::release_app_name() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.Billing.app_name)
  return app_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Billing::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    
  } else {
    
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.Billing.app_name)
}

// string country = 3 [json_name = "country"];
inline void Billing::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& Billing::country() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Billing::set_country(ArgT0&& arg0, ArgT... args) {
 
 country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.country)
}
inline std::string* Billing::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.Billing.country)
  return _s;
}
inline const std::string& Billing::_internal_country() const {
  return country_.Get();
}
inline void Billing::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Billing::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Billing::release_country() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.Billing.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Billing::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.Billing.country)
}

// string organization = 4 [json_name = "organization"];
inline void Billing::clear_organization() {
  organization_.ClearToEmpty();
}
inline const std::string& Billing::organization() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.organization)
  return _internal_organization();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Billing::set_organization(ArgT0&& arg0, ArgT... args) {
 
 organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.organization)
}
inline std::string* Billing::mutable_organization() {
  std::string* _s = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.Billing.organization)
  return _s;
}
inline const std::string& Billing::_internal_organization() const {
  return organization_.Get();
}
inline void Billing::_internal_set_organization(const std::string& value) {
  
  organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Billing::_internal_mutable_organization() {
  
  return organization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Billing::release_organization() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.Billing.organization)
  return organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Billing::set_allocated_organization(std::string* organization) {
  if (organization != nullptr) {
    
  } else {
    
  }
  organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.Billing.organization)
}

// string about = 5 [json_name = "about"];
inline void Billing::clear_about() {
  about_.ClearToEmpty();
}
inline const std::string& Billing::about() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.about)
  return _internal_about();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Billing::set_about(ArgT0&& arg0, ArgT... args) {
 
 about_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.about)
}
inline std::string* Billing::mutable_about() {
  std::string* _s = _internal_mutable_about();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.Billing.about)
  return _s;
}
inline const std::string& Billing::_internal_about() const {
  return about_.Get();
}
inline void Billing::_internal_set_about(const std::string& value) {
  
  about_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Billing::_internal_mutable_about() {
  
  return about_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Billing::release_about() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.Billing.about)
  return about_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Billing::set_allocated_about(std::string* about) {
  if (about != nullptr) {
    
  } else {
    
  }
  about_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), about,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.Billing.about)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace billing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_2eproto
