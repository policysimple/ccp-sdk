// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: billing/v1alpha1/billing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_billing_2fv1alpha1_2fbilling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_billing_2fv1alpha1_2fbilling_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_billing_2fv1alpha1_2fbilling_2eproto;
namespace billing {
namespace v1alpha1 {
class Billing;
struct BillingDefaultTypeInternal;
extern BillingDefaultTypeInternal _Billing_default_instance_;
}  // namespace v1alpha1
}  // namespace billing
PROTOBUF_NAMESPACE_OPEN
template<> ::billing::v1alpha1::Billing* Arena::CreateMaybeMessage<::billing::v1alpha1::Billing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace billing {
namespace v1alpha1 {

// ===================================================================

class Billing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:billing.v1alpha1.Billing) */ {
 public:
  inline Billing() : Billing(nullptr) {}
  ~Billing() override;
  explicit constexpr Billing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Billing(const Billing& from);
  Billing(Billing&& from) noexcept
    : Billing() {
    *this = ::std::move(from);
  }

  inline Billing& operator=(const Billing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Billing& operator=(Billing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Billing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Billing* internal_default_instance() {
    return reinterpret_cast<const Billing*>(
               &_Billing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Billing& a, Billing& b) {
    a.Swap(&b);
  }
  inline void Swap(Billing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Billing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Billing* New() const final {
    return new Billing();
  }

  Billing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Billing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Billing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Billing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Billing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "billing.v1alpha1.Billing";
  }
  protected:
  explicit Billing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kCpuMetricFieldNumber = 2,
    kCpuBillFieldNumber = 3,
    kRamMetricFieldNumber = 4,
    kRamBillFieldNumber = 5,
    kStorageMetricFieldNumber = 6,
    kStorageBillFieldNumber = 7,
    kTotalToPayFieldNumber = 8,
  };
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // double cpu_metric = 2 [json_name = "cpuMetric"];
  void clear_cpu_metric();
  double cpu_metric() const;
  void set_cpu_metric(double value);
  private:
  double _internal_cpu_metric() const;
  void _internal_set_cpu_metric(double value);
  public:

  // double cpu_bill = 3 [json_name = "cpuBill"];
  void clear_cpu_bill();
  double cpu_bill() const;
  void set_cpu_bill(double value);
  private:
  double _internal_cpu_bill() const;
  void _internal_set_cpu_bill(double value);
  public:

  // double ram_metric = 4 [json_name = "ramMetric"];
  void clear_ram_metric();
  double ram_metric() const;
  void set_ram_metric(double value);
  private:
  double _internal_ram_metric() const;
  void _internal_set_ram_metric(double value);
  public:

  // double ram_bill = 5 [json_name = "ramBill"];
  void clear_ram_bill();
  double ram_bill() const;
  void set_ram_bill(double value);
  private:
  double _internal_ram_bill() const;
  void _internal_set_ram_bill(double value);
  public:

  // double storage_metric = 6 [json_name = "storageMetric"];
  void clear_storage_metric();
  double storage_metric() const;
  void set_storage_metric(double value);
  private:
  double _internal_storage_metric() const;
  void _internal_set_storage_metric(double value);
  public:

  // double storage_bill = 7 [json_name = "storageBill"];
  void clear_storage_bill();
  double storage_bill() const;
  void set_storage_bill(double value);
  private:
  double _internal_storage_bill() const;
  void _internal_set_storage_bill(double value);
  public:

  // double total_to_pay = 8 [json_name = "totalToPay"];
  void clear_total_to_pay();
  double total_to_pay() const;
  void set_total_to_pay(double value);
  private:
  double _internal_total_to_pay() const;
  void _internal_set_total_to_pay(double value);
  public:

  // @@protoc_insertion_point(class_scope:billing.v1alpha1.Billing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  double cpu_metric_;
  double cpu_bill_;
  double ram_metric_;
  double ram_bill_;
  double storage_metric_;
  double storage_bill_;
  double total_to_pay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_billing_2fv1alpha1_2fbilling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Billing

// string organization_id = 1 [json_name = "organizationId"];
inline void Billing::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& Billing::organization_id() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Billing::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.organization_id)
}
inline std::string* Billing::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:billing.v1alpha1.Billing.organization_id)
  return _s;
}
inline const std::string& Billing::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void Billing::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Billing::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Billing::release_organization_id() {
  // @@protoc_insertion_point(field_release:billing.v1alpha1.Billing.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Billing::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:billing.v1alpha1.Billing.organization_id)
}

// double cpu_metric = 2 [json_name = "cpuMetric"];
inline void Billing::clear_cpu_metric() {
  cpu_metric_ = 0;
}
inline double Billing::_internal_cpu_metric() const {
  return cpu_metric_;
}
inline double Billing::cpu_metric() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.cpu_metric)
  return _internal_cpu_metric();
}
inline void Billing::_internal_set_cpu_metric(double value) {
  
  cpu_metric_ = value;
}
inline void Billing::set_cpu_metric(double value) {
  _internal_set_cpu_metric(value);
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.cpu_metric)
}

// double cpu_bill = 3 [json_name = "cpuBill"];
inline void Billing::clear_cpu_bill() {
  cpu_bill_ = 0;
}
inline double Billing::_internal_cpu_bill() const {
  return cpu_bill_;
}
inline double Billing::cpu_bill() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.cpu_bill)
  return _internal_cpu_bill();
}
inline void Billing::_internal_set_cpu_bill(double value) {
  
  cpu_bill_ = value;
}
inline void Billing::set_cpu_bill(double value) {
  _internal_set_cpu_bill(value);
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.cpu_bill)
}

// double ram_metric = 4 [json_name = "ramMetric"];
inline void Billing::clear_ram_metric() {
  ram_metric_ = 0;
}
inline double Billing::_internal_ram_metric() const {
  return ram_metric_;
}
inline double Billing::ram_metric() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.ram_metric)
  return _internal_ram_metric();
}
inline void Billing::_internal_set_ram_metric(double value) {
  
  ram_metric_ = value;
}
inline void Billing::set_ram_metric(double value) {
  _internal_set_ram_metric(value);
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.ram_metric)
}

// double ram_bill = 5 [json_name = "ramBill"];
inline void Billing::clear_ram_bill() {
  ram_bill_ = 0;
}
inline double Billing::_internal_ram_bill() const {
  return ram_bill_;
}
inline double Billing::ram_bill() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.ram_bill)
  return _internal_ram_bill();
}
inline void Billing::_internal_set_ram_bill(double value) {
  
  ram_bill_ = value;
}
inline void Billing::set_ram_bill(double value) {
  _internal_set_ram_bill(value);
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.ram_bill)
}

// double storage_metric = 6 [json_name = "storageMetric"];
inline void Billing::clear_storage_metric() {
  storage_metric_ = 0;
}
inline double Billing::_internal_storage_metric() const {
  return storage_metric_;
}
inline double Billing::storage_metric() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.storage_metric)
  return _internal_storage_metric();
}
inline void Billing::_internal_set_storage_metric(double value) {
  
  storage_metric_ = value;
}
inline void Billing::set_storage_metric(double value) {
  _internal_set_storage_metric(value);
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.storage_metric)
}

// double storage_bill = 7 [json_name = "storageBill"];
inline void Billing::clear_storage_bill() {
  storage_bill_ = 0;
}
inline double Billing::_internal_storage_bill() const {
  return storage_bill_;
}
inline double Billing::storage_bill() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.storage_bill)
  return _internal_storage_bill();
}
inline void Billing::_internal_set_storage_bill(double value) {
  
  storage_bill_ = value;
}
inline void Billing::set_storage_bill(double value) {
  _internal_set_storage_bill(value);
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.storage_bill)
}

// double total_to_pay = 8 [json_name = "totalToPay"];
inline void Billing::clear_total_to_pay() {
  total_to_pay_ = 0;
}
inline double Billing::_internal_total_to_pay() const {
  return total_to_pay_;
}
inline double Billing::total_to_pay() const {
  // @@protoc_insertion_point(field_get:billing.v1alpha1.Billing.total_to_pay)
  return _internal_total_to_pay();
}
inline void Billing::_internal_set_total_to_pay(double value) {
  
  total_to_pay_ = value;
}
inline void Billing::set_total_to_pay(double value) {
  _internal_set_total_to_pay(value);
  // @@protoc_insertion_point(field_set:billing.v1alpha1.Billing.total_to_pay)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace billing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_billing_2fv1alpha1_2fbilling_2eproto
