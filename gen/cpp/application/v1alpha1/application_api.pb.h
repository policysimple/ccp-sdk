// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: application/v1alpha1/application_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_application_2fv1alpha1_2fapplication_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_application_2fv1alpha1_2fapplication_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "application/v1alpha1/application.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_application_2fv1alpha1_2fapplication_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_application_2fv1alpha1_2fapplication_5fapi_2eproto;
namespace application {
namespace v1alpha1 {
class CreateApplicationRequest;
struct CreateApplicationRequestDefaultTypeInternal;
extern CreateApplicationRequestDefaultTypeInternal _CreateApplicationRequest_default_instance_;
class CreateApplicationResponse;
struct CreateApplicationResponseDefaultTypeInternal;
extern CreateApplicationResponseDefaultTypeInternal _CreateApplicationResponse_default_instance_;
class DeleteApplicationRequest;
struct DeleteApplicationRequestDefaultTypeInternal;
extern DeleteApplicationRequestDefaultTypeInternal _DeleteApplicationRequest_default_instance_;
class DeleteApplicationResponse;
struct DeleteApplicationResponseDefaultTypeInternal;
extern DeleteApplicationResponseDefaultTypeInternal _DeleteApplicationResponse_default_instance_;
class DeleteApplicationsByIntegrationRequest;
struct DeleteApplicationsByIntegrationRequestDefaultTypeInternal;
extern DeleteApplicationsByIntegrationRequestDefaultTypeInternal _DeleteApplicationsByIntegrationRequest_default_instance_;
class DeleteApplicationsByIntegrationResponse;
struct DeleteApplicationsByIntegrationResponseDefaultTypeInternal;
extern DeleteApplicationsByIntegrationResponseDefaultTypeInternal _DeleteApplicationsByIntegrationResponse_default_instance_;
class GetApplicationRequest;
struct GetApplicationRequestDefaultTypeInternal;
extern GetApplicationRequestDefaultTypeInternal _GetApplicationRequest_default_instance_;
class GetApplicationResponse;
struct GetApplicationResponseDefaultTypeInternal;
extern GetApplicationResponseDefaultTypeInternal _GetApplicationResponse_default_instance_;
class ListApplicationRequest;
struct ListApplicationRequestDefaultTypeInternal;
extern ListApplicationRequestDefaultTypeInternal _ListApplicationRequest_default_instance_;
class ListApplicationResponse;
struct ListApplicationResponseDefaultTypeInternal;
extern ListApplicationResponseDefaultTypeInternal _ListApplicationResponse_default_instance_;
class ListApplicationsByOrganizationRequest;
struct ListApplicationsByOrganizationRequestDefaultTypeInternal;
extern ListApplicationsByOrganizationRequestDefaultTypeInternal _ListApplicationsByOrganizationRequest_default_instance_;
class ListApplicationsByOrganizationResponse;
struct ListApplicationsByOrganizationResponseDefaultTypeInternal;
extern ListApplicationsByOrganizationResponseDefaultTypeInternal _ListApplicationsByOrganizationResponse_default_instance_;
class UpdateApplicationRequest;
struct UpdateApplicationRequestDefaultTypeInternal;
extern UpdateApplicationRequestDefaultTypeInternal _UpdateApplicationRequest_default_instance_;
class UpdateApplicationResponse;
struct UpdateApplicationResponseDefaultTypeInternal;
extern UpdateApplicationResponseDefaultTypeInternal _UpdateApplicationResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace application
PROTOBUF_NAMESPACE_OPEN
template<> ::application::v1alpha1::CreateApplicationRequest* Arena::CreateMaybeMessage<::application::v1alpha1::CreateApplicationRequest>(Arena*);
template<> ::application::v1alpha1::CreateApplicationResponse* Arena::CreateMaybeMessage<::application::v1alpha1::CreateApplicationResponse>(Arena*);
template<> ::application::v1alpha1::DeleteApplicationRequest* Arena::CreateMaybeMessage<::application::v1alpha1::DeleteApplicationRequest>(Arena*);
template<> ::application::v1alpha1::DeleteApplicationResponse* Arena::CreateMaybeMessage<::application::v1alpha1::DeleteApplicationResponse>(Arena*);
template<> ::application::v1alpha1::DeleteApplicationsByIntegrationRequest* Arena::CreateMaybeMessage<::application::v1alpha1::DeleteApplicationsByIntegrationRequest>(Arena*);
template<> ::application::v1alpha1::DeleteApplicationsByIntegrationResponse* Arena::CreateMaybeMessage<::application::v1alpha1::DeleteApplicationsByIntegrationResponse>(Arena*);
template<> ::application::v1alpha1::GetApplicationRequest* Arena::CreateMaybeMessage<::application::v1alpha1::GetApplicationRequest>(Arena*);
template<> ::application::v1alpha1::GetApplicationResponse* Arena::CreateMaybeMessage<::application::v1alpha1::GetApplicationResponse>(Arena*);
template<> ::application::v1alpha1::ListApplicationRequest* Arena::CreateMaybeMessage<::application::v1alpha1::ListApplicationRequest>(Arena*);
template<> ::application::v1alpha1::ListApplicationResponse* Arena::CreateMaybeMessage<::application::v1alpha1::ListApplicationResponse>(Arena*);
template<> ::application::v1alpha1::ListApplicationsByOrganizationRequest* Arena::CreateMaybeMessage<::application::v1alpha1::ListApplicationsByOrganizationRequest>(Arena*);
template<> ::application::v1alpha1::ListApplicationsByOrganizationResponse* Arena::CreateMaybeMessage<::application::v1alpha1::ListApplicationsByOrganizationResponse>(Arena*);
template<> ::application::v1alpha1::UpdateApplicationRequest* Arena::CreateMaybeMessage<::application::v1alpha1::UpdateApplicationRequest>(Arena*);
template<> ::application::v1alpha1::UpdateApplicationResponse* Arena::CreateMaybeMessage<::application::v1alpha1::UpdateApplicationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace application {
namespace v1alpha1 {

// ===================================================================

class DeleteApplicationsByIntegrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.DeleteApplicationsByIntegrationRequest) */ {
 public:
  inline DeleteApplicationsByIntegrationRequest() : DeleteApplicationsByIntegrationRequest(nullptr) {}
  ~DeleteApplicationsByIntegrationRequest() override;
  explicit constexpr DeleteApplicationsByIntegrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteApplicationsByIntegrationRequest(const DeleteApplicationsByIntegrationRequest& from);
  DeleteApplicationsByIntegrationRequest(DeleteApplicationsByIntegrationRequest&& from) noexcept
    : DeleteApplicationsByIntegrationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationsByIntegrationRequest& operator=(const DeleteApplicationsByIntegrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationsByIntegrationRequest& operator=(DeleteApplicationsByIntegrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteApplicationsByIntegrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteApplicationsByIntegrationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationsByIntegrationRequest*>(
               &_DeleteApplicationsByIntegrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeleteApplicationsByIntegrationRequest& a, DeleteApplicationsByIntegrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationsByIntegrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationsByIntegrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationsByIntegrationRequest* New() const final {
    return new DeleteApplicationsByIntegrationRequest();
  }

  DeleteApplicationsByIntegrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationsByIntegrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteApplicationsByIntegrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteApplicationsByIntegrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationsByIntegrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.DeleteApplicationsByIntegrationRequest";
  }
  protected:
  explicit DeleteApplicationsByIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntegrationIdFieldNumber = 1,
  };
  // string integration_id = 1 [json_name = "integrationId"];
  void clear_integration_id();
  const std::string& integration_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration_id();
  void set_allocated_integration_id(std::string* integration_id);
  private:
  const std::string& _internal_integration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_id(const std::string& value);
  std::string* _internal_mutable_integration_id();
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.DeleteApplicationsByIntegrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteApplicationsByIntegrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.DeleteApplicationsByIntegrationResponse) */ {
 public:
  inline DeleteApplicationsByIntegrationResponse() : DeleteApplicationsByIntegrationResponse(nullptr) {}
  ~DeleteApplicationsByIntegrationResponse() override;
  explicit constexpr DeleteApplicationsByIntegrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteApplicationsByIntegrationResponse(const DeleteApplicationsByIntegrationResponse& from);
  DeleteApplicationsByIntegrationResponse(DeleteApplicationsByIntegrationResponse&& from) noexcept
    : DeleteApplicationsByIntegrationResponse() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationsByIntegrationResponse& operator=(const DeleteApplicationsByIntegrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationsByIntegrationResponse& operator=(DeleteApplicationsByIntegrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteApplicationsByIntegrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteApplicationsByIntegrationResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationsByIntegrationResponse*>(
               &_DeleteApplicationsByIntegrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteApplicationsByIntegrationResponse& a, DeleteApplicationsByIntegrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationsByIntegrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationsByIntegrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationsByIntegrationResponse* New() const final {
    return new DeleteApplicationsByIntegrationResponse();
  }

  DeleteApplicationsByIntegrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationsByIntegrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteApplicationsByIntegrationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteApplicationsByIntegrationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationsByIntegrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.DeleteApplicationsByIntegrationResponse";
  }
  protected:
  explicit DeleteApplicationsByIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.DeleteApplicationsByIntegrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.CreateApplicationRequest) */ {
 public:
  inline CreateApplicationRequest() : CreateApplicationRequest(nullptr) {}
  ~CreateApplicationRequest() override;
  explicit constexpr CreateApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateApplicationRequest(const CreateApplicationRequest& from);
  CreateApplicationRequest(CreateApplicationRequest&& from) noexcept
    : CreateApplicationRequest() {
    *this = ::std::move(from);
  }

  inline CreateApplicationRequest& operator=(const CreateApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateApplicationRequest& operator=(CreateApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateApplicationRequest*>(
               &_CreateApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateApplicationRequest& a, CreateApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateApplicationRequest* New() const final {
    return new CreateApplicationRequest();
  }

  CreateApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.CreateApplicationRequest";
  }
  protected:
  explicit CreateApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationFieldNumber = 1,
  };
  // .application.v1alpha1.Application application = 1 [json_name = "application"];
  bool has_application() const;
  private:
  bool _internal_has_application() const;
  public:
  void clear_application();
  const ::application::v1alpha1::Application& application() const;
  PROTOBUF_MUST_USE_RESULT ::application::v1alpha1::Application* release_application();
  ::application::v1alpha1::Application* mutable_application();
  void set_allocated_application(::application::v1alpha1::Application* application);
  private:
  const ::application::v1alpha1::Application& _internal_application() const;
  ::application::v1alpha1::Application* _internal_mutable_application();
  public:
  void unsafe_arena_set_allocated_application(
      ::application::v1alpha1::Application* application);
  ::application::v1alpha1::Application* unsafe_arena_release_application();

  // @@protoc_insertion_point(class_scope:application.v1alpha1.CreateApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::application::v1alpha1::Application* application_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.CreateApplicationResponse) */ {
 public:
  inline CreateApplicationResponse() : CreateApplicationResponse(nullptr) {}
  ~CreateApplicationResponse() override;
  explicit constexpr CreateApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateApplicationResponse(const CreateApplicationResponse& from);
  CreateApplicationResponse(CreateApplicationResponse&& from) noexcept
    : CreateApplicationResponse() {
    *this = ::std::move(from);
  }

  inline CreateApplicationResponse& operator=(const CreateApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateApplicationResponse& operator=(CreateApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateApplicationResponse*>(
               &_CreateApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateApplicationResponse& a, CreateApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateApplicationResponse* New() const final {
    return new CreateApplicationResponse();
  }

  CreateApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.CreateApplicationResponse";
  }
  protected:
  explicit CreateApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string id = 3 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.CreateApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.ListApplicationRequest) */ {
 public:
  inline ListApplicationRequest() : ListApplicationRequest(nullptr) {}
  ~ListApplicationRequest() override;
  explicit constexpr ListApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListApplicationRequest(const ListApplicationRequest& from);
  ListApplicationRequest(ListApplicationRequest&& from) noexcept
    : ListApplicationRequest() {
    *this = ::std::move(from);
  }

  inline ListApplicationRequest& operator=(const ListApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApplicationRequest& operator=(ListApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const ListApplicationRequest*>(
               &_ListApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListApplicationRequest& a, ListApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListApplicationRequest* New() const final {
    return new ListApplicationRequest();
  }

  ListApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.ListApplicationRequest";
  }
  protected:
  explicit ListApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
  };
  // uint32 project_id = 1 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.ListApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.ListApplicationResponse) */ {
 public:
  inline ListApplicationResponse() : ListApplicationResponse(nullptr) {}
  ~ListApplicationResponse() override;
  explicit constexpr ListApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListApplicationResponse(const ListApplicationResponse& from);
  ListApplicationResponse(ListApplicationResponse&& from) noexcept
    : ListApplicationResponse() {
    *this = ::std::move(from);
  }

  inline ListApplicationResponse& operator=(const ListApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApplicationResponse& operator=(ListApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const ListApplicationResponse*>(
               &_ListApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListApplicationResponse& a, ListApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListApplicationResponse* New() const final {
    return new ListApplicationResponse();
  }

  ListApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.ListApplicationResponse";
  }
  protected:
  explicit ListApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationsFieldNumber = 1,
  };
  // repeated .application.v1alpha1.ListApplication applications = 1 [json_name = "applications"];
  int applications_size() const;
  private:
  int _internal_applications_size() const;
  public:
  void clear_applications();
  ::application::v1alpha1::ListApplication* mutable_applications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::ListApplication >*
      mutable_applications();
  private:
  const ::application::v1alpha1::ListApplication& _internal_applications(int index) const;
  ::application::v1alpha1::ListApplication* _internal_add_applications();
  public:
  const ::application::v1alpha1::ListApplication& applications(int index) const;
  ::application::v1alpha1::ListApplication* add_applications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::ListApplication >&
      applications() const;

  // @@protoc_insertion_point(class_scope:application.v1alpha1.ListApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::ListApplication > applications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.GetApplicationRequest) */ {
 public:
  inline GetApplicationRequest() : GetApplicationRequest(nullptr) {}
  ~GetApplicationRequest() override;
  explicit constexpr GetApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetApplicationRequest(const GetApplicationRequest& from);
  GetApplicationRequest(GetApplicationRequest&& from) noexcept
    : GetApplicationRequest() {
    *this = ::std::move(from);
  }

  inline GetApplicationRequest& operator=(const GetApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetApplicationRequest& operator=(GetApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const GetApplicationRequest*>(
               &_GetApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetApplicationRequest& a, GetApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationRequest* New() const final {
    return new GetApplicationRequest();
  }

  GetApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.GetApplicationRequest";
  }
  protected:
  explicit GetApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.GetApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.GetApplicationResponse) */ {
 public:
  inline GetApplicationResponse() : GetApplicationResponse(nullptr) {}
  ~GetApplicationResponse() override;
  explicit constexpr GetApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetApplicationResponse(const GetApplicationResponse& from);
  GetApplicationResponse(GetApplicationResponse&& from) noexcept
    : GetApplicationResponse() {
    *this = ::std::move(from);
  }

  inline GetApplicationResponse& operator=(const GetApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetApplicationResponse& operator=(GetApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const GetApplicationResponse*>(
               &_GetApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetApplicationResponse& a, GetApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationResponse* New() const final {
    return new GetApplicationResponse();
  }

  GetApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.GetApplicationResponse";
  }
  protected:
  explicit GetApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationFieldNumber = 1,
  };
  // .application.v1alpha1.Application application = 1 [json_name = "application"];
  bool has_application() const;
  private:
  bool _internal_has_application() const;
  public:
  void clear_application();
  const ::application::v1alpha1::Application& application() const;
  PROTOBUF_MUST_USE_RESULT ::application::v1alpha1::Application* release_application();
  ::application::v1alpha1::Application* mutable_application();
  void set_allocated_application(::application::v1alpha1::Application* application);
  private:
  const ::application::v1alpha1::Application& _internal_application() const;
  ::application::v1alpha1::Application* _internal_mutable_application();
  public:
  void unsafe_arena_set_allocated_application(
      ::application::v1alpha1::Application* application);
  ::application::v1alpha1::Application* unsafe_arena_release_application();

  // @@protoc_insertion_point(class_scope:application.v1alpha1.GetApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::application::v1alpha1::Application* application_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.DeleteApplicationRequest) */ {
 public:
  inline DeleteApplicationRequest() : DeleteApplicationRequest(nullptr) {}
  ~DeleteApplicationRequest() override;
  explicit constexpr DeleteApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteApplicationRequest(const DeleteApplicationRequest& from);
  DeleteApplicationRequest(DeleteApplicationRequest&& from) noexcept
    : DeleteApplicationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationRequest& operator=(const DeleteApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationRequest& operator=(DeleteApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationRequest*>(
               &_DeleteApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteApplicationRequest& a, DeleteApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationRequest* New() const final {
    return new DeleteApplicationRequest();
  }

  DeleteApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.DeleteApplicationRequest";
  }
  protected:
  explicit DeleteApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kIntegrationFieldNumber = 3,
    kProjectIdFieldNumber = 4,
    kOrganizationIdFieldNumber = 5,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string integration = 3 [json_name = "integration"];
  void clear_integration();
  const std::string& integration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration();
  void set_allocated_integration(std::string* integration);
  private:
  const std::string& _internal_integration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration(const std::string& value);
  std::string* _internal_mutable_integration();
  public:

  // uint32 project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 5 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.DeleteApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.DeleteApplicationResponse) */ {
 public:
  inline DeleteApplicationResponse() : DeleteApplicationResponse(nullptr) {}
  ~DeleteApplicationResponse() override;
  explicit constexpr DeleteApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteApplicationResponse(const DeleteApplicationResponse& from);
  DeleteApplicationResponse(DeleteApplicationResponse&& from) noexcept
    : DeleteApplicationResponse() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationResponse& operator=(const DeleteApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationResponse& operator=(DeleteApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationResponse*>(
               &_DeleteApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteApplicationResponse& a, DeleteApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationResponse* New() const final {
    return new DeleteApplicationResponse();
  }

  DeleteApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.DeleteApplicationResponse";
  }
  protected:
  explicit DeleteApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.DeleteApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.UpdateApplicationRequest) */ {
 public:
  inline UpdateApplicationRequest() : UpdateApplicationRequest(nullptr) {}
  ~UpdateApplicationRequest() override;
  explicit constexpr UpdateApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateApplicationRequest(const UpdateApplicationRequest& from);
  UpdateApplicationRequest(UpdateApplicationRequest&& from) noexcept
    : UpdateApplicationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateApplicationRequest& operator=(const UpdateApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateApplicationRequest& operator=(UpdateApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateApplicationRequest*>(
               &_UpdateApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateApplicationRequest& a, UpdateApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateApplicationRequest* New() const final {
    return new UpdateApplicationRequest();
  }

  UpdateApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.UpdateApplicationRequest";
  }
  protected:
  explicit UpdateApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kApplicationFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .application.v1alpha1.CreateApplicationRequest application = 2 [json_name = "application"];
  bool has_application() const;
  private:
  bool _internal_has_application() const;
  public:
  void clear_application();
  const ::application::v1alpha1::CreateApplicationRequest& application() const;
  PROTOBUF_MUST_USE_RESULT ::application::v1alpha1::CreateApplicationRequest* release_application();
  ::application::v1alpha1::CreateApplicationRequest* mutable_application();
  void set_allocated_application(::application::v1alpha1::CreateApplicationRequest* application);
  private:
  const ::application::v1alpha1::CreateApplicationRequest& _internal_application() const;
  ::application::v1alpha1::CreateApplicationRequest* _internal_mutable_application();
  public:
  void unsafe_arena_set_allocated_application(
      ::application::v1alpha1::CreateApplicationRequest* application);
  ::application::v1alpha1::CreateApplicationRequest* unsafe_arena_release_application();

  // @@protoc_insertion_point(class_scope:application.v1alpha1.UpdateApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::application::v1alpha1::CreateApplicationRequest* application_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.UpdateApplicationResponse) */ {
 public:
  inline UpdateApplicationResponse() : UpdateApplicationResponse(nullptr) {}
  ~UpdateApplicationResponse() override;
  explicit constexpr UpdateApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateApplicationResponse(const UpdateApplicationResponse& from);
  UpdateApplicationResponse(UpdateApplicationResponse&& from) noexcept
    : UpdateApplicationResponse() {
    *this = ::std::move(from);
  }

  inline UpdateApplicationResponse& operator=(const UpdateApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateApplicationResponse& operator=(UpdateApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateApplicationResponse*>(
               &_UpdateApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateApplicationResponse& a, UpdateApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateApplicationResponse* New() const final {
    return new UpdateApplicationResponse();
  }

  UpdateApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.UpdateApplicationResponse";
  }
  protected:
  explicit UpdateApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.UpdateApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListApplicationsByOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.ListApplicationsByOrganizationRequest) */ {
 public:
  inline ListApplicationsByOrganizationRequest() : ListApplicationsByOrganizationRequest(nullptr) {}
  ~ListApplicationsByOrganizationRequest() override;
  explicit constexpr ListApplicationsByOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListApplicationsByOrganizationRequest(const ListApplicationsByOrganizationRequest& from);
  ListApplicationsByOrganizationRequest(ListApplicationsByOrganizationRequest&& from) noexcept
    : ListApplicationsByOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline ListApplicationsByOrganizationRequest& operator=(const ListApplicationsByOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApplicationsByOrganizationRequest& operator=(ListApplicationsByOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListApplicationsByOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListApplicationsByOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const ListApplicationsByOrganizationRequest*>(
               &_ListApplicationsByOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListApplicationsByOrganizationRequest& a, ListApplicationsByOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApplicationsByOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApplicationsByOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListApplicationsByOrganizationRequest* New() const final {
    return new ListApplicationsByOrganizationRequest();
  }

  ListApplicationsByOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListApplicationsByOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListApplicationsByOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListApplicationsByOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListApplicationsByOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.ListApplicationsByOrganizationRequest";
  }
  protected:
  explicit ListApplicationsByOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.ListApplicationsByOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListApplicationsByOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:application.v1alpha1.ListApplicationsByOrganizationResponse) */ {
 public:
  inline ListApplicationsByOrganizationResponse() : ListApplicationsByOrganizationResponse(nullptr) {}
  ~ListApplicationsByOrganizationResponse() override;
  explicit constexpr ListApplicationsByOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListApplicationsByOrganizationResponse(const ListApplicationsByOrganizationResponse& from);
  ListApplicationsByOrganizationResponse(ListApplicationsByOrganizationResponse&& from) noexcept
    : ListApplicationsByOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline ListApplicationsByOrganizationResponse& operator=(const ListApplicationsByOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApplicationsByOrganizationResponse& operator=(ListApplicationsByOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListApplicationsByOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListApplicationsByOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const ListApplicationsByOrganizationResponse*>(
               &_ListApplicationsByOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListApplicationsByOrganizationResponse& a, ListApplicationsByOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApplicationsByOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApplicationsByOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListApplicationsByOrganizationResponse* New() const final {
    return new ListApplicationsByOrganizationResponse();
  }

  ListApplicationsByOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListApplicationsByOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListApplicationsByOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListApplicationsByOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListApplicationsByOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "application.v1alpha1.ListApplicationsByOrganizationResponse";
  }
  protected:
  explicit ListApplicationsByOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationsFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // repeated .application.v1alpha1.Application applications = 1 [json_name = "applications"];
  int applications_size() const;
  private:
  int _internal_applications_size() const;
  public:
  void clear_applications();
  ::application::v1alpha1::Application* mutable_applications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::Application >*
      mutable_applications();
  private:
  const ::application::v1alpha1::Application& _internal_applications(int index) const;
  ::application::v1alpha1::Application* _internal_add_applications();
  public:
  const ::application::v1alpha1::Application& applications(int index) const;
  ::application::v1alpha1::Application* add_applications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::Application >&
      applications() const;

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:application.v1alpha1.ListApplicationsByOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::Application > applications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_application_2fv1alpha1_2fapplication_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeleteApplicationsByIntegrationRequest

// string integration_id = 1 [json_name = "integrationId"];
inline void DeleteApplicationsByIntegrationRequest::clear_integration_id() {
  integration_id_.ClearToEmpty();
}
inline const std::string& DeleteApplicationsByIntegrationRequest::integration_id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationsByIntegrationRequest.integration_id)
  return _internal_integration_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteApplicationsByIntegrationRequest::set_integration_id(ArgT0&& arg0, ArgT... args) {
 
 integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationsByIntegrationRequest.integration_id)
}
inline std::string* DeleteApplicationsByIntegrationRequest::mutable_integration_id() {
  std::string* _s = _internal_mutable_integration_id();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.DeleteApplicationsByIntegrationRequest.integration_id)
  return _s;
}
inline const std::string& DeleteApplicationsByIntegrationRequest::_internal_integration_id() const {
  return integration_id_.Get();
}
inline void DeleteApplicationsByIntegrationRequest::_internal_set_integration_id(const std::string& value) {
  
  integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteApplicationsByIntegrationRequest::_internal_mutable_integration_id() {
  
  return integration_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteApplicationsByIntegrationRequest::release_integration_id() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.DeleteApplicationsByIntegrationRequest.integration_id)
  return integration_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteApplicationsByIntegrationRequest::set_allocated_integration_id(std::string* integration_id) {
  if (integration_id != nullptr) {
    
  } else {
    
  }
  integration_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.DeleteApplicationsByIntegrationRequest.integration_id)
}

// -------------------------------------------------------------------

// DeleteApplicationsByIntegrationResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteApplicationsByIntegrationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteApplicationsByIntegrationResponse::msg() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationsByIntegrationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteApplicationsByIntegrationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationsByIntegrationResponse.msg)
}
inline std::string* DeleteApplicationsByIntegrationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.DeleteApplicationsByIntegrationResponse.msg)
  return _s;
}
inline const std::string& DeleteApplicationsByIntegrationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteApplicationsByIntegrationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteApplicationsByIntegrationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteApplicationsByIntegrationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.DeleteApplicationsByIntegrationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteApplicationsByIntegrationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.DeleteApplicationsByIntegrationResponse.msg)
}

// -------------------------------------------------------------------

// CreateApplicationRequest

// .application.v1alpha1.Application application = 1 [json_name = "application"];
inline bool CreateApplicationRequest::_internal_has_application() const {
  return this != internal_default_instance() && application_ != nullptr;
}
inline bool CreateApplicationRequest::has_application() const {
  return _internal_has_application();
}
inline const ::application::v1alpha1::Application& CreateApplicationRequest::_internal_application() const {
  const ::application::v1alpha1::Application* p = application_;
  return p != nullptr ? *p : reinterpret_cast<const ::application::v1alpha1::Application&>(
      ::application::v1alpha1::_Application_default_instance_);
}
inline const ::application::v1alpha1::Application& CreateApplicationRequest::application() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.CreateApplicationRequest.application)
  return _internal_application();
}
inline void CreateApplicationRequest::unsafe_arena_set_allocated_application(
    ::application::v1alpha1::Application* application) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_);
  }
  application_ = application;
  if (application) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:application.v1alpha1.CreateApplicationRequest.application)
}
inline ::application::v1alpha1::Application* CreateApplicationRequest::release_application() {
  
  ::application::v1alpha1::Application* temp = application_;
  application_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::application::v1alpha1::Application* CreateApplicationRequest::unsafe_arena_release_application() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.CreateApplicationRequest.application)
  
  ::application::v1alpha1::Application* temp = application_;
  application_ = nullptr;
  return temp;
}
inline ::application::v1alpha1::Application* CreateApplicationRequest::_internal_mutable_application() {
  
  if (application_ == nullptr) {
    auto* p = CreateMaybeMessage<::application::v1alpha1::Application>(GetArenaForAllocation());
    application_ = p;
  }
  return application_;
}
inline ::application::v1alpha1::Application* CreateApplicationRequest::mutable_application() {
  ::application::v1alpha1::Application* _msg = _internal_mutable_application();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.CreateApplicationRequest.application)
  return _msg;
}
inline void CreateApplicationRequest::set_allocated_application(::application::v1alpha1::Application* application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_);
  }
  if (application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(application));
    if (message_arena != submessage_arena) {
      application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    
  } else {
    
  }
  application_ = application;
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.CreateApplicationRequest.application)
}

// -------------------------------------------------------------------

// CreateApplicationResponse

// string msg = 1 [json_name = "msg"];
inline void CreateApplicationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateApplicationResponse::msg() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.CreateApplicationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateApplicationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.CreateApplicationResponse.msg)
}
inline std::string* CreateApplicationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.CreateApplicationResponse.msg)
  return _s;
}
inline const std::string& CreateApplicationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateApplicationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateApplicationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateApplicationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.CreateApplicationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateApplicationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.CreateApplicationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateApplicationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateApplicationResponse::error() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.CreateApplicationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateApplicationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.CreateApplicationResponse.error)
}
inline std::string* CreateApplicationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.CreateApplicationResponse.error)
  return _s;
}
inline const std::string& CreateApplicationResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateApplicationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateApplicationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateApplicationResponse::release_error() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.CreateApplicationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateApplicationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.CreateApplicationResponse.error)
}

// string id = 3 [json_name = "id"];
inline void CreateApplicationResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CreateApplicationResponse::id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.CreateApplicationResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateApplicationResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.CreateApplicationResponse.id)
}
inline std::string* CreateApplicationResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.CreateApplicationResponse.id)
  return _s;
}
inline const std::string& CreateApplicationResponse::_internal_id() const {
  return id_.Get();
}
inline void CreateApplicationResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateApplicationResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateApplicationResponse::release_id() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.CreateApplicationResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateApplicationResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.CreateApplicationResponse.id)
}

// -------------------------------------------------------------------

// ListApplicationRequest

// uint32 project_id = 1 [json_name = "projectId"];
inline void ListApplicationRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListApplicationRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListApplicationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.ListApplicationRequest.project_id)
  return _internal_project_id();
}
inline void ListApplicationRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListApplicationRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:application.v1alpha1.ListApplicationRequest.project_id)
}

// -------------------------------------------------------------------

// ListApplicationResponse

// repeated .application.v1alpha1.ListApplication applications = 1 [json_name = "applications"];
inline int ListApplicationResponse::_internal_applications_size() const {
  return applications_.size();
}
inline int ListApplicationResponse::applications_size() const {
  return _internal_applications_size();
}
inline ::application::v1alpha1::ListApplication* ListApplicationResponse::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.ListApplicationResponse.applications)
  return applications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::ListApplication >*
ListApplicationResponse::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:application.v1alpha1.ListApplicationResponse.applications)
  return &applications_;
}
inline const ::application::v1alpha1::ListApplication& ListApplicationResponse::_internal_applications(int index) const {
  return applications_.Get(index);
}
inline const ::application::v1alpha1::ListApplication& ListApplicationResponse::applications(int index) const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.ListApplicationResponse.applications)
  return _internal_applications(index);
}
inline ::application::v1alpha1::ListApplication* ListApplicationResponse::_internal_add_applications() {
  return applications_.Add();
}
inline ::application::v1alpha1::ListApplication* ListApplicationResponse::add_applications() {
  ::application::v1alpha1::ListApplication* _add = _internal_add_applications();
  // @@protoc_insertion_point(field_add:application.v1alpha1.ListApplicationResponse.applications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::ListApplication >&
ListApplicationResponse::applications() const {
  // @@protoc_insertion_point(field_list:application.v1alpha1.ListApplicationResponse.applications)
  return applications_;
}

// -------------------------------------------------------------------

// GetApplicationRequest

// string id = 1 [json_name = "id"];
inline void GetApplicationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetApplicationRequest::id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.GetApplicationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetApplicationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.GetApplicationRequest.id)
}
inline std::string* GetApplicationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.GetApplicationRequest.id)
  return _s;
}
inline const std::string& GetApplicationRequest::_internal_id() const {
  return id_.Get();
}
inline void GetApplicationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetApplicationRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetApplicationRequest::release_id() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.GetApplicationRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetApplicationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.GetApplicationRequest.id)
}

// -------------------------------------------------------------------

// GetApplicationResponse

// .application.v1alpha1.Application application = 1 [json_name = "application"];
inline bool GetApplicationResponse::_internal_has_application() const {
  return this != internal_default_instance() && application_ != nullptr;
}
inline bool GetApplicationResponse::has_application() const {
  return _internal_has_application();
}
inline const ::application::v1alpha1::Application& GetApplicationResponse::_internal_application() const {
  const ::application::v1alpha1::Application* p = application_;
  return p != nullptr ? *p : reinterpret_cast<const ::application::v1alpha1::Application&>(
      ::application::v1alpha1::_Application_default_instance_);
}
inline const ::application::v1alpha1::Application& GetApplicationResponse::application() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.GetApplicationResponse.application)
  return _internal_application();
}
inline void GetApplicationResponse::unsafe_arena_set_allocated_application(
    ::application::v1alpha1::Application* application) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_);
  }
  application_ = application;
  if (application) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:application.v1alpha1.GetApplicationResponse.application)
}
inline ::application::v1alpha1::Application* GetApplicationResponse::release_application() {
  
  ::application::v1alpha1::Application* temp = application_;
  application_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::application::v1alpha1::Application* GetApplicationResponse::unsafe_arena_release_application() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.GetApplicationResponse.application)
  
  ::application::v1alpha1::Application* temp = application_;
  application_ = nullptr;
  return temp;
}
inline ::application::v1alpha1::Application* GetApplicationResponse::_internal_mutable_application() {
  
  if (application_ == nullptr) {
    auto* p = CreateMaybeMessage<::application::v1alpha1::Application>(GetArenaForAllocation());
    application_ = p;
  }
  return application_;
}
inline ::application::v1alpha1::Application* GetApplicationResponse::mutable_application() {
  ::application::v1alpha1::Application* _msg = _internal_mutable_application();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.GetApplicationResponse.application)
  return _msg;
}
inline void GetApplicationResponse::set_allocated_application(::application::v1alpha1::Application* application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_);
  }
  if (application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(application));
    if (message_arena != submessage_arena) {
      application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    
  } else {
    
  }
  application_ = application;
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.GetApplicationResponse.application)
}

// -------------------------------------------------------------------

// DeleteApplicationRequest

// string id = 1 [json_name = "id"];
inline void DeleteApplicationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteApplicationRequest::id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteApplicationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationRequest.id)
}
inline std::string* DeleteApplicationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.DeleteApplicationRequest.id)
  return _s;
}
inline const std::string& DeleteApplicationRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteApplicationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteApplicationRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteApplicationRequest::release_id() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.DeleteApplicationRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteApplicationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.DeleteApplicationRequest.id)
}

// string name = 2 [json_name = "name"];
inline void DeleteApplicationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteApplicationRequest::name() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteApplicationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationRequest.name)
}
inline std::string* DeleteApplicationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.DeleteApplicationRequest.name)
  return _s;
}
inline const std::string& DeleteApplicationRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteApplicationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteApplicationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteApplicationRequest::release_name() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.DeleteApplicationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteApplicationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.DeleteApplicationRequest.name)
}

// string integration = 3 [json_name = "integration"];
inline void DeleteApplicationRequest::clear_integration() {
  integration_.ClearToEmpty();
}
inline const std::string& DeleteApplicationRequest::integration() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationRequest.integration)
  return _internal_integration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteApplicationRequest::set_integration(ArgT0&& arg0, ArgT... args) {
 
 integration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationRequest.integration)
}
inline std::string* DeleteApplicationRequest::mutable_integration() {
  std::string* _s = _internal_mutable_integration();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.DeleteApplicationRequest.integration)
  return _s;
}
inline const std::string& DeleteApplicationRequest::_internal_integration() const {
  return integration_.Get();
}
inline void DeleteApplicationRequest::_internal_set_integration(const std::string& value) {
  
  integration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteApplicationRequest::_internal_mutable_integration() {
  
  return integration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteApplicationRequest::release_integration() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.DeleteApplicationRequest.integration)
  return integration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteApplicationRequest::set_allocated_integration(std::string* integration) {
  if (integration != nullptr) {
    
  } else {
    
  }
  integration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.DeleteApplicationRequest.integration)
}

// uint32 project_id = 4 [json_name = "projectId"];
inline void DeleteApplicationRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteApplicationRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteApplicationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationRequest.project_id)
  return _internal_project_id();
}
inline void DeleteApplicationRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void DeleteApplicationRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationRequest.project_id)
}

// uint32 organization_id = 5 [json_name = "organizationId"];
inline void DeleteApplicationRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteApplicationRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteApplicationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationRequest.organization_id)
  return _internal_organization_id();
}
inline void DeleteApplicationRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void DeleteApplicationRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationRequest.organization_id)
}

// -------------------------------------------------------------------

// DeleteApplicationResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteApplicationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteApplicationResponse::msg() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteApplicationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationResponse.msg)
}
inline std::string* DeleteApplicationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.DeleteApplicationResponse.msg)
  return _s;
}
inline const std::string& DeleteApplicationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteApplicationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteApplicationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteApplicationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.DeleteApplicationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteApplicationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.DeleteApplicationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteApplicationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteApplicationResponse::error() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.DeleteApplicationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteApplicationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.DeleteApplicationResponse.error)
}
inline std::string* DeleteApplicationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.DeleteApplicationResponse.error)
  return _s;
}
inline const std::string& DeleteApplicationResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteApplicationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteApplicationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteApplicationResponse::release_error() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.DeleteApplicationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteApplicationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.DeleteApplicationResponse.error)
}

// -------------------------------------------------------------------

// UpdateApplicationRequest

// string id = 1 [json_name = "id"];
inline void UpdateApplicationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UpdateApplicationRequest::id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.UpdateApplicationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.UpdateApplicationRequest.id)
}
inline std::string* UpdateApplicationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.UpdateApplicationRequest.id)
  return _s;
}
inline const std::string& UpdateApplicationRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateApplicationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationRequest::release_id() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.UpdateApplicationRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.UpdateApplicationRequest.id)
}

// .application.v1alpha1.CreateApplicationRequest application = 2 [json_name = "application"];
inline bool UpdateApplicationRequest::_internal_has_application() const {
  return this != internal_default_instance() && application_ != nullptr;
}
inline bool UpdateApplicationRequest::has_application() const {
  return _internal_has_application();
}
inline void UpdateApplicationRequest::clear_application() {
  if (GetArenaForAllocation() == nullptr && application_ != nullptr) {
    delete application_;
  }
  application_ = nullptr;
}
inline const ::application::v1alpha1::CreateApplicationRequest& UpdateApplicationRequest::_internal_application() const {
  const ::application::v1alpha1::CreateApplicationRequest* p = application_;
  return p != nullptr ? *p : reinterpret_cast<const ::application::v1alpha1::CreateApplicationRequest&>(
      ::application::v1alpha1::_CreateApplicationRequest_default_instance_);
}
inline const ::application::v1alpha1::CreateApplicationRequest& UpdateApplicationRequest::application() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.UpdateApplicationRequest.application)
  return _internal_application();
}
inline void UpdateApplicationRequest::unsafe_arena_set_allocated_application(
    ::application::v1alpha1::CreateApplicationRequest* application) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_);
  }
  application_ = application;
  if (application) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:application.v1alpha1.UpdateApplicationRequest.application)
}
inline ::application::v1alpha1::CreateApplicationRequest* UpdateApplicationRequest::release_application() {
  
  ::application::v1alpha1::CreateApplicationRequest* temp = application_;
  application_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::application::v1alpha1::CreateApplicationRequest* UpdateApplicationRequest::unsafe_arena_release_application() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.UpdateApplicationRequest.application)
  
  ::application::v1alpha1::CreateApplicationRequest* temp = application_;
  application_ = nullptr;
  return temp;
}
inline ::application::v1alpha1::CreateApplicationRequest* UpdateApplicationRequest::_internal_mutable_application() {
  
  if (application_ == nullptr) {
    auto* p = CreateMaybeMessage<::application::v1alpha1::CreateApplicationRequest>(GetArenaForAllocation());
    application_ = p;
  }
  return application_;
}
inline ::application::v1alpha1::CreateApplicationRequest* UpdateApplicationRequest::mutable_application() {
  ::application::v1alpha1::CreateApplicationRequest* _msg = _internal_mutable_application();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.UpdateApplicationRequest.application)
  return _msg;
}
inline void UpdateApplicationRequest::set_allocated_application(::application::v1alpha1::CreateApplicationRequest* application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete application_;
  }
  if (application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::application::v1alpha1::CreateApplicationRequest>::GetOwningArena(application);
    if (message_arena != submessage_arena) {
      application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    
  } else {
    
  }
  application_ = application;
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.UpdateApplicationRequest.application)
}

// -------------------------------------------------------------------

// UpdateApplicationResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateApplicationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateApplicationResponse::msg() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.UpdateApplicationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.UpdateApplicationResponse.msg)
}
inline std::string* UpdateApplicationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.UpdateApplicationResponse.msg)
  return _s;
}
inline const std::string& UpdateApplicationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateApplicationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.UpdateApplicationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.UpdateApplicationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateApplicationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateApplicationResponse::error() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.UpdateApplicationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.UpdateApplicationResponse.error)
}
inline std::string* UpdateApplicationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.UpdateApplicationResponse.error)
  return _s;
}
inline const std::string& UpdateApplicationResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateApplicationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationResponse::release_error() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.UpdateApplicationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.UpdateApplicationResponse.error)
}

// -------------------------------------------------------------------

// ListApplicationsByOrganizationRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void ListApplicationsByOrganizationRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListApplicationsByOrganizationRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListApplicationsByOrganizationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.ListApplicationsByOrganizationRequest.organization_id)
  return _internal_organization_id();
}
inline void ListApplicationsByOrganizationRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListApplicationsByOrganizationRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:application.v1alpha1.ListApplicationsByOrganizationRequest.organization_id)
}

// -------------------------------------------------------------------

// ListApplicationsByOrganizationResponse

// repeated .application.v1alpha1.Application applications = 1 [json_name = "applications"];
inline int ListApplicationsByOrganizationResponse::_internal_applications_size() const {
  return applications_.size();
}
inline int ListApplicationsByOrganizationResponse::applications_size() const {
  return _internal_applications_size();
}
inline ::application::v1alpha1::Application* ListApplicationsByOrganizationResponse::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.ListApplicationsByOrganizationResponse.applications)
  return applications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::Application >*
ListApplicationsByOrganizationResponse::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:application.v1alpha1.ListApplicationsByOrganizationResponse.applications)
  return &applications_;
}
inline const ::application::v1alpha1::Application& ListApplicationsByOrganizationResponse::_internal_applications(int index) const {
  return applications_.Get(index);
}
inline const ::application::v1alpha1::Application& ListApplicationsByOrganizationResponse::applications(int index) const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.ListApplicationsByOrganizationResponse.applications)
  return _internal_applications(index);
}
inline ::application::v1alpha1::Application* ListApplicationsByOrganizationResponse::_internal_add_applications() {
  return applications_.Add();
}
inline ::application::v1alpha1::Application* ListApplicationsByOrganizationResponse::add_applications() {
  ::application::v1alpha1::Application* _add = _internal_add_applications();
  // @@protoc_insertion_point(field_add:application.v1alpha1.ListApplicationsByOrganizationResponse.applications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::application::v1alpha1::Application >&
ListApplicationsByOrganizationResponse::applications() const {
  // @@protoc_insertion_point(field_list:application.v1alpha1.ListApplicationsByOrganizationResponse.applications)
  return applications_;
}

// string error = 2 [json_name = "error"];
inline void ListApplicationsByOrganizationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ListApplicationsByOrganizationResponse::error() const {
  // @@protoc_insertion_point(field_get:application.v1alpha1.ListApplicationsByOrganizationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListApplicationsByOrganizationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:application.v1alpha1.ListApplicationsByOrganizationResponse.error)
}
inline std::string* ListApplicationsByOrganizationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:application.v1alpha1.ListApplicationsByOrganizationResponse.error)
  return _s;
}
inline const std::string& ListApplicationsByOrganizationResponse::_internal_error() const {
  return error_.Get();
}
inline void ListApplicationsByOrganizationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListApplicationsByOrganizationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListApplicationsByOrganizationResponse::release_error() {
  // @@protoc_insertion_point(field_release:application.v1alpha1.ListApplicationsByOrganizationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListApplicationsByOrganizationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:application.v1alpha1.ListApplicationsByOrganizationResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace application

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_application_2fv1alpha1_2fapplication_5fapi_2eproto
