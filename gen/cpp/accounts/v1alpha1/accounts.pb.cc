// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/accounts.proto

#include "accounts/v1alpha1/accounts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace accounts {
namespace v1alpha1 {
constexpr GetRolesByUserRequest::GetRolesByUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRolesByUserRequestDefaultTypeInternal {
  constexpr GetRolesByUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRolesByUserRequestDefaultTypeInternal() {}
  union {
    GetRolesByUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRolesByUserRequestDefaultTypeInternal _GetRolesByUserRequest_default_instance_;
constexpr GetRolesByUserResponse::GetRolesByUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_()
  , project_(){}
struct GetRolesByUserResponseDefaultTypeInternal {
  constexpr GetRolesByUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRolesByUserResponseDefaultTypeInternal() {}
  union {
    GetRolesByUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRolesByUserResponseDefaultTypeInternal _GetRolesByUserResponse_default_instance_;
constexpr CreateApiKeyRequest::CreateApiKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_ids_()
  , _roles_ids_cached_byte_size_(0)
  , permissions_ids_()
  , _permissions_ids_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateApiKeyRequestDefaultTypeInternal {
  constexpr CreateApiKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateApiKeyRequestDefaultTypeInternal() {}
  union {
    CreateApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateApiKeyRequestDefaultTypeInternal _CreateApiKeyRequest_default_instance_;
constexpr ApiKey::ApiKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rol_()
  , permissions_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ApiKeyDefaultTypeInternal {
  constexpr ApiKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApiKeyDefaultTypeInternal() {}
  union {
    ApiKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApiKeyDefaultTypeInternal _ApiKey_default_instance_;
constexpr CreateApiKeyResponse::CreateApiKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , api_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , access_point_id_(0u){}
struct CreateApiKeyResponseDefaultTypeInternal {
  constexpr CreateApiKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateApiKeyResponseDefaultTypeInternal() {}
  union {
    CreateApiKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateApiKeyResponseDefaultTypeInternal _CreateApiKeyResponse_default_instance_;
constexpr GetOneApiKeyRequest::GetOneApiKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct GetOneApiKeyRequestDefaultTypeInternal {
  constexpr GetOneApiKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneApiKeyRequestDefaultTypeInternal() {}
  union {
    GetOneApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneApiKeyRequestDefaultTypeInternal _GetOneApiKeyRequest_default_instance_;
constexpr GetOneApiKeyResponse::GetOneApiKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , permissions_()
  , api_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct GetOneApiKeyResponseDefaultTypeInternal {
  constexpr GetOneApiKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneApiKeyResponseDefaultTypeInternal() {}
  union {
    GetOneApiKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneApiKeyResponseDefaultTypeInternal _GetOneApiKeyResponse_default_instance_;
constexpr ListApiKeyRequest::ListApiKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListApiKeyRequestDefaultTypeInternal {
  constexpr ListApiKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListApiKeyRequestDefaultTypeInternal() {}
  union {
    ListApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListApiKeyRequestDefaultTypeInternal _ListApiKeyRequest_default_instance_;
constexpr ApiKeyList::ApiKeyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : api_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct ApiKeyListDefaultTypeInternal {
  constexpr ApiKeyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApiKeyListDefaultTypeInternal() {}
  union {
    ApiKeyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApiKeyListDefaultTypeInternal _ApiKeyList_default_instance_;
constexpr ListApiKeyResponse::ListApiKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : api_keys_(){}
struct ListApiKeyResponseDefaultTypeInternal {
  constexpr ListApiKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListApiKeyResponseDefaultTypeInternal() {}
  union {
    ListApiKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListApiKeyResponseDefaultTypeInternal _ListApiKeyResponse_default_instance_;
constexpr UpdateApiKeyRequest::UpdateApiKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_ids_()
  , _roles_ids_cached_byte_size_(0)
  , permissions_ids_()
  , _permissions_ids_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , is_active_(false){}
struct UpdateApiKeyRequestDefaultTypeInternal {
  constexpr UpdateApiKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateApiKeyRequestDefaultTypeInternal() {}
  union {
    UpdateApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateApiKeyRequestDefaultTypeInternal _UpdateApiKeyRequest_default_instance_;
constexpr UpdateApiKeyResponse::UpdateApiKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , api_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateApiKeyResponseDefaultTypeInternal {
  constexpr UpdateApiKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateApiKeyResponseDefaultTypeInternal() {}
  union {
    UpdateApiKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateApiKeyResponseDefaultTypeInternal _UpdateApiKeyResponse_default_instance_;
constexpr DeleteApiKeyRequest::DeleteApiKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct DeleteApiKeyRequestDefaultTypeInternal {
  constexpr DeleteApiKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteApiKeyRequestDefaultTypeInternal() {}
  union {
    DeleteApiKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteApiKeyRequestDefaultTypeInternal _DeleteApiKeyRequest_default_instance_;
constexpr DeleteApiKeyResponse::DeleteApiKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , api_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteApiKeyResponseDefaultTypeInternal {
  constexpr DeleteApiKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteApiKeyResponseDefaultTypeInternal() {}
  union {
    DeleteApiKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteApiKeyResponseDefaultTypeInternal _DeleteApiKeyResponse_default_instance_;
constexpr City::City(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , longitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CityDefaultTypeInternal {
  constexpr CityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CityDefaultTypeInternal() {}
  union {
    City _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CityDefaultTypeInternal _City_default_instance_;
constexpr State::State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cities_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct StateDefaultTypeInternal {
  constexpr StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateDefaultTypeInternal _State_default_instance_;
constexpr CountryList::CountryList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emoji_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CountryListDefaultTypeInternal {
  constexpr CountryListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CountryListDefaultTypeInternal() {}
  union {
    CountryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CountryListDefaultTypeInternal _CountryList_default_instance_;
constexpr ListCountriesRequest::ListCountriesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListCountriesRequestDefaultTypeInternal {
  constexpr ListCountriesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCountriesRequestDefaultTypeInternal() {}
  union {
    ListCountriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCountriesRequestDefaultTypeInternal _ListCountriesRequest_default_instance_;
constexpr ListCountriesResponse::ListCountriesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : countries_(){}
struct ListCountriesResponseDefaultTypeInternal {
  constexpr ListCountriesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCountriesResponseDefaultTypeInternal() {}
  union {
    ListCountriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCountriesResponseDefaultTypeInternal _ListCountriesResponse_default_instance_;
constexpr GetOneCountryRequest::GetOneCountryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_id_(0u){}
struct GetOneCountryRequestDefaultTypeInternal {
  constexpr GetOneCountryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneCountryRequestDefaultTypeInternal() {}
  union {
    GetOneCountryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneCountryRequestDefaultTypeInternal _GetOneCountryRequest_default_instance_;
constexpr GetOneCountryResponse::GetOneCountryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emoji_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct GetOneCountryResponseDefaultTypeInternal {
  constexpr GetOneCountryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneCountryResponseDefaultTypeInternal() {}
  union {
    GetOneCountryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneCountryResponseDefaultTypeInternal _GetOneCountryResponse_default_instance_;
constexpr SendVerificationEmailRequest::SendVerificationEmailRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SendVerificationEmailRequestDefaultTypeInternal {
  constexpr SendVerificationEmailRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendVerificationEmailRequestDefaultTypeInternal() {}
  union {
    SendVerificationEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendVerificationEmailRequestDefaultTypeInternal _SendVerificationEmailRequest_default_instance_;
constexpr SendVerificationEmailResponse::SendVerificationEmailResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : html_result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SendVerificationEmailResponseDefaultTypeInternal {
  constexpr SendVerificationEmailResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendVerificationEmailResponseDefaultTypeInternal() {}
  union {
    SendVerificationEmailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendVerificationEmailResponseDefaultTypeInternal _SendVerificationEmailResponse_default_instance_;
constexpr VerifyEmailRequest::VerifyEmailRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VerifyEmailRequestDefaultTypeInternal {
  constexpr VerifyEmailRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VerifyEmailRequestDefaultTypeInternal() {}
  union {
    VerifyEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VerifyEmailRequestDefaultTypeInternal _VerifyEmailRequest_default_instance_;
constexpr VerifyEmailResponse::VerifyEmailResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VerifyEmailResponseDefaultTypeInternal {
  constexpr VerifyEmailResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VerifyEmailResponseDefaultTypeInternal() {}
  union {
    VerifyEmailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VerifyEmailResponseDefaultTypeInternal _VerifyEmailResponse_default_instance_;
constexpr CheckUserRequest::CheckUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_ids_()
  , _roles_ids_cached_byte_size_(0)
  , permission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_dex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_admin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_permission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , api_key_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(0u)
  , project_id_(0u)
  , get_organization_from_project_(0u)
  , user_id_(0u){}
struct CheckUserRequestDefaultTypeInternal {
  constexpr CheckUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckUserRequestDefaultTypeInternal() {}
  union {
    CheckUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckUserRequestDefaultTypeInternal _CheckUserRequest_default_instance_;
constexpr CheckUserResponse::CheckUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_exists_(false)
  , is_admin_(false){}
struct CheckUserResponseDefaultTypeInternal {
  constexpr CheckUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckUserResponseDefaultTypeInternal() {}
  union {
    CheckUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckUserResponseDefaultTypeInternal _CheckUserResponse_default_instance_;
constexpr UsersDex::UsersDex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UsersDexDefaultTypeInternal {
  constexpr UsersDexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UsersDexDefaultTypeInternal() {}
  union {
    UsersDex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UsersDexDefaultTypeInternal _UsersDex_default_instance_;
constexpr CreateUserResponse::CreateUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateUserResponseDefaultTypeInternal {
  constexpr CreateUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUserResponseDefaultTypeInternal() {}
  union {
    CreateUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUserResponseDefaultTypeInternal _CreateUserResponse_default_instance_;
constexpr UpdateUserResponse::UpdateUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateUserResponseDefaultTypeInternal {
  constexpr UpdateUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateUserResponseDefaultTypeInternal() {}
  union {
    UpdateUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateUserResponseDefaultTypeInternal _UpdateUserResponse_default_instance_;
constexpr DeleteUserResponse::DeleteUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteUserResponseDefaultTypeInternal {
  constexpr DeleteUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteUserResponseDefaultTypeInternal() {}
  union {
    DeleteUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteUserResponseDefaultTypeInternal _DeleteUserResponse_default_instance_;
constexpr ListUserRequest::ListUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(0u)
  , project_id_(0u){}
struct ListUserRequestDefaultTypeInternal {
  constexpr ListUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListUserRequestDefaultTypeInternal() {}
  union {
    ListUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListUserRequestDefaultTypeInternal _ListUserRequest_default_instance_;
constexpr CreateUserRequest::CreateUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_ids_()
  , _roles_ids_cached_byte_size_(0)
  , permissions_ids_()
  , _permissions_ids_cached_byte_size_(0)
  , organizations_ids_()
  , _organizations_ids_cached_byte_size_(0)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , city_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zip_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emoji_country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_active_(false){}
struct CreateUserRequestDefaultTypeInternal {
  constexpr CreateUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUserRequestDefaultTypeInternal() {}
  union {
    CreateUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUserRequestDefaultTypeInternal _CreateUserRequest_default_instance_;
constexpr UpdateUserRequest::UpdateUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_(nullptr)
  , auth_id_(0u){}
struct UpdateUserRequestDefaultTypeInternal {
  constexpr UpdateUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateUserRequestDefaultTypeInternal() {}
  union {
    UpdateUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
constexpr DeleteUserRequest::DeleteUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , organization_id_(0u){}
struct DeleteUserRequestDefaultTypeInternal {
  constexpr DeleteUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteUserRequestDefaultTypeInternal() {}
  union {
    DeleteUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
constexpr UserList::UserList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , is_active_(false)
  , is_super_user_(false){}
struct UserListDefaultTypeInternal {
  constexpr UserListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserListDefaultTypeInternal() {}
  union {
    UserList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserListDefaultTypeInternal _UserList_default_instance_;
constexpr GetOneUserRequest::GetOneUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , organization_id_(0u){}
struct GetOneUserRequestDefaultTypeInternal {
  constexpr GetOneUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneUserRequestDefaultTypeInternal() {}
  union {
    GetOneUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneUserRequestDefaultTypeInternal _GetOneUserRequest_default_instance_;
constexpr GetOneUserResponse::GetOneUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , permissions_()
  , organizations_()
  , projects_()
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , city_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zip_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emoji_country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , is_active_(false)
  , is_super_user_(false){}
struct GetOneUserResponseDefaultTypeInternal {
  constexpr GetOneUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneUserResponseDefaultTypeInternal() {}
  union {
    GetOneUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneUserResponseDefaultTypeInternal _GetOneUserResponse_default_instance_;
constexpr ListUserResponse::ListUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_(){}
struct ListUserResponseDefaultTypeInternal {
  constexpr ListUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListUserResponseDefaultTypeInternal() {}
  union {
    ListUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListUserResponseDefaultTypeInternal _ListUserResponse_default_instance_;
constexpr ListUserPaginationRequest::ListUserPaginationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , limit_(0){}
struct ListUserPaginationRequestDefaultTypeInternal {
  constexpr ListUserPaginationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListUserPaginationRequestDefaultTypeInternal() {}
  union {
    ListUserPaginationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListUserPaginationRequestDefaultTypeInternal _ListUserPaginationRequest_default_instance_;
constexpr ListUserPaginationResponse::ListUserPaginationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_()
  , count_(int64_t{0}){}
struct ListUserPaginationResponseDefaultTypeInternal {
  constexpr ListUserPaginationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListUserPaginationResponseDefaultTypeInternal() {}
  union {
    ListUserPaginationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListUserPaginationResponseDefaultTypeInternal _ListUserPaginationResponse_default_instance_;
constexpr SendInvitationUserRequest::SendInvitationUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_ids_()
  , _roles_ids_cached_byte_size_(0)
  , permissions_ids_()
  , _permissions_ids_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_admin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(0u){}
struct SendInvitationUserRequestDefaultTypeInternal {
  constexpr SendInvitationUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendInvitationUserRequestDefaultTypeInternal() {}
  union {
    SendInvitationUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendInvitationUserRequestDefaultTypeInternal _SendInvitationUserRequest_default_instance_;
constexpr SendInvitationUserResponse::SendInvitationUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_()
  , roles_()
  , permissions_()
  , invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_(nullptr){}
struct SendInvitationUserResponseDefaultTypeInternal {
  constexpr SendInvitationUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendInvitationUserResponseDefaultTypeInternal() {}
  union {
    SendInvitationUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendInvitationUserResponseDefaultTypeInternal _SendInvitationUserResponse_default_instance_;
constexpr GetInvitationUserRequest::GetInvitationUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetInvitationUserRequestDefaultTypeInternal {
  constexpr GetInvitationUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetInvitationUserRequestDefaultTypeInternal() {}
  union {
    GetInvitationUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetInvitationUserRequestDefaultTypeInternal _GetInvitationUserRequest_default_instance_;
constexpr GetInvitationUserResponse::GetInvitationUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_()
  , roles_()
  , permissions_()
  , result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_(nullptr){}
struct GetInvitationUserResponseDefaultTypeInternal {
  constexpr GetInvitationUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetInvitationUserResponseDefaultTypeInternal() {}
  union {
    GetInvitationUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetInvitationUserResponseDefaultTypeInternal _GetInvitationUserResponse_default_instance_;
constexpr AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AgreeInvitationUserRequest_ProjectsEntry_DoNotUseDefaultTypeInternal {
  constexpr AgreeInvitationUserRequest_ProjectsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgreeInvitationUserRequest_ProjectsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AgreeInvitationUserRequest_ProjectsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgreeInvitationUserRequest_ProjectsEntry_DoNotUseDefaultTypeInternal _AgreeInvitationUserRequest_ProjectsEntry_DoNotUse_default_instance_;
constexpr AgreeInvitationUserRequest::AgreeInvitationUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guest_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invitation_response_(0)
{}
struct AgreeInvitationUserRequestDefaultTypeInternal {
  constexpr AgreeInvitationUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgreeInvitationUserRequestDefaultTypeInternal() {}
  union {
    AgreeInvitationUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgreeInvitationUserRequestDefaultTypeInternal _AgreeInvitationUserRequest_default_instance_;
constexpr AgreeInvitationUserResponse::AgreeInvitationUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AgreeInvitationUserResponseDefaultTypeInternal {
  constexpr AgreeInvitationUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgreeInvitationUserResponseDefaultTypeInternal() {}
  union {
    AgreeInvitationUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgreeInvitationUserResponseDefaultTypeInternal _AgreeInvitationUserResponse_default_instance_;
constexpr Rol::Rol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , project_id_(0u)
  , organization_id_(0u)
  , is_admin_(false){}
struct RolDefaultTypeInternal {
  constexpr RolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RolDefaultTypeInternal() {}
  union {
    Rol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RolDefaultTypeInternal _Rol_default_instance_;
constexpr CreateRoleRequest::CreateRoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_ids_()
  , _permission_ids_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_permission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(0u)
  , organization_id_(0u){}
struct CreateRoleRequestDefaultTypeInternal {
  constexpr CreateRoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRoleRequestDefaultTypeInternal() {}
  union {
    CreateRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRoleRequestDefaultTypeInternal _CreateRoleRequest_default_instance_;
constexpr UpdateRoleRequest::UpdateRoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rol_(nullptr)
  , rol_id_(0u){}
struct UpdateRoleRequestDefaultTypeInternal {
  constexpr UpdateRoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRoleRequestDefaultTypeInternal() {}
  union {
    UpdateRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRoleRequestDefaultTypeInternal _UpdateRoleRequest_default_instance_;
constexpr GetOneRoleRequest::GetOneRoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rol_id_(0u){}
struct GetOneRoleRequestDefaultTypeInternal {
  constexpr GetOneRoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneRoleRequestDefaultTypeInternal() {}
  union {
    GetOneRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneRoleRequestDefaultTypeInternal _GetOneRoleRequest_default_instance_;
constexpr GetOneRoleResponse::GetOneRoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , organization_id_(0u)
  , project_id_(0u)
  , is_admin_(false){}
struct GetOneRoleResponseDefaultTypeInternal {
  constexpr GetOneRoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneRoleResponseDefaultTypeInternal() {}
  union {
    GetOneRoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneRoleResponseDefaultTypeInternal _GetOneRoleResponse_default_instance_;
constexpr DeleteRoleRequest::DeleteRoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rol_id_(0u){}
struct DeleteRoleRequestDefaultTypeInternal {
  constexpr DeleteRoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRoleRequestDefaultTypeInternal() {}
  union {
    DeleteRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRoleRequestDefaultTypeInternal _DeleteRoleRequest_default_instance_;
constexpr ListRolesRequest::ListRolesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_id_(0u)
  , organization_id_(0u){}
struct ListRolesRequestDefaultTypeInternal {
  constexpr ListRolesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRolesRequestDefaultTypeInternal() {}
  union {
    ListRolesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRolesRequestDefaultTypeInternal _ListRolesRequest_default_instance_;
constexpr ListRolesResponse::ListRolesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_(){}
struct ListRolesResponseDefaultTypeInternal {
  constexpr ListRolesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRolesResponseDefaultTypeInternal() {}
  union {
    ListRolesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRolesResponseDefaultTypeInternal _ListRolesResponse_default_instance_;
constexpr CreateRoleResponse::CreateRoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CreateRoleResponseDefaultTypeInternal {
  constexpr CreateRoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRoleResponseDefaultTypeInternal() {}
  union {
    CreateRoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRoleResponseDefaultTypeInternal _CreateRoleResponse_default_instance_;
constexpr UpdateRoleResponse::UpdateRoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateRoleResponseDefaultTypeInternal {
  constexpr UpdateRoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRoleResponseDefaultTypeInternal() {}
  union {
    UpdateRoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRoleResponseDefaultTypeInternal _UpdateRoleResponse_default_instance_;
constexpr DeleteRoleResponse::DeleteRoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteRoleResponseDefaultTypeInternal {
  constexpr DeleteRoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRoleResponseDefaultTypeInternal() {}
  union {
    DeleteRoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRoleResponseDefaultTypeInternal _DeleteRoleResponse_default_instance_;
constexpr Project::Project(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , organization_id_(0u){}
struct ProjectDefaultTypeInternal {
  constexpr ProjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectDefaultTypeInternal() {}
  union {
    Project _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectDefaultTypeInternal _Project_default_instance_;
constexpr CreateProjectRequest::CreateProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(0u){}
struct CreateProjectRequestDefaultTypeInternal {
  constexpr CreateProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProjectRequestDefaultTypeInternal() {}
  union {
    CreateProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
constexpr GetOneProjectRequest::GetOneProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct GetOneProjectRequestDefaultTypeInternal {
  constexpr GetOneProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneProjectRequestDefaultTypeInternal() {}
  union {
    GetOneProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneProjectRequestDefaultTypeInternal _GetOneProjectRequest_default_instance_;
constexpr DeleteProjectRequest::DeleteProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct DeleteProjectRequestDefaultTypeInternal {
  constexpr DeleteProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteProjectRequestDefaultTypeInternal() {}
  union {
    DeleteProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteProjectRequestDefaultTypeInternal _DeleteProjectRequest_default_instance_;
constexpr ListProjectRequest::ListProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(0u){}
struct ListProjectRequestDefaultTypeInternal {
  constexpr ListProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProjectRequestDefaultTypeInternal() {}
  union {
    ListProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProjectRequestDefaultTypeInternal _ListProjectRequest_default_instance_;
constexpr UpdateProjectRequest::UpdateProjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(nullptr)
  , id_(0){}
struct UpdateProjectRequestDefaultTypeInternal {
  constexpr UpdateProjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProjectRequestDefaultTypeInternal() {}
  union {
    UpdateProjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;
constexpr MenberRol::MenberRol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , is_admin_(false){}
struct MenberRolDefaultTypeInternal {
  constexpr MenberRolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MenberRolDefaultTypeInternal() {}
  union {
    MenberRol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MenberRolDefaultTypeInternal _MenberRol_default_instance_;
constexpr CreateProjectResponse::CreateProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CreateProjectResponseDefaultTypeInternal {
  constexpr CreateProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProjectResponseDefaultTypeInternal() {}
  union {
    CreateProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProjectResponseDefaultTypeInternal _CreateProjectResponse_default_instance_;
constexpr UpdateProjectResponse::UpdateProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateProjectResponseDefaultTypeInternal {
  constexpr UpdateProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProjectResponseDefaultTypeInternal() {}
  union {
    UpdateProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProjectResponseDefaultTypeInternal _UpdateProjectResponse_default_instance_;
constexpr DeleteProjectResponse::DeleteProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteProjectResponseDefaultTypeInternal {
  constexpr DeleteProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteProjectResponseDefaultTypeInternal() {}
  union {
    DeleteProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteProjectResponseDefaultTypeInternal _DeleteProjectResponse_default_instance_;
constexpr GetOneProjectResponse::GetOneProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(nullptr)
  , id_(0)
  , organization_id_(0u){}
struct GetOneProjectResponseDefaultTypeInternal {
  constexpr GetOneProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneProjectResponseDefaultTypeInternal() {}
  union {
    GetOneProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneProjectResponseDefaultTypeInternal _GetOneProjectResponse_default_instance_;
constexpr ListProjectResponse::ListProjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_(){}
struct ListProjectResponseDefaultTypeInternal {
  constexpr ListProjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProjectResponseDefaultTypeInternal() {}
  union {
    ListProjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProjectResponseDefaultTypeInternal _ListProjectResponse_default_instance_;
constexpr ListProjectPaginationRequest::ListProjectPaginationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , limit_(0){}
struct ListProjectPaginationRequestDefaultTypeInternal {
  constexpr ListProjectPaginationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProjectPaginationRequestDefaultTypeInternal() {}
  union {
    ListProjectPaginationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProjectPaginationRequestDefaultTypeInternal _ListProjectPaginationRequest_default_instance_;
constexpr ListProjectPaginationResponse::ListProjectPaginationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_()
  , count_(int64_t{0}){}
struct ListProjectPaginationResponseDefaultTypeInternal {
  constexpr ListProjectPaginationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProjectPaginationResponseDefaultTypeInternal() {}
  union {
    ListProjectPaginationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProjectPaginationResponseDefaultTypeInternal _ListProjectPaginationResponse_default_instance_;
constexpr Permission::Permission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , full_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct PermissionDefaultTypeInternal {
  constexpr PermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PermissionDefaultTypeInternal() {}
  union {
    Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PermissionDefaultTypeInternal _Permission_default_instance_;
constexpr GroupPermission::GroupPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GroupPermissionDefaultTypeInternal {
  constexpr GroupPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupPermissionDefaultTypeInternal() {}
  union {
    GroupPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupPermissionDefaultTypeInternal _GroupPermission_default_instance_;
constexpr CategoryPermission::CategoryPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_permissions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CategoryPermissionDefaultTypeInternal {
  constexpr CategoryPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryPermissionDefaultTypeInternal() {}
  union {
    CategoryPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryPermissionDefaultTypeInternal _CategoryPermission_default_instance_;
constexpr ListPermissionResponse::ListPermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : categories_permissions_(){}
struct ListPermissionResponseDefaultTypeInternal {
  constexpr ListPermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPermissionResponseDefaultTypeInternal() {}
  union {
    ListPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPermissionResponseDefaultTypeInternal _ListPermissionResponse_default_instance_;
constexpr AssignPermissionRequest::AssignPermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , permission_id_(0u){}
struct AssignPermissionRequestDefaultTypeInternal {
  constexpr AssignPermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssignPermissionRequestDefaultTypeInternal() {}
  union {
    AssignPermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssignPermissionRequestDefaultTypeInternal _AssignPermissionRequest_default_instance_;
constexpr ListPermissionRequest::ListPermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListPermissionRequestDefaultTypeInternal {
  constexpr ListPermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPermissionRequestDefaultTypeInternal() {}
  union {
    ListPermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPermissionRequestDefaultTypeInternal _ListPermissionRequest_default_instance_;
constexpr CreatePermissionRequest::CreatePermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , category_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreatePermissionRequestDefaultTypeInternal {
  constexpr CreatePermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreatePermissionRequestDefaultTypeInternal() {}
  union {
    CreatePermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreatePermissionRequestDefaultTypeInternal _CreatePermissionRequest_default_instance_;
constexpr UpdatePermissionRequest::UpdatePermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permission_id_(0u){}
struct UpdatePermissionRequestDefaultTypeInternal {
  constexpr UpdatePermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatePermissionRequestDefaultTypeInternal() {}
  union {
    UpdatePermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatePermissionRequestDefaultTypeInternal _UpdatePermissionRequest_default_instance_;
constexpr GetOnePermissionRequest::GetOnePermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_id_(0u){}
struct GetOnePermissionRequestDefaultTypeInternal {
  constexpr GetOnePermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOnePermissionRequestDefaultTypeInternal() {}
  union {
    GetOnePermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOnePermissionRequestDefaultTypeInternal _GetOnePermissionRequest_default_instance_;
constexpr GetOnePermissionResponse::GetOnePermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct GetOnePermissionResponseDefaultTypeInternal {
  constexpr GetOnePermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOnePermissionResponseDefaultTypeInternal() {}
  union {
    GetOnePermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOnePermissionResponseDefaultTypeInternal _GetOnePermissionResponse_default_instance_;
constexpr DeletePermissionRequest::DeletePermissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_id_(0u){}
struct DeletePermissionRequestDefaultTypeInternal {
  constexpr DeletePermissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeletePermissionRequestDefaultTypeInternal() {}
  union {
    DeletePermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeletePermissionRequestDefaultTypeInternal _DeletePermissionRequest_default_instance_;
constexpr UpdatePermissionResponse::UpdatePermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdatePermissionResponseDefaultTypeInternal {
  constexpr UpdatePermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatePermissionResponseDefaultTypeInternal() {}
  union {
    UpdatePermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatePermissionResponseDefaultTypeInternal _UpdatePermissionResponse_default_instance_;
constexpr DeletePermissionResponse::DeletePermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeletePermissionResponseDefaultTypeInternal {
  constexpr DeletePermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeletePermissionResponseDefaultTypeInternal() {}
  union {
    DeletePermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeletePermissionResponseDefaultTypeInternal _DeletePermissionResponse_default_instance_;
constexpr CreatePermissionResponse::CreatePermissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreatePermissionResponseDefaultTypeInternal {
  constexpr CreatePermissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreatePermissionResponseDefaultTypeInternal() {}
  union {
    CreatePermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreatePermissionResponseDefaultTypeInternal _CreatePermissionResponse_default_instance_;
constexpr Member::Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , is_active_(false){}
struct MemberDefaultTypeInternal {
  constexpr MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemberDefaultTypeInternal() {}
  union {
    Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemberDefaultTypeInternal _Member_default_instance_;
constexpr ProjectOrganization::ProjectOrganization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct ProjectOrganizationDefaultTypeInternal {
  constexpr ProjectOrganizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectOrganizationDefaultTypeInternal() {}
  union {
    ProjectOrganization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectOrganizationDefaultTypeInternal _ProjectOrganization_default_instance_;
constexpr Organization::Organization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(nullptr)
  , id_(0u){}
struct OrganizationDefaultTypeInternal {
  constexpr OrganizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrganizationDefaultTypeInternal() {}
  union {
    Organization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrganizationDefaultTypeInternal _Organization_default_instance_;
constexpr CreateOrganizationRequest::CreateOrganizationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateOrganizationRequestDefaultTypeInternal {
  constexpr CreateOrganizationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateOrganizationRequestDefaultTypeInternal() {}
  union {
    CreateOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateOrganizationRequestDefaultTypeInternal _CreateOrganizationRequest_default_instance_;
constexpr ListOrganizationRequest::ListOrganizationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListOrganizationRequestDefaultTypeInternal {
  constexpr ListOrganizationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListOrganizationRequestDefaultTypeInternal() {}
  union {
    ListOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListOrganizationRequestDefaultTypeInternal _ListOrganizationRequest_default_instance_;
constexpr GetOneOrganizationRequest::GetOneOrganizationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(0u){}
struct GetOneOrganizationRequestDefaultTypeInternal {
  constexpr GetOneOrganizationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneOrganizationRequestDefaultTypeInternal() {}
  union {
    GetOneOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneOrganizationRequestDefaultTypeInternal _GetOneOrganizationRequest_default_instance_;
constexpr UpdateOrganizationRequest::UpdateOrganizationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(0u){}
struct UpdateOrganizationRequestDefaultTypeInternal {
  constexpr UpdateOrganizationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateOrganizationRequestDefaultTypeInternal() {}
  union {
    UpdateOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateOrganizationRequestDefaultTypeInternal _UpdateOrganizationRequest_default_instance_;
constexpr DeleteOrganizationRequest::DeleteOrganizationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(0u){}
struct DeleteOrganizationRequestDefaultTypeInternal {
  constexpr DeleteOrganizationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteOrganizationRequestDefaultTypeInternal() {}
  union {
    DeleteOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteOrganizationRequestDefaultTypeInternal _DeleteOrganizationRequest_default_instance_;
constexpr GetOneOrganizationResponse::GetOneOrganizationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_()
  , menbers_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(nullptr)
  , id_(0u){}
struct GetOneOrganizationResponseDefaultTypeInternal {
  constexpr GetOneOrganizationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneOrganizationResponseDefaultTypeInternal() {}
  union {
    GetOneOrganizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneOrganizationResponseDefaultTypeInternal _GetOneOrganizationResponse_default_instance_;
constexpr ListOrganizationResponse::ListOrganizationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organizations_(){}
struct ListOrganizationResponseDefaultTypeInternal {
  constexpr ListOrganizationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListOrganizationResponseDefaultTypeInternal() {}
  union {
    ListOrganizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListOrganizationResponseDefaultTypeInternal _ListOrganizationResponse_default_instance_;
constexpr CreateOrganizationResponse::CreateOrganizationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_id_organization_(0u)
  , id_(0u){}
struct CreateOrganizationResponseDefaultTypeInternal {
  constexpr CreateOrganizationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateOrganizationResponseDefaultTypeInternal() {}
  union {
    CreateOrganizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateOrganizationResponseDefaultTypeInternal _CreateOrganizationResponse_default_instance_;
constexpr UpdateOrganizationResponse::UpdateOrganizationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateOrganizationResponseDefaultTypeInternal {
  constexpr UpdateOrganizationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateOrganizationResponseDefaultTypeInternal() {}
  union {
    UpdateOrganizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateOrganizationResponseDefaultTypeInternal _UpdateOrganizationResponse_default_instance_;
constexpr DeleteOrganizationResponse::DeleteOrganizationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteOrganizationResponseDefaultTypeInternal {
  constexpr DeleteOrganizationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteOrganizationResponseDefaultTypeInternal() {}
  union {
    DeleteOrganizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteOrganizationResponseDefaultTypeInternal _DeleteOrganizationResponse_default_instance_;
constexpr GetListUserDexRequest::GetListUserDexRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetListUserDexRequestDefaultTypeInternal {
  constexpr GetListUserDexRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetListUserDexRequestDefaultTypeInternal() {}
  union {
    GetListUserDexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetListUserDexRequestDefaultTypeInternal _GetListUserDexRequest_default_instance_;
constexpr GetListUserDexResponse::GetListUserDexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_dex_(){}
struct GetListUserDexResponseDefaultTypeInternal {
  constexpr GetListUserDexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetListUserDexResponseDefaultTypeInternal() {}
  union {
    GetListUserDexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetListUserDexResponseDefaultTypeInternal _GetListUserDexResponse_default_instance_;
constexpr GetOneUserDexRequest::GetOneUserDexRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(nullptr){}
struct GetOneUserDexRequestDefaultTypeInternal {
  constexpr GetOneUserDexRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneUserDexRequestDefaultTypeInternal() {}
  union {
    GetOneUserDexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneUserDexRequestDefaultTypeInternal _GetOneUserDexRequest_default_instance_;
constexpr GetOneUserDexResponse::GetOneUserDexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , permissions_()
  , organizations_()
  , projects_()
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , city_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zip_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emoji_country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , is_active_(false)
  , is_super_user_(false){}
struct GetOneUserDexResponseDefaultTypeInternal {
  constexpr GetOneUserDexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneUserDexResponseDefaultTypeInternal() {}
  union {
    GetOneUserDexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneUserDexResponseDefaultTypeInternal _GetOneUserDexResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace accounts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[104];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_accounts_2fv1alpha1_2faccounts_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_accounts_2fv1alpha1_2faccounts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_accounts_2fv1alpha1_2faccounts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetRolesByUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetRolesByUserRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetRolesByUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetRolesByUserResponse, organization_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetRolesByUserResponse, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyRequest, roles_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyRequest, permissions_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKey, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKey, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKey, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKey, rol_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKey, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyResponse, api_key_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyResponse, access_point_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateApiKeyResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyResponse, api_key_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyResponse, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyResponse, roles_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneApiKeyResponse, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListApiKeyRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKeyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKeyList, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKeyList, api_key_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKeyList, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ApiKeyList, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListApiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListApiKeyResponse, api_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyRequest, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyRequest, roles_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyRequest, permissions_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyRequest, is_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyResponse, api_key_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateApiKeyResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteApiKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteApiKeyRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteApiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteApiKeyResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteApiKeyResponse, api_key_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteApiKeyResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::City, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::City, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::City, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::City, latitude_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::City, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::State, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::State, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::State, cities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CountryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CountryList, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CountryList, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CountryList, code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CountryList, phone_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CountryList, emoji_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListCountriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListCountriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListCountriesResponse, countries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryRequest, country_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryResponse, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryResponse, code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryResponse, phone_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryResponse, emoji_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneCountryResponse, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendVerificationEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendVerificationEmailRequest, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendVerificationEmailRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendVerificationEmailRequest, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendVerificationEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendVerificationEmailResponse, html_result_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendVerificationEmailResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::VerifyEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::VerifyEmailRequest, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::VerifyEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::VerifyEmailResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::VerifyEmailResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, get_organization_from_project_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, permission_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, user_id_dex_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, user_id_admin_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, type_permission_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, roles_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserRequest, api_key_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserResponse, is_exists_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserResponse, error_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserResponse, is_admin_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CheckUserResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UsersDex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UsersDex, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UsersDex, provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateUserResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateUserResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteUserResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteUserResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserRequest, project_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, first_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, last_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, is_active_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, roles_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, permissions_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, organizations_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, phone_number_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, country_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, city_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, zip_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, address_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, state_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, emoji_country_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateUserRequest, invitation_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateUserRequest, auth_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateUserRequest, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteUserRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteUserRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, first_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, last_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, is_active_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UserList, is_super_user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserRequest, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, first_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, last_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, is_active_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, created_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, updated_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, roles_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, permissions_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, is_super_user_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, organizations_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, projects_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, phone_number_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, country_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, city_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, zip_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, address_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, state_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserResponse, emoji_country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserPaginationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserPaginationRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserPaginationRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserPaginationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserPaginationResponse, count_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListUserPaginationResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserRequest, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserRequest, user_id_admin_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserRequest, roles_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserRequest, permissions_ids_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserResponse, organization_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserResponse, projects_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserResponse, invitation_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserResponse, result_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserResponse, roles_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::SendInvitationUserResponse, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserRequest, invitation_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserRequest, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserResponse, organization_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserResponse, projects_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserResponse, result_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserResponse, roles_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetInvitationUserResponse, permissions_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest, invitation_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest, guest_user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest, invitation_response_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserRequest, projects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AgreeInvitationUserResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Rol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Rol, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Rol, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Rol, project_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Rol, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Rol, permissions_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Rol, is_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleRequest, description_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleRequest, type_permission_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleRequest, permission_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateRoleRequest, rol_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateRoleRequest, rol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleRequest, rol_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleResponse, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleResponse, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleResponse, project_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleResponse, permissions_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneRoleResponse, is_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteRoleRequest, rol_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListRolesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListRolesRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListRolesRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListRolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListRolesResponse, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleResponse, error_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateRoleResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateRoleResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateRoleResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteRoleResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteRoleResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, image_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, description_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, created_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, updated_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Project, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectRequest, description_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectRequest, image_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteProjectRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateProjectRequest, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateProjectRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::MenberRol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::MenberRol, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::MenberRol, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::MenberRol, is_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectResponse, error_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateProjectResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateProjectResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateProjectResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteProjectResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteProjectResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, image_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, description_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, created_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, updated_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, members_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneProjectResponse, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectResponse, projects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectPaginationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectPaginationRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectPaginationRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectPaginationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectPaginationResponse, projects_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListProjectPaginationResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Permission, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Permission, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Permission, action_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Permission, type_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Permission, full_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GroupPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GroupPermission, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GroupPermission, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CategoryPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CategoryPermission, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CategoryPermission, type_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CategoryPermission, group_permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListPermissionResponse, categories_permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AssignPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AssignPermissionRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::AssignPermissionRequest, permission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionRequest, type_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionRequest, category_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdatePermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdatePermissionRequest, permission_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdatePermissionRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdatePermissionRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOnePermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOnePermissionRequest, permission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOnePermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOnePermissionResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOnePermissionResponse, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOnePermissionResponse, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeletePermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeletePermissionRequest, permission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdatePermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdatePermissionResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdatePermissionResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeletePermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeletePermissionResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeletePermissionResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreatePermissionResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Member, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Member, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Member, first_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Member, last_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Member, is_active_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Member, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ProjectOrganization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ProjectOrganization, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ProjectOrganization, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ProjectOrganization, image_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ProjectOrganization, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Organization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Organization, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Organization, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Organization, image_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Organization, description_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Organization, owner_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::Organization, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationRequest, image_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationRequest, description_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteOrganizationRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, image_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, projects_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, menbers_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, description_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneOrganizationResponse, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListOrganizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::ListOrganizationResponse, organizations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationResponse, role_id_organization_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationResponse, error_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::CreateOrganizationResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::UpdateOrganizationResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteOrganizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteOrganizationResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::DeleteOrganizationResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetListUserDexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetListUserDexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetListUserDexResponse, users_dex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, first_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, last_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, is_active_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, created_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, updated_at_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, roles_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, permissions_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, is_super_user_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, organizations_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, projects_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, phone_number_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, country_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, city_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, zip_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, address_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, state_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::GetOneUserDexResponse, emoji_country_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::accounts::v1alpha1::GetRolesByUserRequest)},
  { 6, -1, sizeof(::accounts::v1alpha1::GetRolesByUserResponse)},
  { 13, -1, sizeof(::accounts::v1alpha1::CreateApiKeyRequest)},
  { 22, -1, sizeof(::accounts::v1alpha1::ApiKey)},
  { 32, -1, sizeof(::accounts::v1alpha1::CreateApiKeyResponse)},
  { 41, -1, sizeof(::accounts::v1alpha1::GetOneApiKeyRequest)},
  { 47, -1, sizeof(::accounts::v1alpha1::GetOneApiKeyResponse)},
  { 58, -1, sizeof(::accounts::v1alpha1::ListApiKeyRequest)},
  { 64, -1, sizeof(::accounts::v1alpha1::ApiKeyList)},
  { 73, -1, sizeof(::accounts::v1alpha1::ListApiKeyResponse)},
  { 79, -1, sizeof(::accounts::v1alpha1::UpdateApiKeyRequest)},
  { 89, -1, sizeof(::accounts::v1alpha1::UpdateApiKeyResponse)},
  { 97, -1, sizeof(::accounts::v1alpha1::DeleteApiKeyRequest)},
  { 103, -1, sizeof(::accounts::v1alpha1::DeleteApiKeyResponse)},
  { 111, -1, sizeof(::accounts::v1alpha1::City)},
  { 120, -1, sizeof(::accounts::v1alpha1::State)},
  { 128, -1, sizeof(::accounts::v1alpha1::CountryList)},
  { 138, -1, sizeof(::accounts::v1alpha1::ListCountriesRequest)},
  { 143, -1, sizeof(::accounts::v1alpha1::ListCountriesResponse)},
  { 149, -1, sizeof(::accounts::v1alpha1::GetOneCountryRequest)},
  { 156, -1, sizeof(::accounts::v1alpha1::GetOneCountryResponse)},
  { 167, -1, sizeof(::accounts::v1alpha1::SendVerificationEmailRequest)},
  { 175, -1, sizeof(::accounts::v1alpha1::SendVerificationEmailResponse)},
  { 182, -1, sizeof(::accounts::v1alpha1::VerifyEmailRequest)},
  { 188, -1, sizeof(::accounts::v1alpha1::VerifyEmailResponse)},
  { 195, -1, sizeof(::accounts::v1alpha1::CheckUserRequest)},
  { 210, -1, sizeof(::accounts::v1alpha1::CheckUserResponse)},
  { 219, -1, sizeof(::accounts::v1alpha1::UsersDex)},
  { 226, -1, sizeof(::accounts::v1alpha1::CreateUserResponse)},
  { 233, -1, sizeof(::accounts::v1alpha1::UpdateUserResponse)},
  { 240, -1, sizeof(::accounts::v1alpha1::DeleteUserResponse)},
  { 247, -1, sizeof(::accounts::v1alpha1::ListUserRequest)},
  { 254, -1, sizeof(::accounts::v1alpha1::CreateUserRequest)},
  { 275, -1, sizeof(::accounts::v1alpha1::UpdateUserRequest)},
  { 282, -1, sizeof(::accounts::v1alpha1::DeleteUserRequest)},
  { 289, -1, sizeof(::accounts::v1alpha1::UserList)},
  { 301, -1, sizeof(::accounts::v1alpha1::GetOneUserRequest)},
  { 308, -1, sizeof(::accounts::v1alpha1::GetOneUserResponse)},
  { 333, -1, sizeof(::accounts::v1alpha1::ListUserResponse)},
  { 339, -1, sizeof(::accounts::v1alpha1::ListUserPaginationRequest)},
  { 346, -1, sizeof(::accounts::v1alpha1::ListUserPaginationResponse)},
  { 353, -1, sizeof(::accounts::v1alpha1::SendInvitationUserRequest)},
  { 364, -1, sizeof(::accounts::v1alpha1::SendInvitationUserResponse)},
  { 375, -1, sizeof(::accounts::v1alpha1::GetInvitationUserRequest)},
  { 382, -1, sizeof(::accounts::v1alpha1::GetInvitationUserResponse)},
  { 392, 399, sizeof(::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse)},
  { 401, -1, sizeof(::accounts::v1alpha1::AgreeInvitationUserRequest)},
  { 411, -1, sizeof(::accounts::v1alpha1::AgreeInvitationUserResponse)},
  { 417, -1, sizeof(::accounts::v1alpha1::Rol)},
  { 428, -1, sizeof(::accounts::v1alpha1::CreateRoleRequest)},
  { 439, -1, sizeof(::accounts::v1alpha1::UpdateRoleRequest)},
  { 446, -1, sizeof(::accounts::v1alpha1::GetOneRoleRequest)},
  { 452, -1, sizeof(::accounts::v1alpha1::GetOneRoleResponse)},
  { 463, -1, sizeof(::accounts::v1alpha1::DeleteRoleRequest)},
  { 469, -1, sizeof(::accounts::v1alpha1::ListRolesRequest)},
  { 476, -1, sizeof(::accounts::v1alpha1::ListRolesResponse)},
  { 482, -1, sizeof(::accounts::v1alpha1::CreateRoleResponse)},
  { 490, -1, sizeof(::accounts::v1alpha1::UpdateRoleResponse)},
  { 497, -1, sizeof(::accounts::v1alpha1::DeleteRoleResponse)},
  { 504, -1, sizeof(::accounts::v1alpha1::Project)},
  { 517, -1, sizeof(::accounts::v1alpha1::CreateProjectRequest)},
  { 527, -1, sizeof(::accounts::v1alpha1::GetOneProjectRequest)},
  { 533, -1, sizeof(::accounts::v1alpha1::DeleteProjectRequest)},
  { 539, -1, sizeof(::accounts::v1alpha1::ListProjectRequest)},
  { 545, -1, sizeof(::accounts::v1alpha1::UpdateProjectRequest)},
  { 552, -1, sizeof(::accounts::v1alpha1::MenberRol)},
  { 560, -1, sizeof(::accounts::v1alpha1::CreateProjectResponse)},
  { 568, -1, sizeof(::accounts::v1alpha1::UpdateProjectResponse)},
  { 575, -1, sizeof(::accounts::v1alpha1::DeleteProjectResponse)},
  { 582, -1, sizeof(::accounts::v1alpha1::GetOneProjectResponse)},
  { 596, -1, sizeof(::accounts::v1alpha1::ListProjectResponse)},
  { 602, -1, sizeof(::accounts::v1alpha1::ListProjectPaginationRequest)},
  { 609, -1, sizeof(::accounts::v1alpha1::ListProjectPaginationResponse)},
  { 616, -1, sizeof(::accounts::v1alpha1::Permission)},
  { 626, -1, sizeof(::accounts::v1alpha1::GroupPermission)},
  { 633, -1, sizeof(::accounts::v1alpha1::CategoryPermission)},
  { 641, -1, sizeof(::accounts::v1alpha1::ListPermissionResponse)},
  { 647, -1, sizeof(::accounts::v1alpha1::AssignPermissionRequest)},
  { 654, -1, sizeof(::accounts::v1alpha1::ListPermissionRequest)},
  { 659, -1, sizeof(::accounts::v1alpha1::CreatePermissionRequest)},
  { 668, -1, sizeof(::accounts::v1alpha1::UpdatePermissionRequest)},
  { 676, -1, sizeof(::accounts::v1alpha1::GetOnePermissionRequest)},
  { 682, -1, sizeof(::accounts::v1alpha1::GetOnePermissionResponse)},
  { 690, -1, sizeof(::accounts::v1alpha1::DeletePermissionRequest)},
  { 696, -1, sizeof(::accounts::v1alpha1::UpdatePermissionResponse)},
  { 703, -1, sizeof(::accounts::v1alpha1::DeletePermissionResponse)},
  { 710, -1, sizeof(::accounts::v1alpha1::CreatePermissionResponse)},
  { 717, -1, sizeof(::accounts::v1alpha1::Member)},
  { 728, -1, sizeof(::accounts::v1alpha1::ProjectOrganization)},
  { 737, -1, sizeof(::accounts::v1alpha1::Organization)},
  { 748, -1, sizeof(::accounts::v1alpha1::CreateOrganizationRequest)},
  { 757, -1, sizeof(::accounts::v1alpha1::ListOrganizationRequest)},
  { 762, -1, sizeof(::accounts::v1alpha1::GetOneOrganizationRequest)},
  { 768, -1, sizeof(::accounts::v1alpha1::UpdateOrganizationRequest)},
  { 777, -1, sizeof(::accounts::v1alpha1::DeleteOrganizationRequest)},
  { 783, -1, sizeof(::accounts::v1alpha1::GetOneOrganizationResponse)},
  { 795, -1, sizeof(::accounts::v1alpha1::ListOrganizationResponse)},
  { 801, -1, sizeof(::accounts::v1alpha1::CreateOrganizationResponse)},
  { 810, -1, sizeof(::accounts::v1alpha1::UpdateOrganizationResponse)},
  { 817, -1, sizeof(::accounts::v1alpha1::DeleteOrganizationResponse)},
  { 824, -1, sizeof(::accounts::v1alpha1::GetListUserDexRequest)},
  { 829, -1, sizeof(::accounts::v1alpha1::GetListUserDexResponse)},
  { 835, -1, sizeof(::accounts::v1alpha1::GetOneUserDexRequest)},
  { 842, -1, sizeof(::accounts::v1alpha1::GetOneUserDexResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetRolesByUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetRolesByUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateApiKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ApiKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateApiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneApiKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneApiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListApiKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ApiKeyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListApiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateApiKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateApiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteApiKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteApiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_City_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CountryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListCountriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListCountriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneCountryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneCountryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_SendVerificationEmailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_SendVerificationEmailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_VerifyEmailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_VerifyEmailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CheckUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CheckUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UsersDex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListUserPaginationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListUserPaginationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_SendInvitationUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_SendInvitationUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetInvitationUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetInvitationUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_AgreeInvitationUserRequest_ProjectsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_AgreeInvitationUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_AgreeInvitationUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_Rol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListRolesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListRolesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_Project_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_MenberRol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListProjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListProjectPaginationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListProjectPaginationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_Permission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GroupPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CategoryPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListPermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_AssignPermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListPermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreatePermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdatePermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOnePermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOnePermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeletePermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdatePermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeletePermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreatePermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ProjectOrganization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_Organization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateOrganizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListOrganizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneOrganizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateOrganizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteOrganizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneOrganizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_ListOrganizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_CreateOrganizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_UpdateOrganizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_DeleteOrganizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetListUserDexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetListUserDexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneUserDexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::_GetOneUserDexResponse_default_instance_),
};

const char descriptor_table_protodef_accounts_2fv1alpha1_2faccounts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n accounts/v1alpha1/accounts.proto\022\021acco"
  "unts.v1alpha1\"0\n\025GetRolesByUserRequest\022\027"
  "\n\007user_id\030\001 \001(\tR\006userId\"\223\001\n\026GetRolesByUs"
  "erResponse\022C\n\014organization\030\001 \003(\0132\037.accou"
  "nts.v1alpha1.OrganizationR\014organization\022"
  "4\n\007project\030\002 \003(\0132\032.accounts.v1alpha1.Pro"
  "jectR\007project\"\210\001\n\023CreateApiKeyRequest\022\022\n"
  "\004name\030\001 \001(\tR\004name\022\027\n\007user_id\030\002 \001(\tR\006user"
  "Id\022\033\n\troles_ids\030\003 \003(\rR\010rolesIds\022\'\n\017permi"
  "ssions_ids\030\004 \003(\rR\016permissionsIds\"\260\001\n\006Api"
  "Key\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022"
  "\027\n\007user_id\030\003 \001(\tR\006userId\022(\n\003rol\030\004 \003(\0132\026."
  "accounts.v1alpha1.RolR\003rol\022\?\n\013permission"
  "s\030\005 \003(\0132\035.accounts.v1alpha1.PermissionR\013"
  "permissions\"\177\n\024CreateApiKeyResponse\022\020\n\003m"
  "sg\030\001 \001(\tR\003msg\022\027\n\007api_key\030\002 \001(\tR\006apiKey\022&"
  "\n\017access_point_id\030\004 \001(\rR\raccessPointId\022\024"
  "\n\005error\030\005 \001(\tR\005error\"%\n\023GetOneApiKeyRequ"
  "est\022\016\n\002id\030\001 \001(\rR\002id\"\333\001\n\024GetOneApiKeyResp"
  "onse\022\016\n\002id\030\001 \001(\rR\002id\022\027\n\007api_key\030\002 \001(\tR\006a"
  "piKey\022\022\n\004name\030\003 \001(\tR\004name\022\027\n\007user_id\030\004 \001"
  "(\tR\006userId\022,\n\005roles\030\005 \003(\0132\026.accounts.v1a"
  "lpha1.RolR\005roles\022\?\n\013permissions\030\006 \003(\0132\035."
  "accounts.v1alpha1.PermissionR\013permission"
  "s\",\n\021ListApiKeyRequest\022\027\n\007user_id\030\001 \001(\tR"
  "\006userId\"b\n\nApiKeyList\022\016\n\002id\030\001 \001(\rR\002id\022\027\n"
  "\007api_key\030\002 \001(\tR\006apiKey\022\022\n\004name\030\003 \001(\tR\004na"
  "me\022\027\n\007user_id\030\004 \001(\tR\006userId\"N\n\022ListApiKe"
  "yResponse\0228\n\010api_keys\030\001 \003(\0132\035.accounts.v"
  "1alpha1.ApiKeyListR\007apiKeys\"\234\001\n\023UpdateAp"
  "iKeyRequest\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001("
  "\tR\004name\022\033\n\troles_ids\030\003 \003(\rR\010rolesIds\022\'\n\017"
  "permissions_ids\030\004 \003(\rR\016permissionsIds\022\033\n"
  "\tis_active\030\005 \001(\010R\010isActive\"W\n\024UpdateApiK"
  "eyResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\027\n\007api_key\030"
  "\002 \001(\tR\006apiKey\022\024\n\005error\030\003 \001(\tR\005error\"%\n\023D"
  "eleteApiKeyRequest\022\016\n\002id\030\001 \001(\rR\002id\"W\n\024De"
  "leteApiKeyResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\027\n\007"
  "api_key\030\002 \001(\tR\006apiKey\022\024\n\005error\030\003 \001(\tR\005er"
  "ror\"d\n\004City\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001("
  "\tR\004name\022\032\n\010latitude\030\003 \001(\tR\010latitude\022\034\n\tl"
  "ongitude\030\004 \001(\tR\tlongitude\"\\\n\005State\022\016\n\002id"
  "\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name\022/\n\006cities"
  "\030\003 \003(\0132\027.accounts.v1alpha1.CityR\006cities\""
  "z\n\013CountryList\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002"
  " \001(\tR\004name\022\022\n\004code\030\003 \001(\tR\004code\022\035\n\nphone_"
  "code\030\004 \001(\tR\tphoneCode\022\024\n\005emoji\030\005 \001(\tR\005em"
  "oji\"\026\n\024ListCountriesRequest\"U\n\025ListCount"
  "riesResponse\022<\n\tcountries\030\001 \003(\0132\036.accoun"
  "ts.v1alpha1.CountryListR\tcountries\"I\n\024Ge"
  "tOneCountryRequest\022\035\n\ncountry_id\030\001 \001(\rR\t"
  "countryId\022\022\n\004name\030\002 \001(\tR\004name\"\266\001\n\025GetOne"
  "CountryResponse\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030"
  "\002 \001(\tR\004name\022\022\n\004code\030\003 \001(\tR\004code\022\035\n\nphone"
  "_code\030\004 \001(\tR\tphoneCode\022\024\n\005emoji\030\005 \001(\tR\005e"
  "moji\0220\n\006states\030\006 \003(\0132\030.accounts.v1alpha1"
  ".StateR\006states\"Z\n\034SendVerificationEmailR"
  "equest\022\024\n\005email\030\001 \001(\tR\005email\022\022\n\004name\030\002 \001"
  "(\tR\004name\022\020\n\003url\030\003 \001(\tR\003url\"V\n\035SendVerifi"
  "cationEmailResponse\022\037\n\013html_result\030\001 \001(\t"
  "R\nhtmlResult\022\024\n\005error\030\002 \001(\tR\005error\"*\n\022Ve"
  "rifyEmailRequest\022\024\n\005token\030\001 \001(\tR\005token\"="
  "\n\023VerifyEmailResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022"
  "\024\n\005error\030\002 \001(\tR\005error\"\204\003\n\020CheckUserReque"
  "st\022\'\n\017organization_id\030\001 \001(\rR\016organizatio"
  "nId\022\035\n\nproject_id\030\002 \001(\rR\tprojectId\022A\n\035ge"
  "t_organization_from_project\030\003 \001(\rR\032getOr"
  "ganizationFromProject\022\036\n\npermission\030\004 \001("
  "\tR\npermission\022\036\n\013user_id_dex\030\005 \001(\tR\tuser"
  "IdDex\022\"\n\ruser_id_admin\030\006 \001(\tR\013userIdAdmi"
  "n\022\027\n\007user_id\030\007 \001(\rR\006userId\022\'\n\017type_permi"
  "ssion\030\t \001(\tR\016typePermission\022\033\n\troles_ids"
  "\030\n \003(\rR\010rolesIds\022\"\n\rapi_key_value\030\013 \001(\tR"
  "\013apiKeyValue\"s\n\021CheckUserResponse\022\033\n\tis_"
  "exists\030\001 \001(\010R\010isExists\022\024\n\005error\030\002 \001(\tR\005e"
  "rror\022\031\n\010is_admin\030\003 \001(\010R\007isAdmin\022\020\n\003msg\030\004"
  " \001(\tR\003msg\"\?\n\010UsersDex\022\027\n\007user_id\030\001 \001(\tR\006"
  "userId\022\032\n\010provider\030\002 \001(\tR\010provider\"<\n\022Cr"
  "eateUserResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\024\n\005er"
  "ror\030\002 \001(\tR\005error\"<\n\022UpdateUserResponse\022\020"
  "\n\003msg\030\001 \001(\tR\003msg\022\024\n\005error\030\002 \001(\tR\005error\"<"
  "\n\022DeleteUserResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\024"
  "\n\005error\030\002 \001(\tR\005error\"Y\n\017ListUserRequest\022"
  "\'\n\017organization_id\030\001 \001(\rR\016organizationId"
  "\022\035\n\nproject_id\030\002 \001(\rR\tprojectId\"\370\003\n\021Crea"
  "teUserRequest\022\027\n\007user_id\030\001 \001(\tR\006userId\022\035"
  "\n\nfirst_name\030\002 \001(\tR\tfirstName\022\033\n\tlast_na"
  "me\030\003 \001(\tR\010lastName\022\024\n\005email\030\004 \001(\tR\005email"
  "\022\033\n\tis_active\030\005 \001(\010R\010isActive\022\033\n\troles_i"
  "ds\030\006 \003(\rR\010rolesIds\022\'\n\017permissions_ids\030\007 "
  "\003(\rR\016permissionsIds\022+\n\021organizations_ids"
  "\030\010 \003(\rR\020organizationsIds\022!\n\014phone_number"
  "\030\t \001(\tR\013phoneNumber\022\030\n\007country\030\n \001(\tR\007co"
  "untry\022\022\n\004city\030\013 \001(\tR\004city\022\031\n\010zip_code\030\014 "
  "\001(\tR\007zipCode\022\030\n\007address\030\r \001(\tR\007address\022\024"
  "\n\005state\030\016 \001(\tR\005state\022#\n\remoji_country\030\017 "
  "\001(\tR\014emojiCountry\022\'\n\017invitation_code\030\020 \001"
  "(\tR\016invitationCode\"f\n\021UpdateUserRequest\022"
  "\027\n\007auth_id\030\001 \001(\rR\006authId\0228\n\004auth\030\002 \001(\0132$"
  ".accounts.v1alpha1.CreateUserRequestR\004au"
  "th\"U\n\021DeleteUserRequest\022\027\n\007user_id\030\001 \001(\r"
  "R\006userId\022\'\n\017organization_id\030\002 \001(\rR\016organ"
  "izationId\"\306\001\n\010UserList\022\016\n\002id\030\001 \001(\rR\002id\022\035"
  "\n\nfirst_name\030\002 \001(\tR\tfirstName\022\033\n\tlast_na"
  "me\030\003 \001(\tR\010lastName\022\024\n\005email\030\004 \001(\tR\005email"
  "\022\027\n\007user_id\030\005 \001(\tR\006userId\022\033\n\tis_active\030\006"
  " \001(\010R\010isActive\022\"\n\ris_super_user\030\007 \001(\010R\013i"
  "sSuperUser\"L\n\021GetOneUserRequest\022\016\n\002id\030\001 "
  "\001(\rR\002id\022\'\n\017organization_id\030\002 \001(\rR\016organi"
  "zationId\"\275\005\n\022GetOneUserResponse\022\016\n\002id\030\001 "
  "\001(\rR\002id\022\027\n\007user_id\030\002 \001(\tR\006userId\022\035\n\nfirs"
  "t_name\030\003 \001(\tR\tfirstName\022\033\n\tlast_name\030\004 \001"
  "(\tR\010lastName\022\024\n\005email\030\005 \001(\tR\005email\022\033\n\tis"
  "_active\030\006 \001(\010R\010isActive\022\035\n\ncreated_at\030\007 "
  "\001(\tR\tcreatedAt\022\035\n\nupdated_at\030\010 \001(\tR\tupda"
  "tedAt\022,\n\005roles\030\t \003(\0132\026.accounts.v1alpha1"
  ".RolR\005roles\022\?\n\013permissions\030\n \003(\0132\035.accou"
  "nts.v1alpha1.PermissionR\013permissions\022\"\n\r"
  "is_super_user\030\013 \001(\010R\013isSuperUser\022E\n\rorga"
  "nizations\030\014 \003(\0132\037.accounts.v1alpha1.Orga"
  "nizationR\rorganizations\0226\n\010projects\030\r \003("
  "\0132\032.accounts.v1alpha1.ProjectR\010projects\022"
  "!\n\014phone_number\030\016 \001(\tR\013phoneNumber\022\030\n\007co"
  "untry\030\017 \001(\tR\007country\022\022\n\004city\030\020 \001(\tR\004city"
  "\022\031\n\010zip_code\030\021 \001(\tR\007zipCode\022\030\n\007address\030\022"
  " \001(\tR\007address\022\024\n\005state\030\023 \001(\tR\005state\022#\n\re"
  "moji_country\030\024 \001(\tR\014emojiCountry\"E\n\020List"
  "UserResponse\0221\n\005users\030\001 \003(\0132\033.accounts.v"
  "1alpha1.UserListR\005users\"I\n\031ListUserPagin"
  "ationRequest\022\026\n\006offset\030\001 \001(\005R\006offset\022\024\n\005"
  "limit\030\002 \001(\005R\005limit\"e\n\032ListUserPagination"
  "Response\022\024\n\005count\030\001 \001(\003R\005count\0221\n\005users\030"
  "\002 \003(\0132\033.accounts.v1alpha1.UserListR\005user"
  "s\"\330\001\n\031SendInvitationUserRequest\022\022\n\004name\030"
  "\001 \001(\tR\004name\022\024\n\005email\030\002 \001(\tR\005email\022\"\n\ruse"
  "r_id_admin\030\004 \001(\tR\013userIdAdmin\022\033\n\troles_i"
  "ds\030\005 \003(\rR\010rolesIds\022\'\n\017permissions_ids\030\006 "
  "\003(\rR\016permissionsIds\022\'\n\017organization_id\030\007"
  " \001(\rR\016organizationId\"\311\002\n\032SendInvitationU"
  "serResponse\022C\n\014organization\030\001 \001(\0132\037.acco"
  "unts.v1alpha1.OrganizationR\014organization"
  "\0226\n\010projects\030\002 \003(\0132\032.accounts.v1alpha1.P"
  "rojectR\010projects\022\'\n\017invitation_code\030\003 \001("
  "\tR\016invitationCode\022\026\n\006result\030\004 \001(\tR\006resul"
  "t\022,\n\005roles\030\005 \003(\0132\026.accounts.v1alpha1.Rol"
  "R\005roles\022\?\n\013permissions\030\006 \003(\0132\035.accounts."
  "v1alpha1.PermissionR\013permissions\"Y\n\030GetI"
  "nvitationUserRequest\022\'\n\017invitation_code\030"
  "\001 \001(\tR\016invitationCode\022\024\n\005email\030\002 \001(\tR\005em"
  "ail\"\237\002\n\031GetInvitationUserResponse\022C\n\014org"
  "anization\030\001 \001(\0132\037.accounts.v1alpha1.Orga"
  "nizationR\014organization\0226\n\010projects\030\002 \003(\013"
  "2\032.accounts.v1alpha1.ProjectR\010projects\022\026"
  "\n\006result\030\003 \001(\tR\006result\022,\n\005roles\030\004 \003(\0132\026."
  "accounts.v1alpha1.RolR\005roles\022\?\n\013permissi"
  "ons\030\005 \003(\0132\035.accounts.v1alpha1.Permission"
  "R\013permissions\"\355\002\n\032AgreeInvitationUserReq"
  "uest\022\'\n\017invitation_code\030\001 \001(\tR\016invitatio"
  "nCode\022\024\n\005email\030\002 \001(\tR\005email\022\"\n\rguest_use"
  "r_id\030\003 \001(\tR\013guestUserId\022V\n\023invitation_re"
  "sponse\030\004 \001(\0162%.accounts.v1alpha1.Invitat"
  "ionResponseR\022invitationResponse\022W\n\010proje"
  "cts\030\005 \003(\0132;.accounts.v1alpha1.AgreeInvit"
  "ationUserRequest.ProjectsEntryR\010projects"
  "\032;\n\rProjectsEntry\022\020\n\003key\030\001 \001(\rR\003key\022\024\n\005v"
  "alue\030\002 \001(\rR\005value:\0028\001\"5\n\033AgreeInvitation"
  "UserResponse\022\026\n\006result\030\001 \001(\tR\006result\"\315\001\n"
  "\003Rol\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name"
  "\022\035\n\nproject_id\030\003 \001(\rR\tprojectId\022\'\n\017organ"
  "ization_id\030\004 \001(\rR\016organizationId\022\?\n\013perm"
  "issions\030\005 \003(\0132\035.accounts.v1alpha1.Permis"
  "sionR\013permissions\022\031\n\010is_admin\030\006 \001(\010R\007isA"
  "dmin\"\341\001\n\021CreateRoleRequest\022\022\n\004name\030\001 \001(\t"
  "R\004name\022 \n\013description\030\002 \001(\tR\013description"
  "\022\035\n\nproject_id\030\003 \001(\rR\tprojectId\022\'\n\017organ"
  "ization_id\030\004 \001(\rR\016organizationId\022\'\n\017type"
  "_permission\030\005 \001(\tR\016typePermission\022%\n\016per"
  "mission_ids\030\006 \003(\rR\rpermissionIds\"b\n\021Upda"
  "teRoleRequest\022\025\n\006rol_id\030\001 \001(\rR\005rolId\0226\n\003"
  "rol\030\002 \001(\0132$.accounts.v1alpha1.CreateRole"
  "RequestR\003rol\"*\n\021GetOneRoleRequest\022\025\n\006rol"
  "_id\030\001 \001(\rR\005rolId\"\334\001\n\022GetOneRoleResponse\022"
  "\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\'\n\017o"
  "rganization_id\030\003 \001(\rR\016organizationId\022\035\n\n"
  "project_id\030\004 \001(\rR\tprojectId\022\?\n\013permissio"
  "ns\030\005 \003(\0132\035.accounts.v1alpha1.PermissionR"
  "\013permissions\022\031\n\010is_admin\030\006 \001(\010R\007isAdmin\""
  "*\n\021DeleteRoleRequest\022\025\n\006rol_id\030\001 \001(\rR\005ro"
  "lId\"Z\n\020ListRolesRequest\022\035\n\nproject_id\030\001 "
  "\001(\rR\tprojectId\022\'\n\017organization_id\030\002 \001(\rR"
  "\016organizationId\"A\n\021ListRolesResponse\022,\n\005"
  "roles\030\001 \003(\0132\026.accounts.v1alpha1.RolR\005rol"
  "es\"L\n\022CreateRoleResponse\022\020\n\003msg\030\001 \001(\tR\003m"
  "sg\022\024\n\005error\030\002 \001(\tR\005error\022\016\n\002id\030\003 \001(\rR\002id"
  "\"<\n\022UpdateRoleResponse\022\020\n\003msg\030\001 \001(\tR\003msg"
  "\022\024\n\005error\030\002 \001(\tR\005error\"<\n\022DeleteRoleResp"
  "onse\022\020\n\003msg\030\001 \001(\tR\003msg\022\024\n\005error\030\002 \001(\tR\005e"
  "rror\"\372\001\n\007Project\022\016\n\002id\030\001 \001(\005R\002id\022\022\n\004name"
  "\030\002 \001(\tR\004name\022\024\n\005image\030\003 \001(\tR\005image\022\'\n\017or"
  "ganization_id\030\004 \001(\rR\016organizationId\022 \n\013d"
  "escription\030\005 \001(\tR\013description\022\035\n\ncreated"
  "_at\030\006 \001(\tR\tcreatedAt\022\035\n\nupdated_at\030\007 \001(\t"
  "R\tupdatedAt\022,\n\005roles\030\010 \003(\0132\026.accounts.v1"
  "alpha1.RolR\005roles\"\244\001\n\024CreateProjectReque"
  "st\022\022\n\004name\030\001 \001(\tR\004name\022 \n\013description\030\002 "
  "\001(\tR\013description\022\024\n\005image\030\003 \001(\tR\005image\022\'"
  "\n\017organization_id\030\004 \001(\rR\016organizationId\022"
  "\027\n\007user_id\030\005 \001(\tR\006userId\"&\n\024GetOneProjec"
  "tRequest\022\016\n\002id\030\001 \001(\005R\002id\"&\n\024DeleteProjec"
  "tRequest\022\016\n\002id\030\001 \001(\005R\002id\"=\n\022ListProjectR"
  "equest\022\'\n\017organization_id\030\001 \001(\rR\016organiz"
  "ationId\"i\n\024UpdateProjectRequest\022\016\n\002id\030\001 "
  "\001(\005R\002id\022A\n\007project\030\002 \001(\0132\'.accounts.v1al"
  "pha1.CreateProjectRequestR\007project\"J\n\tMe"
  "nberRol\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004n"
  "ame\022\031\n\010is_admin\030\003 \001(\010R\007isAdmin\"O\n\025Create"
  "ProjectResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\024\n\005err"
  "or\030\002 \001(\tR\005error\022\016\n\002id\030\003 \001(\rR\002id\"\?\n\025Updat"
  "eProjectResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\024\n\005er"
  "ror\030\002 \001(\tR\005error\"\?\n\025DeleteProjectRespons"
  "e\022\020\n\003msg\030\001 \001(\tR\003msg\022\024\n\005error\030\002 \001(\tR\005erro"
  "r\"\302\002\n\025GetOneProjectResponse\022\016\n\002id\030\001 \001(\005R"
  "\002id\022\022\n\004name\030\002 \001(\tR\004name\022\024\n\005image\030\003 \001(\tR\005"
  "image\022\'\n\017organization_id\030\004 \001(\rR\016organiza"
  "tionId\022 \n\013description\030\005 \001(\tR\013description"
  "\022\035\n\ncreated_at\030\006 \001(\tR\tcreatedAt\022\035\n\nupdat"
  "ed_at\030\007 \001(\tR\tupdatedAt\0223\n\007members\030\010 \003(\0132"
  "\031.accounts.v1alpha1.MemberR\007members\0221\n\005o"
  "wner\030\t \001(\0132\033.accounts.v1alpha1.UserListR"
  "\005owner\"M\n\023ListProjectResponse\0226\n\010project"
  "s\030\001 \003(\0132\032.accounts.v1alpha1.ProjectR\010pro"
  "jects\"L\n\034ListProjectPaginationRequest\022\026\n"
  "\006offset\030\001 \001(\005R\006offset\022\024\n\005limit\030\002 \001(\005R\005li"
  "mit\"m\n\035ListProjectPaginationResponse\0226\n\010"
  "projects\030\001 \003(\0132\032.accounts.v1alpha1.Proje"
  "ctR\010projects\022\024\n\005count\030\002 \001(\003R\005count\"y\n\nPe"
  "rmission\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004"
  "name\022\026\n\006action\030\003 \001(\tR\006action\022\022\n\004type\030\004 \001"
  "(\tR\004type\022\033\n\tfull_name\030\005 \001(\tR\010fullName\"f\n"
  "\017GroupPermission\022\022\n\004name\030\001 \001(\tR\004name\022\?\n\013"
  "permissions\030\003 \003(\0132\035.accounts.v1alpha1.Pe"
  "rmissionR\013permissions\"\215\001\n\022CategoryPermis"
  "sion\022\022\n\004name\030\001 \001(\tR\004name\022\022\n\004type\030\002 \001(\tR\004"
  "type\022O\n\021group_permissions\030\003 \003(\0132\".accoun"
  "ts.v1alpha1.GroupPermissionR\020groupPermis"
  "sions\"v\n\026ListPermissionResponse\022\\\n\026categ"
  "ories_permissions\030\001 \003(\0132%.accounts.v1alp"
  "ha1.CategoryPermissionR\025categoriesPermis"
  "sions\"W\n\027AssignPermissionRequest\022\027\n\007user"
  "_id\030\001 \001(\rR\006userId\022#\n\rpermission_id\030\002 \001(\r"
  "R\014permissionId\"\027\n\025ListPermissionRequest\""
  "u\n\027CreatePermissionRequest\022\022\n\004name\030\001 \001(\t"
  "R\004name\022\022\n\004type\030\002 \001(\tR\004type\022\032\n\010category\030\003"
  " \001(\tR\010category\022\026\n\006action\030\004 \001(\tR\006action\"f"
  "\n\027UpdatePermissionRequest\022#\n\rpermission_"
  "id\030\001 \001(\rR\014permissionId\022\022\n\004name\030\002 \001(\tR\004na"
  "me\022\022\n\004type\030\003 \001(\tR\004type\">\n\027GetOnePermissi"
  "onRequest\022#\n\rpermission_id\030\001 \001(\rR\014permis"
  "sionId\"R\n\030GetOnePermissionResponse\022\016\n\002id"
  "\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004type\030\003"
  " \001(\tR\004type\">\n\027DeletePermissionRequest\022#\n"
  "\rpermission_id\030\001 \001(\rR\014permissionId\"B\n\030Up"
  "datePermissionResponse\022\020\n\003msg\030\001 \001(\tR\003msg"
  "\022\024\n\005error\030\002 \001(\tR\005error\"B\n\030DeletePermissi"
  "onResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\024\n\005error\030\002 "
  "\001(\tR\005error\"B\n\030CreatePermissionResponse\022\020"
  "\n\003msg\030\001 \001(\tR\003msg\022\024\n\005error\030\002 \001(\tR\005error\"\276"
  "\001\n\006Member\022\016\n\002id\030\001 \001(\rR\002id\022\027\n\007user_id\030\002 \001"
  "(\tR\006userId\022\035\n\nfirst_name\030\003 \001(\tR\tfirstNam"
  "e\022\033\n\tlast_name\030\004 \001(\tR\010lastName\022\033\n\tis_act"
  "ive\030\005 \001(\010R\010isActive\0222\n\005roles\030\006 \003(\0132\034.acc"
  "ounts.v1alpha1.MenberRolR\005roles\"q\n\023Proje"
  "ctOrganization\022\016\n\002id\030\001 \001(\005R\002id\022\022\n\004name\030\002"
  " \001(\tR\004name\022\024\n\005image\030\003 \001(\tR\005image\022 \n\013desc"
  "ription\030\004 \001(\tR\013description\"\313\001\n\014Organizat"
  "ion\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name\022"
  "\024\n\005image\030\003 \001(\tR\005image\022 \n\013description\030\004 \001"
  "(\tR\013description\0221\n\005owner\030\007 \001(\0132\033.account"
  "s.v1alpha1.UserListR\005owner\022,\n\005roles\030\010 \003("
  "\0132\026.accounts.v1alpha1.RolR\005roles\"\200\001\n\031Cre"
  "ateOrganizationRequest\022\022\n\004name\030\001 \001(\tR\004na"
  "me\022\024\n\005image\030\002 \001(\tR\005image\022\027\n\007user_id\030\003 \001("
  "\tR\006userId\022 \n\013description\030\004 \001(\tR\013descript"
  "ion\"\031\n\027ListOrganizationRequest\"D\n\031GetOne"
  "OrganizationRequest\022\'\n\017organization_id\030\001"
  " \001(\rR\016organizationId\"\220\001\n\031UpdateOrganizat"
  "ionRequest\022\'\n\017organization_id\030\001 \001(\rR\016org"
  "anizationId\022\022\n\004name\030\002 \001(\tR\004name\022 \n\013descr"
  "iption\030\003 \001(\tR\013description\022\024\n\005image\030\004 \001(\t"
  "R\005image\"D\n\031DeleteOrganizationRequest\022\'\n\017"
  "organization_id\030\001 \001(\rR\016organizationId\"\244\002"
  "\n\032GetOneOrganizationResponse\022\016\n\002id\030\001 \001(\r"
  "R\002id\022\022\n\004name\030\002 \001(\tR\004name\022\024\n\005image\030\003 \001(\tR"
  "\005image\022B\n\010projects\030\004 \003(\0132&.accounts.v1al"
  "pha1.ProjectOrganizationR\010projects\0223\n\007me"
  "nbers\030\005 \003(\0132\031.accounts.v1alpha1.MemberR\007"
  "menbers\022 \n\013description\030\006 \001(\tR\013descriptio"
  "n\0221\n\005owner\030\007 \001(\0132\033.accounts.v1alpha1.Use"
  "rListR\005owner\"a\n\030ListOrganizationResponse"
  "\022E\n\rorganizations\030\001 \003(\0132\037.accounts.v1alp"
  "ha1.OrganizationR\rorganizations\"\206\001\n\032Crea"
  "teOrganizationResponse\022\020\n\003msg\030\001 \001(\tR\003msg"
  "\0220\n\024role_id_organization\030\002 \001(\rR\022roleIdOr"
  "ganization\022\024\n\005error\030\003 \001(\tR\005error\022\016\n\002id\030\004"
  " \001(\rR\002id\"D\n\032UpdateOrganizationResponse\022\020"
  "\n\003msg\030\001 \001(\tR\003msg\022\024\n\005error\030\002 \001(\tR\005error\"D"
  "\n\032DeleteOrganizationResponse\022\020\n\003msg\030\001 \001("
  "\tR\003msg\022\024\n\005error\030\002 \001(\tR\005error\"\027\n\025GetListU"
  "serDexRequest\"R\n\026GetListUserDexResponse\022"
  "8\n\tusers_dex\030\001 \003(\0132\033.accounts.v1alpha1.U"
  "sersDexR\010usersDex\"i\n\024GetOneUserDexReques"
  "t\022\027\n\007user_id\030\001 \001(\tR\006userId\0228\n\004user\030\002 \001(\013"
  "2$.accounts.v1alpha1.CreateUserRequestR\004"
  "user\"\322\005\n\025GetOneUserDexResponse\022\016\n\002id\030\001 \001"
  "(\rR\002id\022\027\n\007user_id\030\002 \001(\tR\006userId\022\035\n\nfirst"
  "_name\030\003 \001(\tR\tfirstName\022\033\n\tlast_name\030\004 \001("
  "\tR\010lastName\022\024\n\005email\030\005 \001(\tR\005email\022\033\n\tis_"
  "active\030\006 \001(\010R\010isActive\022\035\n\ncreated_at\030\007 \001"
  "(\tR\tcreatedAt\022\035\n\nupdated_at\030\010 \001(\tR\tupdat"
  "edAt\022,\n\005roles\030\t \003(\0132\026.accounts.v1alpha1."
  "RolR\005roles\022\?\n\013permissions\030\n \003(\0132\035.accoun"
  "ts.v1alpha1.PermissionR\013permissions\022\"\n\ri"
  "s_super_user\030\013 \001(\010R\013isSuperUser\022E\n\rorgan"
  "izations\030\014 \003(\0132\037.accounts.v1alpha1.Organ"
  "izationR\rorganizations\0226\n\010projects\030\016 \003(\013"
  "2\032.accounts.v1alpha1.ProjectR\010projects\022\020"
  "\n\003msg\030\r \001(\tR\003msg\022!\n\014phone_number\030\017 \001(\tR\013"
  "phoneNumber\022\030\n\007country\030\020 \001(\tR\007country\022\022\n"
  "\004city\030\021 \001(\tR\004city\022\031\n\010zip_code\030\022 \001(\tR\007zip"
  "Code\022\030\n\007address\030\023 \001(\tR\007address\022\024\n\005state\030"
  "\024 \001(\tR\005state\022#\n\remoji_country\030\025 \001(\tR\014emo"
  "jiCountry*d\n\022InvitationResponse\022,\n(INVIT"
  "ATION_RESPONSE_ACCEPTED_UNSPECIFIED\020\000\022 \n"
  "\034INVITATION_RESPONSE_REJECTED\020\0012\256!\n\016Acco"
  "untService\022Y\n\nCreateUser\022$.accounts.v1al"
  "pha1.CreateUserRequest\032%.accounts.v1alph"
  "a1.CreateUserResponse\022S\n\010ListUser\022\".acco"
  "unts.v1alpha1.ListUserRequest\032#.accounts"
  ".v1alpha1.ListUserResponse\022Y\n\nGetOneUser"
  "\022$.accounts.v1alpha1.GetOneUserRequest\032%"
  ".accounts.v1alpha1.GetOneUserResponse\022Y\n"
  "\nUpdateUser\022$.accounts.v1alpha1.UpdateUs"
  "erRequest\032%.accounts.v1alpha1.UpdateUser"
  "Response\022Y\n\nDeleteUser\022$.accounts.v1alph"
  "a1.DeleteUserRequest\032%.accounts.v1alpha1"
  ".DeleteUserResponse\022q\n\022ListUserPaginatio"
  "n\022,.accounts.v1alpha1.ListUserPagination"
  "Request\032-.accounts.v1alpha1.ListUserPagi"
  "nationResponse\022q\n\022SendInvitationUser\022,.a"
  "ccounts.v1alpha1.SendInvitationUserReque"
  "st\032-.accounts.v1alpha1.SendInvitationUse"
  "rResponse\022n\n\021GetInvitationUser\022+.account"
  "s.v1alpha1.GetInvitationUserRequest\032,.ac"
  "counts.v1alpha1.GetInvitationUserRespons"
  "e\022t\n\023AgreeInvitationUser\022-.accounts.v1al"
  "pha1.AgreeInvitationUserRequest\032..accoun"
  "ts.v1alpha1.AgreeInvitationUserResponse\022"
  "k\n\020CreatePermission\022*.accounts.v1alpha1."
  "CreatePermissionRequest\032+.accounts.v1alp"
  "ha1.CreatePermissionResponse\022e\n\016ListPerm"
  "ission\022(.accounts.v1alpha1.ListPermissio"
  "nRequest\032).accounts.v1alpha1.ListPermiss"
  "ionResponse\022k\n\020GetOnePermission\022*.accoun"
  "ts.v1alpha1.GetOnePermissionRequest\032+.ac"
  "counts.v1alpha1.GetOnePermissionResponse"
  "\022k\n\020UpdatePermission\022*.accounts.v1alpha1"
  ".UpdatePermissionRequest\032+.accounts.v1al"
  "pha1.UpdatePermissionResponse\022k\n\020DeleteP"
  "ermission\022*.accounts.v1alpha1.DeletePerm"
  "issionRequest\032+.accounts.v1alpha1.Delete"
  "PermissionResponse\022q\n\022CreateOrganization"
  "\022,.accounts.v1alpha1.CreateOrganizationR"
  "equest\032-.accounts.v1alpha1.CreateOrganiz"
  "ationResponse\022k\n\020ListOrganization\022*.acco"
  "unts.v1alpha1.ListOrganizationRequest\032+."
  "accounts.v1alpha1.ListOrganizationRespon"
  "se\022q\n\022GetOneOrganization\022,.accounts.v1al"
  "pha1.GetOneOrganizationRequest\032-.account"
  "s.v1alpha1.GetOneOrganizationResponse\022q\n"
  "\022UpdateOrganization\022,.accounts.v1alpha1."
  "UpdateOrganizationRequest\032-.accounts.v1a"
  "lpha1.UpdateOrganizationResponse\022q\n\022Dele"
  "teOrganization\022,.accounts.v1alpha1.Delet"
  "eOrganizationRequest\032-.accounts.v1alpha1"
  ".DeleteOrganizationResponse\022Y\n\nCreateRol"
  "e\022$.accounts.v1alpha1.CreateRoleRequest\032"
  "%.accounts.v1alpha1.CreateRoleResponse\022V"
  "\n\tListRoles\022#.accounts.v1alpha1.ListRole"
  "sRequest\032$.accounts.v1alpha1.ListRolesRe"
  "sponse\022Y\n\nUpdateRole\022$.accounts.v1alpha1"
  ".UpdateRoleRequest\032%.accounts.v1alpha1.U"
  "pdateRoleResponse\022Y\n\nGetOneRole\022$.accoun"
  "ts.v1alpha1.GetOneRoleRequest\032%.accounts"
  ".v1alpha1.GetOneRoleResponse\022e\n\016GetRoles"
  "ByUser\022(.accounts.v1alpha1.GetRolesByUse"
  "rRequest\032).accounts.v1alpha1.GetRolesByU"
  "serResponse\022Y\n\nDeleteRole\022$.accounts.v1a"
  "lpha1.DeleteRoleRequest\032%.accounts.v1alp"
  "ha1.DeleteRoleResponse\022b\n\rCreateProject\022"
  "\'.accounts.v1alpha1.CreateProjectRequest"
  "\032(.accounts.v1alpha1.CreateProjectRespon"
  "se\022b\n\rGetOneProject\022\'.accounts.v1alpha1."
  "GetOneProjectRequest\032(.accounts.v1alpha1"
  ".GetOneProjectResponse\022b\n\rUpdateProject\022"
  "\'.accounts.v1alpha1.UpdateProjectRequest"
  "\032(.accounts.v1alpha1.UpdateProjectRespon"
  "se\022b\n\rDeleteProject\022\'.accounts.v1alpha1."
  "DeleteProjectRequest\032(.accounts.v1alpha1"
  ".DeleteProjectResponse\022\\\n\013ListProject\022%."
  "accounts.v1alpha1.ListProjectRequest\032&.a"
  "ccounts.v1alpha1.ListProjectResponse\022e\n\016"
  "GetListUserDex\022(.accounts.v1alpha1.GetLi"
  "stUserDexRequest\032).accounts.v1alpha1.Get"
  "ListUserDexResponse\022b\n\rGetOneUserDex\022\'.a"
  "ccounts.v1alpha1.GetOneUserDexRequest\032(."
  "accounts.v1alpha1.GetOneUserDexResponse\022"
  "V\n\tCheckUser\022#.accounts.v1alpha1.CheckUs"
  "erRequest\032$.accounts.v1alpha1.CheckUserR"
  "esponse\022z\n\025SendVerificationEmail\022/.accou"
  "nts.v1alpha1.SendVerificationEmailReques"
  "t\0320.accounts.v1alpha1.SendVerificationEm"
  "ailResponse\022\\\n\013VerifyEmail\022%.accounts.v1"
  "alpha1.VerifyEmailRequest\032&.accounts.v1a"
  "lpha1.VerifyEmailResponse\022b\n\rListCountri"
  "es\022\'.accounts.v1alpha1.ListCountriesRequ"
  "est\032(.accounts.v1alpha1.ListCountriesRes"
  "ponse\022b\n\rGetOneCountry\022\'.accounts.v1alph"
  "a1.GetOneCountryRequest\032(.accounts.v1alp"
  "ha1.GetOneCountryResponse\022_\n\014CreateApiKe"
  "y\022&.accounts.v1alpha1.CreateApiKeyReques"
  "t\032\'.accounts.v1alpha1.CreateApiKeyRespon"
  "se\022_\n\014GetOneApiKey\022&.accounts.v1alpha1.G"
  "etOneApiKeyRequest\032\'.accounts.v1alpha1.G"
  "etOneApiKeyResponse\022Y\n\nListApiKey\022$.acco"
  "unts.v1alpha1.ListApiKeyRequest\032%.accoun"
  "ts.v1alpha1.ListApiKeyResponse\022_\n\014Update"
  "ApiKey\022&.accounts.v1alpha1.UpdateApiKeyR"
  "equest\032\'.accounts.v1alpha1.UpdateApiKeyR"
  "esponse\022_\n\014DeleteApiKey\022&.accounts.v1alp"
  "ha1.DeleteApiKeyRequest\032\'.accounts.v1alp"
  "ha1.DeleteApiKeyResponseB4Z2github.com/c"
  "uemby/ccp-sdk/gen/go/accounts/v1alpha1b\006"
  "proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto = {
  false, false, 17686, descriptor_table_protodef_accounts_2fv1alpha1_2faccounts_2eproto, "accounts/v1alpha1/accounts.proto", 
  &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once, nullptr, 0, 104,
  schemas, file_default_instances, TableStruct_accounts_2fv1alpha1_2faccounts_2eproto::offsets,
  file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto, file_level_enum_descriptors_accounts_2fv1alpha1_2faccounts_2eproto, file_level_service_descriptors_accounts_2fv1alpha1_2faccounts_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter() {
  return &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_accounts_2fv1alpha1_2faccounts_2eproto(&descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto);
namespace accounts {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvitationResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto);
  return file_level_enum_descriptors_accounts_2fv1alpha1_2faccounts_2eproto[0];
}
bool InvitationResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetRolesByUserRequest::_Internal {
 public:
};

GetRolesByUserRequest::GetRolesByUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetRolesByUserRequest)
}
GetRolesByUserRequest::GetRolesByUserRequest(const GetRolesByUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetRolesByUserRequest)
}

inline void GetRolesByUserRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRolesByUserRequest::~GetRolesByUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetRolesByUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRolesByUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRolesByUserRequest::ArenaDtor(void* object) {
  GetRolesByUserRequest* _this = reinterpret_cast< GetRolesByUserRequest* >(object);
  (void)_this;
}
void GetRolesByUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRolesByUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRolesByUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetRolesByUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRolesByUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetRolesByUserRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRolesByUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetRolesByUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetRolesByUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetRolesByUserRequest)
  return target;
}

size_t GetRolesByUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetRolesByUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRolesByUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRolesByUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRolesByUserRequest::GetClassData() const { return &_class_data_; }

void GetRolesByUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetRolesByUserRequest *>(to)->MergeFrom(
      static_cast<const GetRolesByUserRequest &>(from));
}


void GetRolesByUserRequest::MergeFrom(const GetRolesByUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetRolesByUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRolesByUserRequest::CopyFrom(const GetRolesByUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetRolesByUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRolesByUserRequest::IsInitialized() const {
  return true;
}

void GetRolesByUserRequest::InternalSwap(GetRolesByUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRolesByUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[0]);
}

// ===================================================================

class GetRolesByUserResponse::_Internal {
 public:
};

GetRolesByUserResponse::GetRolesByUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  organization_(arena),
  project_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetRolesByUserResponse)
}
GetRolesByUserResponse::GetRolesByUserResponse(const GetRolesByUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      organization_(from.organization_),
      project_(from.project_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetRolesByUserResponse)
}

inline void GetRolesByUserResponse::SharedCtor() {
}

GetRolesByUserResponse::~GetRolesByUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetRolesByUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRolesByUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRolesByUserResponse::ArenaDtor(void* object) {
  GetRolesByUserResponse* _this = reinterpret_cast< GetRolesByUserResponse* >(object);
  (void)_this;
}
void GetRolesByUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRolesByUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRolesByUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetRolesByUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_.Clear();
  project_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRolesByUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_organization(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Project project = 2 [json_name = "project"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_project(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRolesByUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetRolesByUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_organization_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_organization(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Project project = 2 [json_name = "project"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_project_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_project(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetRolesByUserResponse)
  return target;
}

size_t GetRolesByUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetRolesByUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  total_size += 1UL * this->_internal_organization_size();
  for (const auto& msg : this->organization_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Project project = 2 [json_name = "project"];
  total_size += 1UL * this->_internal_project_size();
  for (const auto& msg : this->project_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRolesByUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRolesByUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRolesByUserResponse::GetClassData() const { return &_class_data_; }

void GetRolesByUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetRolesByUserResponse *>(to)->MergeFrom(
      static_cast<const GetRolesByUserResponse &>(from));
}


void GetRolesByUserResponse::MergeFrom(const GetRolesByUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetRolesByUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  organization_.MergeFrom(from.organization_);
  project_.MergeFrom(from.project_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRolesByUserResponse::CopyFrom(const GetRolesByUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetRolesByUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRolesByUserResponse::IsInitialized() const {
  return true;
}

void GetRolesByUserResponse::InternalSwap(GetRolesByUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  organization_.InternalSwap(&other->organization_);
  project_.InternalSwap(&other->project_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRolesByUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[1]);
}

// ===================================================================

class CreateApiKeyRequest::_Internal {
 public:
};

CreateApiKeyRequest::CreateApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_ids_(arena),
  permissions_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateApiKeyRequest)
}
CreateApiKeyRequest::CreateApiKeyRequest(const CreateApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_ids_(from.roles_ids_),
      permissions_ids_(from.permissions_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateApiKeyRequest)
}

inline void CreateApiKeyRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateApiKeyRequest::~CreateApiKeyRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateApiKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateApiKeyRequest::ArenaDtor(void* object) {
  CreateApiKeyRequest* _this = reinterpret_cast< CreateApiKeyRequest* >(object);
  (void)_this;
}
void CreateApiKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateApiKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_ids_.Clear();
  permissions_ids_.Clear();
  name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateApiKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateApiKeyRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateApiKeyRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 roles_ids = 3 [json_name = "rolesIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_roles_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 permissions_ids = 4 [json_name = "permissionsIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_permissions_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateApiKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateApiKeyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateApiKeyRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // repeated uint32 roles_ids = 3 [json_name = "rolesIds"];
  {
    int byte_size = _roles_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_roles_ids(), byte_size, target);
    }
  }

  // repeated uint32 permissions_ids = 4 [json_name = "permissionsIds"];
  {
    int byte_size = _permissions_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_permissions_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateApiKeyRequest)
  return target;
}

size_t CreateApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateApiKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 roles_ids = 3 [json_name = "rolesIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->roles_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roles_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 permissions_ids = 4 [json_name = "permissionsIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->permissions_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _permissions_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateApiKeyRequest::GetClassData() const { return &_class_data_; }

void CreateApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateApiKeyRequest *>(to)->MergeFrom(
      static_cast<const CreateApiKeyRequest &>(from));
}


void CreateApiKeyRequest::MergeFrom(const CreateApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_ids_.MergeFrom(from.roles_ids_);
  permissions_ids_.MergeFrom(from.permissions_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateApiKeyRequest::CopyFrom(const CreateApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateApiKeyRequest::IsInitialized() const {
  return true;
}

void CreateApiKeyRequest::InternalSwap(CreateApiKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_ids_.InternalSwap(&other->roles_ids_);
  permissions_ids_.InternalSwap(&other->permissions_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateApiKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[2]);
}

// ===================================================================

class ApiKey::_Internal {
 public:
};

ApiKey::ApiKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rol_(arena),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ApiKey)
}
ApiKey::ApiKey(const ApiKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rol_(from.rol_),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ApiKey)
}

inline void ApiKey::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ApiKey::~ApiKey() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ApiKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApiKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApiKey::ArenaDtor(void* object) {
  ApiKey* _this = reinterpret_cast< ApiKey* >(object);
  (void)_this;
}
void ApiKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApiKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApiKey::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ApiKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rol_.Clear();
  permissions_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ApiKey.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ApiKey.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3 [json_name = "userId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ApiKey.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol rol = 4 [json_name = "rol"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApiKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ApiKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ApiKey.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ApiKey.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string user_id = 3 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ApiKey.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // repeated .accounts.v1alpha1.Rol rol = 4 [json_name = "rol"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rol(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ApiKey)
  return target;
}

size_t ApiKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ApiKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol rol = 4 [json_name = "rol"];
  total_size += 1UL * this->_internal_rol_size();
  for (const auto& msg : this->rol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_id = 3 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApiKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiKey::GetClassData() const { return &_class_data_; }

void ApiKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApiKey *>(to)->MergeFrom(
      static_cast<const ApiKey &>(from));
}


void ApiKey::MergeFrom(const ApiKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ApiKey)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rol_.MergeFrom(from.rol_);
  permissions_.MergeFrom(from.permissions_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiKey::CopyFrom(const ApiKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ApiKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiKey::IsInitialized() const {
  return true;
}

void ApiKey::InternalSwap(ApiKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rol_.InternalSwap(&other->rol_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[3]);
}

// ===================================================================

class CreateApiKeyResponse::_Internal {
 public:
};

CreateApiKeyResponse::CreateApiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateApiKeyResponse)
}
CreateApiKeyResponse::CreateApiKeyResponse(const CreateApiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key().empty()) {
    api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_key(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  access_point_id_ = from.access_point_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateApiKeyResponse)
}

inline void CreateApiKeyResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
access_point_id_ = 0u;
}

CreateApiKeyResponse::~CreateApiKeyResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateApiKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateApiKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateApiKeyResponse::ArenaDtor(void* object) {
  CreateApiKeyResponse* _this = reinterpret_cast< CreateApiKeyResponse* >(object);
  (void)_this;
}
void CreateApiKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateApiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateApiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  api_key_.ClearToEmpty();
  error_.ClearToEmpty();
  access_point_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateApiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateApiKeyResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 2 [json_name = "apiKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_api_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateApiKeyResponse.api_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 access_point_id = 4 [json_name = "accessPointId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          access_point_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 5 [json_name = "error"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateApiKeyResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateApiKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateApiKeyResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateApiKeyResponse.api_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_api_key(), target);
  }

  // uint32 access_point_id = 4 [json_name = "accessPointId"];
  if (this->_internal_access_point_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_access_point_id(), target);
  }

  // string error = 5 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateApiKeyResponse.error");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateApiKeyResponse)
  return target;
}

size_t CreateApiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateApiKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string error = 5 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // uint32 access_point_id = 4 [json_name = "accessPointId"];
  if (this->_internal_access_point_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_access_point_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateApiKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateApiKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateApiKeyResponse::GetClassData() const { return &_class_data_; }

void CreateApiKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateApiKeyResponse *>(to)->MergeFrom(
      static_cast<const CreateApiKeyResponse &>(from));
}


void CreateApiKeyResponse::MergeFrom(const CreateApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateApiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_api_key().empty()) {
    _internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_access_point_id() != 0) {
    _internal_set_access_point_id(from._internal_access_point_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateApiKeyResponse::CopyFrom(const CreateApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateApiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateApiKeyResponse::IsInitialized() const {
  return true;
}

void CreateApiKeyResponse::InternalSwap(CreateApiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_key_, GetArenaForAllocation(),
      &other->api_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
  swap(access_point_id_, other->access_point_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateApiKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[4]);
}

// ===================================================================

class GetOneApiKeyRequest::_Internal {
 public:
};

GetOneApiKeyRequest::GetOneApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneApiKeyRequest)
}
GetOneApiKeyRequest::GetOneApiKeyRequest(const GetOneApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneApiKeyRequest)
}

inline void GetOneApiKeyRequest::SharedCtor() {
id_ = 0u;
}

GetOneApiKeyRequest::~GetOneApiKeyRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneApiKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOneApiKeyRequest::ArenaDtor(void* object) {
  GetOneApiKeyRequest* _this = reinterpret_cast< GetOneApiKeyRequest* >(object);
  (void)_this;
}
void GetOneApiKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneApiKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneApiKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneApiKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneApiKeyRequest)
  return target;
}

size_t GetOneApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneApiKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneApiKeyRequest::GetClassData() const { return &_class_data_; }

void GetOneApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneApiKeyRequest *>(to)->MergeFrom(
      static_cast<const GetOneApiKeyRequest &>(from));
}


void GetOneApiKeyRequest::MergeFrom(const GetOneApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneApiKeyRequest::CopyFrom(const GetOneApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneApiKeyRequest::IsInitialized() const {
  return true;
}

void GetOneApiKeyRequest::InternalSwap(GetOneApiKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneApiKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[5]);
}

// ===================================================================

class GetOneApiKeyResponse::_Internal {
 public:
};

GetOneApiKeyResponse::GetOneApiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneApiKeyResponse)
}
GetOneApiKeyResponse::GetOneApiKeyResponse(const GetOneApiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key().empty()) {
    api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_key(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneApiKeyResponse)
}

inline void GetOneApiKeyResponse::SharedCtor() {
api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

GetOneApiKeyResponse::~GetOneApiKeyResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneApiKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneApiKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneApiKeyResponse::ArenaDtor(void* object) {
  GetOneApiKeyResponse* _this = reinterpret_cast< GetOneApiKeyResponse* >(object);
  (void)_this;
}
void GetOneApiKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneApiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneApiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  permissions_.Clear();
  api_key_.ClearToEmpty();
  name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneApiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 2 [json_name = "apiKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_api_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneApiKeyResponse.api_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneApiKeyResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4 [json_name = "userId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneApiKeyResponse.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol roles = 5 [json_name = "roles"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneApiKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneApiKeyResponse.api_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_api_key(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneApiKeyResponse.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string user_id = 4 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneApiKeyResponse.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // repeated .accounts.v1alpha1.Rol roles = 5 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_roles(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneApiKeyResponse)
  return target;
}

size_t GetOneApiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneApiKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol roles = 5 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_id = 4 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneApiKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneApiKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneApiKeyResponse::GetClassData() const { return &_class_data_; }

void GetOneApiKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneApiKeyResponse *>(to)->MergeFrom(
      static_cast<const GetOneApiKeyResponse &>(from));
}


void GetOneApiKeyResponse::MergeFrom(const GetOneApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneApiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  permissions_.MergeFrom(from.permissions_);
  if (!from._internal_api_key().empty()) {
    _internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneApiKeyResponse::CopyFrom(const GetOneApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneApiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneApiKeyResponse::IsInitialized() const {
  return true;
}

void GetOneApiKeyResponse::InternalSwap(GetOneApiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_key_, GetArenaForAllocation(),
      &other->api_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneApiKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[6]);
}

// ===================================================================

class ListApiKeyRequest::_Internal {
 public:
};

ListApiKeyRequest::ListApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListApiKeyRequest)
}
ListApiKeyRequest::ListApiKeyRequest(const ListApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListApiKeyRequest)
}

inline void ListApiKeyRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListApiKeyRequest::~ListApiKeyRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListApiKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListApiKeyRequest::ArenaDtor(void* object) {
  ListApiKeyRequest* _this = reinterpret_cast< ListApiKeyRequest* >(object);
  (void)_this;
}
void ListApiKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListApiKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListApiKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ListApiKeyRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListApiKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ListApiKeyRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListApiKeyRequest)
  return target;
}

size_t ListApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListApiKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListApiKeyRequest::GetClassData() const { return &_class_data_; }

void ListApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListApiKeyRequest *>(to)->MergeFrom(
      static_cast<const ListApiKeyRequest &>(from));
}


void ListApiKeyRequest::MergeFrom(const ListApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListApiKeyRequest::CopyFrom(const ListApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListApiKeyRequest::IsInitialized() const {
  return true;
}

void ListApiKeyRequest::InternalSwap(ListApiKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListApiKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[7]);
}

// ===================================================================

class ApiKeyList::_Internal {
 public:
};

ApiKeyList::ApiKeyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ApiKeyList)
}
ApiKeyList::ApiKeyList(const ApiKeyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key().empty()) {
    api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_key(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ApiKeyList)
}

inline void ApiKeyList::SharedCtor() {
api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

ApiKeyList::~ApiKeyList() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ApiKeyList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApiKeyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApiKeyList::ArenaDtor(void* object) {
  ApiKeyList* _this = reinterpret_cast< ApiKeyList* >(object);
  (void)_this;
}
void ApiKeyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApiKeyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApiKeyList::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ApiKeyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_key_.ClearToEmpty();
  name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiKeyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 2 [json_name = "apiKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_api_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ApiKeyList.api_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ApiKeyList.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4 [json_name = "userId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ApiKeyList.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApiKeyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ApiKeyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ApiKeyList.api_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_api_key(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ApiKeyList.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string user_id = 4 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ApiKeyList.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ApiKeyList)
  return target;
}

size_t ApiKeyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ApiKeyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_id = 4 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiKeyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApiKeyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiKeyList::GetClassData() const { return &_class_data_; }

void ApiKeyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApiKeyList *>(to)->MergeFrom(
      static_cast<const ApiKeyList &>(from));
}


void ApiKeyList::MergeFrom(const ApiKeyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ApiKeyList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_api_key().empty()) {
    _internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiKeyList::CopyFrom(const ApiKeyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ApiKeyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiKeyList::IsInitialized() const {
  return true;
}

void ApiKeyList::InternalSwap(ApiKeyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_key_, GetArenaForAllocation(),
      &other->api_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiKeyList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[8]);
}

// ===================================================================

class ListApiKeyResponse::_Internal {
 public:
};

ListApiKeyResponse::ListApiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  api_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListApiKeyResponse)
}
ListApiKeyResponse::ListApiKeyResponse(const ListApiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      api_keys_(from.api_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListApiKeyResponse)
}

inline void ListApiKeyResponse::SharedCtor() {
}

ListApiKeyResponse::~ListApiKeyResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListApiKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListApiKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListApiKeyResponse::ArenaDtor(void* object) {
  ListApiKeyResponse* _this = reinterpret_cast< ListApiKeyResponse* >(object);
  (void)_this;
}
void ListApiKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListApiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListApiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListApiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.ApiKeyList api_keys = 1 [json_name = "apiKeys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_api_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListApiKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.ApiKeyList api_keys = 1 [json_name = "apiKeys"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_api_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_api_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListApiKeyResponse)
  return target;
}

size_t ListApiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListApiKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.ApiKeyList api_keys = 1 [json_name = "apiKeys"];
  total_size += 1UL * this->_internal_api_keys_size();
  for (const auto& msg : this->api_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListApiKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListApiKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListApiKeyResponse::GetClassData() const { return &_class_data_; }

void ListApiKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListApiKeyResponse *>(to)->MergeFrom(
      static_cast<const ListApiKeyResponse &>(from));
}


void ListApiKeyResponse::MergeFrom(const ListApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListApiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  api_keys_.MergeFrom(from.api_keys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListApiKeyResponse::CopyFrom(const ListApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListApiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListApiKeyResponse::IsInitialized() const {
  return true;
}

void ListApiKeyResponse::InternalSwap(ListApiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  api_keys_.InternalSwap(&other->api_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListApiKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[9]);
}

// ===================================================================

class UpdateApiKeyRequest::_Internal {
 public:
};

UpdateApiKeyRequest::UpdateApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_ids_(arena),
  permissions_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateApiKeyRequest)
}
UpdateApiKeyRequest::UpdateApiKeyRequest(const UpdateApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_ids_(from.roles_ids_),
      permissions_ids_(from.permissions_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateApiKeyRequest)
}

inline void UpdateApiKeyRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
}

UpdateApiKeyRequest::~UpdateApiKeyRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateApiKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateApiKeyRequest::ArenaDtor(void* object) {
  UpdateApiKeyRequest* _this = reinterpret_cast< UpdateApiKeyRequest* >(object);
  (void)_this;
}
void UpdateApiKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateApiKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_ids_.Clear();
  permissions_ids_.Clear();
  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateApiKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateApiKeyRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 roles_ids = 3 [json_name = "rolesIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_roles_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 permissions_ids = 4 [json_name = "permissionsIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_permissions_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 5 [json_name = "isActive"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateApiKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateApiKeyRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated uint32 roles_ids = 3 [json_name = "rolesIds"];
  {
    int byte_size = _roles_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_roles_ids(), byte_size, target);
    }
  }

  // repeated uint32 permissions_ids = 4 [json_name = "permissionsIds"];
  {
    int byte_size = _permissions_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_permissions_ids(), byte_size, target);
    }
  }

  // bool is_active = 5 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateApiKeyRequest)
  return target;
}

size_t UpdateApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateApiKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 roles_ids = 3 [json_name = "rolesIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->roles_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roles_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 permissions_ids = 4 [json_name = "permissionsIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->permissions_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _permissions_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool is_active = 5 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateApiKeyRequest::GetClassData() const { return &_class_data_; }

void UpdateApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateApiKeyRequest *>(to)->MergeFrom(
      static_cast<const UpdateApiKeyRequest &>(from));
}


void UpdateApiKeyRequest::MergeFrom(const UpdateApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_ids_.MergeFrom(from.roles_ids_);
  permissions_ids_.MergeFrom(from.permissions_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateApiKeyRequest::CopyFrom(const UpdateApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateApiKeyRequest::IsInitialized() const {
  return true;
}

void UpdateApiKeyRequest::InternalSwap(UpdateApiKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_ids_.InternalSwap(&other->roles_ids_);
  permissions_ids_.InternalSwap(&other->permissions_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateApiKeyRequest, is_active_)
      + sizeof(UpdateApiKeyRequest::is_active_)
      - PROTOBUF_FIELD_OFFSET(UpdateApiKeyRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateApiKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[10]);
}

// ===================================================================

class UpdateApiKeyResponse::_Internal {
 public:
};

UpdateApiKeyResponse::UpdateApiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateApiKeyResponse)
}
UpdateApiKeyResponse::UpdateApiKeyResponse(const UpdateApiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key().empty()) {
    api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_key(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateApiKeyResponse)
}

inline void UpdateApiKeyResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateApiKeyResponse::~UpdateApiKeyResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateApiKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateApiKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateApiKeyResponse::ArenaDtor(void* object) {
  UpdateApiKeyResponse* _this = reinterpret_cast< UpdateApiKeyResponse* >(object);
  (void)_this;
}
void UpdateApiKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateApiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateApiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  api_key_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateApiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateApiKeyResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 2 [json_name = "apiKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_api_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateApiKeyResponse.api_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 3 [json_name = "error"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateApiKeyResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateApiKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateApiKeyResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateApiKeyResponse.api_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_api_key(), target);
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateApiKeyResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateApiKeyResponse)
  return target;
}

size_t UpdateApiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateApiKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateApiKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateApiKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateApiKeyResponse::GetClassData() const { return &_class_data_; }

void UpdateApiKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateApiKeyResponse *>(to)->MergeFrom(
      static_cast<const UpdateApiKeyResponse &>(from));
}


void UpdateApiKeyResponse::MergeFrom(const UpdateApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateApiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_api_key().empty()) {
    _internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateApiKeyResponse::CopyFrom(const UpdateApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateApiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateApiKeyResponse::IsInitialized() const {
  return true;
}

void UpdateApiKeyResponse::InternalSwap(UpdateApiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_key_, GetArenaForAllocation(),
      &other->api_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateApiKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[11]);
}

// ===================================================================

class DeleteApiKeyRequest::_Internal {
 public:
};

DeleteApiKeyRequest::DeleteApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteApiKeyRequest)
}
DeleteApiKeyRequest::DeleteApiKeyRequest(const DeleteApiKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteApiKeyRequest)
}

inline void DeleteApiKeyRequest::SharedCtor() {
id_ = 0u;
}

DeleteApiKeyRequest::~DeleteApiKeyRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteApiKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteApiKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteApiKeyRequest::ArenaDtor(void* object) {
  DeleteApiKeyRequest* _this = reinterpret_cast< DeleteApiKeyRequest* >(object);
  (void)_this;
}
void DeleteApiKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteApiKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteApiKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteApiKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteApiKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteApiKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteApiKeyRequest)
  return target;
}

size_t DeleteApiKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteApiKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteApiKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteApiKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteApiKeyRequest::GetClassData() const { return &_class_data_; }

void DeleteApiKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteApiKeyRequest *>(to)->MergeFrom(
      static_cast<const DeleteApiKeyRequest &>(from));
}


void DeleteApiKeyRequest::MergeFrom(const DeleteApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteApiKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteApiKeyRequest::CopyFrom(const DeleteApiKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteApiKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteApiKeyRequest::IsInitialized() const {
  return true;
}

void DeleteApiKeyRequest::InternalSwap(DeleteApiKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteApiKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[12]);
}

// ===================================================================

class DeleteApiKeyResponse::_Internal {
 public:
};

DeleteApiKeyResponse::DeleteApiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteApiKeyResponse)
}
DeleteApiKeyResponse::DeleteApiKeyResponse(const DeleteApiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key().empty()) {
    api_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_key(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteApiKeyResponse)
}

inline void DeleteApiKeyResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteApiKeyResponse::~DeleteApiKeyResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteApiKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteApiKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteApiKeyResponse::ArenaDtor(void* object) {
  DeleteApiKeyResponse* _this = reinterpret_cast< DeleteApiKeyResponse* >(object);
  (void)_this;
}
void DeleteApiKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteApiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteApiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  api_key_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteApiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteApiKeyResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key = 2 [json_name = "apiKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_api_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteApiKeyResponse.api_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 3 [json_name = "error"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteApiKeyResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteApiKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteApiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteApiKeyResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteApiKeyResponse.api_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_api_key(), target);
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteApiKeyResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteApiKeyResponse)
  return target;
}

size_t DeleteApiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteApiKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string api_key = 2 [json_name = "apiKey"];
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteApiKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteApiKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteApiKeyResponse::GetClassData() const { return &_class_data_; }

void DeleteApiKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteApiKeyResponse *>(to)->MergeFrom(
      static_cast<const DeleteApiKeyResponse &>(from));
}


void DeleteApiKeyResponse::MergeFrom(const DeleteApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteApiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_api_key().empty()) {
    _internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteApiKeyResponse::CopyFrom(const DeleteApiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteApiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteApiKeyResponse::IsInitialized() const {
  return true;
}

void DeleteApiKeyResponse::InternalSwap(DeleteApiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_key_, GetArenaForAllocation(),
      &other->api_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteApiKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[13]);
}

// ===================================================================

class City::_Internal {
 public:
};

City::City(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.City)
}
City::City(const City& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latitude().empty()) {
    latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latitude(), 
      GetArenaForAllocation());
  }
  longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_longitude().empty()) {
    longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_longitude(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.City)
}

inline void City::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

City::~City() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.City)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void City::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void City::ArenaDtor(void* object) {
  City* _this = reinterpret_cast< City* >(object);
  (void)_this;
}
void City::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void City::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void City::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  latitude_.ClearToEmpty();
  longitude_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* City::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.City.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latitude = 3 [json_name = "latitude"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_latitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.City.latitude"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string longitude = 4 [json_name = "longitude"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_longitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.City.longitude"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* City::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.City.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string latitude = 3 [json_name = "latitude"];
  if (!this->_internal_latitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latitude().data(), static_cast<int>(this->_internal_latitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.City.latitude");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_latitude(), target);
  }

  // string longitude = 4 [json_name = "longitude"];
  if (!this->_internal_longitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_longitude().data(), static_cast<int>(this->_internal_longitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.City.longitude");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.City)
  return target;
}

size_t City::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.City)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string latitude = 3 [json_name = "latitude"];
  if (!this->_internal_latitude().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latitude());
  }

  // string longitude = 4 [json_name = "longitude"];
  if (!this->_internal_longitude().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_longitude());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData City::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    City::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*City::GetClassData() const { return &_class_data_; }

void City::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<City *>(to)->MergeFrom(
      static_cast<const City &>(from));
}


void City::MergeFrom(const City& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.City)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_latitude().empty()) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!from._internal_longitude().empty()) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void City::CopyFrom(const City& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {
  return true;
}

void City::InternalSwap(City* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &latitude_, GetArenaForAllocation(),
      &other->latitude_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &longitude_, GetArenaForAllocation(),
      &other->longitude_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata City::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[14]);
}

// ===================================================================

class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cities_(from.cities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.State)
}

inline void State::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

State::~State() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cities_.Clear();
  name_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.State.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.City cities = 3 [json_name = "cities"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.State.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .accounts.v1alpha1.City cities = 3 [json_name = "cities"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.City cities = 3 [json_name = "cities"];
  total_size += 1UL * this->_internal_cities_size();
  for (const auto& msg : this->cities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }

void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<State *>(to)->MergeFrom(
      static_cast<const State &>(from));
}


void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.State)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cities_.MergeFrom(from.cities_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cities_.InternalSwap(&other->cities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[15]);
}

// ===================================================================

class CountryList::_Internal {
 public:
};

CountryList::CountryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CountryList)
}
CountryList::CountryList(const CountryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_code().empty()) {
    phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_code(), 
      GetArenaForAllocation());
  }
  emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emoji().empty()) {
    emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emoji(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CountryList)
}

inline void CountryList::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CountryList::~CountryList() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CountryList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CountryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emoji_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CountryList::ArenaDtor(void* object) {
  CountryList* _this = reinterpret_cast< CountryList* >(object);
  (void)_this;
}
void CountryList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CountryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CountryList::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CountryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  code_.ClearToEmpty();
  phone_code_.ClearToEmpty();
  emoji_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CountryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CountryList.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 3 [json_name = "code"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CountryList.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_code = 4 [json_name = "phoneCode"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CountryList.phone_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string emoji = 5 [json_name = "emoji"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_emoji();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CountryList.emoji"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CountryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CountryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CountryList.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CountryList.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_code().data(), static_cast<int>(this->_internal_phone_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CountryList.phone_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone_code(), target);
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji().data(), static_cast<int>(this->_internal_emoji().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CountryList.emoji");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_emoji(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CountryList)
  return target;
}

size_t CountryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CountryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_code());
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CountryList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CountryList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CountryList::GetClassData() const { return &_class_data_; }

void CountryList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CountryList *>(to)->MergeFrom(
      static_cast<const CountryList &>(from));
}


void CountryList::MergeFrom(const CountryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CountryList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_phone_code().empty()) {
    _internal_set_phone_code(from._internal_phone_code());
  }
  if (!from._internal_emoji().empty()) {
    _internal_set_emoji(from._internal_emoji());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CountryList::CopyFrom(const CountryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CountryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryList::IsInitialized() const {
  return true;
}

void CountryList::InternalSwap(CountryList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_code_, GetArenaForAllocation(),
      &other->phone_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emoji_, GetArenaForAllocation(),
      &other->emoji_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CountryList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[16]);
}

// ===================================================================

class ListCountriesRequest::_Internal {
 public:
};

ListCountriesRequest::ListCountriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListCountriesRequest)
}
ListCountriesRequest::ListCountriesRequest(const ListCountriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListCountriesRequest)
}

inline void ListCountriesRequest::SharedCtor() {
}

ListCountriesRequest::~ListCountriesRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListCountriesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCountriesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListCountriesRequest::ArenaDtor(void* object) {
  ListCountriesRequest* _this = reinterpret_cast< ListCountriesRequest* >(object);
  (void)_this;
}
void ListCountriesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCountriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCountriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListCountriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCountriesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCountriesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListCountriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListCountriesRequest)
  return target;
}

size_t ListCountriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListCountriesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCountriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCountriesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCountriesRequest::GetClassData() const { return &_class_data_; }

void ListCountriesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListCountriesRequest *>(to)->MergeFrom(
      static_cast<const ListCountriesRequest &>(from));
}


void ListCountriesRequest::MergeFrom(const ListCountriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListCountriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCountriesRequest::CopyFrom(const ListCountriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListCountriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCountriesRequest::IsInitialized() const {
  return true;
}

void ListCountriesRequest::InternalSwap(ListCountriesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCountriesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[17]);
}

// ===================================================================

class ListCountriesResponse::_Internal {
 public:
};

ListCountriesResponse::ListCountriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  countries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListCountriesResponse)
}
ListCountriesResponse::ListCountriesResponse(const ListCountriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      countries_(from.countries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListCountriesResponse)
}

inline void ListCountriesResponse::SharedCtor() {
}

ListCountriesResponse::~ListCountriesResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListCountriesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCountriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListCountriesResponse::ArenaDtor(void* object) {
  ListCountriesResponse* _this = reinterpret_cast< ListCountriesResponse* >(object);
  (void)_this;
}
void ListCountriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCountriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCountriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListCountriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCountriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.CountryList countries = 1 [json_name = "countries"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_countries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCountriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListCountriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.CountryList countries = 1 [json_name = "countries"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_countries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_countries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListCountriesResponse)
  return target;
}

size_t ListCountriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListCountriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.CountryList countries = 1 [json_name = "countries"];
  total_size += 1UL * this->_internal_countries_size();
  for (const auto& msg : this->countries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCountriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCountriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCountriesResponse::GetClassData() const { return &_class_data_; }

void ListCountriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListCountriesResponse *>(to)->MergeFrom(
      static_cast<const ListCountriesResponse &>(from));
}


void ListCountriesResponse::MergeFrom(const ListCountriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListCountriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  countries_.MergeFrom(from.countries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCountriesResponse::CopyFrom(const ListCountriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListCountriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCountriesResponse::IsInitialized() const {
  return true;
}

void ListCountriesResponse::InternalSwap(ListCountriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  countries_.InternalSwap(&other->countries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCountriesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[18]);
}

// ===================================================================

class GetOneCountryRequest::_Internal {
 public:
};

GetOneCountryRequest::GetOneCountryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneCountryRequest)
}
GetOneCountryRequest::GetOneCountryRequest(const GetOneCountryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  country_id_ = from.country_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneCountryRequest)
}

inline void GetOneCountryRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_id_ = 0u;
}

GetOneCountryRequest::~GetOneCountryRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneCountryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneCountryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneCountryRequest::ArenaDtor(void* object) {
  GetOneCountryRequest* _this = reinterpret_cast< GetOneCountryRequest* >(object);
  (void)_this;
}
void GetOneCountryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneCountryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneCountryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneCountryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  country_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneCountryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 country_id = 1 [json_name = "countryId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          country_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneCountryRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneCountryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneCountryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 country_id = 1 [json_name = "countryId"];
  if (this->_internal_country_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_country_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneCountryRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneCountryRequest)
  return target;
}

size_t GetOneCountryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneCountryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 country_id = 1 [json_name = "countryId"];
  if (this->_internal_country_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_country_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneCountryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneCountryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneCountryRequest::GetClassData() const { return &_class_data_; }

void GetOneCountryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneCountryRequest *>(to)->MergeFrom(
      static_cast<const GetOneCountryRequest &>(from));
}


void GetOneCountryRequest::MergeFrom(const GetOneCountryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneCountryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_country_id() != 0) {
    _internal_set_country_id(from._internal_country_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneCountryRequest::CopyFrom(const GetOneCountryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneCountryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneCountryRequest::IsInitialized() const {
  return true;
}

void GetOneCountryRequest::InternalSwap(GetOneCountryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(country_id_, other->country_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneCountryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[19]);
}

// ===================================================================

class GetOneCountryResponse::_Internal {
 public:
};

GetOneCountryResponse::GetOneCountryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneCountryResponse)
}
GetOneCountryResponse::GetOneCountryResponse(const GetOneCountryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_code().empty()) {
    phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_code(), 
      GetArenaForAllocation());
  }
  emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emoji().empty()) {
    emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emoji(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneCountryResponse)
}

inline void GetOneCountryResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

GetOneCountryResponse::~GetOneCountryResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneCountryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneCountryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emoji_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneCountryResponse::ArenaDtor(void* object) {
  GetOneCountryResponse* _this = reinterpret_cast< GetOneCountryResponse* >(object);
  (void)_this;
}
void GetOneCountryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneCountryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneCountryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneCountryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  name_.ClearToEmpty();
  code_.ClearToEmpty();
  phone_code_.ClearToEmpty();
  emoji_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneCountryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneCountryResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 3 [json_name = "code"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneCountryResponse.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_code = 4 [json_name = "phoneCode"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneCountryResponse.phone_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string emoji = 5 [json_name = "emoji"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_emoji();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneCountryResponse.emoji"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.State states = 6 [json_name = "states"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneCountryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneCountryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneCountryResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneCountryResponse.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_code().data(), static_cast<int>(this->_internal_phone_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneCountryResponse.phone_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone_code(), target);
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji().data(), static_cast<int>(this->_internal_emoji().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneCountryResponse.emoji");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_emoji(), target);
  }

  // repeated .accounts.v1alpha1.State states = 6 [json_name = "states"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneCountryResponse)
  return target;
}

size_t GetOneCountryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneCountryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.State states = 6 [json_name = "states"];
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_code());
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneCountryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneCountryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneCountryResponse::GetClassData() const { return &_class_data_; }

void GetOneCountryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneCountryResponse *>(to)->MergeFrom(
      static_cast<const GetOneCountryResponse &>(from));
}


void GetOneCountryResponse::MergeFrom(const GetOneCountryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneCountryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_phone_code().empty()) {
    _internal_set_phone_code(from._internal_phone_code());
  }
  if (!from._internal_emoji().empty()) {
    _internal_set_emoji(from._internal_emoji());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneCountryResponse::CopyFrom(const GetOneCountryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneCountryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneCountryResponse::IsInitialized() const {
  return true;
}

void GetOneCountryResponse::InternalSwap(GetOneCountryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_code_, GetArenaForAllocation(),
      &other->phone_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emoji_, GetArenaForAllocation(),
      &other->emoji_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneCountryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[20]);
}

// ===================================================================

class SendVerificationEmailRequest::_Internal {
 public:
};

SendVerificationEmailRequest::SendVerificationEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.SendVerificationEmailRequest)
}
SendVerificationEmailRequest::SendVerificationEmailRequest(const SendVerificationEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.SendVerificationEmailRequest)
}

inline void SendVerificationEmailRequest::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendVerificationEmailRequest::~SendVerificationEmailRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.SendVerificationEmailRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendVerificationEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendVerificationEmailRequest::ArenaDtor(void* object) {
  SendVerificationEmailRequest* _this = reinterpret_cast< SendVerificationEmailRequest* >(object);
  (void)_this;
}
void SendVerificationEmailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendVerificationEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendVerificationEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.SendVerificationEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty();
  name_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendVerificationEmailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1 [json_name = "email"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendVerificationEmailRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendVerificationEmailRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendVerificationEmailRequest.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendVerificationEmailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.SendVerificationEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendVerificationEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendVerificationEmailRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendVerificationEmailRequest.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.SendVerificationEmailRequest)
  return target;
}

size_t SendVerificationEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.SendVerificationEmailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendVerificationEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendVerificationEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendVerificationEmailRequest::GetClassData() const { return &_class_data_; }

void SendVerificationEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendVerificationEmailRequest *>(to)->MergeFrom(
      static_cast<const SendVerificationEmailRequest &>(from));
}


void SendVerificationEmailRequest::MergeFrom(const SendVerificationEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.SendVerificationEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendVerificationEmailRequest::CopyFrom(const SendVerificationEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.SendVerificationEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendVerificationEmailRequest::IsInitialized() const {
  return true;
}

void SendVerificationEmailRequest::InternalSwap(SendVerificationEmailRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendVerificationEmailRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[21]);
}

// ===================================================================

class SendVerificationEmailResponse::_Internal {
 public:
};

SendVerificationEmailResponse::SendVerificationEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.SendVerificationEmailResponse)
}
SendVerificationEmailResponse::SendVerificationEmailResponse(const SendVerificationEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  html_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_html_result().empty()) {
    html_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_html_result(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.SendVerificationEmailResponse)
}

inline void SendVerificationEmailResponse::SharedCtor() {
html_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendVerificationEmailResponse::~SendVerificationEmailResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.SendVerificationEmailResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendVerificationEmailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  html_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendVerificationEmailResponse::ArenaDtor(void* object) {
  SendVerificationEmailResponse* _this = reinterpret_cast< SendVerificationEmailResponse* >(object);
  (void)_this;
}
void SendVerificationEmailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendVerificationEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendVerificationEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.SendVerificationEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  html_result_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendVerificationEmailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string html_result = 1 [json_name = "htmlResult"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_html_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendVerificationEmailResponse.html_result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendVerificationEmailResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendVerificationEmailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.SendVerificationEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string html_result = 1 [json_name = "htmlResult"];
  if (!this->_internal_html_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_html_result().data(), static_cast<int>(this->_internal_html_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendVerificationEmailResponse.html_result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_html_result(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendVerificationEmailResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.SendVerificationEmailResponse)
  return target;
}

size_t SendVerificationEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.SendVerificationEmailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string html_result = 1 [json_name = "htmlResult"];
  if (!this->_internal_html_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_html_result());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendVerificationEmailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendVerificationEmailResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendVerificationEmailResponse::GetClassData() const { return &_class_data_; }

void SendVerificationEmailResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendVerificationEmailResponse *>(to)->MergeFrom(
      static_cast<const SendVerificationEmailResponse &>(from));
}


void SendVerificationEmailResponse::MergeFrom(const SendVerificationEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.SendVerificationEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_html_result().empty()) {
    _internal_set_html_result(from._internal_html_result());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendVerificationEmailResponse::CopyFrom(const SendVerificationEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.SendVerificationEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendVerificationEmailResponse::IsInitialized() const {
  return true;
}

void SendVerificationEmailResponse::InternalSwap(SendVerificationEmailResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &html_result_, GetArenaForAllocation(),
      &other->html_result_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendVerificationEmailResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[22]);
}

// ===================================================================

class VerifyEmailRequest::_Internal {
 public:
};

VerifyEmailRequest::VerifyEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.VerifyEmailRequest)
}
VerifyEmailRequest::VerifyEmailRequest(const VerifyEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.VerifyEmailRequest)
}

inline void VerifyEmailRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VerifyEmailRequest::~VerifyEmailRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.VerifyEmailRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VerifyEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyEmailRequest::ArenaDtor(void* object) {
  VerifyEmailRequest* _this = reinterpret_cast< VerifyEmailRequest* >(object);
  (void)_this;
}
void VerifyEmailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VerifyEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.VerifyEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyEmailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1 [json_name = "token"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.VerifyEmailRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyEmailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.VerifyEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1 [json_name = "token"];
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.VerifyEmailRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.VerifyEmailRequest)
  return target;
}

size_t VerifyEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.VerifyEmailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1 [json_name = "token"];
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyEmailRequest::GetClassData() const { return &_class_data_; }

void VerifyEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VerifyEmailRequest *>(to)->MergeFrom(
      static_cast<const VerifyEmailRequest &>(from));
}


void VerifyEmailRequest::MergeFrom(const VerifyEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.VerifyEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyEmailRequest::CopyFrom(const VerifyEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.VerifyEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyEmailRequest::IsInitialized() const {
  return true;
}

void VerifyEmailRequest::InternalSwap(VerifyEmailRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyEmailRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[23]);
}

// ===================================================================

class VerifyEmailResponse::_Internal {
 public:
};

VerifyEmailResponse::VerifyEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.VerifyEmailResponse)
}
VerifyEmailResponse::VerifyEmailResponse(const VerifyEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.VerifyEmailResponse)
}

inline void VerifyEmailResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VerifyEmailResponse::~VerifyEmailResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.VerifyEmailResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VerifyEmailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyEmailResponse::ArenaDtor(void* object) {
  VerifyEmailResponse* _this = reinterpret_cast< VerifyEmailResponse* >(object);
  (void)_this;
}
void VerifyEmailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VerifyEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.VerifyEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyEmailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.VerifyEmailResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.VerifyEmailResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyEmailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.VerifyEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.VerifyEmailResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.VerifyEmailResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.VerifyEmailResponse)
  return target;
}

size_t VerifyEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.VerifyEmailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyEmailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyEmailResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyEmailResponse::GetClassData() const { return &_class_data_; }

void VerifyEmailResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VerifyEmailResponse *>(to)->MergeFrom(
      static_cast<const VerifyEmailResponse &>(from));
}


void VerifyEmailResponse::MergeFrom(const VerifyEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.VerifyEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyEmailResponse::CopyFrom(const VerifyEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.VerifyEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyEmailResponse::IsInitialized() const {
  return true;
}

void VerifyEmailResponse::InternalSwap(VerifyEmailResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyEmailResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[24]);
}

// ===================================================================

class CheckUserRequest::_Internal {
 public:
};

CheckUserRequest::CheckUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CheckUserRequest)
}
CheckUserRequest::CheckUserRequest(const CheckUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_ids_(from.roles_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_permission().empty()) {
    permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_permission(), 
      GetArenaForAllocation());
  }
  user_id_dex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_dex().empty()) {
    user_id_dex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_dex(), 
      GetArenaForAllocation());
  }
  user_id_admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_admin().empty()) {
    user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_admin(), 
      GetArenaForAllocation());
  }
  type_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_permission().empty()) {
    type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_permission(), 
      GetArenaForAllocation());
  }
  api_key_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_key_value().empty()) {
    api_key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_key_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&organization_id_, &from.organization_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&organization_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CheckUserRequest)
}

inline void CheckUserRequest::SharedCtor() {
permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_dex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
api_key_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&organization_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&organization_id_)) + sizeof(user_id_));
}

CheckUserRequest::~CheckUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CheckUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_dex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_admin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckUserRequest::ArenaDtor(void* object) {
  CheckUserRequest* _this = reinterpret_cast< CheckUserRequest* >(object);
  (void)_this;
}
void CheckUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CheckUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_ids_.Clear();
  permission_.ClearToEmpty();
  user_id_dex_.ClearToEmpty();
  user_id_admin_.ClearToEmpty();
  type_permission_.ClearToEmpty();
  api_key_value_.ClearToEmpty();
  ::memset(&organization_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&organization_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 get_organization_from_project = 3 [json_name = "getOrganizationFromProject"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          get_organization_from_project_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string permission = 4 [json_name = "permission"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_permission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CheckUserRequest.permission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_dex = 5 [json_name = "userIdDex"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id_dex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CheckUserRequest.user_id_dex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_admin = 6 [json_name = "userIdAdmin"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_id_admin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CheckUserRequest.user_id_admin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7 [json_name = "userId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_permission = 9 [json_name = "typePermission"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_type_permission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CheckUserRequest.type_permission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 roles_ids = 10 [json_name = "rolesIds"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_roles_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_key_value = 11 [json_name = "apiKeyValue"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_api_key_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CheckUserRequest.api_key_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CheckUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_organization_id(), target);
  }

  // uint32 project_id = 2 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_project_id(), target);
  }

  // uint32 get_organization_from_project = 3 [json_name = "getOrganizationFromProject"];
  if (this->_internal_get_organization_from_project() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_get_organization_from_project(), target);
  }

  // string permission = 4 [json_name = "permission"];
  if (!this->_internal_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CheckUserRequest.permission");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_permission(), target);
  }

  // string user_id_dex = 5 [json_name = "userIdDex"];
  if (!this->_internal_user_id_dex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_dex().data(), static_cast<int>(this->_internal_user_id_dex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CheckUserRequest.user_id_dex");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id_dex(), target);
  }

  // string user_id_admin = 6 [json_name = "userIdAdmin"];
  if (!this->_internal_user_id_admin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_admin().data(), static_cast<int>(this->_internal_user_id_admin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CheckUserRequest.user_id_admin");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id_admin(), target);
  }

  // uint32 user_id = 7 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  // string type_permission = 9 [json_name = "typePermission"];
  if (!this->_internal_type_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_permission().data(), static_cast<int>(this->_internal_type_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CheckUserRequest.type_permission");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_type_permission(), target);
  }

  // repeated uint32 roles_ids = 10 [json_name = "rolesIds"];
  {
    int byte_size = _roles_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_roles_ids(), byte_size, target);
    }
  }

  // string api_key_value = 11 [json_name = "apiKeyValue"];
  if (!this->_internal_api_key_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key_value().data(), static_cast<int>(this->_internal_api_key_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CheckUserRequest.api_key_value");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_api_key_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CheckUserRequest)
  return target;
}

size_t CheckUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CheckUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 roles_ids = 10 [json_name = "rolesIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->roles_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roles_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string permission = 4 [json_name = "permission"];
  if (!this->_internal_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // string user_id_dex = 5 [json_name = "userIdDex"];
  if (!this->_internal_user_id_dex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_dex());
  }

  // string user_id_admin = 6 [json_name = "userIdAdmin"];
  if (!this->_internal_user_id_admin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_admin());
  }

  // string type_permission = 9 [json_name = "typePermission"];
  if (!this->_internal_type_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_permission());
  }

  // string api_key_value = 11 [json_name = "apiKeyValue"];
  if (!this->_internal_api_key_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key_value());
  }

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  // uint32 project_id = 2 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  // uint32 get_organization_from_project = 3 [json_name = "getOrganizationFromProject"];
  if (this->_internal_get_organization_from_project() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_get_organization_from_project());
  }

  // uint32 user_id = 7 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckUserRequest::GetClassData() const { return &_class_data_; }

void CheckUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CheckUserRequest *>(to)->MergeFrom(
      static_cast<const CheckUserRequest &>(from));
}


void CheckUserRequest::MergeFrom(const CheckUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CheckUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_ids_.MergeFrom(from.roles_ids_);
  if (!from._internal_permission().empty()) {
    _internal_set_permission(from._internal_permission());
  }
  if (!from._internal_user_id_dex().empty()) {
    _internal_set_user_id_dex(from._internal_user_id_dex());
  }
  if (!from._internal_user_id_admin().empty()) {
    _internal_set_user_id_admin(from._internal_user_id_admin());
  }
  if (!from._internal_type_permission().empty()) {
    _internal_set_type_permission(from._internal_type_permission());
  }
  if (!from._internal_api_key_value().empty()) {
    _internal_set_api_key_value(from._internal_api_key_value());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_get_organization_from_project() != 0) {
    _internal_set_get_organization_from_project(from._internal_get_organization_from_project());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckUserRequest::CopyFrom(const CheckUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CheckUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserRequest::IsInitialized() const {
  return true;
}

void CheckUserRequest::InternalSwap(CheckUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_ids_.InternalSwap(&other->roles_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &permission_, GetArenaForAllocation(),
      &other->permission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_dex_, GetArenaForAllocation(),
      &other->user_id_dex_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_admin_, GetArenaForAllocation(),
      &other->user_id_admin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_permission_, GetArenaForAllocation(),
      &other->type_permission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_key_value_, GetArenaForAllocation(),
      &other->api_key_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckUserRequest, user_id_)
      + sizeof(CheckUserRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(CheckUserRequest, organization_id_)>(
          reinterpret_cast<char*>(&organization_id_),
          reinterpret_cast<char*>(&other->organization_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[25]);
}

// ===================================================================

class CheckUserResponse::_Internal {
 public:
};

CheckUserResponse::CheckUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CheckUserResponse)
}
CheckUserResponse::CheckUserResponse(const CheckUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_exists_, &from.is_exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&is_exists_)) + sizeof(is_admin_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CheckUserResponse)
}

inline void CheckUserResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_exists_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&is_exists_)) + sizeof(is_admin_));
}

CheckUserResponse::~CheckUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CheckUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckUserResponse::ArenaDtor(void* object) {
  CheckUserResponse* _this = reinterpret_cast< CheckUserResponse* >(object);
  (void)_this;
}
void CheckUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CheckUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  msg_.ClearToEmpty();
  ::memset(&is_exists_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_admin_) -
      reinterpret_cast<char*>(&is_exists_)) + sizeof(is_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_exists = 1 [json_name = "isExists"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CheckUserResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 3 [json_name = "isAdmin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 4 [json_name = "msg"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CheckUserResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CheckUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_exists = 1 [json_name = "isExists"];
  if (this->_internal_is_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_exists(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CheckUserResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // bool is_admin = 3 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_admin(), target);
  }

  // string msg = 4 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CheckUserResponse.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CheckUserResponse)
  return target;
}

size_t CheckUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CheckUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // string msg = 4 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool is_exists = 1 [json_name = "isExists"];
  if (this->_internal_is_exists() != 0) {
    total_size += 1 + 1;
  }

  // bool is_admin = 3 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckUserResponse::GetClassData() const { return &_class_data_; }

void CheckUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CheckUserResponse *>(to)->MergeFrom(
      static_cast<const CheckUserResponse &>(from));
}


void CheckUserResponse::MergeFrom(const CheckUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CheckUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_is_exists() != 0) {
    _internal_set_is_exists(from._internal_is_exists());
  }
  if (from._internal_is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckUserResponse::CopyFrom(const CheckUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CheckUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserResponse::IsInitialized() const {
  return true;
}

void CheckUserResponse::InternalSwap(CheckUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckUserResponse, is_admin_)
      + sizeof(CheckUserResponse::is_admin_)
      - PROTOBUF_FIELD_OFFSET(CheckUserResponse, is_exists_)>(
          reinterpret_cast<char*>(&is_exists_),
          reinterpret_cast<char*>(&other->is_exists_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[26]);
}

// ===================================================================

class UsersDex::_Internal {
 public:
};

UsersDex::UsersDex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UsersDex)
}
UsersDex::UsersDex(const UsersDex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UsersDex)
}

inline void UsersDex::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UsersDex::~UsersDex() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UsersDex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UsersDex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UsersDex::ArenaDtor(void* object) {
  UsersDex* _this = reinterpret_cast< UsersDex* >(object);
  (void)_this;
}
void UsersDex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsersDex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UsersDex::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UsersDex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  provider_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersDex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UsersDex.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider = 2 [json_name = "provider"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UsersDex.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsersDex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UsersDex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UsersDex.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string provider = 2 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UsersDex.provider");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_provider(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UsersDex)
  return target;
}

size_t UsersDex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UsersDex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string provider = 2 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsersDex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UsersDex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsersDex::GetClassData() const { return &_class_data_; }

void UsersDex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UsersDex *>(to)->MergeFrom(
      static_cast<const UsersDex &>(from));
}


void UsersDex::MergeFrom(const UsersDex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UsersDex)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_provider().empty()) {
    _internal_set_provider(from._internal_provider());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsersDex::CopyFrom(const UsersDex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UsersDex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersDex::IsInitialized() const {
  return true;
}

void UsersDex::InternalSwap(UsersDex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_, GetArenaForAllocation(),
      &other->provider_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersDex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[27]);
}

// ===================================================================

class CreateUserResponse::_Internal {
 public:
};

CreateUserResponse::CreateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateUserResponse)
}
CreateUserResponse::CreateUserResponse(const CreateUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateUserResponse)
}

inline void CreateUserResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateUserResponse::~CreateUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateUserResponse::ArenaDtor(void* object) {
  CreateUserResponse* _this = reinterpret_cast< CreateUserResponse* >(object);
  (void)_this;
}
void CreateUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateUserResponse)
  return target;
}

size_t CreateUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUserResponse::GetClassData() const { return &_class_data_; }

void CreateUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateUserResponse *>(to)->MergeFrom(
      static_cast<const CreateUserResponse &>(from));
}


void CreateUserResponse::MergeFrom(const CreateUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUserResponse::CopyFrom(const CreateUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserResponse::IsInitialized() const {
  return true;
}

void CreateUserResponse::InternalSwap(CreateUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[28]);
}

// ===================================================================

class UpdateUserResponse::_Internal {
 public:
};

UpdateUserResponse::UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateUserResponse)
}
UpdateUserResponse::UpdateUserResponse(const UpdateUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateUserResponse)
}

inline void UpdateUserResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateUserResponse::~UpdateUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateUserResponse::ArenaDtor(void* object) {
  UpdateUserResponse* _this = reinterpret_cast< UpdateUserResponse* >(object);
  (void)_this;
}
void UpdateUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateUserResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateUserResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateUserResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateUserResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateUserResponse)
  return target;
}

size_t UpdateUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserResponse::GetClassData() const { return &_class_data_; }

void UpdateUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateUserResponse *>(to)->MergeFrom(
      static_cast<const UpdateUserResponse &>(from));
}


void UpdateUserResponse::MergeFrom(const UpdateUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserResponse::CopyFrom(const UpdateUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserResponse::IsInitialized() const {
  return true;
}

void UpdateUserResponse::InternalSwap(UpdateUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[29]);
}

// ===================================================================

class DeleteUserResponse::_Internal {
 public:
};

DeleteUserResponse::DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteUserResponse)
}
DeleteUserResponse::DeleteUserResponse(const DeleteUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteUserResponse)
}

inline void DeleteUserResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteUserResponse::~DeleteUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteUserResponse::ArenaDtor(void* object) {
  DeleteUserResponse* _this = reinterpret_cast< DeleteUserResponse* >(object);
  (void)_this;
}
void DeleteUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteUserResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteUserResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteUserResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteUserResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteUserResponse)
  return target;
}

size_t DeleteUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteUserResponse::GetClassData() const { return &_class_data_; }

void DeleteUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteUserResponse *>(to)->MergeFrom(
      static_cast<const DeleteUserResponse &>(from));
}


void DeleteUserResponse::MergeFrom(const DeleteUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteUserResponse::CopyFrom(const DeleteUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserResponse::IsInitialized() const {
  return true;
}

void DeleteUserResponse::InternalSwap(DeleteUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[30]);
}

// ===================================================================

class ListUserRequest::_Internal {
 public:
};

ListUserRequest::ListUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListUserRequest)
}
ListUserRequest::ListUserRequest(const ListUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&organization_id_, &from.organization_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&project_id_) -
    reinterpret_cast<char*>(&organization_id_)) + sizeof(project_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListUserRequest)
}

inline void ListUserRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&organization_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&project_id_) -
    reinterpret_cast<char*>(&organization_id_)) + sizeof(project_id_));
}

ListUserRequest::~ListUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListUserRequest::ArenaDtor(void* object) {
  ListUserRequest* _this = reinterpret_cast< ListUserRequest* >(object);
  (void)_this;
}
void ListUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&organization_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&project_id_) -
      reinterpret_cast<char*>(&organization_id_)) + sizeof(project_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_organization_id(), target);
  }

  // uint32 project_id = 2 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListUserRequest)
  return target;
}

size_t ListUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  // uint32 project_id = 2 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListUserRequest::GetClassData() const { return &_class_data_; }

void ListUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListUserRequest *>(to)->MergeFrom(
      static_cast<const ListUserRequest &>(from));
}


void ListUserRequest::MergeFrom(const ListUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListUserRequest::CopyFrom(const ListUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserRequest::IsInitialized() const {
  return true;
}

void ListUserRequest::InternalSwap(ListUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListUserRequest, project_id_)
      + sizeof(ListUserRequest::project_id_)
      - PROTOBUF_FIELD_OFFSET(ListUserRequest, organization_id_)>(
          reinterpret_cast<char*>(&organization_id_),
          reinterpret_cast<char*>(&other->organization_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[31]);
}

// ===================================================================

class CreateUserRequest::_Internal {
 public:
};

CreateUserRequest::CreateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_ids_(arena),
  permissions_ids_(arena),
  organizations_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateUserRequest)
}
CreateUserRequest::CreateUserRequest(const CreateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_ids_(from.roles_ids_),
      permissions_ids_(from.permissions_ids_),
      organizations_ids_(from.organizations_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_number().empty()) {
    phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_number(), 
      GetArenaForAllocation());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_city(), 
      GetArenaForAllocation());
  }
  zip_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zip_code().empty()) {
    zip_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zip_code(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  emoji_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emoji_country().empty()) {
    emoji_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emoji_country(), 
      GetArenaForAllocation());
  }
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_code().empty()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArenaForAllocation());
  }
  is_active_ = from.is_active_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateUserRequest)
}

inline void CreateUserRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zip_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emoji_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_active_ = false;
}

CreateUserRequest::~CreateUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zip_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emoji_country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateUserRequest::ArenaDtor(void* object) {
  CreateUserRequest* _this = reinterpret_cast< CreateUserRequest* >(object);
  (void)_this;
}
void CreateUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_ids_.Clear();
  permissions_ids_.Clear();
  organizations_ids_.Clear();
  user_id_.ClearToEmpty();
  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  email_.ClearToEmpty();
  phone_number_.ClearToEmpty();
  country_.ClearToEmpty();
  city_.ClearToEmpty();
  zip_code_.ClearToEmpty();
  address_.ClearToEmpty();
  state_.ClearToEmpty();
  emoji_country_.ClearToEmpty();
  invitation_code_.ClearToEmpty();
  is_active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 2 [json_name = "firstName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 3 [json_name = "lastName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 4 [json_name = "email"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 5 [json_name = "isActive"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 roles_ids = 6 [json_name = "rolesIds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_roles_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 permissions_ids = 7 [json_name = "permissionsIds"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_permissions_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 organizations_ids = 8 [json_name = "organizationsIds"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_organizations_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_organizations_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_number = 9 [json_name = "phoneNumber"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.phone_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 10 [json_name = "country"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 11 [json_name = "city"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string zip_code = 12 [json_name = "zipCode"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_zip_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.zip_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 13 [json_name = "address"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 14 [json_name = "state"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string emoji_country = 15 [json_name = "emojiCountry"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_emoji_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.emoji_country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invitation_code = 16 [json_name = "invitationCode"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateUserRequest.invitation_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string first_name = 2 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.first_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_name(), target);
  }

  // string last_name = 3 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.last_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_name(), target);
  }

  // string email = 4 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // bool is_active = 5 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_active(), target);
  }

  // repeated uint32 roles_ids = 6 [json_name = "rolesIds"];
  {
    int byte_size = _roles_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_roles_ids(), byte_size, target);
    }
  }

  // repeated uint32 permissions_ids = 7 [json_name = "permissionsIds"];
  {
    int byte_size = _permissions_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_permissions_ids(), byte_size, target);
    }
  }

  // repeated uint32 organizations_ids = 8 [json_name = "organizationsIds"];
  {
    int byte_size = _organizations_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_organizations_ids(), byte_size, target);
    }
  }

  // string phone_number = 9 [json_name = "phoneNumber"];
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.phone_number");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_phone_number(), target);
  }

  // string country = 10 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.country");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_country(), target);
  }

  // string city = 11 [json_name = "city"];
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.city");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_city(), target);
  }

  // string zip_code = 12 [json_name = "zipCode"];
  if (!this->_internal_zip_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zip_code().data(), static_cast<int>(this->_internal_zip_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.zip_code");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_zip_code(), target);
  }

  // string address = 13 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_address(), target);
  }

  // string state = 14 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.state");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_state(), target);
  }

  // string emoji_country = 15 [json_name = "emojiCountry"];
  if (!this->_internal_emoji_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji_country().data(), static_cast<int>(this->_internal_emoji_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.emoji_country");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_emoji_country(), target);
  }

  // string invitation_code = 16 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateUserRequest.invitation_code");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_invitation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateUserRequest)
  return target;
}

size_t CreateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 roles_ids = 6 [json_name = "rolesIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->roles_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roles_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 permissions_ids = 7 [json_name = "permissionsIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->permissions_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _permissions_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 organizations_ids = 8 [json_name = "organizationsIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->organizations_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _organizations_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string first_name = 2 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 3 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string email = 4 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string phone_number = 9 [json_name = "phoneNumber"];
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string country = 10 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string city = 11 [json_name = "city"];
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string zip_code = 12 [json_name = "zipCode"];
  if (!this->_internal_zip_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zip_code());
  }

  // string address = 13 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string state = 14 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string emoji_country = 15 [json_name = "emojiCountry"];
  if (!this->_internal_emoji_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji_country());
  }

  // string invitation_code = 16 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  // bool is_active = 5 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUserRequest::GetClassData() const { return &_class_data_; }

void CreateUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateUserRequest *>(to)->MergeFrom(
      static_cast<const CreateUserRequest &>(from));
}


void CreateUserRequest::MergeFrom(const CreateUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_ids_.MergeFrom(from.roles_ids_);
  permissions_ids_.MergeFrom(from.permissions_ids_);
  organizations_ids_.MergeFrom(from.organizations_ids_);
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_phone_number().empty()) {
    _internal_set_phone_number(from._internal_phone_number());
  }
  if (!from._internal_country().empty()) {
    _internal_set_country(from._internal_country());
  }
  if (!from._internal_city().empty()) {
    _internal_set_city(from._internal_city());
  }
  if (!from._internal_zip_code().empty()) {
    _internal_set_zip_code(from._internal_zip_code());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (!from._internal_emoji_country().empty()) {
    _internal_set_emoji_country(from._internal_emoji_country());
  }
  if (!from._internal_invitation_code().empty()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUserRequest::CopyFrom(const CreateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRequest::IsInitialized() const {
  return true;
}

void CreateUserRequest::InternalSwap(CreateUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_ids_.InternalSwap(&other->roles_ids_);
  permissions_ids_.InternalSwap(&other->permissions_ids_);
  organizations_ids_.InternalSwap(&other->organizations_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, GetArenaForAllocation(),
      &other->first_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_, GetArenaForAllocation(),
      &other->last_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_number_, GetArenaForAllocation(),
      &other->phone_number_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, GetArenaForAllocation(),
      &other->country_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &city_, GetArenaForAllocation(),
      &other->city_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zip_code_, GetArenaForAllocation(),
      &other->zip_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, GetArenaForAllocation(),
      &other->state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emoji_country_, GetArenaForAllocation(),
      &other->emoji_country_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_code_, GetArenaForAllocation(),
      &other->invitation_code_, other->GetArenaForAllocation()
  );
  swap(is_active_, other->is_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[32]);
}

// ===================================================================

class UpdateUserRequest::_Internal {
 public:
  static const ::accounts::v1alpha1::CreateUserRequest& auth(const UpdateUserRequest* msg);
};

const ::accounts::v1alpha1::CreateUserRequest&
UpdateUserRequest::_Internal::auth(const UpdateUserRequest* msg) {
  return *msg->auth_;
}
UpdateUserRequest::UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateUserRequest)
}
UpdateUserRequest::UpdateUserRequest(const UpdateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_auth()) {
    auth_ = new ::accounts::v1alpha1::CreateUserRequest(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  auth_id_ = from.auth_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateUserRequest)
}

inline void UpdateUserRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_id_) -
    reinterpret_cast<char*>(&auth_)) + sizeof(auth_id_));
}

UpdateUserRequest::~UpdateUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete auth_;
}

void UpdateUserRequest::ArenaDtor(void* object) {
  UpdateUserRequest* _this = reinterpret_cast< UpdateUserRequest* >(object);
  (void)_this;
}
void UpdateUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  auth_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 auth_id = 1 [json_name = "authId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auth_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.CreateUserRequest auth = 2 [json_name = "auth"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 auth_id = 1 [json_name = "authId"];
  if (this->_internal_auth_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_auth_id(), target);
  }

  // .accounts.v1alpha1.CreateUserRequest auth = 2 [json_name = "auth"];
  if (this->_internal_has_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateUserRequest)
  return target;
}

size_t UpdateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .accounts.v1alpha1.CreateUserRequest auth = 2 [json_name = "auth"];
  if (this->_internal_has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  // uint32 auth_id = 1 [json_name = "authId"];
  if (this->_internal_auth_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_auth_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserRequest::GetClassData() const { return &_class_data_; }

void UpdateUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateUserRequest *>(to)->MergeFrom(
      static_cast<const UpdateUserRequest &>(from));
}


void UpdateUserRequest::MergeFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_auth()) {
    _internal_mutable_auth()->::accounts::v1alpha1::CreateUserRequest::MergeFrom(from._internal_auth());
  }
  if (from._internal_auth_id() != 0) {
    _internal_set_auth_id(from._internal_auth_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserRequest::CopyFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserRequest::IsInitialized() const {
  return true;
}

void UpdateUserRequest::InternalSwap(UpdateUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateUserRequest, auth_id_)
      + sizeof(UpdateUserRequest::auth_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateUserRequest, auth_)>(
          reinterpret_cast<char*>(&auth_),
          reinterpret_cast<char*>(&other->auth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[33]);
}

// ===================================================================

class DeleteUserRequest::_Internal {
 public:
};

DeleteUserRequest::DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteUserRequest)
}
DeleteUserRequest::DeleteUserRequest(const DeleteUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(organization_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteUserRequest)
}

inline void DeleteUserRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(organization_id_));
}

DeleteUserRequest::~DeleteUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteUserRequest::ArenaDtor(void* object) {
  DeleteUserRequest* _this = reinterpret_cast< DeleteUserRequest* >(object);
  (void)_this;
}
void DeleteUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&organization_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(organization_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteUserRequest)
  return target;
}

size_t DeleteUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteUserRequest::GetClassData() const { return &_class_data_; }

void DeleteUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteUserRequest *>(to)->MergeFrom(
      static_cast<const DeleteUserRequest &>(from));
}


void DeleteUserRequest::MergeFrom(const DeleteUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteUserRequest::CopyFrom(const DeleteUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserRequest::IsInitialized() const {
  return true;
}

void DeleteUserRequest::InternalSwap(DeleteUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteUserRequest, organization_id_)
      + sizeof(DeleteUserRequest::organization_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteUserRequest, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[34]);
}

// ===================================================================

class UserList::_Internal {
 public:
};

UserList::UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UserList)
}
UserList::UserList(const UserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_super_user_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UserList)
}

inline void UserList::SharedCtor() {
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_super_user_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UserList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserList::ArenaDtor(void* object) {
  UserList* _this = reinterpret_cast< UserList* >(object);
  (void)_this;
}
void UserList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  email_.ClearToEmpty();
  user_id_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_super_user_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 2 [json_name = "firstName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UserList.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 3 [json_name = "lastName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UserList.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 4 [json_name = "email"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UserList.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 5 [json_name = "userId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UserList.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 6 [json_name = "isActive"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_super_user = 7 [json_name = "isSuperUser"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_super_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string first_name = 2 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UserList.first_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_name(), target);
  }

  // string last_name = 3 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UserList.last_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_name(), target);
  }

  // string email = 4 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UserList.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // string user_id = 5 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UserList.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // bool is_active = 6 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_active(), target);
  }

  // bool is_super_user = 7 [json_name = "isSuperUser"];
  if (this->_internal_is_super_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_super_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UserList)
  return target;
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string first_name = 2 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 3 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string email = 4 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string user_id = 5 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool is_active = 6 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_super_user = 7 [json_name = "isSuperUser"];
  if (this->_internal_is_super_user() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserList::GetClassData() const { return &_class_data_; }

void UserList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UserList *>(to)->MergeFrom(
      static_cast<const UserList &>(from));
}


void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_is_super_user() != 0) {
    _internal_set_is_super_user(from._internal_is_super_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::InternalSwap(UserList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, GetArenaForAllocation(),
      &other->first_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_, GetArenaForAllocation(),
      &other->last_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserList, is_super_user_)
      + sizeof(UserList::is_super_user_)
      - PROTOBUF_FIELD_OFFSET(UserList, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[35]);
}

// ===================================================================

class GetOneUserRequest::_Internal {
 public:
};

GetOneUserRequest::GetOneUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneUserRequest)
}
GetOneUserRequest::GetOneUserRequest(const GetOneUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneUserRequest)
}

inline void GetOneUserRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
}

GetOneUserRequest::~GetOneUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOneUserRequest::ArenaDtor(void* object) {
  GetOneUserRequest* _this = reinterpret_cast< GetOneUserRequest* >(object);
  (void)_this;
}
void GetOneUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&organization_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneUserRequest)
  return target;
}

size_t GetOneUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneUserRequest::GetClassData() const { return &_class_data_; }

void GetOneUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneUserRequest *>(to)->MergeFrom(
      static_cast<const GetOneUserRequest &>(from));
}


void GetOneUserRequest::MergeFrom(const GetOneUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneUserRequest::CopyFrom(const GetOneUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneUserRequest::IsInitialized() const {
  return true;
}

void GetOneUserRequest::InternalSwap(GetOneUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOneUserRequest, organization_id_)
      + sizeof(GetOneUserRequest::organization_id_)
      - PROTOBUF_FIELD_OFFSET(GetOneUserRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[36]);
}

// ===================================================================

class GetOneUserResponse::_Internal {
 public:
};

GetOneUserResponse::GetOneUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena),
  permissions_(arena),
  organizations_(arena),
  projects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneUserResponse)
}
GetOneUserResponse::GetOneUserResponse(const GetOneUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_),
      permissions_(from.permissions_),
      organizations_(from.organizations_),
      projects_(from.projects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_number().empty()) {
    phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_number(), 
      GetArenaForAllocation());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_city(), 
      GetArenaForAllocation());
  }
  zip_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zip_code().empty()) {
    zip_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zip_code(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  emoji_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emoji_country().empty()) {
    emoji_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emoji_country(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_super_user_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneUserResponse)
}

inline void GetOneUserResponse::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zip_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emoji_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_super_user_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
}

GetOneUserResponse::~GetOneUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zip_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emoji_country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneUserResponse::ArenaDtor(void* object) {
  GetOneUserResponse* _this = reinterpret_cast< GetOneUserResponse* >(object);
  (void)_this;
}
void GetOneUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  permissions_.Clear();
  organizations_.Clear();
  projects_.Clear();
  user_id_.ClearToEmpty();
  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  email_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  phone_number_.ClearToEmpty();
  country_.ClearToEmpty();
  city_.ClearToEmpty();
  zip_code_.ClearToEmpty();
  address_.ClearToEmpty();
  state_.ClearToEmpty();
  emoji_country_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_super_user_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 3 [json_name = "firstName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 4 [json_name = "lastName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 5 [json_name = "email"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 6 [json_name = "isActive"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created_at = 7 [json_name = "createdAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.created_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updated_at = 8 [json_name = "updatedAt"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.updated_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_super_user = 11 [json_name = "isSuperUser"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_super_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_organizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Project projects = 13 [json_name = "projects"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // string phone_number = 14 [json_name = "phoneNumber"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.phone_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 15 [json_name = "country"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 16 [json_name = "city"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string zip_code = 17 [json_name = "zipCode"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_zip_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.zip_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 18 [json_name = "address"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 19 [json_name = "state"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string emoji_country = 20 [json_name = "emojiCountry"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_emoji_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserResponse.emoji_country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string first_name = 3 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string email = 5 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.email");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_email(), target);
  }

  // bool is_active = 6 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_active(), target);
  }

  // string created_at = 7 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.created_at");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_created_at(), target);
  }

  // string updated_at = 8 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.updated_at");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_updated_at(), target);
  }

  // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_roles(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_permissions(i), target, stream);
  }

  // bool is_super_user = 11 [json_name = "isSuperUser"];
  if (this->_internal_is_super_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_super_user(), target);
  }

  // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_organizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_organizations(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Project projects = 13 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_projects(i), target, stream);
  }

  // string phone_number = 14 [json_name = "phoneNumber"];
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.phone_number");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_phone_number(), target);
  }

  // string country = 15 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.country");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_country(), target);
  }

  // string city = 16 [json_name = "city"];
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.city");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_city(), target);
  }

  // string zip_code = 17 [json_name = "zipCode"];
  if (!this->_internal_zip_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zip_code().data(), static_cast<int>(this->_internal_zip_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.zip_code");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_zip_code(), target);
  }

  // string address = 18 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.address");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_address(), target);
  }

  // string state = 19 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.state");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_state(), target);
  }

  // string emoji_country = 20 [json_name = "emojiCountry"];
  if (!this->_internal_emoji_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji_country().data(), static_cast<int>(this->_internal_emoji_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserResponse.emoji_country");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_emoji_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneUserResponse)
  return target;
}

size_t GetOneUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
  total_size += 1UL * this->_internal_organizations_size();
  for (const auto& msg : this->organizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Project projects = 13 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string first_name = 3 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string email = 5 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string created_at = 7 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 8 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // string phone_number = 14 [json_name = "phoneNumber"];
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string country = 15 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string city = 16 [json_name = "city"];
  if (!this->_internal_city().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string zip_code = 17 [json_name = "zipCode"];
  if (!this->_internal_zip_code().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zip_code());
  }

  // string address = 18 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string state = 19 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string emoji_country = 20 [json_name = "emojiCountry"];
  if (!this->_internal_emoji_country().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji_country());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool is_active = 6 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_super_user = 11 [json_name = "isSuperUser"];
  if (this->_internal_is_super_user() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneUserResponse::GetClassData() const { return &_class_data_; }

void GetOneUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneUserResponse *>(to)->MergeFrom(
      static_cast<const GetOneUserResponse &>(from));
}


void GetOneUserResponse::MergeFrom(const GetOneUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  permissions_.MergeFrom(from.permissions_);
  organizations_.MergeFrom(from.organizations_);
  projects_.MergeFrom(from.projects_);
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (!from._internal_phone_number().empty()) {
    _internal_set_phone_number(from._internal_phone_number());
  }
  if (!from._internal_country().empty()) {
    _internal_set_country(from._internal_country());
  }
  if (!from._internal_city().empty()) {
    _internal_set_city(from._internal_city());
  }
  if (!from._internal_zip_code().empty()) {
    _internal_set_zip_code(from._internal_zip_code());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (!from._internal_emoji_country().empty()) {
    _internal_set_emoji_country(from._internal_emoji_country());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_is_super_user() != 0) {
    _internal_set_is_super_user(from._internal_is_super_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneUserResponse::CopyFrom(const GetOneUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneUserResponse::IsInitialized() const {
  return true;
}

void GetOneUserResponse::InternalSwap(GetOneUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  permissions_.InternalSwap(&other->permissions_);
  organizations_.InternalSwap(&other->organizations_);
  projects_.InternalSwap(&other->projects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, GetArenaForAllocation(),
      &other->first_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_, GetArenaForAllocation(),
      &other->last_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, GetArenaForAllocation(),
      &other->created_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, GetArenaForAllocation(),
      &other->updated_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_number_, GetArenaForAllocation(),
      &other->phone_number_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, GetArenaForAllocation(),
      &other->country_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &city_, GetArenaForAllocation(),
      &other->city_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zip_code_, GetArenaForAllocation(),
      &other->zip_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, GetArenaForAllocation(),
      &other->state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emoji_country_, GetArenaForAllocation(),
      &other->emoji_country_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOneUserResponse, is_super_user_)
      + sizeof(GetOneUserResponse::is_super_user_)
      - PROTOBUF_FIELD_OFFSET(GetOneUserResponse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[37]);
}

// ===================================================================

class ListUserResponse::_Internal {
 public:
};

ListUserResponse::ListUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListUserResponse)
}
ListUserResponse::ListUserResponse(const ListUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListUserResponse)
}

inline void ListUserResponse::SharedCtor() {
}

ListUserResponse::~ListUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListUserResponse::ArenaDtor(void* object) {
  ListUserResponse* _this = reinterpret_cast< ListUserResponse* >(object);
  (void)_this;
}
void ListUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListUserResponse)
  return target;
}

size_t ListUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListUserResponse::GetClassData() const { return &_class_data_; }

void ListUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListUserResponse *>(to)->MergeFrom(
      static_cast<const ListUserResponse &>(from));
}


void ListUserResponse::MergeFrom(const ListUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListUserResponse::CopyFrom(const ListUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserResponse::IsInitialized() const {
  return true;
}

void ListUserResponse::InternalSwap(ListUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[38]);
}

// ===================================================================

class ListUserPaginationRequest::_Internal {
 public:
};

ListUserPaginationRequest::ListUserPaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListUserPaginationRequest)
}
ListUserPaginationRequest::ListUserPaginationRequest(const ListUserPaginationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListUserPaginationRequest)
}

inline void ListUserPaginationRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

ListUserPaginationRequest::~ListUserPaginationRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListUserPaginationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListUserPaginationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListUserPaginationRequest::ArenaDtor(void* object) {
  ListUserPaginationRequest* _this = reinterpret_cast< ListUserPaginationRequest* >(object);
  (void)_this;
}
void ListUserPaginationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserPaginationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListUserPaginationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListUserPaginationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserPaginationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1 [json_name = "offset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserPaginationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListUserPaginationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListUserPaginationRequest)
  return target;
}

size_t ListUserPaginationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListUserPaginationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListUserPaginationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListUserPaginationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListUserPaginationRequest::GetClassData() const { return &_class_data_; }

void ListUserPaginationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListUserPaginationRequest *>(to)->MergeFrom(
      static_cast<const ListUserPaginationRequest &>(from));
}


void ListUserPaginationRequest::MergeFrom(const ListUserPaginationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListUserPaginationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListUserPaginationRequest::CopyFrom(const ListUserPaginationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListUserPaginationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserPaginationRequest::IsInitialized() const {
  return true;
}

void ListUserPaginationRequest::InternalSwap(ListUserPaginationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListUserPaginationRequest, limit_)
      + sizeof(ListUserPaginationRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(ListUserPaginationRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserPaginationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[39]);
}

// ===================================================================

class ListUserPaginationResponse::_Internal {
 public:
};

ListUserPaginationResponse::ListUserPaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListUserPaginationResponse)
}
ListUserPaginationResponse::ListUserPaginationResponse(const ListUserPaginationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListUserPaginationResponse)
}

inline void ListUserPaginationResponse::SharedCtor() {
count_ = int64_t{0};
}

ListUserPaginationResponse::~ListUserPaginationResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListUserPaginationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListUserPaginationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListUserPaginationResponse::ArenaDtor(void* object) {
  ListUserPaginationResponse* _this = reinterpret_cast< ListUserPaginationResponse* >(object);
  (void)_this;
}
void ListUserPaginationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserPaginationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListUserPaginationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListUserPaginationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserPaginationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 count = 1 [json_name = "count"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.UserList users = 2 [json_name = "users"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserPaginationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListUserPaginationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_count(), target);
  }

  // repeated .accounts.v1alpha1.UserList users = 2 [json_name = "users"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListUserPaginationResponse)
  return target;
}

size_t ListUserPaginationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListUserPaginationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.UserList users = 2 [json_name = "users"];
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 count = 1 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListUserPaginationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListUserPaginationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListUserPaginationResponse::GetClassData() const { return &_class_data_; }

void ListUserPaginationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListUserPaginationResponse *>(to)->MergeFrom(
      static_cast<const ListUserPaginationResponse &>(from));
}


void ListUserPaginationResponse::MergeFrom(const ListUserPaginationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListUserPaginationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListUserPaginationResponse::CopyFrom(const ListUserPaginationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListUserPaginationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserPaginationResponse::IsInitialized() const {
  return true;
}

void ListUserPaginationResponse::InternalSwap(ListUserPaginationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserPaginationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[40]);
}

// ===================================================================

class SendInvitationUserRequest::_Internal {
 public:
};

SendInvitationUserRequest::SendInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_ids_(arena),
  permissions_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.SendInvitationUserRequest)
}
SendInvitationUserRequest::SendInvitationUserRequest(const SendInvitationUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_ids_(from.roles_ids_),
      permissions_ids_(from.permissions_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  user_id_admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_admin().empty()) {
    user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_admin(), 
      GetArenaForAllocation());
  }
  organization_id_ = from.organization_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.SendInvitationUserRequest)
}

inline void SendInvitationUserRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_ = 0u;
}

SendInvitationUserRequest::~SendInvitationUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.SendInvitationUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendInvitationUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_admin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendInvitationUserRequest::ArenaDtor(void* object) {
  SendInvitationUserRequest* _this = reinterpret_cast< SendInvitationUserRequest* >(object);
  (void)_this;
}
void SendInvitationUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendInvitationUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendInvitationUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.SendInvitationUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_ids_.Clear();
  permissions_ids_.Clear();
  name_.ClearToEmpty();
  email_.ClearToEmpty();
  user_id_admin_.ClearToEmpty();
  organization_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendInvitationUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendInvitationUserRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2 [json_name = "email"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendInvitationUserRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_admin = 4 [json_name = "userIdAdmin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id_admin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendInvitationUserRequest.user_id_admin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 roles_ids = 5 [json_name = "rolesIds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_roles_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 permissions_ids = 6 [json_name = "permissionsIds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_permissions_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 7 [json_name = "organizationId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendInvitationUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.SendInvitationUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendInvitationUserRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendInvitationUserRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string user_id_admin = 4 [json_name = "userIdAdmin"];
  if (!this->_internal_user_id_admin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_admin().data(), static_cast<int>(this->_internal_user_id_admin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendInvitationUserRequest.user_id_admin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id_admin(), target);
  }

  // repeated uint32 roles_ids = 5 [json_name = "rolesIds"];
  {
    int byte_size = _roles_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_roles_ids(), byte_size, target);
    }
  }

  // repeated uint32 permissions_ids = 6 [json_name = "permissionsIds"];
  {
    int byte_size = _permissions_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_permissions_ids(), byte_size, target);
    }
  }

  // uint32 organization_id = 7 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.SendInvitationUserRequest)
  return target;
}

size_t SendInvitationUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.SendInvitationUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 roles_ids = 5 [json_name = "rolesIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->roles_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roles_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 permissions_ids = 6 [json_name = "permissionsIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->permissions_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _permissions_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string user_id_admin = 4 [json_name = "userIdAdmin"];
  if (!this->_internal_user_id_admin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_admin());
  }

  // uint32 organization_id = 7 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendInvitationUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendInvitationUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendInvitationUserRequest::GetClassData() const { return &_class_data_; }

void SendInvitationUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendInvitationUserRequest *>(to)->MergeFrom(
      static_cast<const SendInvitationUserRequest &>(from));
}


void SendInvitationUserRequest::MergeFrom(const SendInvitationUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.SendInvitationUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_ids_.MergeFrom(from.roles_ids_);
  permissions_ids_.MergeFrom(from.permissions_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_user_id_admin().empty()) {
    _internal_set_user_id_admin(from._internal_user_id_admin());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendInvitationUserRequest::CopyFrom(const SendInvitationUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.SendInvitationUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationUserRequest::IsInitialized() const {
  return true;
}

void SendInvitationUserRequest::InternalSwap(SendInvitationUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_ids_.InternalSwap(&other->roles_ids_);
  permissions_ids_.InternalSwap(&other->permissions_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_admin_, GetArenaForAllocation(),
      &other->user_id_admin_, other->GetArenaForAllocation()
  );
  swap(organization_id_, other->organization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendInvitationUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[41]);
}

// ===================================================================

class SendInvitationUserResponse::_Internal {
 public:
  static const ::accounts::v1alpha1::Organization& organization(const SendInvitationUserResponse* msg);
};

const ::accounts::v1alpha1::Organization&
SendInvitationUserResponse::_Internal::organization(const SendInvitationUserResponse* msg) {
  return *msg->organization_;
}
SendInvitationUserResponse::SendInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena),
  roles_(arena),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.SendInvitationUserResponse)
}
SendInvitationUserResponse::SendInvitationUserResponse(const SendInvitationUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projects_(from.projects_),
      roles_(from.roles_),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_code().empty()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArenaForAllocation());
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_organization()) {
    organization_ = new ::accounts::v1alpha1::Organization(*from.organization_);
  } else {
    organization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.SendInvitationUserResponse)
}

inline void SendInvitationUserResponse::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_ = nullptr;
}

SendInvitationUserResponse::~SendInvitationUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.SendInvitationUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendInvitationUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete organization_;
}

void SendInvitationUserResponse::ArenaDtor(void* object) {
  SendInvitationUserResponse* _this = reinterpret_cast< SendInvitationUserResponse* >(object);
  (void)_this;
}
void SendInvitationUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendInvitationUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendInvitationUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.SendInvitationUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  roles_.Clear();
  permissions_.Clear();
  invitation_code_.ClearToEmpty();
  result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && organization_ != nullptr) {
    delete organization_;
  }
  organization_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendInvitationUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_organization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string invitation_code = 3 [json_name = "invitationCode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendInvitationUserResponse.invitation_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 4 [json_name = "result"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.SendInvitationUserResponse.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol roles = 5 [json_name = "roles"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendInvitationUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.SendInvitationUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  if (this->_internal_has_organization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::organization(this), target, stream);
  }

  // repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_projects(i), target, stream);
  }

  // string invitation_code = 3 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendInvitationUserResponse.invitation_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_invitation_code(), target);
  }

  // string result = 4 [json_name = "result"];
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.SendInvitationUserResponse.result");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_result(), target);
  }

  // repeated .accounts.v1alpha1.Rol roles = 5 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_roles(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.SendInvitationUserResponse)
  return target;
}

size_t SendInvitationUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.SendInvitationUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Rol roles = 5 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string invitation_code = 3 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  // string result = 4 [json_name = "result"];
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  if (this->_internal_has_organization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *organization_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendInvitationUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendInvitationUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendInvitationUserResponse::GetClassData() const { return &_class_data_; }

void SendInvitationUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendInvitationUserResponse *>(to)->MergeFrom(
      static_cast<const SendInvitationUserResponse &>(from));
}


void SendInvitationUserResponse::MergeFrom(const SendInvitationUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.SendInvitationUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  roles_.MergeFrom(from.roles_);
  permissions_.MergeFrom(from.permissions_);
  if (!from._internal_invitation_code().empty()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_has_organization()) {
    _internal_mutable_organization()->::accounts::v1alpha1::Organization::MergeFrom(from._internal_organization());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendInvitationUserResponse::CopyFrom(const SendInvitationUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.SendInvitationUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationUserResponse::IsInitialized() const {
  return true;
}

void SendInvitationUserResponse::InternalSwap(SendInvitationUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  projects_.InternalSwap(&other->projects_);
  roles_.InternalSwap(&other->roles_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_code_, GetArenaForAllocation(),
      &other->invitation_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, GetArenaForAllocation(),
      &other->result_, other->GetArenaForAllocation()
  );
  swap(organization_, other->organization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendInvitationUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[42]);
}

// ===================================================================

class GetInvitationUserRequest::_Internal {
 public:
};

GetInvitationUserRequest::GetInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetInvitationUserRequest)
}
GetInvitationUserRequest::GetInvitationUserRequest(const GetInvitationUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_code().empty()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetInvitationUserRequest)
}

inline void GetInvitationUserRequest::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetInvitationUserRequest::~GetInvitationUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetInvitationUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetInvitationUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInvitationUserRequest::ArenaDtor(void* object) {
  GetInvitationUserRequest* _this = reinterpret_cast< GetInvitationUserRequest* >(object);
  (void)_this;
}
void GetInvitationUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInvitationUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvitationUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetInvitationUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitation_code_.ClearToEmpty();
  email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvitationUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string invitation_code = 1 [json_name = "invitationCode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetInvitationUserRequest.invitation_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2 [json_name = "email"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetInvitationUserRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvitationUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetInvitationUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string invitation_code = 1 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetInvitationUserRequest.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetInvitationUserRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetInvitationUserRequest)
  return target;
}

size_t GetInvitationUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetInvitationUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string invitation_code = 1 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvitationUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvitationUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvitationUserRequest::GetClassData() const { return &_class_data_; }

void GetInvitationUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetInvitationUserRequest *>(to)->MergeFrom(
      static_cast<const GetInvitationUserRequest &>(from));
}


void GetInvitationUserRequest::MergeFrom(const GetInvitationUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetInvitationUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_invitation_code().empty()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvitationUserRequest::CopyFrom(const GetInvitationUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetInvitationUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitationUserRequest::IsInitialized() const {
  return true;
}

void GetInvitationUserRequest::InternalSwap(GetInvitationUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_code_, GetArenaForAllocation(),
      &other->invitation_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvitationUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[43]);
}

// ===================================================================

class GetInvitationUserResponse::_Internal {
 public:
  static const ::accounts::v1alpha1::Organization& organization(const GetInvitationUserResponse* msg);
};

const ::accounts::v1alpha1::Organization&
GetInvitationUserResponse::_Internal::organization(const GetInvitationUserResponse* msg) {
  return *msg->organization_;
}
GetInvitationUserResponse::GetInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena),
  roles_(arena),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetInvitationUserResponse)
}
GetInvitationUserResponse::GetInvitationUserResponse(const GetInvitationUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projects_(from.projects_),
      roles_(from.roles_),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_organization()) {
    organization_ = new ::accounts::v1alpha1::Organization(*from.organization_);
  } else {
    organization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetInvitationUserResponse)
}

inline void GetInvitationUserResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_ = nullptr;
}

GetInvitationUserResponse::~GetInvitationUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetInvitationUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetInvitationUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete organization_;
}

void GetInvitationUserResponse::ArenaDtor(void* object) {
  GetInvitationUserResponse* _this = reinterpret_cast< GetInvitationUserResponse* >(object);
  (void)_this;
}
void GetInvitationUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInvitationUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvitationUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetInvitationUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  roles_.Clear();
  permissions_.Clear();
  result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && organization_ != nullptr) {
    delete organization_;
  }
  organization_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvitationUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_organization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string result = 3 [json_name = "result"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetInvitationUserResponse.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol roles = 4 [json_name = "roles"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvitationUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetInvitationUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  if (this->_internal_has_organization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::organization(this), target, stream);
  }

  // repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_projects(i), target, stream);
  }

  // string result = 3 [json_name = "result"];
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetInvitationUserResponse.result");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result(), target);
  }

  // repeated .accounts.v1alpha1.Rol roles = 4 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_roles(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetInvitationUserResponse)
  return target;
}

size_t GetInvitationUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetInvitationUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Rol roles = 4 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string result = 3 [json_name = "result"];
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  if (this->_internal_has_organization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *organization_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvitationUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvitationUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvitationUserResponse::GetClassData() const { return &_class_data_; }

void GetInvitationUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetInvitationUserResponse *>(to)->MergeFrom(
      static_cast<const GetInvitationUserResponse &>(from));
}


void GetInvitationUserResponse::MergeFrom(const GetInvitationUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetInvitationUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  roles_.MergeFrom(from.roles_);
  permissions_.MergeFrom(from.permissions_);
  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_has_organization()) {
    _internal_mutable_organization()->::accounts::v1alpha1::Organization::MergeFrom(from._internal_organization());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvitationUserResponse::CopyFrom(const GetInvitationUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetInvitationUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitationUserResponse::IsInitialized() const {
  return true;
}

void GetInvitationUserResponse::InternalSwap(GetInvitationUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  projects_.InternalSwap(&other->projects_);
  roles_.InternalSwap(&other->roles_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, GetArenaForAllocation(),
      &other->result_, other->GetArenaForAllocation()
  );
  swap(organization_, other->organization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvitationUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[44]);
}

// ===================================================================

AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse() {}
AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::MergeFrom(const AgreeInvitationUserRequest_ProjectsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[45]);
}

// ===================================================================

class AgreeInvitationUserRequest::_Internal {
 public:
};

AgreeInvitationUserRequest::AgreeInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.AgreeInvitationUserRequest)
}
AgreeInvitationUserRequest::AgreeInvitationUserRequest(const AgreeInvitationUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  projects_.MergeFrom(from.projects_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitation_code().empty()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  guest_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guest_user_id().empty()) {
    guest_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guest_user_id(), 
      GetArenaForAllocation());
  }
  invitation_response_ = from.invitation_response_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.AgreeInvitationUserRequest)
}

inline void AgreeInvitationUserRequest::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
guest_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invitation_response_ = 0;
}

AgreeInvitationUserRequest::~AgreeInvitationUserRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.AgreeInvitationUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AgreeInvitationUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guest_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgreeInvitationUserRequest::ArenaDtor(void* object) {
  AgreeInvitationUserRequest* _this = reinterpret_cast< AgreeInvitationUserRequest* >(object);
  (void)_this;
  _this->projects_. ~MapField();
}
inline void AgreeInvitationUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AgreeInvitationUserRequest::ArenaDtor);
  }
}
void AgreeInvitationUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgreeInvitationUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.AgreeInvitationUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  invitation_code_.ClearToEmpty();
  email_.ClearToEmpty();
  guest_user_id_.ClearToEmpty();
  invitation_response_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgreeInvitationUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string invitation_code = 1 [json_name = "invitationCode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.AgreeInvitationUserRequest.invitation_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2 [json_name = "email"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.AgreeInvitationUserRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guest_user_id = 3 [json_name = "guestUserId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_guest_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.AgreeInvitationUserRequest.guest_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.InvitationResponse invitation_response = 4 [json_name = "invitationResponse"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invitation_response(static_cast<::accounts::v1alpha1::InvitationResponse>(val));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> projects = 5 [json_name = "projects"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&projects_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgreeInvitationUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.AgreeInvitationUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string invitation_code = 1 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.AgreeInvitationUserRequest.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.AgreeInvitationUserRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string guest_user_id = 3 [json_name = "guestUserId"];
  if (!this->_internal_guest_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guest_user_id().data(), static_cast<int>(this->_internal_guest_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.AgreeInvitationUserRequest.guest_user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_guest_user_id(), target);
  }

  // .accounts.v1alpha1.InvitationResponse invitation_response = 4 [json_name = "invitationResponse"];
  if (this->_internal_invitation_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_invitation_response(), target);
  }

  // map<uint32, uint32> projects = 5 [json_name = "projects"];
  if (!this->_internal_projects().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_projects().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_projects().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_projects().begin();
          it != this->_internal_projects().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_projects().begin();
          it != this->_internal_projects().end(); ++it) {
        target = AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.AgreeInvitationUserRequest)
  return target;
}

size_t AgreeInvitationUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.AgreeInvitationUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> projects = 5 [json_name = "projects"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_projects_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_projects().begin();
      it != this->_internal_projects().end(); ++it) {
    total_size += AgreeInvitationUserRequest_ProjectsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string invitation_code = 1 [json_name = "invitationCode"];
  if (!this->_internal_invitation_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string guest_user_id = 3 [json_name = "guestUserId"];
  if (!this->_internal_guest_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guest_user_id());
  }

  // .accounts.v1alpha1.InvitationResponse invitation_response = 4 [json_name = "invitationResponse"];
  if (this->_internal_invitation_response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_invitation_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgreeInvitationUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgreeInvitationUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgreeInvitationUserRequest::GetClassData() const { return &_class_data_; }

void AgreeInvitationUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AgreeInvitationUserRequest *>(to)->MergeFrom(
      static_cast<const AgreeInvitationUserRequest &>(from));
}


void AgreeInvitationUserRequest::MergeFrom(const AgreeInvitationUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.AgreeInvitationUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  if (!from._internal_invitation_code().empty()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_guest_user_id().empty()) {
    _internal_set_guest_user_id(from._internal_guest_user_id());
  }
  if (from._internal_invitation_response() != 0) {
    _internal_set_invitation_response(from._internal_invitation_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgreeInvitationUserRequest::CopyFrom(const AgreeInvitationUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.AgreeInvitationUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreeInvitationUserRequest::IsInitialized() const {
  return true;
}

void AgreeInvitationUserRequest::InternalSwap(AgreeInvitationUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  projects_.InternalSwap(&other->projects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_code_, GetArenaForAllocation(),
      &other->invitation_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guest_user_id_, GetArenaForAllocation(),
      &other->guest_user_id_, other->GetArenaForAllocation()
  );
  swap(invitation_response_, other->invitation_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgreeInvitationUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[46]);
}

// ===================================================================

class AgreeInvitationUserResponse::_Internal {
 public:
};

AgreeInvitationUserResponse::AgreeInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.AgreeInvitationUserResponse)
}
AgreeInvitationUserResponse::AgreeInvitationUserResponse(const AgreeInvitationUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.AgreeInvitationUserResponse)
}

inline void AgreeInvitationUserResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AgreeInvitationUserResponse::~AgreeInvitationUserResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.AgreeInvitationUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AgreeInvitationUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgreeInvitationUserResponse::ArenaDtor(void* object) {
  AgreeInvitationUserResponse* _this = reinterpret_cast< AgreeInvitationUserResponse* >(object);
  (void)_this;
}
void AgreeInvitationUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgreeInvitationUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgreeInvitationUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.AgreeInvitationUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgreeInvitationUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.AgreeInvitationUserResponse.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgreeInvitationUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.AgreeInvitationUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1 [json_name = "result"];
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.AgreeInvitationUserResponse.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.AgreeInvitationUserResponse)
  return target;
}

size_t AgreeInvitationUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.AgreeInvitationUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1 [json_name = "result"];
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgreeInvitationUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgreeInvitationUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgreeInvitationUserResponse::GetClassData() const { return &_class_data_; }

void AgreeInvitationUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AgreeInvitationUserResponse *>(to)->MergeFrom(
      static_cast<const AgreeInvitationUserResponse &>(from));
}


void AgreeInvitationUserResponse::MergeFrom(const AgreeInvitationUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.AgreeInvitationUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgreeInvitationUserResponse::CopyFrom(const AgreeInvitationUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.AgreeInvitationUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreeInvitationUserResponse::IsInitialized() const {
  return true;
}

void AgreeInvitationUserResponse::InternalSwap(AgreeInvitationUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, GetArenaForAllocation(),
      &other->result_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AgreeInvitationUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[47]);
}

// ===================================================================

class Rol::_Internal {
 public:
};

Rol::Rol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.Rol)
}
Rol::Rol(const Rol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.Rol)
}

inline void Rol::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
}

Rol::~Rol() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.Rol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rol::ArenaDtor(void* object) {
  Rol* _this = reinterpret_cast< Rol* >(object);
  (void)_this;
}
void Rol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rol::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.Rol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_admin_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Rol.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 project_id = 3 [json_name = "projectId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 4 [json_name = "organizationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_admin = 6 [json_name = "isAdmin"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.Rol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Rol.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 project_id = 3 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_project_id(), target);
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_organization_id(), target);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_permissions(i), target, stream);
  }

  // bool is_admin = 6 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.Rol)
  return target;
}

size_t Rol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.Rol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 project_id = 3 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  // bool is_admin = 6 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rol::GetClassData() const { return &_class_data_; }

void Rol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Rol *>(to)->MergeFrom(
      static_cast<const Rol &>(from));
}


void Rol::MergeFrom(const Rol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.Rol)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rol::CopyFrom(const Rol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.Rol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rol::IsInitialized() const {
  return true;
}

void Rol::InternalSwap(Rol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rol, is_admin_)
      + sizeof(Rol::is_admin_)
      - PROTOBUF_FIELD_OFFSET(Rol, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[48]);
}

// ===================================================================

class CreateRoleRequest::_Internal {
 public:
};

CreateRoleRequest::CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  permission_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateRoleRequest)
}
CreateRoleRequest::CreateRoleRequest(const CreateRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permission_ids_(from.permission_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  type_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_permission().empty()) {
    type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_permission(), 
      GetArenaForAllocation());
  }
  ::memcpy(&project_id_, &from.project_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&project_id_)) + sizeof(organization_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateRoleRequest)
}

inline void CreateRoleRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&project_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&project_id_)) + sizeof(organization_id_));
}

CreateRoleRequest::~CreateRoleRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateRoleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoleRequest::ArenaDtor(void* object) {
  CreateRoleRequest* _this = reinterpret_cast< CreateRoleRequest* >(object);
  (void)_this;
}
void CreateRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permission_ids_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  type_permission_.ClearToEmpty();
  ::memset(&project_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&organization_id_) -
      reinterpret_cast<char*>(&project_id_)) + sizeof(organization_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateRoleRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateRoleRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 project_id = 3 [json_name = "projectId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 4 [json_name = "organizationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_permission = 5 [json_name = "typePermission"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type_permission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateRoleRequest.type_permission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 permission_ids = 6 [json_name = "permissionIds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_permission_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_permission_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateRoleRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateRoleRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 project_id = 3 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_project_id(), target);
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_organization_id(), target);
  }

  // string type_permission = 5 [json_name = "typePermission"];
  if (!this->_internal_type_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_permission().data(), static_cast<int>(this->_internal_type_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateRoleRequest.type_permission");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type_permission(), target);
  }

  // repeated uint32 permission_ids = 6 [json_name = "permissionIds"];
  {
    int byte_size = _permission_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_permission_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateRoleRequest)
  return target;
}

size_t CreateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 permission_ids = 6 [json_name = "permissionIds"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->permission_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _permission_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string type_permission = 5 [json_name = "typePermission"];
  if (!this->_internal_type_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_permission());
  }

  // uint32 project_id = 3 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoleRequest::GetClassData() const { return &_class_data_; }

void CreateRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateRoleRequest *>(to)->MergeFrom(
      static_cast<const CreateRoleRequest &>(from));
}


void CreateRoleRequest::MergeFrom(const CreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permission_ids_.MergeFrom(from.permission_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_type_permission().empty()) {
    _internal_set_type_permission(from._internal_type_permission());
  }
  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoleRequest::CopyFrom(const CreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleRequest::IsInitialized() const {
  return true;
}

void CreateRoleRequest::InternalSwap(CreateRoleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  permission_ids_.InternalSwap(&other->permission_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_permission_, GetArenaForAllocation(),
      &other->type_permission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoleRequest, organization_id_)
      + sizeof(CreateRoleRequest::organization_id_)
      - PROTOBUF_FIELD_OFFSET(CreateRoleRequest, project_id_)>(
          reinterpret_cast<char*>(&project_id_),
          reinterpret_cast<char*>(&other->project_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[49]);
}

// ===================================================================

class UpdateRoleRequest::_Internal {
 public:
  static const ::accounts::v1alpha1::CreateRoleRequest& rol(const UpdateRoleRequest* msg);
};

const ::accounts::v1alpha1::CreateRoleRequest&
UpdateRoleRequest::_Internal::rol(const UpdateRoleRequest* msg) {
  return *msg->rol_;
}
UpdateRoleRequest::UpdateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateRoleRequest)
}
UpdateRoleRequest::UpdateRoleRequest(const UpdateRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rol()) {
    rol_ = new ::accounts::v1alpha1::CreateRoleRequest(*from.rol_);
  } else {
    rol_ = nullptr;
  }
  rol_id_ = from.rol_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateRoleRequest)
}

inline void UpdateRoleRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rol_id_) -
    reinterpret_cast<char*>(&rol_)) + sizeof(rol_id_));
}

UpdateRoleRequest::~UpdateRoleRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateRoleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rol_;
}

void UpdateRoleRequest::ArenaDtor(void* object) {
  UpdateRoleRequest* _this = reinterpret_cast< UpdateRoleRequest* >(object);
  (void)_this;
}
void UpdateRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && rol_ != nullptr) {
    delete rol_;
  }
  rol_ = nullptr;
  rol_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rol_id = 1 [json_name = "rolId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rol_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.CreateRoleRequest rol = 2 [json_name = "rol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rol_id = 1 [json_name = "rolId"];
  if (this->_internal_rol_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rol_id(), target);
  }

  // .accounts.v1alpha1.CreateRoleRequest rol = 2 [json_name = "rol"];
  if (this->_internal_has_rol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateRoleRequest)
  return target;
}

size_t UpdateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .accounts.v1alpha1.CreateRoleRequest rol = 2 [json_name = "rol"];
  if (this->_internal_has_rol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rol_);
  }

  // uint32 rol_id = 1 [json_name = "rolId"];
  if (this->_internal_rol_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rol_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRoleRequest::GetClassData() const { return &_class_data_; }

void UpdateRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateRoleRequest *>(to)->MergeFrom(
      static_cast<const UpdateRoleRequest &>(from));
}


void UpdateRoleRequest::MergeFrom(const UpdateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rol()) {
    _internal_mutable_rol()->::accounts::v1alpha1::CreateRoleRequest::MergeFrom(from._internal_rol());
  }
  if (from._internal_rol_id() != 0) {
    _internal_set_rol_id(from._internal_rol_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRoleRequest::CopyFrom(const UpdateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoleRequest::IsInitialized() const {
  return true;
}

void UpdateRoleRequest::InternalSwap(UpdateRoleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateRoleRequest, rol_id_)
      + sizeof(UpdateRoleRequest::rol_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateRoleRequest, rol_)>(
          reinterpret_cast<char*>(&rol_),
          reinterpret_cast<char*>(&other->rol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRoleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[50]);
}

// ===================================================================

class GetOneRoleRequest::_Internal {
 public:
};

GetOneRoleRequest::GetOneRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneRoleRequest)
}
GetOneRoleRequest::GetOneRoleRequest(const GetOneRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rol_id_ = from.rol_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneRoleRequest)
}

inline void GetOneRoleRequest::SharedCtor() {
rol_id_ = 0u;
}

GetOneRoleRequest::~GetOneRoleRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneRoleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOneRoleRequest::ArenaDtor(void* object) {
  GetOneRoleRequest* _this = reinterpret_cast< GetOneRoleRequest* >(object);
  (void)_this;
}
void GetOneRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rol_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rol_id = 1 [json_name = "rolId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rol_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rol_id = 1 [json_name = "rolId"];
  if (this->_internal_rol_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rol_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneRoleRequest)
  return target;
}

size_t GetOneRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rol_id = 1 [json_name = "rolId"];
  if (this->_internal_rol_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rol_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneRoleRequest::GetClassData() const { return &_class_data_; }

void GetOneRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneRoleRequest *>(to)->MergeFrom(
      static_cast<const GetOneRoleRequest &>(from));
}


void GetOneRoleRequest::MergeFrom(const GetOneRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rol_id() != 0) {
    _internal_set_rol_id(from._internal_rol_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneRoleRequest::CopyFrom(const GetOneRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneRoleRequest::IsInitialized() const {
  return true;
}

void GetOneRoleRequest::InternalSwap(GetOneRoleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rol_id_, other->rol_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneRoleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[51]);
}

// ===================================================================

class GetOneRoleResponse::_Internal {
 public:
};

GetOneRoleResponse::GetOneRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneRoleResponse)
}
GetOneRoleResponse::GetOneRoleResponse(const GetOneRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneRoleResponse)
}

inline void GetOneRoleResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
}

GetOneRoleResponse::~GetOneRoleResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneRoleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneRoleResponse::ArenaDtor(void* object) {
  GetOneRoleResponse* _this = reinterpret_cast< GetOneRoleResponse* >(object);
  (void)_this;
}
void GetOneRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_admin_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneRoleResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 3 [json_name = "organizationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 project_id = 4 [json_name = "projectId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_admin = 6 [json_name = "isAdmin"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneRoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneRoleResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 organization_id = 3 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_organization_id(), target);
  }

  // uint32 project_id = 4 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_project_id(), target);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_permissions(i), target, stream);
  }

  // bool is_admin = 6 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneRoleResponse)
  return target;
}

size_t GetOneRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 organization_id = 3 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  // uint32 project_id = 4 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  // bool is_admin = 6 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneRoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneRoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneRoleResponse::GetClassData() const { return &_class_data_; }

void GetOneRoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneRoleResponse *>(to)->MergeFrom(
      static_cast<const GetOneRoleResponse &>(from));
}


void GetOneRoleResponse::MergeFrom(const GetOneRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneRoleResponse::CopyFrom(const GetOneRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneRoleResponse::IsInitialized() const {
  return true;
}

void GetOneRoleResponse::InternalSwap(GetOneRoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOneRoleResponse, is_admin_)
      + sizeof(GetOneRoleResponse::is_admin_)
      - PROTOBUF_FIELD_OFFSET(GetOneRoleResponse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneRoleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[52]);
}

// ===================================================================

class DeleteRoleRequest::_Internal {
 public:
};

DeleteRoleRequest::DeleteRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteRoleRequest)
}
DeleteRoleRequest::DeleteRoleRequest(const DeleteRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rol_id_ = from.rol_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteRoleRequest)
}

inline void DeleteRoleRequest::SharedCtor() {
rol_id_ = 0u;
}

DeleteRoleRequest::~DeleteRoleRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteRoleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteRoleRequest::ArenaDtor(void* object) {
  DeleteRoleRequest* _this = reinterpret_cast< DeleteRoleRequest* >(object);
  (void)_this;
}
void DeleteRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rol_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rol_id = 1 [json_name = "rolId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rol_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rol_id = 1 [json_name = "rolId"];
  if (this->_internal_rol_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rol_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteRoleRequest)
  return target;
}

size_t DeleteRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rol_id = 1 [json_name = "rolId"];
  if (this->_internal_rol_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rol_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRoleRequest::GetClassData() const { return &_class_data_; }

void DeleteRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteRoleRequest *>(to)->MergeFrom(
      static_cast<const DeleteRoleRequest &>(from));
}


void DeleteRoleRequest::MergeFrom(const DeleteRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rol_id() != 0) {
    _internal_set_rol_id(from._internal_rol_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRoleRequest::CopyFrom(const DeleteRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoleRequest::IsInitialized() const {
  return true;
}

void DeleteRoleRequest::InternalSwap(DeleteRoleRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rol_id_, other->rol_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRoleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[53]);
}

// ===================================================================

class ListRolesRequest::_Internal {
 public:
};

ListRolesRequest::ListRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListRolesRequest)
}
ListRolesRequest::ListRolesRequest(const ListRolesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&project_id_, &from.project_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&project_id_)) + sizeof(organization_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListRolesRequest)
}

inline void ListRolesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&project_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&project_id_)) + sizeof(organization_id_));
}

ListRolesRequest::~ListRolesRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListRolesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRolesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListRolesRequest::ArenaDtor(void* object) {
  ListRolesRequest* _this = reinterpret_cast< ListRolesRequest* >(object);
  (void)_this;
}
void ListRolesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRolesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&project_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&organization_id_) -
      reinterpret_cast<char*>(&project_id_)) + sizeof(organization_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRolesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 project_id = 1 [json_name = "projectId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRolesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 project_id = 1 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_project_id(), target);
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListRolesRequest)
  return target;
}

size_t ListRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListRolesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 project_id = 1 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRolesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRolesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRolesRequest::GetClassData() const { return &_class_data_; }

void ListRolesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListRolesRequest *>(to)->MergeFrom(
      static_cast<const ListRolesRequest &>(from));
}


void ListRolesRequest::MergeFrom(const ListRolesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRolesRequest::CopyFrom(const ListRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRolesRequest::IsInitialized() const {
  return true;
}

void ListRolesRequest::InternalSwap(ListRolesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListRolesRequest, organization_id_)
      + sizeof(ListRolesRequest::organization_id_)
      - PROTOBUF_FIELD_OFFSET(ListRolesRequest, project_id_)>(
          reinterpret_cast<char*>(&project_id_),
          reinterpret_cast<char*>(&other->project_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRolesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[54]);
}

// ===================================================================

class ListRolesResponse::_Internal {
 public:
};

ListRolesResponse::ListRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListRolesResponse)
}
ListRolesResponse::ListRolesResponse(const ListRolesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListRolesResponse)
}

inline void ListRolesResponse::SharedCtor() {
}

ListRolesResponse::~ListRolesResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListRolesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListRolesResponse::ArenaDtor(void* object) {
  ListRolesResponse* _this = reinterpret_cast< ListRolesResponse* >(object);
  (void)_this;
}
void ListRolesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRolesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListRolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRolesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.Rol roles = 1 [json_name = "roles"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRolesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListRolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol roles = 1 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListRolesResponse)
  return target;
}

size_t ListRolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListRolesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol roles = 1 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRolesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRolesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRolesResponse::GetClassData() const { return &_class_data_; }

void ListRolesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListRolesResponse *>(to)->MergeFrom(
      static_cast<const ListRolesResponse &>(from));
}


void ListRolesResponse::MergeFrom(const ListRolesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRolesResponse::CopyFrom(const ListRolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRolesResponse::IsInitialized() const {
  return true;
}

void ListRolesResponse::InternalSwap(ListRolesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRolesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[55]);
}

// ===================================================================

class CreateRoleResponse::_Internal {
 public:
};

CreateRoleResponse::CreateRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateRoleResponse)
}
CreateRoleResponse::CreateRoleResponse(const CreateRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateRoleResponse)
}

inline void CreateRoleResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CreateRoleResponse::~CreateRoleResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateRoleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoleResponse::ArenaDtor(void* object) {
  CreateRoleResponse* _this = reinterpret_cast< CreateRoleResponse* >(object);
  (void)_this;
}
void CreateRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateRoleResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateRoleResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateRoleResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateRoleResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // uint32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateRoleResponse)
  return target;
}

size_t CreateRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // uint32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoleResponse::GetClassData() const { return &_class_data_; }

void CreateRoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateRoleResponse *>(to)->MergeFrom(
      static_cast<const CreateRoleResponse &>(from));
}


void CreateRoleResponse::MergeFrom(const CreateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoleResponse::CopyFrom(const CreateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleResponse::IsInitialized() const {
  return true;
}

void CreateRoleResponse::InternalSwap(CreateRoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[56]);
}

// ===================================================================

class UpdateRoleResponse::_Internal {
 public:
};

UpdateRoleResponse::UpdateRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateRoleResponse)
}
UpdateRoleResponse::UpdateRoleResponse(const UpdateRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateRoleResponse)
}

inline void UpdateRoleResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateRoleResponse::~UpdateRoleResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateRoleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateRoleResponse::ArenaDtor(void* object) {
  UpdateRoleResponse* _this = reinterpret_cast< UpdateRoleResponse* >(object);
  (void)_this;
}
void UpdateRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateRoleResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateRoleResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateRoleResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateRoleResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateRoleResponse)
  return target;
}

size_t UpdateRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRoleResponse::GetClassData() const { return &_class_data_; }

void UpdateRoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateRoleResponse *>(to)->MergeFrom(
      static_cast<const UpdateRoleResponse &>(from));
}


void UpdateRoleResponse::MergeFrom(const UpdateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRoleResponse::CopyFrom(const UpdateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoleResponse::IsInitialized() const {
  return true;
}

void UpdateRoleResponse::InternalSwap(UpdateRoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRoleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[57]);
}

// ===================================================================

class DeleteRoleResponse::_Internal {
 public:
};

DeleteRoleResponse::DeleteRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteRoleResponse)
}
DeleteRoleResponse::DeleteRoleResponse(const DeleteRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteRoleResponse)
}

inline void DeleteRoleResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteRoleResponse::~DeleteRoleResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteRoleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRoleResponse::ArenaDtor(void* object) {
  DeleteRoleResponse* _this = reinterpret_cast< DeleteRoleResponse* >(object);
  (void)_this;
}
void DeleteRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteRoleResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteRoleResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteRoleResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteRoleResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteRoleResponse)
  return target;
}

size_t DeleteRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRoleResponse::GetClassData() const { return &_class_data_; }

void DeleteRoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteRoleResponse *>(to)->MergeFrom(
      static_cast<const DeleteRoleResponse &>(from));
}


void DeleteRoleResponse::MergeFrom(const DeleteRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRoleResponse::CopyFrom(const DeleteRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoleResponse::IsInitialized() const {
  return true;
}

void DeleteRoleResponse::InternalSwap(DeleteRoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRoleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[58]);
}

// ===================================================================

class Project::_Internal {
 public:
};

Project::Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.Project)
}
Project::Project(const Project& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.Project)
}

inline void Project::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.Project)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Project::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Project::ArenaDtor(void* object) {
  Project* _this = reinterpret_cast< Project* >(object);
  (void)_this;
}
void Project::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Project::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.Project)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  name_.ClearToEmpty();
  image_.ClearToEmpty();
  description_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&organization_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Project::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Project.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3 [json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Project.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 4 [json_name = "organizationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5 [json_name = "description"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Project.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created_at = 6 [json_name = "createdAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Project.created_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updated_at = 7 [json_name = "updatedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Project.updated_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Project::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.Project)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Project.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Project.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_organization_id(), target);
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Project.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Project.created_at");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_created_at(), target);
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Project.updated_at");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_updated_at(), target);
  }

  // repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.Project)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Project::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Project::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Project::GetClassData() const { return &_class_data_; }

void Project::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Project *>(to)->MergeFrom(
      static_cast<const Project &>(from));
}


void Project::MergeFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.Project)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::InternalSwap(Project* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, GetArenaForAllocation(),
      &other->created_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, GetArenaForAllocation(),
      &other->updated_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Project, organization_id_)
      + sizeof(Project::organization_id_)
      - PROTOBUF_FIELD_OFFSET(Project, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Project::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[59]);
}

// ===================================================================

class CreateProjectRequest::_Internal {
 public:
};

CreateProjectRequest::CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateProjectRequest)
}
CreateProjectRequest::CreateProjectRequest(const CreateProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  organization_id_ = from.organization_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateProjectRequest)
}

inline void CreateProjectRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_ = 0u;
}

CreateProjectRequest::~CreateProjectRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProjectRequest::ArenaDtor(void* object) {
  CreateProjectRequest* _this = reinterpret_cast< CreateProjectRequest* >(object);
  (void)_this;
}
void CreateProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  image_.ClearToEmpty();
  user_id_.ClearToEmpty();
  organization_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateProjectRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateProjectRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3 [json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateProjectRequest.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 4 [json_name = "organizationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 5 [json_name = "userId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateProjectRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateProjectRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateProjectRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateProjectRequest.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_organization_id(), target);
  }

  // string user_id = 5 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateProjectRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateProjectRequest)
  return target;
}

size_t CreateProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string user_id = 5 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProjectRequest::GetClassData() const { return &_class_data_; }

void CreateProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProjectRequest *>(to)->MergeFrom(
      static_cast<const CreateProjectRequest &>(from));
}


void CreateProjectRequest::MergeFrom(const CreateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProjectRequest::CopyFrom(const CreateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectRequest::IsInitialized() const {
  return true;
}

void CreateProjectRequest::InternalSwap(CreateProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(organization_id_, other->organization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[60]);
}

// ===================================================================

class GetOneProjectRequest::_Internal {
 public:
};

GetOneProjectRequest::GetOneProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneProjectRequest)
}
GetOneProjectRequest::GetOneProjectRequest(const GetOneProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneProjectRequest)
}

inline void GetOneProjectRequest::SharedCtor() {
id_ = 0;
}

GetOneProjectRequest::~GetOneProjectRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOneProjectRequest::ArenaDtor(void* object) {
  GetOneProjectRequest* _this = reinterpret_cast< GetOneProjectRequest* >(object);
  (void)_this;
}
void GetOneProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneProjectRequest)
  return target;
}

size_t GetOneProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneProjectRequest::GetClassData() const { return &_class_data_; }

void GetOneProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneProjectRequest *>(to)->MergeFrom(
      static_cast<const GetOneProjectRequest &>(from));
}


void GetOneProjectRequest::MergeFrom(const GetOneProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneProjectRequest::CopyFrom(const GetOneProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneProjectRequest::IsInitialized() const {
  return true;
}

void GetOneProjectRequest::InternalSwap(GetOneProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[61]);
}

// ===================================================================

class DeleteProjectRequest::_Internal {
 public:
};

DeleteProjectRequest::DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteProjectRequest)
}
DeleteProjectRequest::DeleteProjectRequest(const DeleteProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteProjectRequest)
}

inline void DeleteProjectRequest::SharedCtor() {
id_ = 0;
}

DeleteProjectRequest::~DeleteProjectRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteProjectRequest::ArenaDtor(void* object) {
  DeleteProjectRequest* _this = reinterpret_cast< DeleteProjectRequest* >(object);
  (void)_this;
}
void DeleteProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteProjectRequest)
  return target;
}

size_t DeleteProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteProjectRequest::GetClassData() const { return &_class_data_; }

void DeleteProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteProjectRequest *>(to)->MergeFrom(
      static_cast<const DeleteProjectRequest &>(from));
}


void DeleteProjectRequest::MergeFrom(const DeleteProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteProjectRequest::CopyFrom(const DeleteProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteProjectRequest::IsInitialized() const {
  return true;
}

void DeleteProjectRequest::InternalSwap(DeleteProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[62]);
}

// ===================================================================

class ListProjectRequest::_Internal {
 public:
};

ListProjectRequest::ListProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListProjectRequest)
}
ListProjectRequest::ListProjectRequest(const ListProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_id_ = from.organization_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListProjectRequest)
}

inline void ListProjectRequest::SharedCtor() {
organization_id_ = 0u;
}

ListProjectRequest::~ListProjectRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProjectRequest::ArenaDtor(void* object) {
  ListProjectRequest* _this = reinterpret_cast< ListProjectRequest* >(object);
  (void)_this;
}
void ListProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListProjectRequest)
  return target;
}

size_t ListProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProjectRequest::GetClassData() const { return &_class_data_; }

void ListProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProjectRequest *>(to)->MergeFrom(
      static_cast<const ListProjectRequest &>(from));
}


void ListProjectRequest::MergeFrom(const ListProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProjectRequest::CopyFrom(const ListProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProjectRequest::IsInitialized() const {
  return true;
}

void ListProjectRequest::InternalSwap(ListProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(organization_id_, other->organization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[63]);
}

// ===================================================================

class UpdateProjectRequest::_Internal {
 public:
  static const ::accounts::v1alpha1::CreateProjectRequest& project(const UpdateProjectRequest* msg);
};

const ::accounts::v1alpha1::CreateProjectRequest&
UpdateProjectRequest::_Internal::project(const UpdateProjectRequest* msg) {
  return *msg->project_;
}
UpdateProjectRequest::UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateProjectRequest)
}
UpdateProjectRequest::UpdateProjectRequest(const UpdateProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_project()) {
    project_ = new ::accounts::v1alpha1::CreateProjectRequest(*from.project_);
  } else {
    project_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateProjectRequest)
}

inline void UpdateProjectRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&project_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&project_)) + sizeof(id_));
}

UpdateProjectRequest::~UpdateProjectRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateProjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete project_;
}

void UpdateProjectRequest::ArenaDtor(void* object) {
  UpdateProjectRequest* _this = reinterpret_cast< UpdateProjectRequest* >(object);
  (void)_this;
}
void UpdateProjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && project_ != nullptr) {
    delete project_;
  }
  project_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.CreateProjectRequest project = 2 [json_name = "project"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_project(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .accounts.v1alpha1.CreateProjectRequest project = 2 [json_name = "project"];
  if (this->_internal_has_project()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::project(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateProjectRequest)
  return target;
}

size_t UpdateProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .accounts.v1alpha1.CreateProjectRequest project = 2 [json_name = "project"];
  if (this->_internal_has_project()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *project_);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProjectRequest::GetClassData() const { return &_class_data_; }

void UpdateProjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProjectRequest *>(to)->MergeFrom(
      static_cast<const UpdateProjectRequest &>(from));
}


void UpdateProjectRequest::MergeFrom(const UpdateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_project()) {
    _internal_mutable_project()->::accounts::v1alpha1::CreateProjectRequest::MergeFrom(from._internal_project());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProjectRequest::CopyFrom(const UpdateProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectRequest::IsInitialized() const {
  return true;
}

void UpdateProjectRequest::InternalSwap(UpdateProjectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateProjectRequest, id_)
      + sizeof(UpdateProjectRequest::id_)
      - PROTOBUF_FIELD_OFFSET(UpdateProjectRequest, project_)>(
          reinterpret_cast<char*>(&project_),
          reinterpret_cast<char*>(&other->project_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[64]);
}

// ===================================================================

class MenberRol::_Internal {
 public:
};

MenberRol::MenberRol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.MenberRol)
}
MenberRol::MenberRol(const MenberRol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.MenberRol)
}

inline void MenberRol::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_admin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
}

MenberRol::~MenberRol() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.MenberRol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MenberRol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MenberRol::ArenaDtor(void* object) {
  MenberRol* _this = reinterpret_cast< MenberRol* >(object);
  (void)_this;
}
void MenberRol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MenberRol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MenberRol::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.MenberRol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_admin_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_admin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MenberRol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.MenberRol.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 3 [json_name = "isAdmin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MenberRol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.MenberRol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.MenberRol.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool is_admin = 3 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.MenberRol)
  return target;
}

size_t MenberRol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.MenberRol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool is_admin = 3 [json_name = "isAdmin"];
  if (this->_internal_is_admin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MenberRol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MenberRol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MenberRol::GetClassData() const { return &_class_data_; }

void MenberRol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MenberRol *>(to)->MergeFrom(
      static_cast<const MenberRol &>(from));
}


void MenberRol::MergeFrom(const MenberRol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.MenberRol)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MenberRol::CopyFrom(const MenberRol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.MenberRol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenberRol::IsInitialized() const {
  return true;
}

void MenberRol::InternalSwap(MenberRol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MenberRol, is_admin_)
      + sizeof(MenberRol::is_admin_)
      - PROTOBUF_FIELD_OFFSET(MenberRol, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MenberRol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[65]);
}

// ===================================================================

class CreateProjectResponse::_Internal {
 public:
};

CreateProjectResponse::CreateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateProjectResponse)
}
CreateProjectResponse::CreateProjectResponse(const CreateProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateProjectResponse)
}

inline void CreateProjectResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CreateProjectResponse::~CreateProjectResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProjectResponse::ArenaDtor(void* object) {
  CreateProjectResponse* _this = reinterpret_cast< CreateProjectResponse* >(object);
  (void)_this;
}
void CreateProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateProjectResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateProjectResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateProjectResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateProjectResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // uint32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateProjectResponse)
  return target;
}

size_t CreateProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // uint32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProjectResponse::GetClassData() const { return &_class_data_; }

void CreateProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProjectResponse *>(to)->MergeFrom(
      static_cast<const CreateProjectResponse &>(from));
}


void CreateProjectResponse::MergeFrom(const CreateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProjectResponse::CopyFrom(const CreateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectResponse::IsInitialized() const {
  return true;
}

void CreateProjectResponse::InternalSwap(CreateProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[66]);
}

// ===================================================================

class UpdateProjectResponse::_Internal {
 public:
};

UpdateProjectResponse::UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateProjectResponse)
}
UpdateProjectResponse::UpdateProjectResponse(const UpdateProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateProjectResponse)
}

inline void UpdateProjectResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateProjectResponse::~UpdateProjectResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateProjectResponse::ArenaDtor(void* object) {
  UpdateProjectResponse* _this = reinterpret_cast< UpdateProjectResponse* >(object);
  (void)_this;
}
void UpdateProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateProjectResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateProjectResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateProjectResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateProjectResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateProjectResponse)
  return target;
}

size_t UpdateProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProjectResponse::GetClassData() const { return &_class_data_; }

void UpdateProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProjectResponse *>(to)->MergeFrom(
      static_cast<const UpdateProjectResponse &>(from));
}


void UpdateProjectResponse::MergeFrom(const UpdateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProjectResponse::CopyFrom(const UpdateProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectResponse::IsInitialized() const {
  return true;
}

void UpdateProjectResponse::InternalSwap(UpdateProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[67]);
}

// ===================================================================

class DeleteProjectResponse::_Internal {
 public:
};

DeleteProjectResponse::DeleteProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteProjectResponse)
}
DeleteProjectResponse::DeleteProjectResponse(const DeleteProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteProjectResponse)
}

inline void DeleteProjectResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteProjectResponse::~DeleteProjectResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteProjectResponse::ArenaDtor(void* object) {
  DeleteProjectResponse* _this = reinterpret_cast< DeleteProjectResponse* >(object);
  (void)_this;
}
void DeleteProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteProjectResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteProjectResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteProjectResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteProjectResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteProjectResponse)
  return target;
}

size_t DeleteProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteProjectResponse::GetClassData() const { return &_class_data_; }

void DeleteProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteProjectResponse *>(to)->MergeFrom(
      static_cast<const DeleteProjectResponse &>(from));
}


void DeleteProjectResponse::MergeFrom(const DeleteProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteProjectResponse::CopyFrom(const DeleteProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteProjectResponse::IsInitialized() const {
  return true;
}

void DeleteProjectResponse::InternalSwap(DeleteProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[68]);
}

// ===================================================================

class GetOneProjectResponse::_Internal {
 public:
  static const ::accounts::v1alpha1::UserList& owner(const GetOneProjectResponse* msg);
};

const ::accounts::v1alpha1::UserList&
GetOneProjectResponse::_Internal::owner(const GetOneProjectResponse* msg) {
  return *msg->owner_;
}
GetOneProjectResponse::GetOneProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneProjectResponse)
}
GetOneProjectResponse::GetOneProjectResponse(const GetOneProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner()) {
    owner_ = new ::accounts::v1alpha1::UserList(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneProjectResponse)
}

inline void GetOneProjectResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&organization_id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(organization_id_));
}

GetOneProjectResponse::~GetOneProjectResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void GetOneProjectResponse::ArenaDtor(void* object) {
  GetOneProjectResponse* _this = reinterpret_cast< GetOneProjectResponse* >(object);
  (void)_this;
}
void GetOneProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  name_.ClearToEmpty();
  image_.ClearToEmpty();
  description_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&organization_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(organization_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneProjectResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3 [json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneProjectResponse.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 4 [json_name = "organizationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5 [json_name = "description"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneProjectResponse.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created_at = 6 [json_name = "createdAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneProjectResponse.created_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updated_at = 7 [json_name = "updatedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneProjectResponse.updated_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Member members = 8 [json_name = "members"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.UserList owner = 9 [json_name = "owner"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneProjectResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneProjectResponse.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_organization_id(), target);
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneProjectResponse.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneProjectResponse.created_at");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_created_at(), target);
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneProjectResponse.updated_at");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_updated_at(), target);
  }

  // repeated .accounts.v1alpha1.Member members = 8 [json_name = "members"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_members(i), target, stream);
  }

  // .accounts.v1alpha1.UserList owner = 9 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::owner(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneProjectResponse)
  return target;
}

size_t GetOneProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Member members = 8 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string created_at = 6 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 7 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // .accounts.v1alpha1.UserList owner = 9 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // uint32 organization_id = 4 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneProjectResponse::GetClassData() const { return &_class_data_; }

void GetOneProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneProjectResponse *>(to)->MergeFrom(
      static_cast<const GetOneProjectResponse &>(from));
}


void GetOneProjectResponse::MergeFrom(const GetOneProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::accounts::v1alpha1::UserList::MergeFrom(from._internal_owner());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneProjectResponse::CopyFrom(const GetOneProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneProjectResponse::IsInitialized() const {
  return true;
}

void GetOneProjectResponse::InternalSwap(GetOneProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, GetArenaForAllocation(),
      &other->created_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, GetArenaForAllocation(),
      &other->updated_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOneProjectResponse, organization_id_)
      + sizeof(GetOneProjectResponse::organization_id_)
      - PROTOBUF_FIELD_OFFSET(GetOneProjectResponse, owner_)>(
          reinterpret_cast<char*>(&owner_),
          reinterpret_cast<char*>(&other->owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[69]);
}

// ===================================================================

class ListProjectResponse::_Internal {
 public:
};

ListProjectResponse::ListProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListProjectResponse)
}
ListProjectResponse::ListProjectResponse(const ListProjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projects_(from.projects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListProjectResponse)
}

inline void ListProjectResponse::SharedCtor() {
}

ListProjectResponse::~ListProjectResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListProjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProjectResponse::ArenaDtor(void* object) {
  ListProjectResponse* _this = reinterpret_cast< ListProjectResponse* >(object);
  (void)_this;
}
void ListProjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListProjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_projects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListProjectResponse)
  return target;
}

size_t ListProjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListProjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProjectResponse::GetClassData() const { return &_class_data_; }

void ListProjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProjectResponse *>(to)->MergeFrom(
      static_cast<const ListProjectResponse &>(from));
}


void ListProjectResponse::MergeFrom(const ListProjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListProjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProjectResponse::CopyFrom(const ListProjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListProjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProjectResponse::IsInitialized() const {
  return true;
}

void ListProjectResponse::InternalSwap(ListProjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  projects_.InternalSwap(&other->projects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[70]);
}

// ===================================================================

class ListProjectPaginationRequest::_Internal {
 public:
};

ListProjectPaginationRequest::ListProjectPaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListProjectPaginationRequest)
}
ListProjectPaginationRequest::ListProjectPaginationRequest(const ListProjectPaginationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListProjectPaginationRequest)
}

inline void ListProjectPaginationRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

ListProjectPaginationRequest::~ListProjectPaginationRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListProjectPaginationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProjectPaginationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProjectPaginationRequest::ArenaDtor(void* object) {
  ListProjectPaginationRequest* _this = reinterpret_cast< ListProjectPaginationRequest* >(object);
  (void)_this;
}
void ListProjectPaginationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProjectPaginationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProjectPaginationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListProjectPaginationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProjectPaginationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1 [json_name = "offset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProjectPaginationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListProjectPaginationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListProjectPaginationRequest)
  return target;
}

size_t ListProjectPaginationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListProjectPaginationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProjectPaginationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProjectPaginationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProjectPaginationRequest::GetClassData() const { return &_class_data_; }

void ListProjectPaginationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProjectPaginationRequest *>(to)->MergeFrom(
      static_cast<const ListProjectPaginationRequest &>(from));
}


void ListProjectPaginationRequest::MergeFrom(const ListProjectPaginationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListProjectPaginationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProjectPaginationRequest::CopyFrom(const ListProjectPaginationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListProjectPaginationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProjectPaginationRequest::IsInitialized() const {
  return true;
}

void ListProjectPaginationRequest::InternalSwap(ListProjectPaginationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListProjectPaginationRequest, limit_)
      + sizeof(ListProjectPaginationRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(ListProjectPaginationRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProjectPaginationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[71]);
}

// ===================================================================

class ListProjectPaginationResponse::_Internal {
 public:
};

ListProjectPaginationResponse::ListProjectPaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListProjectPaginationResponse)
}
ListProjectPaginationResponse::ListProjectPaginationResponse(const ListProjectPaginationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projects_(from.projects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListProjectPaginationResponse)
}

inline void ListProjectPaginationResponse::SharedCtor() {
count_ = int64_t{0};
}

ListProjectPaginationResponse::~ListProjectPaginationResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListProjectPaginationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProjectPaginationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProjectPaginationResponse::ArenaDtor(void* object) {
  ListProjectPaginationResponse* _this = reinterpret_cast< ListProjectPaginationResponse* >(object);
  (void)_this;
}
void ListProjectPaginationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProjectPaginationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProjectPaginationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListProjectPaginationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProjectPaginationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProjectPaginationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListProjectPaginationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_projects(i), target, stream);
  }

  // int64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListProjectPaginationResponse)
  return target;
}

size_t ListProjectPaginationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListProjectPaginationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProjectPaginationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProjectPaginationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProjectPaginationResponse::GetClassData() const { return &_class_data_; }

void ListProjectPaginationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProjectPaginationResponse *>(to)->MergeFrom(
      static_cast<const ListProjectPaginationResponse &>(from));
}


void ListProjectPaginationResponse::MergeFrom(const ListProjectPaginationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListProjectPaginationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProjectPaginationResponse::CopyFrom(const ListProjectPaginationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListProjectPaginationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProjectPaginationResponse::IsInitialized() const {
  return true;
}

void ListProjectPaginationResponse::InternalSwap(ListProjectPaginationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  projects_.InternalSwap(&other->projects_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProjectPaginationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[72]);
}

// ===================================================================

class Permission::_Internal {
 public:
};

Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_full_name().empty()) {
    full_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.Permission)
}

inline void Permission::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.Permission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Permission::ArenaDtor(void* object) {
  Permission* _this = reinterpret_cast< Permission* >(object);
  (void)_this;
}
void Permission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Permission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  action_.ClearToEmpty();
  type_.ClearToEmpty();
  full_name_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Permission.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 3 [json_name = "action"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Permission.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4 [json_name = "type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Permission.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string full_name = 5 [json_name = "fullName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Permission.full_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Permission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Permission.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string action = 3 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Permission.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // string type = 4 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Permission.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string full_name = 5 [json_name = "fullName"];
  if (!this->_internal_full_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Permission.full_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.Permission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string action = 3 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string type = 4 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string full_name = 5 [json_name = "fullName"];
  if (!this->_internal_full_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Permission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Permission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Permission::GetClassData() const { return &_class_data_; }

void Permission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Permission *>(to)->MergeFrom(
      static_cast<const Permission &>(from));
}


void Permission::MergeFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_full_name().empty()) {
    _internal_set_full_name(from._internal_full_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, GetArenaForAllocation(),
      &other->action_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_name_, GetArenaForAllocation(),
      &other->full_name_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[73]);
}

// ===================================================================

class GroupPermission::_Internal {
 public:
};

GroupPermission::GroupPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GroupPermission)
}
GroupPermission::GroupPermission(const GroupPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GroupPermission)
}

inline void GroupPermission::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GroupPermission::~GroupPermission() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GroupPermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupPermission::ArenaDtor(void* object) {
  GroupPermission* _this = reinterpret_cast< GroupPermission* >(object);
  (void)_this;
}
void GroupPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GroupPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GroupPermission.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 3 [json_name = "permissions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GroupPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GroupPermission.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 3 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GroupPermission)
  return target;
}

size_t GroupPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GroupPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Permission permissions = 3 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupPermission::GetClassData() const { return &_class_data_; }

void GroupPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GroupPermission *>(to)->MergeFrom(
      static_cast<const GroupPermission &>(from));
}


void GroupPermission::MergeFrom(const GroupPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GroupPermission)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupPermission::CopyFrom(const GroupPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GroupPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPermission::IsInitialized() const {
  return true;
}

void GroupPermission::InternalSwap(GroupPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[74]);
}

// ===================================================================

class CategoryPermission::_Internal {
 public:
};

CategoryPermission::CategoryPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CategoryPermission)
}
CategoryPermission::CategoryPermission(const CategoryPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_permissions_(from.group_permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CategoryPermission)
}

inline void CategoryPermission::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CategoryPermission::~CategoryPermission() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CategoryPermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CategoryPermission::ArenaDtor(void* object) {
  CategoryPermission* _this = reinterpret_cast< CategoryPermission* >(object);
  (void)_this;
}
void CategoryPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CategoryPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_permissions_.Clear();
  name_.ClearToEmpty();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CategoryPermission.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CategoryPermission.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.GroupPermission group_permissions = 3 [json_name = "groupPermissions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CategoryPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CategoryPermission.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CategoryPermission.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated .accounts.v1alpha1.GroupPermission group_permissions = 3 [json_name = "groupPermissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_group_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CategoryPermission)
  return target;
}

size_t CategoryPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CategoryPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.GroupPermission group_permissions = 3 [json_name = "groupPermissions"];
  total_size += 1UL * this->_internal_group_permissions_size();
  for (const auto& msg : this->group_permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryPermission::GetClassData() const { return &_class_data_; }

void CategoryPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryPermission *>(to)->MergeFrom(
      static_cast<const CategoryPermission &>(from));
}


void CategoryPermission::MergeFrom(const CategoryPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CategoryPermission)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_permissions_.MergeFrom(from.group_permissions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryPermission::CopyFrom(const CategoryPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CategoryPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryPermission::IsInitialized() const {
  return true;
}

void CategoryPermission::InternalSwap(CategoryPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_permissions_.InternalSwap(&other->group_permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryPermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[75]);
}

// ===================================================================

class ListPermissionResponse::_Internal {
 public:
};

ListPermissionResponse::ListPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  categories_permissions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListPermissionResponse)
}
ListPermissionResponse::ListPermissionResponse(const ListPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      categories_permissions_(from.categories_permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListPermissionResponse)
}

inline void ListPermissionResponse::SharedCtor() {
}

ListPermissionResponse::~ListPermissionResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListPermissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListPermissionResponse::ArenaDtor(void* object) {
  ListPermissionResponse* _this = reinterpret_cast< ListPermissionResponse* >(object);
  (void)_this;
}
void ListPermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_permissions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.CategoryPermission categories_permissions = 1 [json_name = "categoriesPermissions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_categories_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPermissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.CategoryPermission categories_permissions = 1 [json_name = "categoriesPermissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_categories_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_categories_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListPermissionResponse)
  return target;
}

size_t ListPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListPermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.CategoryPermission categories_permissions = 1 [json_name = "categoriesPermissions"];
  total_size += 1UL * this->_internal_categories_permissions_size();
  for (const auto& msg : this->categories_permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPermissionResponse::GetClassData() const { return &_class_data_; }

void ListPermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListPermissionResponse *>(to)->MergeFrom(
      static_cast<const ListPermissionResponse &>(from));
}


void ListPermissionResponse::MergeFrom(const ListPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_permissions_.MergeFrom(from.categories_permissions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPermissionResponse::CopyFrom(const ListPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPermissionResponse::IsInitialized() const {
  return true;
}

void ListPermissionResponse::InternalSwap(ListPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  categories_permissions_.InternalSwap(&other->categories_permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPermissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[76]);
}

// ===================================================================

class AssignPermissionRequest::_Internal {
 public:
};

AssignPermissionRequest::AssignPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.AssignPermissionRequest)
}
AssignPermissionRequest::AssignPermissionRequest(const AssignPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(permission_id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.AssignPermissionRequest)
}

inline void AssignPermissionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&permission_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(permission_id_));
}

AssignPermissionRequest::~AssignPermissionRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.AssignPermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssignPermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssignPermissionRequest::ArenaDtor(void* object) {
  AssignPermissionRequest* _this = reinterpret_cast< AssignPermissionRequest* >(object);
  (void)_this;
}
void AssignPermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignPermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssignPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.AssignPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(permission_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignPermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 permission_id = 2 [json_name = "permissionId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          permission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignPermissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.AssignPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 permission_id = 2 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_permission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.AssignPermissionRequest)
  return target;
}

size_t AssignPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.AssignPermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 permission_id = 2 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_permission_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignPermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssignPermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignPermissionRequest::GetClassData() const { return &_class_data_; }

void AssignPermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AssignPermissionRequest *>(to)->MergeFrom(
      static_cast<const AssignPermissionRequest &>(from));
}


void AssignPermissionRequest::MergeFrom(const AssignPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.AssignPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_permission_id() != 0) {
    _internal_set_permission_id(from._internal_permission_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignPermissionRequest::CopyFrom(const AssignPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.AssignPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignPermissionRequest::IsInitialized() const {
  return true;
}

void AssignPermissionRequest::InternalSwap(AssignPermissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignPermissionRequest, permission_id_)
      + sizeof(AssignPermissionRequest::permission_id_)
      - PROTOBUF_FIELD_OFFSET(AssignPermissionRequest, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignPermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[77]);
}

// ===================================================================

class ListPermissionRequest::_Internal {
 public:
};

ListPermissionRequest::ListPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListPermissionRequest)
}
ListPermissionRequest::ListPermissionRequest(const ListPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListPermissionRequest)
}

inline void ListPermissionRequest::SharedCtor() {
}

ListPermissionRequest::~ListPermissionRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListPermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListPermissionRequest::ArenaDtor(void* object) {
  ListPermissionRequest* _this = reinterpret_cast< ListPermissionRequest* >(object);
  (void)_this;
}
void ListPermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPermissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListPermissionRequest)
  return target;
}

size_t ListPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListPermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPermissionRequest::GetClassData() const { return &_class_data_; }

void ListPermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListPermissionRequest *>(to)->MergeFrom(
      static_cast<const ListPermissionRequest &>(from));
}


void ListPermissionRequest::MergeFrom(const ListPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPermissionRequest::CopyFrom(const ListPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPermissionRequest::IsInitialized() const {
  return true;
}

void ListPermissionRequest::InternalSwap(ListPermissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[78]);
}

// ===================================================================

class CreatePermissionRequest::_Internal {
 public:
};

CreatePermissionRequest::CreatePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreatePermissionRequest)
}
CreatePermissionRequest::CreatePermissionRequest(const CreatePermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category().empty()) {
    category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_category(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreatePermissionRequest)
}

inline void CreatePermissionRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePermissionRequest::~CreatePermissionRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreatePermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreatePermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePermissionRequest::ArenaDtor(void* object) {
  CreatePermissionRequest* _this = reinterpret_cast< CreatePermissionRequest* >(object);
  (void)_this;
}
void CreatePermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreatePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreatePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  category_.ClearToEmpty();
  action_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreatePermissionRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreatePermissionRequest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string category = 3 [json_name = "category"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreatePermissionRequest.category"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4 [json_name = "action"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreatePermissionRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePermissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreatePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreatePermissionRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreatePermissionRequest.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string category = 3 [json_name = "category"];
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreatePermissionRequest.category");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_category(), target);
  }

  // string action = 4 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreatePermissionRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreatePermissionRequest)
  return target;
}

size_t CreatePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreatePermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string category = 3 [json_name = "category"];
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string action = 4 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreatePermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePermissionRequest::GetClassData() const { return &_class_data_; }

void CreatePermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreatePermissionRequest *>(to)->MergeFrom(
      static_cast<const CreatePermissionRequest &>(from));
}


void CreatePermissionRequest::MergeFrom(const CreatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreatePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_category().empty()) {
    _internal_set_category(from._internal_category());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePermissionRequest::CopyFrom(const CreatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreatePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePermissionRequest::IsInitialized() const {
  return true;
}

void CreatePermissionRequest::InternalSwap(CreatePermissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &category_, GetArenaForAllocation(),
      &other->category_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, GetArenaForAllocation(),
      &other->action_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[79]);
}

// ===================================================================

class UpdatePermissionRequest::_Internal {
 public:
};

UpdatePermissionRequest::UpdatePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdatePermissionRequest)
}
UpdatePermissionRequest::UpdatePermissionRequest(const UpdatePermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  permission_id_ = from.permission_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdatePermissionRequest)
}

inline void UpdatePermissionRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
permission_id_ = 0u;
}

UpdatePermissionRequest::~UpdatePermissionRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdatePermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdatePermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdatePermissionRequest::ArenaDtor(void* object) {
  UpdatePermissionRequest* _this = reinterpret_cast< UpdatePermissionRequest* >(object);
  (void)_this;
}
void UpdatePermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdatePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdatePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  permission_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 permission_id = 1 [json_name = "permissionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          permission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdatePermissionRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdatePermissionRequest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePermissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdatePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 permission_id = 1 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_permission_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdatePermissionRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdatePermissionRequest.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdatePermissionRequest)
  return target;
}

size_t UpdatePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdatePermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint32 permission_id = 1 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_permission_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdatePermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePermissionRequest::GetClassData() const { return &_class_data_; }

void UpdatePermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdatePermissionRequest *>(to)->MergeFrom(
      static_cast<const UpdatePermissionRequest &>(from));
}


void UpdatePermissionRequest::MergeFrom(const UpdatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdatePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_permission_id() != 0) {
    _internal_set_permission_id(from._internal_permission_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePermissionRequest::CopyFrom(const UpdatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdatePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePermissionRequest::IsInitialized() const {
  return true;
}

void UpdatePermissionRequest::InternalSwap(UpdatePermissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  swap(permission_id_, other->permission_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[80]);
}

// ===================================================================

class GetOnePermissionRequest::_Internal {
 public:
};

GetOnePermissionRequest::GetOnePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOnePermissionRequest)
}
GetOnePermissionRequest::GetOnePermissionRequest(const GetOnePermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  permission_id_ = from.permission_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOnePermissionRequest)
}

inline void GetOnePermissionRequest::SharedCtor() {
permission_id_ = 0u;
}

GetOnePermissionRequest::~GetOnePermissionRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOnePermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOnePermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOnePermissionRequest::ArenaDtor(void* object) {
  GetOnePermissionRequest* _this = reinterpret_cast< GetOnePermissionRequest* >(object);
  (void)_this;
}
void GetOnePermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOnePermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOnePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOnePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permission_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOnePermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 permission_id = 1 [json_name = "permissionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          permission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOnePermissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOnePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 permission_id = 1 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_permission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOnePermissionRequest)
  return target;
}

size_t GetOnePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOnePermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 permission_id = 1 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_permission_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOnePermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOnePermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOnePermissionRequest::GetClassData() const { return &_class_data_; }

void GetOnePermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOnePermissionRequest *>(to)->MergeFrom(
      static_cast<const GetOnePermissionRequest &>(from));
}


void GetOnePermissionRequest::MergeFrom(const GetOnePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOnePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_permission_id() != 0) {
    _internal_set_permission_id(from._internal_permission_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOnePermissionRequest::CopyFrom(const GetOnePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOnePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnePermissionRequest::IsInitialized() const {
  return true;
}

void GetOnePermissionRequest::InternalSwap(GetOnePermissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(permission_id_, other->permission_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOnePermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[81]);
}

// ===================================================================

class GetOnePermissionResponse::_Internal {
 public:
};

GetOnePermissionResponse::GetOnePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOnePermissionResponse)
}
GetOnePermissionResponse::GetOnePermissionResponse(const GetOnePermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOnePermissionResponse)
}

inline void GetOnePermissionResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

GetOnePermissionResponse::~GetOnePermissionResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOnePermissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOnePermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOnePermissionResponse::ArenaDtor(void* object) {
  GetOnePermissionResponse* _this = reinterpret_cast< GetOnePermissionResponse* >(object);
  (void)_this;
}
void GetOnePermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOnePermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOnePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOnePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOnePermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOnePermissionResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOnePermissionResponse.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOnePermissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOnePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOnePermissionResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOnePermissionResponse.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOnePermissionResponse)
  return target;
}

size_t GetOnePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOnePermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOnePermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOnePermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOnePermissionResponse::GetClassData() const { return &_class_data_; }

void GetOnePermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOnePermissionResponse *>(to)->MergeFrom(
      static_cast<const GetOnePermissionResponse &>(from));
}


void GetOnePermissionResponse::MergeFrom(const GetOnePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOnePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOnePermissionResponse::CopyFrom(const GetOnePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOnePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnePermissionResponse::IsInitialized() const {
  return true;
}

void GetOnePermissionResponse::InternalSwap(GetOnePermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOnePermissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[82]);
}

// ===================================================================

class DeletePermissionRequest::_Internal {
 public:
};

DeletePermissionRequest::DeletePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeletePermissionRequest)
}
DeletePermissionRequest::DeletePermissionRequest(const DeletePermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  permission_id_ = from.permission_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeletePermissionRequest)
}

inline void DeletePermissionRequest::SharedCtor() {
permission_id_ = 0u;
}

DeletePermissionRequest::~DeletePermissionRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeletePermissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeletePermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeletePermissionRequest::ArenaDtor(void* object) {
  DeletePermissionRequest* _this = reinterpret_cast< DeletePermissionRequest* >(object);
  (void)_this;
}
void DeletePermissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeletePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeletePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permission_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 permission_id = 1 [json_name = "permissionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          permission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePermissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeletePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 permission_id = 1 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_permission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeletePermissionRequest)
  return target;
}

size_t DeletePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeletePermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 permission_id = 1 [json_name = "permissionId"];
  if (this->_internal_permission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_permission_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeletePermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeletePermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeletePermissionRequest::GetClassData() const { return &_class_data_; }

void DeletePermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeletePermissionRequest *>(to)->MergeFrom(
      static_cast<const DeletePermissionRequest &>(from));
}


void DeletePermissionRequest::MergeFrom(const DeletePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeletePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_permission_id() != 0) {
    _internal_set_permission_id(from._internal_permission_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeletePermissionRequest::CopyFrom(const DeletePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeletePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePermissionRequest::IsInitialized() const {
  return true;
}

void DeletePermissionRequest::InternalSwap(DeletePermissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(permission_id_, other->permission_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePermissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[83]);
}

// ===================================================================

class UpdatePermissionResponse::_Internal {
 public:
};

UpdatePermissionResponse::UpdatePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdatePermissionResponse)
}
UpdatePermissionResponse::UpdatePermissionResponse(const UpdatePermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdatePermissionResponse)
}

inline void UpdatePermissionResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdatePermissionResponse::~UpdatePermissionResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdatePermissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdatePermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdatePermissionResponse::ArenaDtor(void* object) {
  UpdatePermissionResponse* _this = reinterpret_cast< UpdatePermissionResponse* >(object);
  (void)_this;
}
void UpdatePermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdatePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdatePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdatePermissionResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdatePermissionResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePermissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdatePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdatePermissionResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdatePermissionResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdatePermissionResponse)
  return target;
}

size_t UpdatePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdatePermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdatePermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePermissionResponse::GetClassData() const { return &_class_data_; }

void UpdatePermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdatePermissionResponse *>(to)->MergeFrom(
      static_cast<const UpdatePermissionResponse &>(from));
}


void UpdatePermissionResponse::MergeFrom(const UpdatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdatePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePermissionResponse::CopyFrom(const UpdatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdatePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePermissionResponse::IsInitialized() const {
  return true;
}

void UpdatePermissionResponse::InternalSwap(UpdatePermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePermissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[84]);
}

// ===================================================================

class DeletePermissionResponse::_Internal {
 public:
};

DeletePermissionResponse::DeletePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeletePermissionResponse)
}
DeletePermissionResponse::DeletePermissionResponse(const DeletePermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeletePermissionResponse)
}

inline void DeletePermissionResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePermissionResponse::~DeletePermissionResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeletePermissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeletePermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePermissionResponse::ArenaDtor(void* object) {
  DeletePermissionResponse* _this = reinterpret_cast< DeletePermissionResponse* >(object);
  (void)_this;
}
void DeletePermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeletePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeletePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeletePermissionResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeletePermissionResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePermissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeletePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeletePermissionResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeletePermissionResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeletePermissionResponse)
  return target;
}

size_t DeletePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeletePermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeletePermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeletePermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeletePermissionResponse::GetClassData() const { return &_class_data_; }

void DeletePermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeletePermissionResponse *>(to)->MergeFrom(
      static_cast<const DeletePermissionResponse &>(from));
}


void DeletePermissionResponse::MergeFrom(const DeletePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeletePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeletePermissionResponse::CopyFrom(const DeletePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeletePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePermissionResponse::IsInitialized() const {
  return true;
}

void DeletePermissionResponse::InternalSwap(DeletePermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePermissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[85]);
}

// ===================================================================

class CreatePermissionResponse::_Internal {
 public:
};

CreatePermissionResponse::CreatePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreatePermissionResponse)
}
CreatePermissionResponse::CreatePermissionResponse(const CreatePermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreatePermissionResponse)
}

inline void CreatePermissionResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePermissionResponse::~CreatePermissionResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreatePermissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreatePermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePermissionResponse::ArenaDtor(void* object) {
  CreatePermissionResponse* _this = reinterpret_cast< CreatePermissionResponse* >(object);
  (void)_this;
}
void CreatePermissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreatePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreatePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreatePermissionResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreatePermissionResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePermissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreatePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreatePermissionResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreatePermissionResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreatePermissionResponse)
  return target;
}

size_t CreatePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreatePermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreatePermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePermissionResponse::GetClassData() const { return &_class_data_; }

void CreatePermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreatePermissionResponse *>(to)->MergeFrom(
      static_cast<const CreatePermissionResponse &>(from));
}


void CreatePermissionResponse::MergeFrom(const CreatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreatePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePermissionResponse::CopyFrom(const CreatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreatePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePermissionResponse::IsInitialized() const {
  return true;
}

void CreatePermissionResponse::InternalSwap(CreatePermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePermissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[86]);
}

// ===================================================================

class Member::_Internal {
 public:
};

Member::Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.Member)
}

inline void Member::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Member::ArenaDtor(void* object) {
  Member* _this = reinterpret_cast< Member* >(object);
  (void)_this;
}
void Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  user_id_.ClearToEmpty();
  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Member.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 3 [json_name = "firstName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Member.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 4 [json_name = "lastName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Member.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 5 [json_name = "isActive"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.MenberRol roles = 6 [json_name = "roles"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Member.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string first_name = 3 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Member.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Member.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // bool is_active = 5 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_active(), target);
  }

  // repeated .accounts.v1alpha1.MenberRol roles = 6 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.MenberRol roles = 6 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string first_name = 3 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool is_active = 5 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Member::GetClassData() const { return &_class_data_; }

void Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Member *>(to)->MergeFrom(
      static_cast<const Member &>(from));
}


void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, GetArenaForAllocation(),
      &other->first_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_, GetArenaForAllocation(),
      &other->last_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Member, is_active_)
      + sizeof(Member::is_active_)
      - PROTOBUF_FIELD_OFFSET(Member, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[87]);
}

// ===================================================================

class ProjectOrganization::_Internal {
 public:
};

ProjectOrganization::ProjectOrganization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ProjectOrganization)
}
ProjectOrganization::ProjectOrganization(const ProjectOrganization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ProjectOrganization)
}

inline void ProjectOrganization::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

ProjectOrganization::~ProjectOrganization() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ProjectOrganization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectOrganization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectOrganization::ArenaDtor(void* object) {
  ProjectOrganization* _this = reinterpret_cast< ProjectOrganization* >(object);
  (void)_this;
}
void ProjectOrganization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectOrganization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectOrganization::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ProjectOrganization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  image_.ClearToEmpty();
  description_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectOrganization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ProjectOrganization.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3 [json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ProjectOrganization.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4 [json_name = "description"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.ProjectOrganization.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectOrganization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ProjectOrganization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ProjectOrganization.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ProjectOrganization.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.ProjectOrganization.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ProjectOrganization)
  return target;
}

size_t ProjectOrganization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ProjectOrganization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectOrganization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProjectOrganization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectOrganization::GetClassData() const { return &_class_data_; }

void ProjectOrganization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProjectOrganization *>(to)->MergeFrom(
      static_cast<const ProjectOrganization &>(from));
}


void ProjectOrganization::MergeFrom(const ProjectOrganization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ProjectOrganization)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectOrganization::CopyFrom(const ProjectOrganization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ProjectOrganization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectOrganization::IsInitialized() const {
  return true;
}

void ProjectOrganization::InternalSwap(ProjectOrganization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectOrganization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[88]);
}

// ===================================================================

class Organization::_Internal {
 public:
  static const ::accounts::v1alpha1::UserList& owner(const Organization* msg);
};

const ::accounts::v1alpha1::UserList&
Organization::_Internal::owner(const Organization* msg) {
  return *msg->owner_;
}
Organization::Organization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.Organization)
}
Organization::Organization(const Organization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner()) {
    owner_ = new ::accounts::v1alpha1::UserList(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.Organization)
}

inline void Organization::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(id_));
}

Organization::~Organization() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.Organization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Organization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void Organization::ArenaDtor(void* object) {
  Organization* _this = reinterpret_cast< Organization* >(object);
  (void)_this;
}
void Organization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Organization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Organization::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.Organization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  name_.ClearToEmpty();
  image_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Organization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Organization.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3 [json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Organization.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4 [json_name = "description"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.Organization.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Organization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.Organization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Organization.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Organization.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.Organization.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::owner(this), target, stream);
  }

  // repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.Organization)
  return target;
}

size_t Organization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.Organization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Organization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Organization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Organization::GetClassData() const { return &_class_data_; }

void Organization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Organization *>(to)->MergeFrom(
      static_cast<const Organization &>(from));
}


void Organization::MergeFrom(const Organization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.Organization)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::accounts::v1alpha1::UserList::MergeFrom(from._internal_owner());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Organization::CopyFrom(const Organization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.Organization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Organization::IsInitialized() const {
  return true;
}

void Organization::InternalSwap(Organization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Organization, id_)
      + sizeof(Organization::id_)
      - PROTOBUF_FIELD_OFFSET(Organization, owner_)>(
          reinterpret_cast<char*>(&owner_),
          reinterpret_cast<char*>(&other->owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Organization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[89]);
}

// ===================================================================

class CreateOrganizationRequest::_Internal {
 public:
};

CreateOrganizationRequest::CreateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateOrganizationRequest)
}
CreateOrganizationRequest::CreateOrganizationRequest(const CreateOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateOrganizationRequest)
}

inline void CreateOrganizationRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateOrganizationRequest::~CreateOrganizationRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateOrganizationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateOrganizationRequest::ArenaDtor(void* object) {
  CreateOrganizationRequest* _this = reinterpret_cast< CreateOrganizationRequest* >(object);
  (void)_this;
}
void CreateOrganizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateOrganizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  image_.ClearToEmpty();
  user_id_.ClearToEmpty();
  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOrganizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateOrganizationRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateOrganizationRequest.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3 [json_name = "userId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateOrganizationRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4 [json_name = "description"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateOrganizationRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOrganizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateOrganizationRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateOrganizationRequest.image");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image(), target);
  }

  // string user_id = 3 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateOrganizationRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateOrganizationRequest.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateOrganizationRequest)
  return target;
}

size_t CreateOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateOrganizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string user_id = 3 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateOrganizationRequest::GetClassData() const { return &_class_data_; }

void CreateOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateOrganizationRequest *>(to)->MergeFrom(
      static_cast<const CreateOrganizationRequest &>(from));
}


void CreateOrganizationRequest::MergeFrom(const CreateOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateOrganizationRequest::CopyFrom(const CreateOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrganizationRequest::IsInitialized() const {
  return true;
}

void CreateOrganizationRequest::InternalSwap(CreateOrganizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOrganizationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[90]);
}

// ===================================================================

class ListOrganizationRequest::_Internal {
 public:
};

ListOrganizationRequest::ListOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListOrganizationRequest)
}
ListOrganizationRequest::ListOrganizationRequest(const ListOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListOrganizationRequest)
}

inline void ListOrganizationRequest::SharedCtor() {
}

ListOrganizationRequest::~ListOrganizationRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListOrganizationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListOrganizationRequest::ArenaDtor(void* object) {
  ListOrganizationRequest* _this = reinterpret_cast< ListOrganizationRequest* >(object);
  (void)_this;
}
void ListOrganizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListOrganizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOrganizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrganizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListOrganizationRequest)
  return target;
}

size_t ListOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListOrganizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOrganizationRequest::GetClassData() const { return &_class_data_; }

void ListOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListOrganizationRequest *>(to)->MergeFrom(
      static_cast<const ListOrganizationRequest &>(from));
}


void ListOrganizationRequest::MergeFrom(const ListOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOrganizationRequest::CopyFrom(const ListOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrganizationRequest::IsInitialized() const {
  return true;
}

void ListOrganizationRequest::InternalSwap(ListOrganizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrganizationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[91]);
}

// ===================================================================

class GetOneOrganizationRequest::_Internal {
 public:
};

GetOneOrganizationRequest::GetOneOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneOrganizationRequest)
}
GetOneOrganizationRequest::GetOneOrganizationRequest(const GetOneOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_id_ = from.organization_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneOrganizationRequest)
}

inline void GetOneOrganizationRequest::SharedCtor() {
organization_id_ = 0u;
}

GetOneOrganizationRequest::~GetOneOrganizationRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneOrganizationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetOneOrganizationRequest::ArenaDtor(void* object) {
  GetOneOrganizationRequest* _this = reinterpret_cast< GetOneOrganizationRequest* >(object);
  (void)_this;
}
void GetOneOrganizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneOrganizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneOrganizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneOrganizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneOrganizationRequest)
  return target;
}

size_t GetOneOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneOrganizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneOrganizationRequest::GetClassData() const { return &_class_data_; }

void GetOneOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneOrganizationRequest *>(to)->MergeFrom(
      static_cast<const GetOneOrganizationRequest &>(from));
}


void GetOneOrganizationRequest::MergeFrom(const GetOneOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneOrganizationRequest::CopyFrom(const GetOneOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneOrganizationRequest::IsInitialized() const {
  return true;
}

void GetOneOrganizationRequest::InternalSwap(GetOneOrganizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(organization_id_, other->organization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneOrganizationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[92]);
}

// ===================================================================

class UpdateOrganizationRequest::_Internal {
 public:
};

UpdateOrganizationRequest::UpdateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateOrganizationRequest)
}
UpdateOrganizationRequest::UpdateOrganizationRequest(const UpdateOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  organization_id_ = from.organization_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateOrganizationRequest)
}

inline void UpdateOrganizationRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_ = 0u;
}

UpdateOrganizationRequest::~UpdateOrganizationRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateOrganizationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateOrganizationRequest::ArenaDtor(void* object) {
  UpdateOrganizationRequest* _this = reinterpret_cast< UpdateOrganizationRequest* >(object);
  (void)_this;
}
void UpdateOrganizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateOrganizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  image_.ClearToEmpty();
  organization_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateOrganizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateOrganizationRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3 [json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateOrganizationRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 4 [json_name = "image"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateOrganizationRequest.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateOrganizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_organization_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateOrganizationRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateOrganizationRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string image = 4 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateOrganizationRequest.image");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateOrganizationRequest)
  return target;
}

size_t UpdateOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateOrganizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string image = 4 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateOrganizationRequest::GetClassData() const { return &_class_data_; }

void UpdateOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateOrganizationRequest *>(to)->MergeFrom(
      static_cast<const UpdateOrganizationRequest &>(from));
}


void UpdateOrganizationRequest::MergeFrom(const UpdateOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateOrganizationRequest::CopyFrom(const UpdateOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOrganizationRequest::IsInitialized() const {
  return true;
}

void UpdateOrganizationRequest::InternalSwap(UpdateOrganizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  swap(organization_id_, other->organization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateOrganizationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[93]);
}

// ===================================================================

class DeleteOrganizationRequest::_Internal {
 public:
};

DeleteOrganizationRequest::DeleteOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteOrganizationRequest)
}
DeleteOrganizationRequest::DeleteOrganizationRequest(const DeleteOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_id_ = from.organization_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteOrganizationRequest)
}

inline void DeleteOrganizationRequest::SharedCtor() {
organization_id_ = 0u;
}

DeleteOrganizationRequest::~DeleteOrganizationRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteOrganizationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteOrganizationRequest::ArenaDtor(void* object) {
  DeleteOrganizationRequest* _this = reinterpret_cast< DeleteOrganizationRequest* >(object);
  (void)_this;
}
void DeleteOrganizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteOrganizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteOrganizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteOrganizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteOrganizationRequest)
  return target;
}

size_t DeleteOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteOrganizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteOrganizationRequest::GetClassData() const { return &_class_data_; }

void DeleteOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteOrganizationRequest *>(to)->MergeFrom(
      static_cast<const DeleteOrganizationRequest &>(from));
}


void DeleteOrganizationRequest::MergeFrom(const DeleteOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteOrganizationRequest::CopyFrom(const DeleteOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOrganizationRequest::IsInitialized() const {
  return true;
}

void DeleteOrganizationRequest::InternalSwap(DeleteOrganizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(organization_id_, other->organization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteOrganizationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[94]);
}

// ===================================================================

class GetOneOrganizationResponse::_Internal {
 public:
  static const ::accounts::v1alpha1::UserList& owner(const GetOneOrganizationResponse* msg);
};

const ::accounts::v1alpha1::UserList&
GetOneOrganizationResponse::_Internal::owner(const GetOneOrganizationResponse* msg) {
  return *msg->owner_;
}
GetOneOrganizationResponse::GetOneOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena),
  menbers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneOrganizationResponse)
}
GetOneOrganizationResponse::GetOneOrganizationResponse(const GetOneOrganizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projects_(from.projects_),
      menbers_(from.menbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner()) {
    owner_ = new ::accounts::v1alpha1::UserList(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneOrganizationResponse)
}

inline void GetOneOrganizationResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(id_));
}

GetOneOrganizationResponse::~GetOneOrganizationResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneOrganizationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneOrganizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void GetOneOrganizationResponse::ArenaDtor(void* object) {
  GetOneOrganizationResponse* _this = reinterpret_cast< GetOneOrganizationResponse* >(object);
  (void)_this;
}
void GetOneOrganizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneOrganizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneOrganizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  menbers_.Clear();
  name_.ClearToEmpty();
  image_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneOrganizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneOrganizationResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 3 [json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneOrganizationResponse.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.ProjectOrganization projects = 4 [json_name = "projects"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Member menbers = 5 [json_name = "menbers"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_menbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string description = 6 [json_name = "description"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneOrganizationResponse.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneOrganizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneOrganizationResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneOrganizationResponse.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // repeated .accounts.v1alpha1.ProjectOrganization projects = 4 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_projects(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Member menbers = 5 [json_name = "menbers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_menbers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_menbers(i), target, stream);
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneOrganizationResponse.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::owner(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneOrganizationResponse)
  return target;
}

size_t GetOneOrganizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneOrganizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.ProjectOrganization projects = 4 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Member menbers = 5 [json_name = "menbers"];
  total_size += 1UL * this->_internal_menbers_size();
  for (const auto& msg : this->menbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string image = 3 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneOrganizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneOrganizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneOrganizationResponse::GetClassData() const { return &_class_data_; }

void GetOneOrganizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneOrganizationResponse *>(to)->MergeFrom(
      static_cast<const GetOneOrganizationResponse &>(from));
}


void GetOneOrganizationResponse::MergeFrom(const GetOneOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneOrganizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  menbers_.MergeFrom(from.menbers_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::accounts::v1alpha1::UserList::MergeFrom(from._internal_owner());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneOrganizationResponse::CopyFrom(const GetOneOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneOrganizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneOrganizationResponse::IsInitialized() const {
  return true;
}

void GetOneOrganizationResponse::InternalSwap(GetOneOrganizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  projects_.InternalSwap(&other->projects_);
  menbers_.InternalSwap(&other->menbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOneOrganizationResponse, id_)
      + sizeof(GetOneOrganizationResponse::id_)
      - PROTOBUF_FIELD_OFFSET(GetOneOrganizationResponse, owner_)>(
          reinterpret_cast<char*>(&owner_),
          reinterpret_cast<char*>(&other->owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneOrganizationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[95]);
}

// ===================================================================

class ListOrganizationResponse::_Internal {
 public:
};

ListOrganizationResponse::ListOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  organizations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.ListOrganizationResponse)
}
ListOrganizationResponse::ListOrganizationResponse(const ListOrganizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      organizations_(from.organizations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.ListOrganizationResponse)
}

inline void ListOrganizationResponse::SharedCtor() {
}

ListOrganizationResponse::~ListOrganizationResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.ListOrganizationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListOrganizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListOrganizationResponse::ArenaDtor(void* object) {
  ListOrganizationResponse* _this = reinterpret_cast< ListOrganizationResponse* >(object);
  (void)_this;
}
void ListOrganizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListOrganizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListOrganizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.ListOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organizations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOrganizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.Organization organizations = 1 [json_name = "organizations"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_organizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrganizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.ListOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Organization organizations = 1 [json_name = "organizations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_organizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_organizations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.ListOrganizationResponse)
  return target;
}

size_t ListOrganizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.ListOrganizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Organization organizations = 1 [json_name = "organizations"];
  total_size += 1UL * this->_internal_organizations_size();
  for (const auto& msg : this->organizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOrganizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListOrganizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOrganizationResponse::GetClassData() const { return &_class_data_; }

void ListOrganizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListOrganizationResponse *>(to)->MergeFrom(
      static_cast<const ListOrganizationResponse &>(from));
}


void ListOrganizationResponse::MergeFrom(const ListOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.ListOrganizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  organizations_.MergeFrom(from.organizations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOrganizationResponse::CopyFrom(const ListOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.ListOrganizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrganizationResponse::IsInitialized() const {
  return true;
}

void ListOrganizationResponse::InternalSwap(ListOrganizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  organizations_.InternalSwap(&other->organizations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrganizationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[96]);
}

// ===================================================================

class CreateOrganizationResponse::_Internal {
 public:
};

CreateOrganizationResponse::CreateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.CreateOrganizationResponse)
}
CreateOrganizationResponse::CreateOrganizationResponse(const CreateOrganizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  ::memcpy(&role_id_organization_, &from.role_id_organization_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&role_id_organization_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.CreateOrganizationResponse)
}

inline void CreateOrganizationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_id_organization_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&role_id_organization_)) + sizeof(id_));
}

CreateOrganizationResponse::~CreateOrganizationResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.CreateOrganizationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateOrganizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateOrganizationResponse::ArenaDtor(void* object) {
  CreateOrganizationResponse* _this = reinterpret_cast< CreateOrganizationResponse* >(object);
  (void)_this;
}
void CreateOrganizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateOrganizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateOrganizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.CreateOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  ::memset(&role_id_organization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&role_id_organization_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOrganizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateOrganizationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 role_id_organization = 2 [json_name = "roleIdOrganization"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_organization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 3 [json_name = "error"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.CreateOrganizationResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 4 [json_name = "id"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOrganizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.CreateOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateOrganizationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // uint32 role_id_organization = 2 [json_name = "roleIdOrganization"];
  if (this->_internal_role_id_organization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_role_id_organization(), target);
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.CreateOrganizationResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  // uint32 id = 4 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.CreateOrganizationResponse)
  return target;
}

size_t CreateOrganizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.CreateOrganizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // uint32 role_id_organization = 2 [json_name = "roleIdOrganization"];
  if (this->_internal_role_id_organization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_role_id_organization());
  }

  // uint32 id = 4 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateOrganizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateOrganizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateOrganizationResponse::GetClassData() const { return &_class_data_; }

void CreateOrganizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateOrganizationResponse *>(to)->MergeFrom(
      static_cast<const CreateOrganizationResponse &>(from));
}


void CreateOrganizationResponse::MergeFrom(const CreateOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.CreateOrganizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_role_id_organization() != 0) {
    _internal_set_role_id_organization(from._internal_role_id_organization());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateOrganizationResponse::CopyFrom(const CreateOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.CreateOrganizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrganizationResponse::IsInitialized() const {
  return true;
}

void CreateOrganizationResponse::InternalSwap(CreateOrganizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateOrganizationResponse, id_)
      + sizeof(CreateOrganizationResponse::id_)
      - PROTOBUF_FIELD_OFFSET(CreateOrganizationResponse, role_id_organization_)>(
          reinterpret_cast<char*>(&role_id_organization_),
          reinterpret_cast<char*>(&other->role_id_organization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOrganizationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[97]);
}

// ===================================================================

class UpdateOrganizationResponse::_Internal {
 public:
};

UpdateOrganizationResponse::UpdateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.UpdateOrganizationResponse)
}
UpdateOrganizationResponse::UpdateOrganizationResponse(const UpdateOrganizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.UpdateOrganizationResponse)
}

inline void UpdateOrganizationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateOrganizationResponse::~UpdateOrganizationResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.UpdateOrganizationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateOrganizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateOrganizationResponse::ArenaDtor(void* object) {
  UpdateOrganizationResponse* _this = reinterpret_cast< UpdateOrganizationResponse* >(object);
  (void)_this;
}
void UpdateOrganizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateOrganizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateOrganizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.UpdateOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateOrganizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateOrganizationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.UpdateOrganizationResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateOrganizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.UpdateOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateOrganizationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.UpdateOrganizationResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.UpdateOrganizationResponse)
  return target;
}

size_t UpdateOrganizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.UpdateOrganizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateOrganizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateOrganizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateOrganizationResponse::GetClassData() const { return &_class_data_; }

void UpdateOrganizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateOrganizationResponse *>(to)->MergeFrom(
      static_cast<const UpdateOrganizationResponse &>(from));
}


void UpdateOrganizationResponse::MergeFrom(const UpdateOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.UpdateOrganizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateOrganizationResponse::CopyFrom(const UpdateOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.UpdateOrganizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOrganizationResponse::IsInitialized() const {
  return true;
}

void UpdateOrganizationResponse::InternalSwap(UpdateOrganizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateOrganizationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[98]);
}

// ===================================================================

class DeleteOrganizationResponse::_Internal {
 public:
};

DeleteOrganizationResponse::DeleteOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.DeleteOrganizationResponse)
}
DeleteOrganizationResponse::DeleteOrganizationResponse(const DeleteOrganizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.DeleteOrganizationResponse)
}

inline void DeleteOrganizationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteOrganizationResponse::~DeleteOrganizationResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.DeleteOrganizationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteOrganizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteOrganizationResponse::ArenaDtor(void* object) {
  DeleteOrganizationResponse* _this = reinterpret_cast< DeleteOrganizationResponse* >(object);
  (void)_this;
}
void DeleteOrganizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteOrganizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteOrganizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.DeleteOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteOrganizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteOrganizationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.DeleteOrganizationResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteOrganizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.DeleteOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteOrganizationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.DeleteOrganizationResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.DeleteOrganizationResponse)
  return target;
}

size_t DeleteOrganizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.DeleteOrganizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteOrganizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteOrganizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteOrganizationResponse::GetClassData() const { return &_class_data_; }

void DeleteOrganizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteOrganizationResponse *>(to)->MergeFrom(
      static_cast<const DeleteOrganizationResponse &>(from));
}


void DeleteOrganizationResponse::MergeFrom(const DeleteOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.DeleteOrganizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteOrganizationResponse::CopyFrom(const DeleteOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.DeleteOrganizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOrganizationResponse::IsInitialized() const {
  return true;
}

void DeleteOrganizationResponse::InternalSwap(DeleteOrganizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteOrganizationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[99]);
}

// ===================================================================

class GetListUserDexRequest::_Internal {
 public:
};

GetListUserDexRequest::GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetListUserDexRequest)
}
GetListUserDexRequest::GetListUserDexRequest(const GetListUserDexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetListUserDexRequest)
}

inline void GetListUserDexRequest::SharedCtor() {
}

GetListUserDexRequest::~GetListUserDexRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetListUserDexRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetListUserDexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetListUserDexRequest::ArenaDtor(void* object) {
  GetListUserDexRequest* _this = reinterpret_cast< GetListUserDexRequest* >(object);
  (void)_this;
}
void GetListUserDexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListUserDexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetListUserDexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetListUserDexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListUserDexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListUserDexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetListUserDexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetListUserDexRequest)
  return target;
}

size_t GetListUserDexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetListUserDexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListUserDexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetListUserDexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListUserDexRequest::GetClassData() const { return &_class_data_; }

void GetListUserDexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetListUserDexRequest *>(to)->MergeFrom(
      static_cast<const GetListUserDexRequest &>(from));
}


void GetListUserDexRequest::MergeFrom(const GetListUserDexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetListUserDexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListUserDexRequest::CopyFrom(const GetListUserDexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetListUserDexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListUserDexRequest::IsInitialized() const {
  return true;
}

void GetListUserDexRequest::InternalSwap(GetListUserDexRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListUserDexRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[100]);
}

// ===================================================================

class GetListUserDexResponse::_Internal {
 public:
};

GetListUserDexResponse::GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_dex_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetListUserDexResponse)
}
GetListUserDexResponse::GetListUserDexResponse(const GetListUserDexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_dex_(from.users_dex_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetListUserDexResponse)
}

inline void GetListUserDexResponse::SharedCtor() {
}

GetListUserDexResponse::~GetListUserDexResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetListUserDexResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetListUserDexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetListUserDexResponse::ArenaDtor(void* object) {
  GetListUserDexResponse* _this = reinterpret_cast< GetListUserDexResponse* >(object);
  (void)_this;
}
void GetListUserDexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetListUserDexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetListUserDexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetListUserDexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_dex_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListUserDexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users_dex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetListUserDexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetListUserDexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_dex_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users_dex(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetListUserDexResponse)
  return target;
}

size_t GetListUserDexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetListUserDexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
  total_size += 1UL * this->_internal_users_dex_size();
  for (const auto& msg : this->users_dex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListUserDexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetListUserDexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListUserDexResponse::GetClassData() const { return &_class_data_; }

void GetListUserDexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetListUserDexResponse *>(to)->MergeFrom(
      static_cast<const GetListUserDexResponse &>(from));
}


void GetListUserDexResponse::MergeFrom(const GetListUserDexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetListUserDexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_dex_.MergeFrom(from.users_dex_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListUserDexResponse::CopyFrom(const GetListUserDexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetListUserDexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListUserDexResponse::IsInitialized() const {
  return true;
}

void GetListUserDexResponse::InternalSwap(GetListUserDexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_dex_.InternalSwap(&other->users_dex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListUserDexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[101]);
}

// ===================================================================

class GetOneUserDexRequest::_Internal {
 public:
  static const ::accounts::v1alpha1::CreateUserRequest& user(const GetOneUserDexRequest* msg);
};

const ::accounts::v1alpha1::CreateUserRequest&
GetOneUserDexRequest::_Internal::user(const GetOneUserDexRequest* msg) {
  return *msg->user_;
}
GetOneUserDexRequest::GetOneUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneUserDexRequest)
}
GetOneUserDexRequest::GetOneUserDexRequest(const GetOneUserDexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    user_ = new ::accounts::v1alpha1::CreateUserRequest(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneUserDexRequest)
}

inline void GetOneUserDexRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_ = nullptr;
}

GetOneUserDexRequest::~GetOneUserDexRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneUserDexRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneUserDexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void GetOneUserDexRequest::ArenaDtor(void* object) {
  GetOneUserDexRequest* _this = reinterpret_cast< GetOneUserDexRequest* >(object);
  (void)_this;
}
void GetOneUserDexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneUserDexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneUserDexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneUserDexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneUserDexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .accounts.v1alpha1.CreateUserRequest user = 2 [json_name = "user"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneUserDexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneUserDexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .accounts.v1alpha1.CreateUserRequest user = 2 [json_name = "user"];
  if (this->_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneUserDexRequest)
  return target;
}

size_t GetOneUserDexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneUserDexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .accounts.v1alpha1.CreateUserRequest user = 2 [json_name = "user"];
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneUserDexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneUserDexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneUserDexRequest::GetClassData() const { return &_class_data_; }

void GetOneUserDexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneUserDexRequest *>(to)->MergeFrom(
      static_cast<const GetOneUserDexRequest &>(from));
}


void GetOneUserDexRequest::MergeFrom(const GetOneUserDexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneUserDexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_user()) {
    _internal_mutable_user()->::accounts::v1alpha1::CreateUserRequest::MergeFrom(from._internal_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneUserDexRequest::CopyFrom(const GetOneUserDexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneUserDexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneUserDexRequest::IsInitialized() const {
  return true;
}

void GetOneUserDexRequest::InternalSwap(GetOneUserDexRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneUserDexRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[102]);
}

// ===================================================================

class GetOneUserDexResponse::_Internal {
 public:
};

GetOneUserDexResponse::GetOneUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena),
  permissions_(arena),
  organizations_(arena),
  projects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.GetOneUserDexResponse)
}
GetOneUserDexResponse::GetOneUserDexResponse(const GetOneUserDexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_),
      permissions_(from.permissions_),
      organizations_(from.organizations_),
      projects_(from.projects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_number().empty()) {
    phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_number(), 
      GetArenaForAllocation());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_city(), 
      GetArenaForAllocation());
  }
  zip_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zip_code().empty()) {
    zip_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zip_code(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  emoji_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emoji_country().empty()) {
    emoji_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emoji_country(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_super_user_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.GetOneUserDexResponse)
}

inline void GetOneUserDexResponse::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zip_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emoji_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_super_user_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
}

GetOneUserDexResponse::~GetOneUserDexResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.GetOneUserDexResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneUserDexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zip_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emoji_country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneUserDexResponse::ArenaDtor(void* object) {
  GetOneUserDexResponse* _this = reinterpret_cast< GetOneUserDexResponse* >(object);
  (void)_this;
}
void GetOneUserDexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneUserDexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneUserDexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.GetOneUserDexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  permissions_.Clear();
  organizations_.Clear();
  projects_.Clear();
  user_id_.ClearToEmpty();
  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  email_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  msg_.ClearToEmpty();
  phone_number_.ClearToEmpty();
  country_.ClearToEmpty();
  city_.ClearToEmpty();
  zip_code_.ClearToEmpty();
  address_.ClearToEmpty();
  state_.ClearToEmpty();
  emoji_country_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_super_user_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_super_user_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneUserDexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 3 [json_name = "firstName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 4 [json_name = "lastName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 5 [json_name = "email"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 6 [json_name = "isActive"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created_at = 7 [json_name = "createdAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.created_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updated_at = 8 [json_name = "updatedAt"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.updated_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_super_user = 11 [json_name = "isSuperUser"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_super_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_organizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string msg = 13 [json_name = "msg"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.Project projects = 14 [json_name = "projects"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // string phone_number = 15 [json_name = "phoneNumber"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.phone_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 16 [json_name = "country"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 17 [json_name = "city"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string zip_code = 18 [json_name = "zipCode"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_zip_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.zip_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 19 [json_name = "address"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 20 [json_name = "state"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string emoji_country = 21 [json_name = "emojiCountry"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_emoji_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.GetOneUserDexResponse.emoji_country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneUserDexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.GetOneUserDexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string first_name = 3 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string email = 5 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.email");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_email(), target);
  }

  // bool is_active = 6 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_active(), target);
  }

  // string created_at = 7 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.created_at");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_created_at(), target);
  }

  // string updated_at = 8 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.updated_at");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_updated_at(), target);
  }

  // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_roles(i), target, stream);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_permissions(i), target, stream);
  }

  // bool is_super_user = 11 [json_name = "isSuperUser"];
  if (this->_internal_is_super_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_super_user(), target);
  }

  // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_organizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_organizations(i), target, stream);
  }

  // string msg = 13 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.msg");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_msg(), target);
  }

  // repeated .accounts.v1alpha1.Project projects = 14 [json_name = "projects"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_projects(i), target, stream);
  }

  // string phone_number = 15 [json_name = "phoneNumber"];
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.phone_number");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_phone_number(), target);
  }

  // string country = 16 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.country");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_country(), target);
  }

  // string city = 17 [json_name = "city"];
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.city");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_city(), target);
  }

  // string zip_code = 18 [json_name = "zipCode"];
  if (!this->_internal_zip_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zip_code().data(), static_cast<int>(this->_internal_zip_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.zip_code");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_zip_code(), target);
  }

  // string address = 19 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.address");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_address(), target);
  }

  // string state = 20 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.state");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_state(), target);
  }

  // string emoji_country = 21 [json_name = "emojiCountry"];
  if (!this->_internal_emoji_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji_country().data(), static_cast<int>(this->_internal_emoji_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.GetOneUserDexResponse.emoji_country");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_emoji_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.GetOneUserDexResponse)
  return target;
}

size_t GetOneUserDexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.GetOneUserDexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
  total_size += 1UL * this->_internal_organizations_size();
  for (const auto& msg : this->organizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .accounts.v1alpha1.Project projects = 14 [json_name = "projects"];
  total_size += 1UL * this->_internal_projects_size();
  for (const auto& msg : this->projects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string first_name = 3 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string email = 5 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string created_at = 7 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 8 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // string msg = 13 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string phone_number = 15 [json_name = "phoneNumber"];
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string country = 16 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string city = 17 [json_name = "city"];
  if (!this->_internal_city().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string zip_code = 18 [json_name = "zipCode"];
  if (!this->_internal_zip_code().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zip_code());
  }

  // string address = 19 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string state = 20 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string emoji_country = 21 [json_name = "emojiCountry"];
  if (!this->_internal_emoji_country().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji_country());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool is_active = 6 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_super_user = 11 [json_name = "isSuperUser"];
  if (this->_internal_is_super_user() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneUserDexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneUserDexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneUserDexResponse::GetClassData() const { return &_class_data_; }

void GetOneUserDexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneUserDexResponse *>(to)->MergeFrom(
      static_cast<const GetOneUserDexResponse &>(from));
}


void GetOneUserDexResponse::MergeFrom(const GetOneUserDexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.GetOneUserDexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  permissions_.MergeFrom(from.permissions_);
  organizations_.MergeFrom(from.organizations_);
  projects_.MergeFrom(from.projects_);
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_phone_number().empty()) {
    _internal_set_phone_number(from._internal_phone_number());
  }
  if (!from._internal_country().empty()) {
    _internal_set_country(from._internal_country());
  }
  if (!from._internal_city().empty()) {
    _internal_set_city(from._internal_city());
  }
  if (!from._internal_zip_code().empty()) {
    _internal_set_zip_code(from._internal_zip_code());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (!from._internal_emoji_country().empty()) {
    _internal_set_emoji_country(from._internal_emoji_country());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_is_super_user() != 0) {
    _internal_set_is_super_user(from._internal_is_super_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneUserDexResponse::CopyFrom(const GetOneUserDexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.GetOneUserDexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneUserDexResponse::IsInitialized() const {
  return true;
}

void GetOneUserDexResponse::InternalSwap(GetOneUserDexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  permissions_.InternalSwap(&other->permissions_);
  organizations_.InternalSwap(&other->organizations_);
  projects_.InternalSwap(&other->projects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, GetArenaForAllocation(),
      &other->first_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_, GetArenaForAllocation(),
      &other->last_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, GetArenaForAllocation(),
      &other->created_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, GetArenaForAllocation(),
      &other->updated_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_number_, GetArenaForAllocation(),
      &other->phone_number_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, GetArenaForAllocation(),
      &other->country_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &city_, GetArenaForAllocation(),
      &other->city_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zip_code_, GetArenaForAllocation(),
      &other->zip_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, GetArenaForAllocation(),
      &other->state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emoji_country_, GetArenaForAllocation(),
      &other->emoji_country_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOneUserDexResponse, is_super_user_)
      + sizeof(GetOneUserDexResponse::is_super_user_)
      - PROTOBUF_FIELD_OFFSET(GetOneUserDexResponse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneUserDexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2faccounts_2eproto[103]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetRolesByUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetRolesByUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetRolesByUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetRolesByUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetRolesByUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetRolesByUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateApiKeyRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ApiKey* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ApiKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ApiKey >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateApiKeyResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateApiKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateApiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneApiKeyRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneApiKeyResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneApiKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneApiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListApiKeyRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ApiKeyList* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ApiKeyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ApiKeyList >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListApiKeyResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListApiKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListApiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateApiKeyRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateApiKeyResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateApiKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateApiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteApiKeyRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteApiKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteApiKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteApiKeyResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteApiKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteApiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::City* Arena::CreateMaybeMessage< ::accounts::v1alpha1::City >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::City >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::State* Arena::CreateMaybeMessage< ::accounts::v1alpha1::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::State >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CountryList* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CountryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CountryList >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListCountriesRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListCountriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListCountriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListCountriesResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListCountriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListCountriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneCountryRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneCountryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneCountryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneCountryResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneCountryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneCountryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::SendVerificationEmailRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::SendVerificationEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::SendVerificationEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::SendVerificationEmailResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::SendVerificationEmailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::SendVerificationEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::VerifyEmailRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::VerifyEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::VerifyEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::VerifyEmailResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::VerifyEmailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::VerifyEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CheckUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CheckUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CheckUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CheckUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CheckUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CheckUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UsersDex* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UsersDex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UsersDex >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UserList* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UserList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UserList >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListUserPaginationRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListUserPaginationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListUserPaginationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListUserPaginationResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListUserPaginationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListUserPaginationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::SendInvitationUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::SendInvitationUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::SendInvitationUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::SendInvitationUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::SendInvitationUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::SendInvitationUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetInvitationUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetInvitationUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetInvitationUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetInvitationUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetInvitationUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetInvitationUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::AgreeInvitationUserRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::AgreeInvitationUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::AgreeInvitationUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::AgreeInvitationUserResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::AgreeInvitationUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::AgreeInvitationUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::Rol* Arena::CreateMaybeMessage< ::accounts::v1alpha1::Rol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::Rol >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateRoleRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateRoleRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneRoleRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneRoleResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteRoleRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListRolesRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListRolesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListRolesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListRolesResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListRolesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListRolesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateRoleResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateRoleResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteRoleResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::Project* Arena::CreateMaybeMessage< ::accounts::v1alpha1::Project >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::Project >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateProjectRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneProjectRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteProjectRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListProjectRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateProjectRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateProjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::MenberRol* Arena::CreateMaybeMessage< ::accounts::v1alpha1::MenberRol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::MenberRol >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateProjectResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateProjectResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteProjectResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneProjectResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListProjectResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListProjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListProjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListProjectPaginationRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListProjectPaginationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListProjectPaginationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListProjectPaginationResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListProjectPaginationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListProjectPaginationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::Permission* Arena::CreateMaybeMessage< ::accounts::v1alpha1::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GroupPermission* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GroupPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GroupPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CategoryPermission* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CategoryPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CategoryPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListPermissionResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::AssignPermissionRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::AssignPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::AssignPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListPermissionRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreatePermissionRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreatePermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreatePermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdatePermissionRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdatePermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdatePermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOnePermissionRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOnePermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOnePermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOnePermissionResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOnePermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOnePermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeletePermissionRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeletePermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeletePermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdatePermissionResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdatePermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdatePermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeletePermissionResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeletePermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeletePermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreatePermissionResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreatePermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreatePermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::Member* Arena::CreateMaybeMessage< ::accounts::v1alpha1::Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ProjectOrganization* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ProjectOrganization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ProjectOrganization >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::Organization* Arena::CreateMaybeMessage< ::accounts::v1alpha1::Organization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::Organization >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateOrganizationRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListOrganizationRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneOrganizationRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateOrganizationRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteOrganizationRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneOrganizationResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneOrganizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneOrganizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::ListOrganizationResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::ListOrganizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::ListOrganizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::CreateOrganizationResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::CreateOrganizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::CreateOrganizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::UpdateOrganizationResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::UpdateOrganizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::UpdateOrganizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::DeleteOrganizationResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::DeleteOrganizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::DeleteOrganizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetListUserDexRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetListUserDexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetListUserDexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetListUserDexResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetListUserDexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetListUserDexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneUserDexRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneUserDexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneUserDexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::GetOneUserDexResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::GetOneUserDexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::GetOneUserDexResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
