// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/projects/projects_apis.proto

#include "accounts/v1alpha1/projects/projects_apis.pb.h"
#include "accounts/v1alpha1/projects/projects_apis.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {
namespace projects {
namespace v1 {

static const char* ProjectService_method_names[] = {
  "/accounts.v1alpha1.projects.v1.ProjectService/CreateProject",
  "/accounts.v1alpha1.projects.v1.ProjectService/GetOneProject",
  "/accounts.v1alpha1.projects.v1.ProjectService/UpdateProject",
  "/accounts.v1alpha1.projects.v1.ProjectService/DeleteProject",
  "/accounts.v1alpha1.projects.v1.ProjectService/ListProject",
  "/accounts.v1alpha1.projects.v1.ProjectService/ListProjectPagination",
  "/accounts.v1alpha1.projects.v1.ProjectService/DeleteUserByProject",
  "/accounts.v1alpha1.projects.v1.ProjectService/EditRoleUserByProject",
  "/accounts.v1alpha1.projects.v1.ProjectService/ListProjectByOrganization",
  "/accounts.v1alpha1.projects.v1.ProjectService/UpdadeProjectRole",
};

std::unique_ptr< ProjectService::Stub> ProjectService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProjectService::Stub> stub(new ProjectService::Stub(channel));
  return stub;
}

ProjectService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateProject_(ProjectService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneProject_(ProjectService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProject_(ProjectService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProject_(ProjectService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProject_(ProjectService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProjectPagination_(ProjectService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUserByProject_(ProjectService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditRoleUserByProject_(ProjectService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProjectByOrganization_(ProjectService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdadeProjectRole_(ProjectService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectService::Stub::CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateProject_, context, request, response);
}

void ProjectService::Stub::experimental_async::CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>* ProjectService::Stub::AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>* ProjectService::Stub::PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, false);
}

::grpc::Status ProjectService::Stub::GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneProject_, context, request, response);
}

void ProjectService::Stub::experimental_async::GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* ProjectService::Stub::AsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetOneProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* ProjectService::Stub::PrepareAsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetOneProject_, context, request, false);
}

::grpc::Status ProjectService::Stub::UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProject_, context, request, response);
}

void ProjectService::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* ProjectService::Stub::AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* ProjectService::Stub::PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, false);
}

::grpc::Status ProjectService::Stub::DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProject_, context, request, response);
}

void ProjectService::Stub::experimental_async::DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* ProjectService::Stub::AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* ProjectService::Stub::PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProject_, context, request, false);
}

::grpc::Status ProjectService::Stub::ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProject_, context, request, response);
}

void ProjectService::Stub::experimental_async::ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>* ProjectService::Stub::AsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::ListProjectResponse>::Create(channel_.get(), cq, rpcmethod_ListProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>* ProjectService::Stub::PrepareAsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::ListProjectResponse>::Create(channel_.get(), cq, rpcmethod_ListProject_, context, request, false);
}

::grpc::Status ProjectService::Stub::ListProjectPagination(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectPaginationRequest& request, ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProjectPagination_, context, request, response);
}

void ProjectService::Stub::experimental_async::ListProjectPagination(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectPaginationRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProjectPagination_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse>* ProjectService::Stub::AsyncListProjectPaginationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectPaginationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse>::Create(channel_.get(), cq, rpcmethod_ListProjectPagination_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse>* ProjectService::Stub::PrepareAsyncListProjectPaginationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectPaginationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse>::Create(channel_.get(), cq, rpcmethod_ListProjectPagination_, context, request, false);
}

::grpc::Status ProjectService::Stub::DeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteUserByProject_, context, request, response);
}

void ProjectService::Stub::experimental_async::DeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteUserByProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* ProjectService::Stub::AsyncDeleteUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUserByProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* ProjectService::Stub::PrepareAsyncDeleteUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUserByProject_, context, request, false);
}

::grpc::Status ProjectService::Stub::EditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EditRoleUserByProject_, context, request, response);
}

void ProjectService::Stub::experimental_async::EditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EditRoleUserByProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* ProjectService::Stub::AsyncEditRoleUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>::Create(channel_.get(), cq, rpcmethod_EditRoleUserByProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* ProjectService::Stub::PrepareAsyncEditRoleUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>::Create(channel_.get(), cq, rpcmethod_EditRoleUserByProject_, context, request, false);
}

::grpc::Status ProjectService::Stub::ListProjectByOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationRequest& request, ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProjectByOrganization_, context, request, response);
}

void ProjectService::Stub::experimental_async::ListProjectByOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProjectByOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse>* ProjectService::Stub::AsyncListProjectByOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_ListProjectByOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse>* ProjectService::Stub::PrepareAsyncListProjectByOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_ListProjectByOrganization_, context, request, false);
}

::grpc::Status ProjectService::Stub::UpdadeProjectRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleRequest& request, ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdadeProjectRole_, context, request, response);
}

void ProjectService::Stub::experimental_async::UpdadeProjectRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleRequest* request, ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdadeProjectRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse>* ProjectService::Stub::AsyncUpdadeProjectRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse>::Create(channel_.get(), cq, rpcmethod_UpdadeProjectRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse>* ProjectService::Stub::PrepareAsyncUpdadeProjectRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse>::Create(channel_.get(), cq, rpcmethod_UpdadeProjectRole_, context, request, false);
}

ProjectService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::CreateProjectRequest, ::accounts::v1alpha1::projects::v1::CreateProjectResponse>(
          std::mem_fn(&ProjectService::Service::CreateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::GetOneProjectRequest, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>(
          std::mem_fn(&ProjectService::Service::GetOneProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::UpdateProjectRequest, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>(
          std::mem_fn(&ProjectService::Service::UpdateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::DeleteProjectRequest, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>(
          std::mem_fn(&ProjectService::Service::DeleteProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::ListProjectRequest, ::accounts::v1alpha1::projects::v1::ListProjectResponse>(
          std::mem_fn(&ProjectService::Service::ListProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::ListProjectPaginationRequest, ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse>(
          std::mem_fn(&ProjectService::Service::ListProjectPagination), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>(
          std::mem_fn(&ProjectService::Service::DeleteUserByProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>(
          std::mem_fn(&ProjectService::Service::EditRoleUserByProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationRequest, ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse>(
          std::mem_fn(&ProjectService::Service::ListProjectByOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleRequest, ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse>(
          std::mem_fn(&ProjectService::Service::UpdadeProjectRole), this)));
}

ProjectService::Service::~Service() {
}

::grpc::Status ProjectService::Service::CreateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::GetOneProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::UpdateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::DeleteProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::ListProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::ListProjectPagination(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectPaginationRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectPaginationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::DeleteUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::EditRoleUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::ListProjectByOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectByOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::UpdadeProjectRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleRequest* request, ::accounts::v1alpha1::projects::v1::UpdadeProjectRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1
}  // namespace projects
}  // namespace v1

