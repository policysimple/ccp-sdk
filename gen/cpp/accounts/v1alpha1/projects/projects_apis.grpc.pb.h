// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/projects/projects_apis.proto
#ifndef GRPC_accounts_2fv1alpha1_2fprojects_2fprojects_5fapis_2eproto__INCLUDED
#define GRPC_accounts_2fv1alpha1_2fprojects_2fprojects_5fapis_2eproto__INCLUDED

#include "accounts/v1alpha1/projects/projects_apis.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace accounts {
namespace v1alpha1 {
namespace projects {
namespace v1 {

class ProjectService final {
 public:
  static constexpr char const* service_full_name() {
    return "accounts.v1alpha1.projects.v1.ProjectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CRUD Project
    virtual ::grpc::Status CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>> AsyncCreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>>(AsyncCreateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>> PrepareAsyncCreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>>(PrepareAsyncCreateProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>> AsyncGetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>>(AsyncGetOneProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>> PrepareAsyncGetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>>(PrepareAsyncGetOneProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>> AsyncUpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>>(AsyncUpdateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>> PrepareAsyncUpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>>(PrepareAsyncUpdateProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>> AsyncDeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>>(AsyncDeleteProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>> PrepareAsyncDeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>>(PrepareAsyncDeleteProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::ListProjectResponse>> AsyncListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::ListProjectResponse>>(AsyncListProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::ListProjectResponse>> PrepareAsyncListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::ListProjectResponse>>(PrepareAsyncListProjectRaw(context, request, cq));
    }
    // EDITTS AND DELETE USERS
    virtual ::grpc::Status DeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>> AsyncDeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>>(AsyncDeleteUserByProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>> PrepareAsyncDeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>>(PrepareAsyncDeleteUserByProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status EditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>> AsyncEditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>>(AsyncEditRoleUserByProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>> PrepareAsyncEditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>>(PrepareAsyncEditRoleUserByProjectRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // CRUD Project
      virtual void CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      // EDITTS AND DELETE USERS
      virtual void DeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>* AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>* PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* AsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* PrepareAsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::ListProjectResponse>* AsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::ListProjectResponse>* PrepareAsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* AsyncDeleteUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* PrepareAsyncDeleteUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* AsyncEditRoleUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* PrepareAsyncEditRoleUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>> AsyncCreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>>(AsyncCreateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>> PrepareAsyncCreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>>(PrepareAsyncCreateProjectRaw(context, request, cq));
    }
    ::grpc::Status GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>> AsyncGetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>>(AsyncGetOneProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>> PrepareAsyncGetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>>(PrepareAsyncGetOneProjectRaw(context, request, cq));
    }
    ::grpc::Status UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>> AsyncUpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>>(AsyncUpdateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>> PrepareAsyncUpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>>(PrepareAsyncUpdateProjectRaw(context, request, cq));
    }
    ::grpc::Status DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>> AsyncDeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>>(AsyncDeleteProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>> PrepareAsyncDeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>>(PrepareAsyncDeleteProjectRaw(context, request, cq));
    }
    ::grpc::Status ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>> AsyncListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>>(AsyncListProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>> PrepareAsyncListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>>(PrepareAsyncListProjectRaw(context, request, cq));
    }
    ::grpc::Status DeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>> AsyncDeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>>(AsyncDeleteUserByProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>> PrepareAsyncDeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>>(PrepareAsyncDeleteUserByProjectRaw(context, request, cq));
    }
    ::grpc::Status EditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>> AsyncEditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>>(AsyncEditRoleUserByProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>> PrepareAsyncEditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>>(PrepareAsyncEditRoleUserByProjectRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void EditRoleUserByProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>* AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>* PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* AsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* PrepareAsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>* AsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::ListProjectResponse>* PrepareAsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* AsyncDeleteUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* PrepareAsyncDeleteUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* AsyncEditRoleUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* PrepareAsyncEditRoleUserByProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProject_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOneProject_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProject_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteProject_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProject_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUserByProject_;
    const ::grpc::internal::RpcMethod rpcmethod_EditRoleUserByProject_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CRUD Project
    virtual ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response);
    virtual ::grpc::Status GetOneProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response);
    virtual ::grpc::Status UpdateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response);
    virtual ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response);
    virtual ::grpc::Status ListProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response);
    // EDITTS AND DELETE USERS
    virtual ::grpc::Status DeleteUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response);
    virtual ::grpc::Status EditRoleUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateProject() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProject(::grpc::ServerContext* context, ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::projects::v1::CreateProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOneProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOneProject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOneProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneProject(::grpc::ServerContext* context, ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateProject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProject(::grpc::ServerContext* context, ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteProject() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProject(::grpc::ServerContext* context, ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListProject() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProject(::grpc::ServerContext* context, ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::projects::v1::ListProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteUserByProject() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserByProject(::grpc::ServerContext* context, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditRoleUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EditRoleUserByProject() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_EditRoleUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditRoleUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditRoleUserByProject(::grpc::ServerContext* context, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateProject<WithAsyncMethod_GetOneProject<WithAsyncMethod_UpdateProject<WithAsyncMethod_DeleteProject<WithAsyncMethod_ListProject<WithAsyncMethod_DeleteUserByProject<WithAsyncMethod_EditRoleUserByProject<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateProject() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOneProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOneProject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOneProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateProject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteProject() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListProject() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteUserByProject() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditRoleUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EditRoleUserByProject() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_EditRoleUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditRoleUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateProject() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOneProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOneProject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOneProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateProject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteProject() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListProject() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteUserByProject() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserByProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditRoleUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EditRoleUserByProject() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_EditRoleUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditRoleUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditRoleUserByProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateProject() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::projects::v1::CreateProjectRequest, ::accounts::v1alpha1::projects::v1::CreateProjectResponse>(std::bind(&WithStreamedUnaryMethod_CreateProject<BaseClass>::StreamedCreateProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::CreateProjectRequest* request, ::accounts::v1alpha1::projects::v1::CreateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::projects::v1::CreateProjectRequest,::accounts::v1alpha1::projects::v1::CreateProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOneProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOneProject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::projects::v1::GetOneProjectRequest, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse>(std::bind(&WithStreamedUnaryMethod_GetOneProject<BaseClass>::StreamedGetOneProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOneProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOneProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::GetOneProjectRequest* request, ::accounts::v1alpha1::projects::v1::GetOneProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOneProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::projects::v1::GetOneProjectRequest,::accounts::v1alpha1::projects::v1::GetOneProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateProject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::projects::v1::UpdateProjectRequest, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse>(std::bind(&WithStreamedUnaryMethod_UpdateProject<BaseClass>::StreamedUpdateProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::UpdateProjectRequest* request, ::accounts::v1alpha1::projects::v1::UpdateProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::projects::v1::UpdateProjectRequest,::accounts::v1alpha1::projects::v1::UpdateProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteProject() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::projects::v1::DeleteProjectRequest, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse>(std::bind(&WithStreamedUnaryMethod_DeleteProject<BaseClass>::StreamedDeleteProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::projects::v1::DeleteProjectRequest,::accounts::v1alpha1::projects::v1::DeleteProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListProject() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::projects::v1::ListProjectRequest, ::accounts::v1alpha1::projects::v1::ListProjectResponse>(std::bind(&WithStreamedUnaryMethod_ListProject<BaseClass>::StreamedListProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::ListProjectRequest* request, ::accounts::v1alpha1::projects::v1::ListProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::projects::v1::ListProjectRequest,::accounts::v1alpha1::projects::v1::ListProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteUserByProject() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>(std::bind(&WithStreamedUnaryMethod_DeleteUserByProject<BaseClass>::StreamedDeleteUserByProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUserByProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::projects::v1::DeleteUserByProjectRequest,::accounts::v1alpha1::projects::v1::DeleteUserByProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditRoleUserByProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EditRoleUserByProject() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>(std::bind(&WithStreamedUnaryMethod_EditRoleUserByProject<BaseClass>::StreamedEditRoleUserByProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EditRoleUserByProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditRoleUserByProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest* request, ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditRoleUserByProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::projects::v1::EditRoleUserByProjectRequest,::accounts::v1alpha1::projects::v1::EditRoleUserByProjectResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateProject<WithStreamedUnaryMethod_GetOneProject<WithStreamedUnaryMethod_UpdateProject<WithStreamedUnaryMethod_DeleteProject<WithStreamedUnaryMethod_ListProject<WithStreamedUnaryMethod_DeleteUserByProject<WithStreamedUnaryMethod_EditRoleUserByProject<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateProject<WithStreamedUnaryMethod_GetOneProject<WithStreamedUnaryMethod_UpdateProject<WithStreamedUnaryMethod_DeleteProject<WithStreamedUnaryMethod_ListProject<WithStreamedUnaryMethod_DeleteUserByProject<WithStreamedUnaryMethod_EditRoleUserByProject<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace projects
}  // namespace v1alpha1
}  // namespace accounts


#endif  // GRPC_accounts_2fv1alpha1_2fprojects_2fprojects_5fapis_2eproto__INCLUDED
