// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/accounts.proto

#include "accounts/v1alpha1/accounts.pb.h"
#include "accounts/v1alpha1/accounts.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {

static const char* AccountService_method_names[] = {
  "/accounts.v1alpha1.AccountService/CreateUser",
  "/accounts.v1alpha1.AccountService/ListUser",
  "/accounts.v1alpha1.AccountService/GetOneUser",
  "/accounts.v1alpha1.AccountService/UpdateUser",
  "/accounts.v1alpha1.AccountService/DeleteUser",
  "/accounts.v1alpha1.AccountService/ListUserPagination",
  "/accounts.v1alpha1.AccountService/SendInvitationUser",
  "/accounts.v1alpha1.AccountService/GetInvitationUser",
  "/accounts.v1alpha1.AccountService/AgreeInvitationUser",
  "/accounts.v1alpha1.AccountService/ListInvitationUser",
  "/accounts.v1alpha1.AccountService/CreatePermission",
  "/accounts.v1alpha1.AccountService/ListPermission",
  "/accounts.v1alpha1.AccountService/GetOnePermission",
  "/accounts.v1alpha1.AccountService/UpdatePermission",
  "/accounts.v1alpha1.AccountService/DeletePermission",
  "/accounts.v1alpha1.AccountService/CreateOrganization",
  "/accounts.v1alpha1.AccountService/ListOrganization",
  "/accounts.v1alpha1.AccountService/GetOneOrganization",
  "/accounts.v1alpha1.AccountService/UpdateOrganization",
  "/accounts.v1alpha1.AccountService/DeleteOrganization",
  "/accounts.v1alpha1.AccountService/CreateRole",
  "/accounts.v1alpha1.AccountService/ListRoles",
  "/accounts.v1alpha1.AccountService/UpdateRole",
  "/accounts.v1alpha1.AccountService/GetOneRole",
  "/accounts.v1alpha1.AccountService/GetRolesByUser",
  "/accounts.v1alpha1.AccountService/DeleteRole",
  "/accounts.v1alpha1.AccountService/CreateProject",
  "/accounts.v1alpha1.AccountService/GetOneProject",
  "/accounts.v1alpha1.AccountService/UpdateProject",
  "/accounts.v1alpha1.AccountService/DeleteProject",
  "/accounts.v1alpha1.AccountService/ListProject",
  "/accounts.v1alpha1.AccountService/GetListUserDex",
  "/accounts.v1alpha1.AccountService/GetOneUserDex",
  "/accounts.v1alpha1.AccountService/CheckUser",
  "/accounts.v1alpha1.AccountService/SendVerificationEmail",
  "/accounts.v1alpha1.AccountService/VerifyEmail",
  "/accounts.v1alpha1.AccountService/ListCountries",
  "/accounts.v1alpha1.AccountService/GetOneCountry",
  "/accounts.v1alpha1.AccountService/CreateApiKey",
  "/accounts.v1alpha1.AccountService/GetOneApiKey",
  "/accounts.v1alpha1.AccountService/ListApiKey",
  "/accounts.v1alpha1.AccountService/UpdateApiKey",
  "/accounts.v1alpha1.AccountService/DeleteApiKey",
};

std::unique_ptr< AccountService::Stub> AccountService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AccountService::Stub> stub(new AccountService::Stub(channel));
  return stub;
}

AccountService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateUser_(AccountService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUser_(AccountService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneUser_(AccountService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(AccountService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(AccountService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUserPagination_(AccountService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendInvitationUser_(AccountService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInvitationUser_(AccountService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AgreeInvitationUser_(AccountService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInvitationUser_(AccountService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePermission_(AccountService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPermission_(AccountService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOnePermission_(AccountService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePermission_(AccountService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermission_(AccountService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateOrganization_(AccountService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrganization_(AccountService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneOrganization_(AccountService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrganization_(AccountService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOrganization_(AccountService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRole_(AccountService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRoles_(AccountService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRole_(AccountService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneRole_(AccountService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesByUser_(AccountService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRole_(AccountService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProject_(AccountService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneProject_(AccountService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProject_(AccountService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProject_(AccountService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProject_(AccountService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetListUserDex_(AccountService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneUserDex_(AccountService_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckUser_(AccountService_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendVerificationEmail_(AccountService_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyEmail_(AccountService_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCountries_(AccountService_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneCountry_(AccountService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateApiKey_(AccountService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneApiKey_(AccountService_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListApiKey_(AccountService_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateApiKey_(AccountService_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteApiKey_(AccountService_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AccountService::Stub::CreateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateUserRequest& request, ::accounts::v1alpha1::CreateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

void AccountService::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateUserRequest* request, ::accounts::v1alpha1::CreateUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateUserResponse>* AccountService::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateUserResponse>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateUserResponse>* AccountService::Stub::PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateUserResponse>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, false);
}

::grpc::Status AccountService::Stub::ListUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserRequest& request, ::accounts::v1alpha1::ListUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUser_, context, request, response);
}

void AccountService::Stub::experimental_async::ListUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserRequest* request, ::accounts::v1alpha1::ListUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListUserResponse>* AccountService::Stub::AsyncListUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListUserResponse>::Create(channel_.get(), cq, rpcmethod_ListUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListUserResponse>* AccountService::Stub::PrepareAsyncListUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListUserResponse>::Create(channel_.get(), cq, rpcmethod_ListUser_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOneUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserRequest& request, ::accounts::v1alpha1::GetOneUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneUser_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOneUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserRequest* request, ::accounts::v1alpha1::GetOneUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneUserResponse>* AccountService::Stub::AsyncGetOneUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneUserResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneUserResponse>* AccountService::Stub::PrepareAsyncGetOneUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneUserResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUser_, context, request, false);
}

::grpc::Status AccountService::Stub::UpdateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateUserRequest& request, ::accounts::v1alpha1::UpdateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void AccountService::Stub::experimental_async::UpdateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateUserRequest* request, ::accounts::v1alpha1::UpdateUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateUserResponse>* AccountService::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateUserResponse>::Create(channel_.get(), cq, rpcmethod_UpdateUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateUserResponse>* AccountService::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateUserResponse>::Create(channel_.get(), cq, rpcmethod_UpdateUser_, context, request, false);
}

::grpc::Status AccountService::Stub::DeleteUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteUserRequest& request, ::accounts::v1alpha1::DeleteUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void AccountService::Stub::experimental_async::DeleteUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteUserRequest* request, ::accounts::v1alpha1::DeleteUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteUserResponse>* AccountService::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteUserResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteUserResponse>* AccountService::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteUserResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUser_, context, request, false);
}

::grpc::Status AccountService::Stub::ListUserPagination(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserPaginationRequest& request, ::accounts::v1alpha1::ListUserPaginationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUserPagination_, context, request, response);
}

void AccountService::Stub::experimental_async::ListUserPagination(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserPaginationRequest* request, ::accounts::v1alpha1::ListUserPaginationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUserPagination_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListUserPaginationResponse>* AccountService::Stub::AsyncListUserPaginationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserPaginationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListUserPaginationResponse>::Create(channel_.get(), cq, rpcmethod_ListUserPagination_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListUserPaginationResponse>* AccountService::Stub::PrepareAsyncListUserPaginationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListUserPaginationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListUserPaginationResponse>::Create(channel_.get(), cq, rpcmethod_ListUserPagination_, context, request, false);
}

::grpc::Status AccountService::Stub::SendInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendInvitationUserRequest& request, ::accounts::v1alpha1::SendInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendInvitationUser_, context, request, response);
}

void AccountService::Stub::experimental_async::SendInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendInvitationUserRequest* request, ::accounts::v1alpha1::SendInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::SendInvitationUserResponse>* AccountService::Stub::AsyncSendInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::SendInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_SendInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::SendInvitationUserResponse>* AccountService::Stub::PrepareAsyncSendInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::SendInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_SendInvitationUser_, context, request, false);
}

::grpc::Status AccountService::Stub::GetInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetInvitationUserRequest& request, ::accounts::v1alpha1::GetInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInvitationUser_, context, request, response);
}

void AccountService::Stub::experimental_async::GetInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetInvitationUserRequest* request, ::accounts::v1alpha1::GetInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetInvitationUserResponse>* AccountService::Stub::AsyncGetInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_GetInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetInvitationUserResponse>* AccountService::Stub::PrepareAsyncGetInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_GetInvitationUser_, context, request, false);
}

::grpc::Status AccountService::Stub::AgreeInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::AgreeInvitationUserRequest& request, ::accounts::v1alpha1::AgreeInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AgreeInvitationUser_, context, request, response);
}

void AccountService::Stub::experimental_async::AgreeInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::AgreeInvitationUserRequest* request, ::accounts::v1alpha1::AgreeInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AgreeInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::AgreeInvitationUserResponse>* AccountService::Stub::AsyncAgreeInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::AgreeInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::AgreeInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_AgreeInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::AgreeInvitationUserResponse>* AccountService::Stub::PrepareAsyncAgreeInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::AgreeInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::AgreeInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_AgreeInvitationUser_, context, request, false);
}

::grpc::Status AccountService::Stub::ListInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListInvitationUserRequest& request, ::accounts::v1alpha1::ListInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInvitationUser_, context, request, response);
}

void AccountService::Stub::experimental_async::ListInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListInvitationUserRequest* request, ::accounts::v1alpha1::ListInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListInvitationUserResponse>* AccountService::Stub::AsyncListInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_ListInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListInvitationUserResponse>* AccountService::Stub::PrepareAsyncListInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_ListInvitationUser_, context, request, false);
}

::grpc::Status AccountService::Stub::CreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreatePermissionRequest& request, ::accounts::v1alpha1::CreatePermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreatePermission_, context, request, response);
}

void AccountService::Stub::experimental_async::CreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreatePermissionRequest* request, ::accounts::v1alpha1::CreatePermissionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatePermission_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreatePermissionResponse>* AccountService::Stub::AsyncCreatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreatePermissionResponse>::Create(channel_.get(), cq, rpcmethod_CreatePermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreatePermissionResponse>* AccountService::Stub::PrepareAsyncCreatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreatePermissionResponse>::Create(channel_.get(), cq, rpcmethod_CreatePermission_, context, request, false);
}

::grpc::Status AccountService::Stub::ListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListPermissionRequest& request, ::accounts::v1alpha1::ListPermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPermission_, context, request, response);
}

void AccountService::Stub::experimental_async::ListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListPermissionRequest* request, ::accounts::v1alpha1::ListPermissionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPermission_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListPermissionResponse>* AccountService::Stub::AsyncListPermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListPermissionResponse>::Create(channel_.get(), cq, rpcmethod_ListPermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListPermissionResponse>* AccountService::Stub::PrepareAsyncListPermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListPermissionResponse>::Create(channel_.get(), cq, rpcmethod_ListPermission_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOnePermissionRequest& request, ::accounts::v1alpha1::GetOnePermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOnePermission_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOnePermissionRequest* request, ::accounts::v1alpha1::GetOnePermissionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOnePermission_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOnePermissionResponse>* AccountService::Stub::AsyncGetOnePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOnePermissionResponse>::Create(channel_.get(), cq, rpcmethod_GetOnePermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOnePermissionResponse>* AccountService::Stub::PrepareAsyncGetOnePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOnePermissionResponse>::Create(channel_.get(), cq, rpcmethod_GetOnePermission_, context, request, false);
}

::grpc::Status AccountService::Stub::UpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdatePermissionRequest& request, ::accounts::v1alpha1::UpdatePermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePermission_, context, request, response);
}

void AccountService::Stub::experimental_async::UpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdatePermissionRequest* request, ::accounts::v1alpha1::UpdatePermissionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePermission_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdatePermissionResponse>* AccountService::Stub::AsyncUpdatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdatePermissionResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdatePermissionResponse>* AccountService::Stub::PrepareAsyncUpdatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdatePermissionResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePermission_, context, request, false);
}

::grpc::Status AccountService::Stub::DeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeletePermissionRequest& request, ::accounts::v1alpha1::DeletePermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeletePermission_, context, request, response);
}

void AccountService::Stub::experimental_async::DeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeletePermissionRequest* request, ::accounts::v1alpha1::DeletePermissionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePermission_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeletePermissionResponse>* AccountService::Stub::AsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeletePermissionResponse>::Create(channel_.get(), cq, rpcmethod_DeletePermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeletePermissionResponse>* AccountService::Stub::PrepareAsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeletePermissionResponse>::Create(channel_.get(), cq, rpcmethod_DeletePermission_, context, request, false);
}

::grpc::Status AccountService::Stub::CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateOrganizationRequest& request, ::accounts::v1alpha1::CreateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOrganization_, context, request, response);
}

void AccountService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateOrganizationRequest* request, ::accounts::v1alpha1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateOrganizationResponse>* AccountService::Stub::AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateOrganizationResponse>* AccountService::Stub::PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, false);
}

::grpc::Status AccountService::Stub::ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListOrganizationRequest& request, ::accounts::v1alpha1::ListOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOrganization_, context, request, response);
}

void AccountService::Stub::experimental_async::ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListOrganizationRequest* request, ::accounts::v1alpha1::ListOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListOrganizationResponse>* AccountService::Stub::AsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_ListOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListOrganizationResponse>* AccountService::Stub::PrepareAsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_ListOrganization_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneOrganizationRequest& request, ::accounts::v1alpha1::GetOneOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneOrganization_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::GetOneOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneOrganizationResponse>* AccountService::Stub::AsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOneOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneOrganizationResponse>* AccountService::Stub::PrepareAsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOneOrganization_, context, request, false);
}

::grpc::Status AccountService::Stub::UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateOrganizationRequest& request, ::accounts::v1alpha1::UpdateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateOrganization_, context, request, response);
}

void AccountService::Stub::experimental_async::UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateOrganizationResponse>* AccountService::Stub::AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateOrganizationResponse>* AccountService::Stub::PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganization_, context, request, false);
}

::grpc::Status AccountService::Stub::DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteOrganizationRequest& request, ::accounts::v1alpha1::DeleteOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOrganization_, context, request, response);
}

void AccountService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteOrganizationResponse>* AccountService::Stub::AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteOrganizationResponse>* AccountService::Stub::PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, false);
}

::grpc::Status AccountService::Stub::CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateRoleRequest& request, ::accounts::v1alpha1::CreateRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRole_, context, request, response);
}

void AccountService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateRoleRequest* request, ::accounts::v1alpha1::CreateRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateRoleResponse>* AccountService::Stub::AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateRoleResponse>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateRoleResponse>* AccountService::Stub::PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateRoleResponse>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, false);
}

::grpc::Status AccountService::Stub::ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListRolesRequest& request, ::accounts::v1alpha1::ListRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListRoles_, context, request, response);
}

void AccountService::Stub::experimental_async::ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListRolesRequest* request, ::accounts::v1alpha1::ListRolesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListRoles_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListRolesResponse>* AccountService::Stub::AsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListRolesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListRolesResponse>* AccountService::Stub::PrepareAsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListRolesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoles_, context, request, false);
}

::grpc::Status AccountService::Stub::UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateRoleRequest& request, ::accounts::v1alpha1::UpdateRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateRole_, context, request, response);
}

void AccountService::Stub::experimental_async::UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateRoleRequest* request, ::accounts::v1alpha1::UpdateRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateRoleResponse>* AccountService::Stub::AsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateRoleResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateRoleResponse>* AccountService::Stub::PrepareAsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateRoleResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRole_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneRoleRequest& request, ::accounts::v1alpha1::GetOneRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneRole_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneRoleRequest* request, ::accounts::v1alpha1::GetOneRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneRoleResponse>* AccountService::Stub::AsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneRoleResponse>::Create(channel_.get(), cq, rpcmethod_GetOneRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneRoleResponse>* AccountService::Stub::PrepareAsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneRoleResponse>::Create(channel_.get(), cq, rpcmethod_GetOneRole_, context, request, false);
}

::grpc::Status AccountService::Stub::GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetRolesByUserRequest& request, ::accounts::v1alpha1::GetRolesByUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRolesByUser_, context, request, response);
}

void AccountService::Stub::experimental_async::GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetRolesByUserRequest* request, ::accounts::v1alpha1::GetRolesByUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRolesByUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetRolesByUserResponse>* AccountService::Stub::AsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetRolesByUserResponse>::Create(channel_.get(), cq, rpcmethod_GetRolesByUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetRolesByUserResponse>* AccountService::Stub::PrepareAsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetRolesByUserResponse>::Create(channel_.get(), cq, rpcmethod_GetRolesByUser_, context, request, false);
}

::grpc::Status AccountService::Stub::DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteRoleRequest& request, ::accounts::v1alpha1::DeleteRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRole_, context, request, response);
}

void AccountService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteRoleRequest* request, ::accounts::v1alpha1::DeleteRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteRoleResponse>* AccountService::Stub::AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteRoleResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteRoleResponse>* AccountService::Stub::PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteRoleResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, false);
}

::grpc::Status AccountService::Stub::CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateProjectRequest& request, ::accounts::v1alpha1::CreateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateProject_, context, request, response);
}

void AccountService::Stub::experimental_async::CreateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateProjectRequest* request, ::accounts::v1alpha1::CreateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateProjectResponse>* AccountService::Stub::AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateProjectResponse>* AccountService::Stub::PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateProjectResponse>::Create(channel_.get(), cq, rpcmethod_CreateProject_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneProjectRequest& request, ::accounts::v1alpha1::GetOneProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneProject_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOneProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneProjectRequest* request, ::accounts::v1alpha1::GetOneProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneProjectResponse>* AccountService::Stub::AsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetOneProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneProjectResponse>* AccountService::Stub::PrepareAsyncGetOneProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneProjectResponse>::Create(channel_.get(), cq, rpcmethod_GetOneProject_, context, request, false);
}

::grpc::Status AccountService::Stub::UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateProjectRequest& request, ::accounts::v1alpha1::UpdateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProject_, context, request, response);
}

void AccountService::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateProjectRequest* request, ::accounts::v1alpha1::UpdateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateProjectResponse>* AccountService::Stub::AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateProjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateProjectResponse>* AccountService::Stub::PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateProjectResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, false);
}

::grpc::Status AccountService::Stub::DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteProjectRequest& request, ::accounts::v1alpha1::DeleteProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProject_, context, request, response);
}

void AccountService::Stub::experimental_async::DeleteProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteProjectRequest* request, ::accounts::v1alpha1::DeleteProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteProjectResponse>* AccountService::Stub::AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteProjectResponse>* AccountService::Stub::PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteProjectResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProject_, context, request, false);
}

::grpc::Status AccountService::Stub::ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListProjectRequest& request, ::accounts::v1alpha1::ListProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProject_, context, request, response);
}

void AccountService::Stub::experimental_async::ListProject(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListProjectRequest* request, ::accounts::v1alpha1::ListProjectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProject_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListProjectResponse>* AccountService::Stub::AsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListProjectResponse>::Create(channel_.get(), cq, rpcmethod_ListProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListProjectResponse>* AccountService::Stub::PrepareAsyncListProjectRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListProjectResponse>::Create(channel_.get(), cq, rpcmethod_ListProject_, context, request, false);
}

::grpc::Status AccountService::Stub::GetListUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetListUserDexRequest& request, ::accounts::v1alpha1::GetListUserDexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetListUserDex_, context, request, response);
}

void AccountService::Stub::experimental_async::GetListUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetListUserDexRequest* request, ::accounts::v1alpha1::GetListUserDexResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetListUserDex_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetListUserDexResponse>* AccountService::Stub::AsyncGetListUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetListUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetListUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetListUserDex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetListUserDexResponse>* AccountService::Stub::PrepareAsyncGetListUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetListUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetListUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetListUserDex_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOneUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserDexRequest& request, ::accounts::v1alpha1::GetOneUserDexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneUserDex_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOneUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserDexRequest* request, ::accounts::v1alpha1::GetOneUserDexResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneUserDex_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneUserDexResponse>* AccountService::Stub::AsyncGetOneUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUserDex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneUserDexResponse>* AccountService::Stub::PrepareAsyncGetOneUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUserDex_, context, request, false);
}

::grpc::Status AccountService::Stub::CheckUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::CheckUserRequest& request, ::accounts::v1alpha1::CheckUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckUser_, context, request, response);
}

void AccountService::Stub::experimental_async::CheckUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::CheckUserRequest* request, ::accounts::v1alpha1::CheckUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CheckUserResponse>* AccountService::Stub::AsyncCheckUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CheckUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CheckUserResponse>::Create(channel_.get(), cq, rpcmethod_CheckUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CheckUserResponse>* AccountService::Stub::PrepareAsyncCheckUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CheckUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CheckUserResponse>::Create(channel_.get(), cq, rpcmethod_CheckUser_, context, request, false);
}

::grpc::Status AccountService::Stub::SendVerificationEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendVerificationEmailRequest& request, ::accounts::v1alpha1::SendVerificationEmailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendVerificationEmail_, context, request, response);
}

void AccountService::Stub::experimental_async::SendVerificationEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendVerificationEmailRequest* request, ::accounts::v1alpha1::SendVerificationEmailResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendVerificationEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::SendVerificationEmailResponse>* AccountService::Stub::AsyncSendVerificationEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendVerificationEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::SendVerificationEmailResponse>::Create(channel_.get(), cq, rpcmethod_SendVerificationEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::SendVerificationEmailResponse>* AccountService::Stub::PrepareAsyncSendVerificationEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::SendVerificationEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::SendVerificationEmailResponse>::Create(channel_.get(), cq, rpcmethod_SendVerificationEmail_, context, request, false);
}

::grpc::Status AccountService::Stub::VerifyEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::VerifyEmailRequest& request, ::accounts::v1alpha1::VerifyEmailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyEmail_, context, request, response);
}

void AccountService::Stub::experimental_async::VerifyEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::VerifyEmailRequest* request, ::accounts::v1alpha1::VerifyEmailResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::VerifyEmailResponse>* AccountService::Stub::AsyncVerifyEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::VerifyEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::VerifyEmailResponse>::Create(channel_.get(), cq, rpcmethod_VerifyEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::VerifyEmailResponse>* AccountService::Stub::PrepareAsyncVerifyEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::VerifyEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::VerifyEmailResponse>::Create(channel_.get(), cq, rpcmethod_VerifyEmail_, context, request, false);
}

::grpc::Status AccountService::Stub::ListCountries(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListCountriesRequest& request, ::accounts::v1alpha1::ListCountriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCountries_, context, request, response);
}

void AccountService::Stub::experimental_async::ListCountries(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListCountriesRequest* request, ::accounts::v1alpha1::ListCountriesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCountries_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListCountriesResponse>* AccountService::Stub::AsyncListCountriesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListCountriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListCountriesResponse>::Create(channel_.get(), cq, rpcmethod_ListCountries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListCountriesResponse>* AccountService::Stub::PrepareAsyncListCountriesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListCountriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListCountriesResponse>::Create(channel_.get(), cq, rpcmethod_ListCountries_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOneCountry(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneCountryRequest& request, ::accounts::v1alpha1::GetOneCountryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneCountry_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOneCountry(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneCountryRequest* request, ::accounts::v1alpha1::GetOneCountryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneCountry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneCountryResponse>* AccountService::Stub::AsyncGetOneCountryRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneCountryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneCountryResponse>::Create(channel_.get(), cq, rpcmethod_GetOneCountry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneCountryResponse>* AccountService::Stub::PrepareAsyncGetOneCountryRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneCountryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneCountryResponse>::Create(channel_.get(), cq, rpcmethod_GetOneCountry_, context, request, false);
}

::grpc::Status AccountService::Stub::CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateApiKeyRequest& request, ::accounts::v1alpha1::CreateApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateApiKey_, context, request, response);
}

void AccountService::Stub::experimental_async::CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateApiKeyRequest* request, ::accounts::v1alpha1::CreateApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateApiKeyResponse>* AccountService::Stub::AsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_CreateApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::CreateApiKeyResponse>* AccountService::Stub::PrepareAsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::CreateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_CreateApiKey_, context, request, false);
}

::grpc::Status AccountService::Stub::GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneApiKeyRequest& request, ::accounts::v1alpha1::GetOneApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneApiKey_, context, request, response);
}

void AccountService::Stub::experimental_async::GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::GetOneApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneApiKeyResponse>* AccountService::Stub::AsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_GetOneApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::GetOneApiKeyResponse>* AccountService::Stub::PrepareAsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::GetOneApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_GetOneApiKey_, context, request, false);
}

::grpc::Status AccountService::Stub::ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListApiKeyRequest& request, ::accounts::v1alpha1::ListApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListApiKey_, context, request, response);
}

void AccountService::Stub::experimental_async::ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListApiKeyRequest* request, ::accounts::v1alpha1::ListApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListApiKeyResponse>* AccountService::Stub::AsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::ListApiKeyResponse>* AccountService::Stub::PrepareAsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::ListApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListApiKey_, context, request, false);
}

::grpc::Status AccountService::Stub::UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateApiKeyRequest& request, ::accounts::v1alpha1::UpdateApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateApiKey_, context, request, response);
}

void AccountService::Stub::experimental_async::UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::UpdateApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateApiKeyResponse>* AccountService::Stub::AsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::UpdateApiKeyResponse>* AccountService::Stub::PrepareAsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::UpdateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateApiKey_, context, request, false);
}

::grpc::Status AccountService::Stub::DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteApiKeyRequest& request, ::accounts::v1alpha1::DeleteApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteApiKey_, context, request, response);
}

void AccountService::Stub::experimental_async::DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::DeleteApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteApiKeyResponse>* AccountService::Stub::AsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::DeleteApiKeyResponse>* AccountService::Stub::PrepareAsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::DeleteApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApiKey_, context, request, false);
}

AccountService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::CreateUserRequest, ::accounts::v1alpha1::CreateUserResponse>(
          std::mem_fn(&AccountService::Service::CreateUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListUserRequest, ::accounts::v1alpha1::ListUserResponse>(
          std::mem_fn(&AccountService::Service::ListUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOneUserRequest, ::accounts::v1alpha1::GetOneUserResponse>(
          std::mem_fn(&AccountService::Service::GetOneUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::UpdateUserRequest, ::accounts::v1alpha1::UpdateUserResponse>(
          std::mem_fn(&AccountService::Service::UpdateUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::DeleteUserRequest, ::accounts::v1alpha1::DeleteUserResponse>(
          std::mem_fn(&AccountService::Service::DeleteUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListUserPaginationRequest, ::accounts::v1alpha1::ListUserPaginationResponse>(
          std::mem_fn(&AccountService::Service::ListUserPagination), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::SendInvitationUserRequest, ::accounts::v1alpha1::SendInvitationUserResponse>(
          std::mem_fn(&AccountService::Service::SendInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetInvitationUserRequest, ::accounts::v1alpha1::GetInvitationUserResponse>(
          std::mem_fn(&AccountService::Service::GetInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::AgreeInvitationUserRequest, ::accounts::v1alpha1::AgreeInvitationUserResponse>(
          std::mem_fn(&AccountService::Service::AgreeInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListInvitationUserRequest, ::accounts::v1alpha1::ListInvitationUserResponse>(
          std::mem_fn(&AccountService::Service::ListInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::CreatePermissionRequest, ::accounts::v1alpha1::CreatePermissionResponse>(
          std::mem_fn(&AccountService::Service::CreatePermission), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListPermissionRequest, ::accounts::v1alpha1::ListPermissionResponse>(
          std::mem_fn(&AccountService::Service::ListPermission), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOnePermissionRequest, ::accounts::v1alpha1::GetOnePermissionResponse>(
          std::mem_fn(&AccountService::Service::GetOnePermission), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::UpdatePermissionRequest, ::accounts::v1alpha1::UpdatePermissionResponse>(
          std::mem_fn(&AccountService::Service::UpdatePermission), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::DeletePermissionRequest, ::accounts::v1alpha1::DeletePermissionResponse>(
          std::mem_fn(&AccountService::Service::DeletePermission), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::CreateOrganizationRequest, ::accounts::v1alpha1::CreateOrganizationResponse>(
          std::mem_fn(&AccountService::Service::CreateOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListOrganizationRequest, ::accounts::v1alpha1::ListOrganizationResponse>(
          std::mem_fn(&AccountService::Service::ListOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOneOrganizationRequest, ::accounts::v1alpha1::GetOneOrganizationResponse>(
          std::mem_fn(&AccountService::Service::GetOneOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::UpdateOrganizationRequest, ::accounts::v1alpha1::UpdateOrganizationResponse>(
          std::mem_fn(&AccountService::Service::UpdateOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::DeleteOrganizationRequest, ::accounts::v1alpha1::DeleteOrganizationResponse>(
          std::mem_fn(&AccountService::Service::DeleteOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::CreateRoleRequest, ::accounts::v1alpha1::CreateRoleResponse>(
          std::mem_fn(&AccountService::Service::CreateRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListRolesRequest, ::accounts::v1alpha1::ListRolesResponse>(
          std::mem_fn(&AccountService::Service::ListRoles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::UpdateRoleRequest, ::accounts::v1alpha1::UpdateRoleResponse>(
          std::mem_fn(&AccountService::Service::UpdateRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOneRoleRequest, ::accounts::v1alpha1::GetOneRoleResponse>(
          std::mem_fn(&AccountService::Service::GetOneRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetRolesByUserRequest, ::accounts::v1alpha1::GetRolesByUserResponse>(
          std::mem_fn(&AccountService::Service::GetRolesByUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::DeleteRoleRequest, ::accounts::v1alpha1::DeleteRoleResponse>(
          std::mem_fn(&AccountService::Service::DeleteRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::CreateProjectRequest, ::accounts::v1alpha1::CreateProjectResponse>(
          std::mem_fn(&AccountService::Service::CreateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOneProjectRequest, ::accounts::v1alpha1::GetOneProjectResponse>(
          std::mem_fn(&AccountService::Service::GetOneProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::UpdateProjectRequest, ::accounts::v1alpha1::UpdateProjectResponse>(
          std::mem_fn(&AccountService::Service::UpdateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::DeleteProjectRequest, ::accounts::v1alpha1::DeleteProjectResponse>(
          std::mem_fn(&AccountService::Service::DeleteProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListProjectRequest, ::accounts::v1alpha1::ListProjectResponse>(
          std::mem_fn(&AccountService::Service::ListProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetListUserDexRequest, ::accounts::v1alpha1::GetListUserDexResponse>(
          std::mem_fn(&AccountService::Service::GetListUserDex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOneUserDexRequest, ::accounts::v1alpha1::GetOneUserDexResponse>(
          std::mem_fn(&AccountService::Service::GetOneUserDex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::CheckUserRequest, ::accounts::v1alpha1::CheckUserResponse>(
          std::mem_fn(&AccountService::Service::CheckUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::SendVerificationEmailRequest, ::accounts::v1alpha1::SendVerificationEmailResponse>(
          std::mem_fn(&AccountService::Service::SendVerificationEmail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::VerifyEmailRequest, ::accounts::v1alpha1::VerifyEmailResponse>(
          std::mem_fn(&AccountService::Service::VerifyEmail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListCountriesRequest, ::accounts::v1alpha1::ListCountriesResponse>(
          std::mem_fn(&AccountService::Service::ListCountries), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOneCountryRequest, ::accounts::v1alpha1::GetOneCountryResponse>(
          std::mem_fn(&AccountService::Service::GetOneCountry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::CreateApiKeyRequest, ::accounts::v1alpha1::CreateApiKeyResponse>(
          std::mem_fn(&AccountService::Service::CreateApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::GetOneApiKeyRequest, ::accounts::v1alpha1::GetOneApiKeyResponse>(
          std::mem_fn(&AccountService::Service::GetOneApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::ListApiKeyRequest, ::accounts::v1alpha1::ListApiKeyResponse>(
          std::mem_fn(&AccountService::Service::ListApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::UpdateApiKeyRequest, ::accounts::v1alpha1::UpdateApiKeyResponse>(
          std::mem_fn(&AccountService::Service::UpdateApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::accounts::v1alpha1::DeleteApiKeyRequest, ::accounts::v1alpha1::DeleteApiKeyResponse>(
          std::mem_fn(&AccountService::Service::DeleteApiKey), this)));
}

AccountService::Service::~Service() {
}

::grpc::Status AccountService::Service::CreateUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::CreateUserRequest* request, ::accounts::v1alpha1::CreateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListUserRequest* request, ::accounts::v1alpha1::ListUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOneUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOneUserRequest* request, ::accounts::v1alpha1::GetOneUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::UpdateUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::UpdateUserRequest* request, ::accounts::v1alpha1::UpdateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::DeleteUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::DeleteUserRequest* request, ::accounts::v1alpha1::DeleteUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListUserPagination(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListUserPaginationRequest* request, ::accounts::v1alpha1::ListUserPaginationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::SendInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::SendInvitationUserRequest* request, ::accounts::v1alpha1::SendInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetInvitationUserRequest* request, ::accounts::v1alpha1::GetInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::AgreeInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::AgreeInvitationUserRequest* request, ::accounts::v1alpha1::AgreeInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListInvitationUserRequest* request, ::accounts::v1alpha1::ListInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::CreatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::CreatePermissionRequest* request, ::accounts::v1alpha1::CreatePermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListPermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListPermissionRequest* request, ::accounts::v1alpha1::ListPermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOnePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOnePermissionRequest* request, ::accounts::v1alpha1::GetOnePermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::UpdatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::UpdatePermissionRequest* request, ::accounts::v1alpha1::UpdatePermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::DeletePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::DeletePermissionRequest* request, ::accounts::v1alpha1::DeletePermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::CreateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::CreateOrganizationRequest* request, ::accounts::v1alpha1::CreateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListOrganizationRequest* request, ::accounts::v1alpha1::ListOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOneOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::GetOneOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::UpdateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::UpdateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::DeleteOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::DeleteOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::CreateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::CreateRoleRequest* request, ::accounts::v1alpha1::CreateRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListRoles(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListRolesRequest* request, ::accounts::v1alpha1::ListRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::UpdateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::UpdateRoleRequest* request, ::accounts::v1alpha1::UpdateRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOneRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOneRoleRequest* request, ::accounts::v1alpha1::GetOneRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetRolesByUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetRolesByUserRequest* request, ::accounts::v1alpha1::GetRolesByUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::DeleteRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::DeleteRoleRequest* request, ::accounts::v1alpha1::DeleteRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::CreateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::CreateProjectRequest* request, ::accounts::v1alpha1::CreateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOneProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOneProjectRequest* request, ::accounts::v1alpha1::GetOneProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::UpdateProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::UpdateProjectRequest* request, ::accounts::v1alpha1::UpdateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::DeleteProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::DeleteProjectRequest* request, ::accounts::v1alpha1::DeleteProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListProject(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListProjectRequest* request, ::accounts::v1alpha1::ListProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetListUserDex(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetListUserDexRequest* request, ::accounts::v1alpha1::GetListUserDexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOneUserDex(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOneUserDexRequest* request, ::accounts::v1alpha1::GetOneUserDexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::CheckUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::CheckUserRequest* request, ::accounts::v1alpha1::CheckUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::SendVerificationEmail(::grpc::ServerContext* context, const ::accounts::v1alpha1::SendVerificationEmailRequest* request, ::accounts::v1alpha1::SendVerificationEmailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::VerifyEmail(::grpc::ServerContext* context, const ::accounts::v1alpha1::VerifyEmailRequest* request, ::accounts::v1alpha1::VerifyEmailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListCountries(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListCountriesRequest* request, ::accounts::v1alpha1::ListCountriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOneCountry(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOneCountryRequest* request, ::accounts::v1alpha1::GetOneCountryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::CreateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::CreateApiKeyRequest* request, ::accounts::v1alpha1::CreateApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::GetOneApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::GetOneApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::ListApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::ListApiKeyRequest* request, ::accounts::v1alpha1::ListApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::UpdateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::UpdateApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::DeleteApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::DeleteApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1

