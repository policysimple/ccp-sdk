// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/permissions/permissions_apis.proto
#ifndef GRPC_accounts_2fv1alpha1_2fpermissions_2fpermissions_5fapis_2eproto__INCLUDED
#define GRPC_accounts_2fv1alpha1_2fpermissions_2fpermissions_5fapis_2eproto__INCLUDED

#include "accounts/v1alpha1/permissions/permissions_apis.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace accounts {
namespace v1alpha1 {
namespace permissions {
namespace v1 {

class PermissionService final {
 public:
  static constexpr char const* service_full_name() {
    return "accounts.v1alpha1.permissions.v1.PermissionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>> AsyncCreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>>(AsyncCreatePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>> PrepareAsyncCreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>>(PrepareAsyncCreatePermissionRaw(context, request, cq));
    }
    virtual ::grpc::Status ListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>> AsyncListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>>(AsyncListPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>> PrepareAsyncListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>>(PrepareAsyncListPermissionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>> AsyncGetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>>(AsyncGetOnePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>> PrepareAsyncGetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>>(PrepareAsyncGetOnePermissionRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>> AsyncUpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>>(AsyncUpdatePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>> PrepareAsyncUpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>>(PrepareAsyncUpdatePermissionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>> AsyncDeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>>(AsyncDeletePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>> PrepareAsyncDeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>>(PrepareAsyncDeletePermissionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>* AsyncCreatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>* PrepareAsyncCreatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>* AsyncListPermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>* PrepareAsyncListPermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>* AsyncGetOnePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>* PrepareAsyncGetOnePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>* AsyncUpdatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>* PrepareAsyncUpdatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>* AsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>* PrepareAsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>> AsyncCreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>>(AsyncCreatePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>> PrepareAsyncCreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>>(PrepareAsyncCreatePermissionRaw(context, request, cq));
    }
    ::grpc::Status ListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>> AsyncListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>>(AsyncListPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>> PrepareAsyncListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>>(PrepareAsyncListPermissionRaw(context, request, cq));
    }
    ::grpc::Status GetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>> AsyncGetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>>(AsyncGetOnePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>> PrepareAsyncGetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>>(PrepareAsyncGetOnePermissionRaw(context, request, cq));
    }
    ::grpc::Status UpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>> AsyncUpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>>(AsyncUpdatePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>> PrepareAsyncUpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>>(PrepareAsyncUpdatePermissionRaw(context, request, cq));
    }
    ::grpc::Status DeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>> AsyncDeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>>(AsyncDeletePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>> PrepareAsyncDeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>>(PrepareAsyncDeletePermissionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOnePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeletePermission(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>* AsyncCreatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>* PrepareAsyncCreatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>* AsyncListPermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>* PrepareAsyncListPermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>* AsyncGetOnePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>* PrepareAsyncGetOnePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>* AsyncUpdatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>* PrepareAsyncUpdatePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>* AsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>* PrepareAsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOnePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePermission_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response);
    virtual ::grpc::Status ListPermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response);
    virtual ::grpc::Status GetOnePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response);
    virtual ::grpc::Status UpdatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response);
    virtual ::grpc::Status DeletePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreatePermission() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePermission(::grpc::ServerContext* context, ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListPermission() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPermission(::grpc::ServerContext* context, ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOnePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOnePermission() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetOnePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnePermission(::grpc::ServerContext* context, ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdatePermission() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePermission(::grpc::ServerContext* context, ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeletePermission() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermission(::grpc::ServerContext* context, ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreatePermission<WithAsyncMethod_ListPermission<WithAsyncMethod_GetOnePermission<WithAsyncMethod_UpdatePermission<WithAsyncMethod_DeletePermission<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreatePermission() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListPermission() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOnePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOnePermission() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetOnePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdatePermission() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeletePermission() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreatePermission() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListPermission() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOnePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOnePermission() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetOnePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdatePermission() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeletePermission() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreatePermission() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>(std::bind(&WithStreamedUnaryMethod_CreatePermission<BaseClass>::StreamedCreatePermission, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::CreatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::permissions::v1::CreatePermissionRequest,::accounts::v1alpha1::permissions::v1::CreatePermissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListPermission() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::permissions::v1::ListPermissionRequest, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse>(std::bind(&WithStreamedUnaryMethod_ListPermission<BaseClass>::StreamedListPermission, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::ListPermissionRequest* request, ::accounts::v1alpha1::permissions::v1::ListPermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::permissions::v1::ListPermissionRequest,::accounts::v1alpha1::permissions::v1::ListPermissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOnePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOnePermission() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>(std::bind(&WithStreamedUnaryMethod_GetOnePermission<BaseClass>::StreamedGetOnePermission, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOnePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOnePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOnePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::permissions::v1::GetOnePermissionRequest,::accounts::v1alpha1::permissions::v1::GetOnePermissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdatePermission() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>(std::bind(&WithStreamedUnaryMethod_UpdatePermission<BaseClass>::StreamedUpdatePermission, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdatePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::permissions::v1::UpdatePermissionRequest,::accounts::v1alpha1::permissions::v1::UpdatePermissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeletePermission() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>(std::bind(&WithStreamedUnaryMethod_DeletePermission<BaseClass>::StreamedDeletePermission, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* context, const ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest* request, ::accounts::v1alpha1::permissions::v1::DeletePermissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::permissions::v1::DeletePermissionRequest,::accounts::v1alpha1::permissions::v1::DeletePermissionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreatePermission<WithStreamedUnaryMethod_ListPermission<WithStreamedUnaryMethod_GetOnePermission<WithStreamedUnaryMethod_UpdatePermission<WithStreamedUnaryMethod_DeletePermission<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreatePermission<WithStreamedUnaryMethod_ListPermission<WithStreamedUnaryMethod_GetOnePermission<WithStreamedUnaryMethod_UpdatePermission<WithStreamedUnaryMethod_DeletePermission<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace permissions
}  // namespace v1alpha1
}  // namespace accounts


#endif  // GRPC_accounts_2fv1alpha1_2fpermissions_2fpermissions_5fapis_2eproto__INCLUDED
