// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/countries/countries_apis.proto

#include "accounts/v1alpha1/countries/countries_apis.pb.h"
#include "accounts/v1alpha1/countries/countries_apis.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {
namespace countries {
namespace v1 {

static const char* CountriesService_method_names[] = {
  "/accounts.v1alpha1.countries.v1.CountriesService/ListCountries",
  "/accounts.v1alpha1.countries.v1.CountriesService/GetOneCountry",
};

std::unique_ptr< CountriesService::Stub> CountriesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CountriesService::Stub> stub(new CountriesService::Stub(channel));
  return stub;
}

CountriesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListCountries_(CountriesService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneCountry_(CountriesService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CountriesService::Stub::ListCountries(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::ListCountriesRequest& request, ::accounts::v1alpha1::countries::v1::ListCountriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCountries_, context, request, response);
}

void CountriesService::Stub::experimental_async::ListCountries(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::ListCountriesRequest* request, ::accounts::v1alpha1::countries::v1::ListCountriesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCountries_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::countries::v1::ListCountriesResponse>* CountriesService::Stub::AsyncListCountriesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::ListCountriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::countries::v1::ListCountriesResponse>::Create(channel_.get(), cq, rpcmethod_ListCountries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::countries::v1::ListCountriesResponse>* CountriesService::Stub::PrepareAsyncListCountriesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::ListCountriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::countries::v1::ListCountriesResponse>::Create(channel_.get(), cq, rpcmethod_ListCountries_, context, request, false);
}

::grpc::Status CountriesService::Stub::GetOneCountry(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::GetOneCountryRequest& request, ::accounts::v1alpha1::countries::v1::GetOneCountryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneCountry_, context, request, response);
}

void CountriesService::Stub::experimental_async::GetOneCountry(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::GetOneCountryRequest* request, ::accounts::v1alpha1::countries::v1::GetOneCountryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneCountry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::countries::v1::GetOneCountryResponse>* CountriesService::Stub::AsyncGetOneCountryRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::GetOneCountryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::countries::v1::GetOneCountryResponse>::Create(channel_.get(), cq, rpcmethod_GetOneCountry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::countries::v1::GetOneCountryResponse>* CountriesService::Stub::PrepareAsyncGetOneCountryRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::countries::v1::GetOneCountryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::countries::v1::GetOneCountryResponse>::Create(channel_.get(), cq, rpcmethod_GetOneCountry_, context, request, false);
}

CountriesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CountriesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CountriesService::Service, ::accounts::v1alpha1::countries::v1::ListCountriesRequest, ::accounts::v1alpha1::countries::v1::ListCountriesResponse>(
          std::mem_fn(&CountriesService::Service::ListCountries), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CountriesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CountriesService::Service, ::accounts::v1alpha1::countries::v1::GetOneCountryRequest, ::accounts::v1alpha1::countries::v1::GetOneCountryResponse>(
          std::mem_fn(&CountriesService::Service::GetOneCountry), this)));
}

CountriesService::Service::~Service() {
}

::grpc::Status CountriesService::Service::ListCountries(::grpc::ServerContext* context, const ::accounts::v1alpha1::countries::v1::ListCountriesRequest* request, ::accounts::v1alpha1::countries::v1::ListCountriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CountriesService::Service::GetOneCountry(::grpc::ServerContext* context, const ::accounts::v1alpha1::countries::v1::GetOneCountryRequest* request, ::accounts::v1alpha1::countries::v1::GetOneCountryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1
}  // namespace countries
}  // namespace v1

