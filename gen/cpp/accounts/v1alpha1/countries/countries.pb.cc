// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/countries/countries.proto

#include "accounts/v1alpha1/countries/countries.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace accounts {
namespace v1alpha1 {
namespace countries {
namespace v1 {
constexpr City::City(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , longitude_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CityDefaultTypeInternal {
  constexpr CityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CityDefaultTypeInternal() {}
  union {
    City _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CityDefaultTypeInternal _City_default_instance_;
constexpr State::State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cities_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct StateDefaultTypeInternal {
  constexpr StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateDefaultTypeInternal _State_default_instance_;
constexpr CountryList::CountryList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emoji_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CountryListDefaultTypeInternal {
  constexpr CountryListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CountryListDefaultTypeInternal() {}
  union {
    CountryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CountryListDefaultTypeInternal _CountryList_default_instance_;
constexpr ListCountriesRequest::ListCountriesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListCountriesRequestDefaultTypeInternal {
  constexpr ListCountriesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCountriesRequestDefaultTypeInternal() {}
  union {
    ListCountriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCountriesRequestDefaultTypeInternal _ListCountriesRequest_default_instance_;
constexpr ListCountriesResponse::ListCountriesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : countries_(){}
struct ListCountriesResponseDefaultTypeInternal {
  constexpr ListCountriesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCountriesResponseDefaultTypeInternal() {}
  union {
    ListCountriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCountriesResponseDefaultTypeInternal _ListCountriesResponse_default_instance_;
constexpr GetOneCountryRequest::GetOneCountryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_id_(0u){}
struct GetOneCountryRequestDefaultTypeInternal {
  constexpr GetOneCountryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneCountryRequestDefaultTypeInternal() {}
  union {
    GetOneCountryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneCountryRequestDefaultTypeInternal _GetOneCountryRequest_default_instance_;
constexpr GetOneCountryResponse::GetOneCountryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emoji_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct GetOneCountryResponseDefaultTypeInternal {
  constexpr GetOneCountryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneCountryResponseDefaultTypeInternal() {}
  union {
    GetOneCountryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneCountryResponseDefaultTypeInternal _GetOneCountryResponse_default_instance_;
}  // namespace v1
}  // namespace countries
}  // namespace v1alpha1
}  // namespace accounts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::City, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::City, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::City, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::City, latitude_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::City, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::State, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::State, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::State, cities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::CountryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::CountryList, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::CountryList, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::CountryList, code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::CountryList, phone_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::CountryList, emoji_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::ListCountriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::ListCountriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::ListCountriesResponse, countries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryRequest, country_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryResponse, id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryResponse, name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryResponse, code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryResponse, phone_code_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryResponse, emoji_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::countries::v1::GetOneCountryResponse, states_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::accounts::v1alpha1::countries::v1::City)},
  { 9, -1, sizeof(::accounts::v1alpha1::countries::v1::State)},
  { 17, -1, sizeof(::accounts::v1alpha1::countries::v1::CountryList)},
  { 27, -1, sizeof(::accounts::v1alpha1::countries::v1::ListCountriesRequest)},
  { 32, -1, sizeof(::accounts::v1alpha1::countries::v1::ListCountriesResponse)},
  { 38, -1, sizeof(::accounts::v1alpha1::countries::v1::GetOneCountryRequest)},
  { 45, -1, sizeof(::accounts::v1alpha1::countries::v1::GetOneCountryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::countries::v1::_City_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::countries::v1::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::countries::v1::_CountryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::countries::v1::_ListCountriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::countries::v1::_ListCountriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::countries::v1::_GetOneCountryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::countries::v1::_GetOneCountryResponse_default_instance_),
};

const char descriptor_table_protodef_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+accounts/v1alpha1/countries/countries."
  "proto\022\036accounts.v1alpha1.countries.v1\"d\n"
  "\004City\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004nam"
  "e\022\032\n\010latitude\030\003 \001(\tR\010latitude\022\034\n\tlongitu"
  "de\030\004 \001(\tR\tlongitude\"i\n\005State\022\016\n\002id\030\001 \001(\r"
  "R\002id\022\022\n\004name\030\002 \001(\tR\004name\022<\n\006cities\030\003 \003(\013"
  "2$.accounts.v1alpha1.countries.v1.CityR\006"
  "cities\"z\n\013CountryList\022\016\n\002id\030\001 \001(\rR\002id\022\022\n"
  "\004name\030\002 \001(\tR\004name\022\022\n\004code\030\003 \001(\tR\004code\022\035\n"
  "\nphone_code\030\004 \001(\tR\tphoneCode\022\024\n\005emoji\030\005 "
  "\001(\tR\005emoji\"\026\n\024ListCountriesRequest\"b\n\025Li"
  "stCountriesResponse\022I\n\tcountries\030\001 \003(\0132+"
  ".accounts.v1alpha1.countries.v1.CountryL"
  "istR\tcountries\"I\n\024GetOneCountryRequest\022\035"
  "\n\ncountry_id\030\001 \001(\rR\tcountryId\022\022\n\004name\030\002 "
  "\001(\tR\004name\"\303\001\n\025GetOneCountryResponse\022\016\n\002i"
  "d\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004code\030"
  "\003 \001(\tR\004code\022\035\n\nphone_code\030\004 \001(\tR\tphoneCo"
  "de\022\024\n\005emoji\030\005 \001(\tR\005emoji\022=\n\006states\030\006 \003(\013"
  "2%.accounts.v1alpha1.countries.v1.StateR"
  "\006statesB>Z<github.com/cuemby/ccp-sdk/gen"
  "/go/accounts/v1alpha1/countriesb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto = {
  false, false, 879, descriptor_table_protodef_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto, "accounts/v1alpha1/countries/countries.proto", 
  &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto::offsets,
  file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto, file_level_enum_descriptors_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto, file_level_service_descriptors_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter() {
  return &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto(&descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto);
namespace accounts {
namespace v1alpha1 {
namespace countries {
namespace v1 {

// ===================================================================

class City::_Internal {
 public:
};

City::City(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.countries.v1.City)
}
City::City(const City& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latitude().empty()) {
    latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latitude(), 
      GetArenaForAllocation());
  }
  longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_longitude().empty()) {
    longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_longitude(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.countries.v1.City)
}

inline void City::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
longitude_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

City::~City() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.countries.v1.City)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void City::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longitude_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void City::ArenaDtor(void* object) {
  City* _this = reinterpret_cast< City* >(object);
  (void)_this;
}
void City::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void City::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void City::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.countries.v1.City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  latitude_.ClearToEmpty();
  longitude_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* City::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.City.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latitude = 3 [json_name = "latitude"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_latitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.City.latitude"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string longitude = 4 [json_name = "longitude"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_longitude();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.City.longitude"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* City::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.countries.v1.City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.City.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string latitude = 3 [json_name = "latitude"];
  if (!this->_internal_latitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latitude().data(), static_cast<int>(this->_internal_latitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.City.latitude");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_latitude(), target);
  }

  // string longitude = 4 [json_name = "longitude"];
  if (!this->_internal_longitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_longitude().data(), static_cast<int>(this->_internal_longitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.City.longitude");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.countries.v1.City)
  return target;
}

size_t City::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.countries.v1.City)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string latitude = 3 [json_name = "latitude"];
  if (!this->_internal_latitude().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latitude());
  }

  // string longitude = 4 [json_name = "longitude"];
  if (!this->_internal_longitude().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_longitude());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData City::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    City::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*City::GetClassData() const { return &_class_data_; }

void City::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<City *>(to)->MergeFrom(
      static_cast<const City &>(from));
}


void City::MergeFrom(const City& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.countries.v1.City)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_latitude().empty()) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!from._internal_longitude().empty()) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void City::CopyFrom(const City& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.countries.v1.City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {
  return true;
}

void City::InternalSwap(City* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &latitude_, GetArenaForAllocation(),
      &other->latitude_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &longitude_, GetArenaForAllocation(),
      &other->longitude_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata City::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[0]);
}

// ===================================================================

class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.countries.v1.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cities_(from.cities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.countries.v1.State)
}

inline void State::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

State::~State() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.countries.v1.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.countries.v1.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cities_.Clear();
  name_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.State.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.countries.v1.City cities = 3 [json_name = "cities"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.countries.v1.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.State.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .accounts.v1alpha1.countries.v1.City cities = 3 [json_name = "cities"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.countries.v1.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.countries.v1.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.countries.v1.City cities = 3 [json_name = "cities"];
  total_size += 1UL * this->_internal_cities_size();
  for (const auto& msg : this->cities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }

void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<State *>(to)->MergeFrom(
      static_cast<const State &>(from));
}


void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.countries.v1.State)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cities_.MergeFrom(from.cities_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.countries.v1.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cities_.InternalSwap(&other->cities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[1]);
}

// ===================================================================

class CountryList::_Internal {
 public:
};

CountryList::CountryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.countries.v1.CountryList)
}
CountryList::CountryList(const CountryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_code().empty()) {
    phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_code(), 
      GetArenaForAllocation());
  }
  emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emoji().empty()) {
    emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emoji(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.countries.v1.CountryList)
}

inline void CountryList::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CountryList::~CountryList() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.countries.v1.CountryList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CountryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emoji_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CountryList::ArenaDtor(void* object) {
  CountryList* _this = reinterpret_cast< CountryList* >(object);
  (void)_this;
}
void CountryList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CountryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CountryList::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.countries.v1.CountryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  code_.ClearToEmpty();
  phone_code_.ClearToEmpty();
  emoji_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CountryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.CountryList.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 3 [json_name = "code"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.CountryList.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_code = 4 [json_name = "phoneCode"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.CountryList.phone_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string emoji = 5 [json_name = "emoji"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_emoji();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.CountryList.emoji"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CountryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.countries.v1.CountryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.CountryList.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.CountryList.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_code().data(), static_cast<int>(this->_internal_phone_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.CountryList.phone_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone_code(), target);
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji().data(), static_cast<int>(this->_internal_emoji().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.CountryList.emoji");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_emoji(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.countries.v1.CountryList)
  return target;
}

size_t CountryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.countries.v1.CountryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_code());
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CountryList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CountryList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CountryList::GetClassData() const { return &_class_data_; }

void CountryList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CountryList *>(to)->MergeFrom(
      static_cast<const CountryList &>(from));
}


void CountryList::MergeFrom(const CountryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.countries.v1.CountryList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_phone_code().empty()) {
    _internal_set_phone_code(from._internal_phone_code());
  }
  if (!from._internal_emoji().empty()) {
    _internal_set_emoji(from._internal_emoji());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CountryList::CopyFrom(const CountryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.countries.v1.CountryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryList::IsInitialized() const {
  return true;
}

void CountryList::InternalSwap(CountryList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_code_, GetArenaForAllocation(),
      &other->phone_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emoji_, GetArenaForAllocation(),
      &other->emoji_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CountryList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[2]);
}

// ===================================================================

class ListCountriesRequest::_Internal {
 public:
};

ListCountriesRequest::ListCountriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.countries.v1.ListCountriesRequest)
}
ListCountriesRequest::ListCountriesRequest(const ListCountriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.countries.v1.ListCountriesRequest)
}

inline void ListCountriesRequest::SharedCtor() {
}

ListCountriesRequest::~ListCountriesRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.countries.v1.ListCountriesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCountriesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListCountriesRequest::ArenaDtor(void* object) {
  ListCountriesRequest* _this = reinterpret_cast< ListCountriesRequest* >(object);
  (void)_this;
}
void ListCountriesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCountriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCountriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.countries.v1.ListCountriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCountriesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCountriesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.countries.v1.ListCountriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.countries.v1.ListCountriesRequest)
  return target;
}

size_t ListCountriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.countries.v1.ListCountriesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCountriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCountriesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCountriesRequest::GetClassData() const { return &_class_data_; }

void ListCountriesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListCountriesRequest *>(to)->MergeFrom(
      static_cast<const ListCountriesRequest &>(from));
}


void ListCountriesRequest::MergeFrom(const ListCountriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.countries.v1.ListCountriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCountriesRequest::CopyFrom(const ListCountriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.countries.v1.ListCountriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCountriesRequest::IsInitialized() const {
  return true;
}

void ListCountriesRequest::InternalSwap(ListCountriesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCountriesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[3]);
}

// ===================================================================

class ListCountriesResponse::_Internal {
 public:
};

ListCountriesResponse::ListCountriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  countries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.countries.v1.ListCountriesResponse)
}
ListCountriesResponse::ListCountriesResponse(const ListCountriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      countries_(from.countries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.countries.v1.ListCountriesResponse)
}

inline void ListCountriesResponse::SharedCtor() {
}

ListCountriesResponse::~ListCountriesResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.countries.v1.ListCountriesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCountriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListCountriesResponse::ArenaDtor(void* object) {
  ListCountriesResponse* _this = reinterpret_cast< ListCountriesResponse* >(object);
  (void)_this;
}
void ListCountriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCountriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCountriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.countries.v1.ListCountriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCountriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.countries.v1.CountryList countries = 1 [json_name = "countries"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_countries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCountriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.countries.v1.ListCountriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.countries.v1.CountryList countries = 1 [json_name = "countries"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_countries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_countries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.countries.v1.ListCountriesResponse)
  return target;
}

size_t ListCountriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.countries.v1.ListCountriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.countries.v1.CountryList countries = 1 [json_name = "countries"];
  total_size += 1UL * this->_internal_countries_size();
  for (const auto& msg : this->countries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCountriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCountriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCountriesResponse::GetClassData() const { return &_class_data_; }

void ListCountriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListCountriesResponse *>(to)->MergeFrom(
      static_cast<const ListCountriesResponse &>(from));
}


void ListCountriesResponse::MergeFrom(const ListCountriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.countries.v1.ListCountriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  countries_.MergeFrom(from.countries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCountriesResponse::CopyFrom(const ListCountriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.countries.v1.ListCountriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCountriesResponse::IsInitialized() const {
  return true;
}

void ListCountriesResponse::InternalSwap(ListCountriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  countries_.InternalSwap(&other->countries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCountriesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[4]);
}

// ===================================================================

class GetOneCountryRequest::_Internal {
 public:
};

GetOneCountryRequest::GetOneCountryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
}
GetOneCountryRequest::GetOneCountryRequest(const GetOneCountryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  country_id_ = from.country_id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
}

inline void GetOneCountryRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_id_ = 0u;
}

GetOneCountryRequest::~GetOneCountryRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneCountryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneCountryRequest::ArenaDtor(void* object) {
  GetOneCountryRequest* _this = reinterpret_cast< GetOneCountryRequest* >(object);
  (void)_this;
}
void GetOneCountryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneCountryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneCountryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  country_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneCountryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 country_id = 1 [json_name = "countryId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          country_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.GetOneCountryRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneCountryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 country_id = 1 [json_name = "countryId"];
  if (this->_internal_country_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_country_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.GetOneCountryRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
  return target;
}

size_t GetOneCountryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 country_id = 1 [json_name = "countryId"];
  if (this->_internal_country_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_country_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneCountryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneCountryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneCountryRequest::GetClassData() const { return &_class_data_; }

void GetOneCountryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneCountryRequest *>(to)->MergeFrom(
      static_cast<const GetOneCountryRequest &>(from));
}


void GetOneCountryRequest::MergeFrom(const GetOneCountryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_country_id() != 0) {
    _internal_set_country_id(from._internal_country_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneCountryRequest::CopyFrom(const GetOneCountryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneCountryRequest::IsInitialized() const {
  return true;
}

void GetOneCountryRequest::InternalSwap(GetOneCountryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(country_id_, other->country_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneCountryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[5]);
}

// ===================================================================

class GetOneCountryResponse::_Internal {
 public:
};

GetOneCountryResponse::GetOneCountryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
}
GetOneCountryResponse::GetOneCountryResponse(const GetOneCountryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_code().empty()) {
    phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_code(), 
      GetArenaForAllocation());
  }
  emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emoji().empty()) {
    emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emoji(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
}

inline void GetOneCountryResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emoji_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

GetOneCountryResponse::~GetOneCountryResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneCountryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emoji_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneCountryResponse::ArenaDtor(void* object) {
  GetOneCountryResponse* _this = reinterpret_cast< GetOneCountryResponse* >(object);
  (void)_this;
}
void GetOneCountryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneCountryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneCountryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  name_.ClearToEmpty();
  code_.ClearToEmpty();
  phone_code_.ClearToEmpty();
  emoji_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneCountryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.GetOneCountryResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 3 [json_name = "code"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.GetOneCountryResponse.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_code = 4 [json_name = "phoneCode"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.GetOneCountryResponse.phone_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string emoji = 5 [json_name = "emoji"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_emoji();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.countries.v1.GetOneCountryResponse.emoji"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .accounts.v1alpha1.countries.v1.State states = 6 [json_name = "states"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneCountryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.GetOneCountryResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.GetOneCountryResponse.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_code().data(), static_cast<int>(this->_internal_phone_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.GetOneCountryResponse.phone_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone_code(), target);
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emoji().data(), static_cast<int>(this->_internal_emoji().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.countries.v1.GetOneCountryResponse.emoji");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_emoji(), target);
  }

  // repeated .accounts.v1alpha1.countries.v1.State states = 6 [json_name = "states"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
  return target;
}

size_t GetOneCountryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.countries.v1.State states = 6 [json_name = "states"];
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 3 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string phone_code = 4 [json_name = "phoneCode"];
  if (!this->_internal_phone_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_code());
  }

  // string emoji = 5 [json_name = "emoji"];
  if (!this->_internal_emoji().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emoji());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneCountryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneCountryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneCountryResponse::GetClassData() const { return &_class_data_; }

void GetOneCountryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneCountryResponse *>(to)->MergeFrom(
      static_cast<const GetOneCountryResponse &>(from));
}


void GetOneCountryResponse::MergeFrom(const GetOneCountryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_phone_code().empty()) {
    _internal_set_phone_code(from._internal_phone_code());
  }
  if (!from._internal_emoji().empty()) {
    _internal_set_emoji(from._internal_emoji());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneCountryResponse::CopyFrom(const GetOneCountryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneCountryResponse::IsInitialized() const {
  return true;
}

void GetOneCountryResponse::InternalSwap(GetOneCountryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_code_, GetArenaForAllocation(),
      &other->phone_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emoji_, GetArenaForAllocation(),
      &other->emoji_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneCountryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace countries
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::countries::v1::City* Arena::CreateMaybeMessage< ::accounts::v1alpha1::countries::v1::City >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::countries::v1::City >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::countries::v1::State* Arena::CreateMaybeMessage< ::accounts::v1alpha1::countries::v1::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::countries::v1::State >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::countries::v1::CountryList* Arena::CreateMaybeMessage< ::accounts::v1alpha1::countries::v1::CountryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::countries::v1::CountryList >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::countries::v1::ListCountriesRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::countries::v1::ListCountriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::countries::v1::ListCountriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::countries::v1::ListCountriesResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::countries::v1::ListCountriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::countries::v1::ListCountriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::countries::v1::GetOneCountryRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::countries::v1::GetOneCountryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::countries::v1::GetOneCountryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::countries::v1::GetOneCountryResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::countries::v1::GetOneCountryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::countries::v1::GetOneCountryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
