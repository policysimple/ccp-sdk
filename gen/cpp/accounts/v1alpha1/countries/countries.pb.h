// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/countries/countries.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
namespace accounts {
namespace v1alpha1 {
namespace countries {
namespace v1 {
class City;
struct CityDefaultTypeInternal;
extern CityDefaultTypeInternal _City_default_instance_;
class CountryList;
struct CountryListDefaultTypeInternal;
extern CountryListDefaultTypeInternal _CountryList_default_instance_;
class GetOneCountryRequest;
struct GetOneCountryRequestDefaultTypeInternal;
extern GetOneCountryRequestDefaultTypeInternal _GetOneCountryRequest_default_instance_;
class GetOneCountryResponse;
struct GetOneCountryResponseDefaultTypeInternal;
extern GetOneCountryResponseDefaultTypeInternal _GetOneCountryResponse_default_instance_;
class ListCountriesRequest;
struct ListCountriesRequestDefaultTypeInternal;
extern ListCountriesRequestDefaultTypeInternal _ListCountriesRequest_default_instance_;
class ListCountriesResponse;
struct ListCountriesResponseDefaultTypeInternal;
extern ListCountriesResponseDefaultTypeInternal _ListCountriesResponse_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace v1
}  // namespace countries
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> ::accounts::v1alpha1::countries::v1::City* Arena::CreateMaybeMessage<::accounts::v1alpha1::countries::v1::City>(Arena*);
template<> ::accounts::v1alpha1::countries::v1::CountryList* Arena::CreateMaybeMessage<::accounts::v1alpha1::countries::v1::CountryList>(Arena*);
template<> ::accounts::v1alpha1::countries::v1::GetOneCountryRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::countries::v1::GetOneCountryRequest>(Arena*);
template<> ::accounts::v1alpha1::countries::v1::GetOneCountryResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::countries::v1::GetOneCountryResponse>(Arena*);
template<> ::accounts::v1alpha1::countries::v1::ListCountriesRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::countries::v1::ListCountriesRequest>(Arena*);
template<> ::accounts::v1alpha1::countries::v1::ListCountriesResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::countries::v1::ListCountriesResponse>(Arena*);
template<> ::accounts::v1alpha1::countries::v1::State* Arena::CreateMaybeMessage<::accounts::v1alpha1::countries::v1::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accounts {
namespace v1alpha1 {
namespace countries {
namespace v1 {

// ===================================================================

class City final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.countries.v1.City) */ {
 public:
  inline City() : City(nullptr) {}
  ~City() override;
  explicit constexpr City(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  City(const City& from);
  City(City&& from) noexcept
    : City() {
    *this = ::std::move(from);
  }

  inline City& operator=(const City& from) {
    CopyFrom(from);
    return *this;
  }
  inline City& operator=(City&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const City& default_instance() {
    return *internal_default_instance();
  }
  static inline const City* internal_default_instance() {
    return reinterpret_cast<const City*>(
               &_City_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(City& a, City& b) {
    a.Swap(&b);
  }
  inline void Swap(City* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(City* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline City* New() const final {
    return new City();
  }

  City* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<City>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const City& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const City& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(City* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.countries.v1.City";
  }
  protected:
  explicit City(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string latitude = 3 [json_name = "latitude"];
  void clear_latitude();
  const std::string& latitude() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latitude(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latitude();
  PROTOBUF_MUST_USE_RESULT std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // string longitude = 4 [json_name = "longitude"];
  void clear_longitude();
  const std::string& longitude() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_longitude(ArgT0&& arg0, ArgT... args);
  std::string* mutable_longitude();
  PROTOBUF_MUST_USE_RESULT std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.countries.v1.City)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.countries.v1.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return new State();
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.countries.v1.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitiesFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.countries.v1.City cities = 3 [json_name = "cities"];
  int cities_size() const;
  private:
  int _internal_cities_size() const;
  public:
  void clear_cities();
  ::accounts::v1alpha1::countries::v1::City* mutable_cities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::City >*
      mutable_cities();
  private:
  const ::accounts::v1alpha1::countries::v1::City& _internal_cities(int index) const;
  ::accounts::v1alpha1::countries::v1::City* _internal_add_cities();
  public:
  const ::accounts::v1alpha1::countries::v1::City& cities(int index) const;
  ::accounts::v1alpha1::countries::v1::City* add_cities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::City >&
      cities() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.countries.v1.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::City > cities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
};
// -------------------------------------------------------------------

class CountryList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.countries.v1.CountryList) */ {
 public:
  inline CountryList() : CountryList(nullptr) {}
  ~CountryList() override;
  explicit constexpr CountryList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CountryList(const CountryList& from);
  CountryList(CountryList&& from) noexcept
    : CountryList() {
    *this = ::std::move(from);
  }

  inline CountryList& operator=(const CountryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountryList& operator=(CountryList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CountryList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountryList* internal_default_instance() {
    return reinterpret_cast<const CountryList*>(
               &_CountryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CountryList& a, CountryList& b) {
    a.Swap(&b);
  }
  inline void Swap(CountryList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountryList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountryList* New() const final {
    return new CountryList();
  }

  CountryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountryList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CountryList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CountryList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountryList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.countries.v1.CountryList";
  }
  protected:
  explicit CountryList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCodeFieldNumber = 3,
    kPhoneCodeFieldNumber = 4,
    kEmojiFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string code = 3 [json_name = "code"];
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string phone_code = 4 [json_name = "phoneCode"];
  void clear_phone_code();
  const std::string& phone_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_phone_code();
  void set_allocated_phone_code(std::string* phone_code);
  private:
  const std::string& _internal_phone_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_code(const std::string& value);
  std::string* _internal_mutable_phone_code();
  public:

  // string emoji = 5 [json_name = "emoji"];
  void clear_emoji();
  const std::string& emoji() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_emoji(ArgT0&& arg0, ArgT... args);
  std::string* mutable_emoji();
  PROTOBUF_MUST_USE_RESULT std::string* release_emoji();
  void set_allocated_emoji(std::string* emoji);
  private:
  const std::string& _internal_emoji() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emoji(const std::string& value);
  std::string* _internal_mutable_emoji();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.countries.v1.CountryList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emoji_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
};
// -------------------------------------------------------------------

class ListCountriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.countries.v1.ListCountriesRequest) */ {
 public:
  inline ListCountriesRequest() : ListCountriesRequest(nullptr) {}
  ~ListCountriesRequest() override;
  explicit constexpr ListCountriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCountriesRequest(const ListCountriesRequest& from);
  ListCountriesRequest(ListCountriesRequest&& from) noexcept
    : ListCountriesRequest() {
    *this = ::std::move(from);
  }

  inline ListCountriesRequest& operator=(const ListCountriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCountriesRequest& operator=(ListCountriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCountriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCountriesRequest* internal_default_instance() {
    return reinterpret_cast<const ListCountriesRequest*>(
               &_ListCountriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListCountriesRequest& a, ListCountriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCountriesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCountriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCountriesRequest* New() const final {
    return new ListCountriesRequest();
  }

  ListCountriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCountriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCountriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCountriesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCountriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.countries.v1.ListCountriesRequest";
  }
  protected:
  explicit ListCountriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.countries.v1.ListCountriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
};
// -------------------------------------------------------------------

class ListCountriesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.countries.v1.ListCountriesResponse) */ {
 public:
  inline ListCountriesResponse() : ListCountriesResponse(nullptr) {}
  ~ListCountriesResponse() override;
  explicit constexpr ListCountriesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCountriesResponse(const ListCountriesResponse& from);
  ListCountriesResponse(ListCountriesResponse&& from) noexcept
    : ListCountriesResponse() {
    *this = ::std::move(from);
  }

  inline ListCountriesResponse& operator=(const ListCountriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCountriesResponse& operator=(ListCountriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCountriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCountriesResponse* internal_default_instance() {
    return reinterpret_cast<const ListCountriesResponse*>(
               &_ListCountriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListCountriesResponse& a, ListCountriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCountriesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCountriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCountriesResponse* New() const final {
    return new ListCountriesResponse();
  }

  ListCountriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCountriesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCountriesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCountriesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCountriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.countries.v1.ListCountriesResponse";
  }
  protected:
  explicit ListCountriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountriesFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.countries.v1.CountryList countries = 1 [json_name = "countries"];
  int countries_size() const;
  private:
  int _internal_countries_size() const;
  public:
  void clear_countries();
  ::accounts::v1alpha1::countries::v1::CountryList* mutable_countries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::CountryList >*
      mutable_countries();
  private:
  const ::accounts::v1alpha1::countries::v1::CountryList& _internal_countries(int index) const;
  ::accounts::v1alpha1::countries::v1::CountryList* _internal_add_countries();
  public:
  const ::accounts::v1alpha1::countries::v1::CountryList& countries(int index) const;
  ::accounts::v1alpha1::countries::v1::CountryList* add_countries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::CountryList >&
      countries() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.countries.v1.ListCountriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::CountryList > countries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
};
// -------------------------------------------------------------------

class GetOneCountryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.countries.v1.GetOneCountryRequest) */ {
 public:
  inline GetOneCountryRequest() : GetOneCountryRequest(nullptr) {}
  ~GetOneCountryRequest() override;
  explicit constexpr GetOneCountryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneCountryRequest(const GetOneCountryRequest& from);
  GetOneCountryRequest(GetOneCountryRequest&& from) noexcept
    : GetOneCountryRequest() {
    *this = ::std::move(from);
  }

  inline GetOneCountryRequest& operator=(const GetOneCountryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneCountryRequest& operator=(GetOneCountryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneCountryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneCountryRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneCountryRequest*>(
               &_GetOneCountryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetOneCountryRequest& a, GetOneCountryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneCountryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneCountryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneCountryRequest* New() const final {
    return new GetOneCountryRequest();
  }

  GetOneCountryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneCountryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneCountryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneCountryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneCountryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.countries.v1.GetOneCountryRequest";
  }
  protected:
  explicit GetOneCountryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCountryIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 country_id = 1 [json_name = "countryId"];
  void clear_country_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 country_id() const;
  void set_country_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_country_id() const;
  void _internal_set_country_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.countries.v1.GetOneCountryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 country_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
};
// -------------------------------------------------------------------

class GetOneCountryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.countries.v1.GetOneCountryResponse) */ {
 public:
  inline GetOneCountryResponse() : GetOneCountryResponse(nullptr) {}
  ~GetOneCountryResponse() override;
  explicit constexpr GetOneCountryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneCountryResponse(const GetOneCountryResponse& from);
  GetOneCountryResponse(GetOneCountryResponse&& from) noexcept
    : GetOneCountryResponse() {
    *this = ::std::move(from);
  }

  inline GetOneCountryResponse& operator=(const GetOneCountryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneCountryResponse& operator=(GetOneCountryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneCountryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneCountryResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneCountryResponse*>(
               &_GetOneCountryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetOneCountryResponse& a, GetOneCountryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneCountryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneCountryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneCountryResponse* New() const final {
    return new GetOneCountryResponse();
  }

  GetOneCountryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneCountryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneCountryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneCountryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneCountryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.countries.v1.GetOneCountryResponse";
  }
  protected:
  explicit GetOneCountryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 6,
    kNameFieldNumber = 2,
    kCodeFieldNumber = 3,
    kPhoneCodeFieldNumber = 4,
    kEmojiFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.countries.v1.State states = 6 [json_name = "states"];
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::accounts::v1alpha1::countries::v1::State* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::State >*
      mutable_states();
  private:
  const ::accounts::v1alpha1::countries::v1::State& _internal_states(int index) const;
  ::accounts::v1alpha1::countries::v1::State* _internal_add_states();
  public:
  const ::accounts::v1alpha1::countries::v1::State& states(int index) const;
  ::accounts::v1alpha1::countries::v1::State* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::State >&
      states() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string code = 3 [json_name = "code"];
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string phone_code = 4 [json_name = "phoneCode"];
  void clear_phone_code();
  const std::string& phone_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_phone_code();
  void set_allocated_phone_code(std::string* phone_code);
  private:
  const std::string& _internal_phone_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_code(const std::string& value);
  std::string* _internal_mutable_phone_code();
  public:

  // string emoji = 5 [json_name = "emoji"];
  void clear_emoji();
  const std::string& emoji() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_emoji(ArgT0&& arg0, ArgT... args);
  std::string* mutable_emoji();
  PROTOBUF_MUST_USE_RESULT std::string* release_emoji();
  void set_allocated_emoji(std::string* emoji);
  private:
  const std::string& _internal_emoji() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emoji(const std::string& value);
  std::string* _internal_mutable_emoji();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.countries.v1.GetOneCountryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::State > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emoji_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// City

// uint32 id = 1 [json_name = "id"];
inline void City::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 City::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 City::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.City.id)
  return _internal_id();
}
inline void City::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void City::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.City.id)
}

// string name = 2 [json_name = "name"];
inline void City::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& City::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.City.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void City::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.City.name)
}
inline std::string* City::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.City.name)
  return _s;
}
inline const std::string& City::_internal_name() const {
  return name_.Get();
}
inline void City::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* City::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* City::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.City.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void City::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.City.name)
}

// string latitude = 3 [json_name = "latitude"];
inline void City::clear_latitude() {
  latitude_.ClearToEmpty();
}
inline const std::string& City::latitude() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.City.latitude)
  return _internal_latitude();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void City::set_latitude(ArgT0&& arg0, ArgT... args) {
 
 latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.City.latitude)
}
inline std::string* City::mutable_latitude() {
  std::string* _s = _internal_mutable_latitude();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.City.latitude)
  return _s;
}
inline const std::string& City::_internal_latitude() const {
  return latitude_.Get();
}
inline void City::_internal_set_latitude(const std::string& value) {
  
  latitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* City::_internal_mutable_latitude() {
  
  return latitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* City::release_latitude() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.City.latitude)
  return latitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void City::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    
  } else {
    
  }
  latitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.City.latitude)
}

// string longitude = 4 [json_name = "longitude"];
inline void City::clear_longitude() {
  longitude_.ClearToEmpty();
}
inline const std::string& City::longitude() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.City.longitude)
  return _internal_longitude();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void City::set_longitude(ArgT0&& arg0, ArgT... args) {
 
 longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.City.longitude)
}
inline std::string* City::mutable_longitude() {
  std::string* _s = _internal_mutable_longitude();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.City.longitude)
  return _s;
}
inline const std::string& City::_internal_longitude() const {
  return longitude_.Get();
}
inline void City::_internal_set_longitude(const std::string& value) {
  
  longitude_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* City::_internal_mutable_longitude() {
  
  return longitude_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* City::release_longitude() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.City.longitude)
  return longitude_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void City::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    
  } else {
    
  }
  longitude_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.City.longitude)
}

// -------------------------------------------------------------------

// State

// uint32 id = 1 [json_name = "id"];
inline void State::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.State.id)
  return _internal_id();
}
inline void State::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void State::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.State.id)
}

// string name = 2 [json_name = "name"];
inline void State::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& State::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.State.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.State.name)
}
inline std::string* State::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.State.name)
  return _s;
}
inline const std::string& State::_internal_name() const {
  return name_.Get();
}
inline void State::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.State.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.State.name)
}

// repeated .accounts.v1alpha1.countries.v1.City cities = 3 [json_name = "cities"];
inline int State::_internal_cities_size() const {
  return cities_.size();
}
inline int State::cities_size() const {
  return _internal_cities_size();
}
inline void State::clear_cities() {
  cities_.Clear();
}
inline ::accounts::v1alpha1::countries::v1::City* State::mutable_cities(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.State.cities)
  return cities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::City >*
State::mutable_cities() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.countries.v1.State.cities)
  return &cities_;
}
inline const ::accounts::v1alpha1::countries::v1::City& State::_internal_cities(int index) const {
  return cities_.Get(index);
}
inline const ::accounts::v1alpha1::countries::v1::City& State::cities(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.State.cities)
  return _internal_cities(index);
}
inline ::accounts::v1alpha1::countries::v1::City* State::_internal_add_cities() {
  return cities_.Add();
}
inline ::accounts::v1alpha1::countries::v1::City* State::add_cities() {
  ::accounts::v1alpha1::countries::v1::City* _add = _internal_add_cities();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.countries.v1.State.cities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::City >&
State::cities() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.countries.v1.State.cities)
  return cities_;
}

// -------------------------------------------------------------------

// CountryList

// uint32 id = 1 [json_name = "id"];
inline void CountryList::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CountryList::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CountryList::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.CountryList.id)
  return _internal_id();
}
inline void CountryList::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CountryList::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.CountryList.id)
}

// string name = 2 [json_name = "name"];
inline void CountryList::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CountryList::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.CountryList.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CountryList::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.CountryList.name)
}
inline std::string* CountryList::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.CountryList.name)
  return _s;
}
inline const std::string& CountryList::_internal_name() const {
  return name_.Get();
}
inline void CountryList::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CountryList::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CountryList::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.CountryList.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CountryList::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.CountryList.name)
}

// string code = 3 [json_name = "code"];
inline void CountryList::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& CountryList::code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.CountryList.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CountryList::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.CountryList.code)
}
inline std::string* CountryList::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.CountryList.code)
  return _s;
}
inline const std::string& CountryList::_internal_code() const {
  return code_.Get();
}
inline void CountryList::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CountryList::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CountryList::release_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.CountryList.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CountryList::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.CountryList.code)
}

// string phone_code = 4 [json_name = "phoneCode"];
inline void CountryList::clear_phone_code() {
  phone_code_.ClearToEmpty();
}
inline const std::string& CountryList::phone_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.CountryList.phone_code)
  return _internal_phone_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CountryList::set_phone_code(ArgT0&& arg0, ArgT... args) {
 
 phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.CountryList.phone_code)
}
inline std::string* CountryList::mutable_phone_code() {
  std::string* _s = _internal_mutable_phone_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.CountryList.phone_code)
  return _s;
}
inline const std::string& CountryList::_internal_phone_code() const {
  return phone_code_.Get();
}
inline void CountryList::_internal_set_phone_code(const std::string& value) {
  
  phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CountryList::_internal_mutable_phone_code() {
  
  return phone_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CountryList::release_phone_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.CountryList.phone_code)
  return phone_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CountryList::set_allocated_phone_code(std::string* phone_code) {
  if (phone_code != nullptr) {
    
  } else {
    
  }
  phone_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.CountryList.phone_code)
}

// string emoji = 5 [json_name = "emoji"];
inline void CountryList::clear_emoji() {
  emoji_.ClearToEmpty();
}
inline const std::string& CountryList::emoji() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.CountryList.emoji)
  return _internal_emoji();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CountryList::set_emoji(ArgT0&& arg0, ArgT... args) {
 
 emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.CountryList.emoji)
}
inline std::string* CountryList::mutable_emoji() {
  std::string* _s = _internal_mutable_emoji();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.CountryList.emoji)
  return _s;
}
inline const std::string& CountryList::_internal_emoji() const {
  return emoji_.Get();
}
inline void CountryList::_internal_set_emoji(const std::string& value) {
  
  emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CountryList::_internal_mutable_emoji() {
  
  return emoji_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CountryList::release_emoji() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.CountryList.emoji)
  return emoji_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CountryList::set_allocated_emoji(std::string* emoji) {
  if (emoji != nullptr) {
    
  } else {
    
  }
  emoji_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emoji,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.CountryList.emoji)
}

// -------------------------------------------------------------------

// ListCountriesRequest

// -------------------------------------------------------------------

// ListCountriesResponse

// repeated .accounts.v1alpha1.countries.v1.CountryList countries = 1 [json_name = "countries"];
inline int ListCountriesResponse::_internal_countries_size() const {
  return countries_.size();
}
inline int ListCountriesResponse::countries_size() const {
  return _internal_countries_size();
}
inline void ListCountriesResponse::clear_countries() {
  countries_.Clear();
}
inline ::accounts::v1alpha1::countries::v1::CountryList* ListCountriesResponse::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.ListCountriesResponse.countries)
  return countries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::CountryList >*
ListCountriesResponse::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.countries.v1.ListCountriesResponse.countries)
  return &countries_;
}
inline const ::accounts::v1alpha1::countries::v1::CountryList& ListCountriesResponse::_internal_countries(int index) const {
  return countries_.Get(index);
}
inline const ::accounts::v1alpha1::countries::v1::CountryList& ListCountriesResponse::countries(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.ListCountriesResponse.countries)
  return _internal_countries(index);
}
inline ::accounts::v1alpha1::countries::v1::CountryList* ListCountriesResponse::_internal_add_countries() {
  return countries_.Add();
}
inline ::accounts::v1alpha1::countries::v1::CountryList* ListCountriesResponse::add_countries() {
  ::accounts::v1alpha1::countries::v1::CountryList* _add = _internal_add_countries();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.countries.v1.ListCountriesResponse.countries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::CountryList >&
ListCountriesResponse::countries() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.countries.v1.ListCountriesResponse.countries)
  return countries_;
}

// -------------------------------------------------------------------

// GetOneCountryRequest

// uint32 country_id = 1 [json_name = "countryId"];
inline void GetOneCountryRequest::clear_country_id() {
  country_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneCountryRequest::_internal_country_id() const {
  return country_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneCountryRequest::country_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryRequest.country_id)
  return _internal_country_id();
}
inline void GetOneCountryRequest::_internal_set_country_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  country_id_ = value;
}
inline void GetOneCountryRequest::set_country_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_country_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.GetOneCountryRequest.country_id)
}

// string name = 2 [json_name = "name"];
inline void GetOneCountryRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOneCountryRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneCountryRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.GetOneCountryRequest.name)
}
inline std::string* GetOneCountryRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.GetOneCountryRequest.name)
  return _s;
}
inline const std::string& GetOneCountryRequest::_internal_name() const {
  return name_.Get();
}
inline void GetOneCountryRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneCountryRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneCountryRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.GetOneCountryRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneCountryRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.GetOneCountryRequest.name)
}

// -------------------------------------------------------------------

// GetOneCountryResponse

// uint32 id = 1 [json_name = "id"];
inline void GetOneCountryResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneCountryResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneCountryResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryResponse.id)
  return _internal_id();
}
inline void GetOneCountryResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneCountryResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.GetOneCountryResponse.id)
}

// string name = 2 [json_name = "name"];
inline void GetOneCountryResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOneCountryResponse::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneCountryResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.GetOneCountryResponse.name)
}
inline std::string* GetOneCountryResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.GetOneCountryResponse.name)
  return _s;
}
inline const std::string& GetOneCountryResponse::_internal_name() const {
  return name_.Get();
}
inline void GetOneCountryResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.GetOneCountryResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneCountryResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.GetOneCountryResponse.name)
}

// string code = 3 [json_name = "code"];
inline void GetOneCountryResponse::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& GetOneCountryResponse::code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryResponse.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneCountryResponse::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.GetOneCountryResponse.code)
}
inline std::string* GetOneCountryResponse::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.GetOneCountryResponse.code)
  return _s;
}
inline const std::string& GetOneCountryResponse::_internal_code() const {
  return code_.Get();
}
inline void GetOneCountryResponse::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::release_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.GetOneCountryResponse.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneCountryResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.GetOneCountryResponse.code)
}

// string phone_code = 4 [json_name = "phoneCode"];
inline void GetOneCountryResponse::clear_phone_code() {
  phone_code_.ClearToEmpty();
}
inline const std::string& GetOneCountryResponse::phone_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryResponse.phone_code)
  return _internal_phone_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneCountryResponse::set_phone_code(ArgT0&& arg0, ArgT... args) {
 
 phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.GetOneCountryResponse.phone_code)
}
inline std::string* GetOneCountryResponse::mutable_phone_code() {
  std::string* _s = _internal_mutable_phone_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.GetOneCountryResponse.phone_code)
  return _s;
}
inline const std::string& GetOneCountryResponse::_internal_phone_code() const {
  return phone_code_.Get();
}
inline void GetOneCountryResponse::_internal_set_phone_code(const std::string& value) {
  
  phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::_internal_mutable_phone_code() {
  
  return phone_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::release_phone_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.GetOneCountryResponse.phone_code)
  return phone_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneCountryResponse::set_allocated_phone_code(std::string* phone_code) {
  if (phone_code != nullptr) {
    
  } else {
    
  }
  phone_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.GetOneCountryResponse.phone_code)
}

// string emoji = 5 [json_name = "emoji"];
inline void GetOneCountryResponse::clear_emoji() {
  emoji_.ClearToEmpty();
}
inline const std::string& GetOneCountryResponse::emoji() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryResponse.emoji)
  return _internal_emoji();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneCountryResponse::set_emoji(ArgT0&& arg0, ArgT... args) {
 
 emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.countries.v1.GetOneCountryResponse.emoji)
}
inline std::string* GetOneCountryResponse::mutable_emoji() {
  std::string* _s = _internal_mutable_emoji();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.GetOneCountryResponse.emoji)
  return _s;
}
inline const std::string& GetOneCountryResponse::_internal_emoji() const {
  return emoji_.Get();
}
inline void GetOneCountryResponse::_internal_set_emoji(const std::string& value) {
  
  emoji_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::_internal_mutable_emoji() {
  
  return emoji_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneCountryResponse::release_emoji() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.countries.v1.GetOneCountryResponse.emoji)
  return emoji_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneCountryResponse::set_allocated_emoji(std::string* emoji) {
  if (emoji != nullptr) {
    
  } else {
    
  }
  emoji_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emoji,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.countries.v1.GetOneCountryResponse.emoji)
}

// repeated .accounts.v1alpha1.countries.v1.State states = 6 [json_name = "states"];
inline int GetOneCountryResponse::_internal_states_size() const {
  return states_.size();
}
inline int GetOneCountryResponse::states_size() const {
  return _internal_states_size();
}
inline void GetOneCountryResponse::clear_states() {
  states_.Clear();
}
inline ::accounts::v1alpha1::countries::v1::State* GetOneCountryResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.countries.v1.GetOneCountryResponse.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::State >*
GetOneCountryResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.countries.v1.GetOneCountryResponse.states)
  return &states_;
}
inline const ::accounts::v1alpha1::countries::v1::State& GetOneCountryResponse::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::accounts::v1alpha1::countries::v1::State& GetOneCountryResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.countries.v1.GetOneCountryResponse.states)
  return _internal_states(index);
}
inline ::accounts::v1alpha1::countries::v1::State* GetOneCountryResponse::_internal_add_states() {
  return states_.Add();
}
inline ::accounts::v1alpha1::countries::v1::State* GetOneCountryResponse::add_states() {
  ::accounts::v1alpha1::countries::v1::State* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.countries.v1.GetOneCountryResponse.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::countries::v1::State >&
GetOneCountryResponse::states() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.countries.v1.GetOneCountryResponse.states)
  return states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace countries
}  // namespace v1alpha1
}  // namespace accounts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2fcountries_2fcountries_2eproto
