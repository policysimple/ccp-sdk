// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/invitations/invitations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "accounts/v1alpha1/accounts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
namespace accounts {
namespace v1alpha1 {
namespace invitations {
namespace v1 {
class AgreeInvitationUserRequest;
struct AgreeInvitationUserRequestDefaultTypeInternal;
extern AgreeInvitationUserRequestDefaultTypeInternal _AgreeInvitationUserRequest_default_instance_;
class AgreeInvitationUserRequest_ProjectsEntry_DoNotUse;
struct AgreeInvitationUserRequest_ProjectsEntry_DoNotUseDefaultTypeInternal;
extern AgreeInvitationUserRequest_ProjectsEntry_DoNotUseDefaultTypeInternal _AgreeInvitationUserRequest_ProjectsEntry_DoNotUse_default_instance_;
class AgreeInvitationUserResponse;
struct AgreeInvitationUserResponseDefaultTypeInternal;
extern AgreeInvitationUserResponseDefaultTypeInternal _AgreeInvitationUserResponse_default_instance_;
class DeleteInvitationRequest;
struct DeleteInvitationRequestDefaultTypeInternal;
extern DeleteInvitationRequestDefaultTypeInternal _DeleteInvitationRequest_default_instance_;
class DeleteInvitationResponse;
struct DeleteInvitationResponseDefaultTypeInternal;
extern DeleteInvitationResponseDefaultTypeInternal _DeleteInvitationResponse_default_instance_;
class GetInvitationUserRequest;
struct GetInvitationUserRequestDefaultTypeInternal;
extern GetInvitationUserRequestDefaultTypeInternal _GetInvitationUserRequest_default_instance_;
class GetInvitationUserResponse;
struct GetInvitationUserResponseDefaultTypeInternal;
extern GetInvitationUserResponseDefaultTypeInternal _GetInvitationUserResponse_default_instance_;
class ListInvitationSendRequest;
struct ListInvitationSendRequestDefaultTypeInternal;
extern ListInvitationSendRequestDefaultTypeInternal _ListInvitationSendRequest_default_instance_;
class ListInvitationSendResponse;
struct ListInvitationSendResponseDefaultTypeInternal;
extern ListInvitationSendResponseDefaultTypeInternal _ListInvitationSendResponse_default_instance_;
class OrganizationInvitation;
struct OrganizationInvitationDefaultTypeInternal;
extern OrganizationInvitationDefaultTypeInternal _OrganizationInvitation_default_instance_;
class SendInvitationUserRequest;
struct SendInvitationUserRequestDefaultTypeInternal;
extern SendInvitationUserRequestDefaultTypeInternal _SendInvitationUserRequest_default_instance_;
class SendInvitationUserResponse;
struct SendInvitationUserResponseDefaultTypeInternal;
extern SendInvitationUserResponseDefaultTypeInternal _SendInvitationUserResponse_default_instance_;
}  // namespace v1
}  // namespace invitations
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> ::accounts::v1alpha1::invitations::v1::AgreeInvitationUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::AgreeInvitationUserRequest>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::AgreeInvitationUserRequest_ProjectsEntry_DoNotUse>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::AgreeInvitationUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::AgreeInvitationUserResponse>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::DeleteInvitationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::DeleteInvitationRequest>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::DeleteInvitationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::DeleteInvitationResponse>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::GetInvitationUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::GetInvitationUserRequest>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::ListInvitationSendRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::ListInvitationSendRequest>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::ListInvitationSendResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::ListInvitationSendResponse>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::OrganizationInvitation>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::SendInvitationUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::SendInvitationUserRequest>(Arena*);
template<> ::accounts::v1alpha1::invitations::v1::SendInvitationUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::SendInvitationUserResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accounts {
namespace v1alpha1 {
namespace invitations {
namespace v1 {

enum InvitationResponse : int {
  INVITATION_RESPONSE_ACCEPTED_UNSPECIFIED = 0,
  INVITATION_RESPONSE_REJECTED = 1,
  InvitationResponse_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InvitationResponse_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InvitationResponse_IsValid(int value);
constexpr InvitationResponse InvitationResponse_MIN = INVITATION_RESPONSE_ACCEPTED_UNSPECIFIED;
constexpr InvitationResponse InvitationResponse_MAX = INVITATION_RESPONSE_REJECTED;
constexpr int InvitationResponse_ARRAYSIZE = InvitationResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvitationResponse_descriptor();
template<typename T>
inline const std::string& InvitationResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InvitationResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InvitationResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InvitationResponse_descriptor(), enum_t_value);
}
inline bool InvitationResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InvitationResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InvitationResponse>(
    InvitationResponse_descriptor(), name, value);
}
// ===================================================================

class SendInvitationUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest) */ {
 public:
  inline SendInvitationUserRequest() : SendInvitationUserRequest(nullptr) {}
  ~SendInvitationUserRequest() override;
  explicit constexpr SendInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendInvitationUserRequest(const SendInvitationUserRequest& from);
  SendInvitationUserRequest(SendInvitationUserRequest&& from) noexcept
    : SendInvitationUserRequest() {
    *this = ::std::move(from);
  }

  inline SendInvitationUserRequest& operator=(const SendInvitationUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationUserRequest& operator=(SendInvitationUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendInvitationUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendInvitationUserRequest* internal_default_instance() {
    return reinterpret_cast<const SendInvitationUserRequest*>(
               &_SendInvitationUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendInvitationUserRequest& a, SendInvitationUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendInvitationUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationUserRequest* New() const final {
    return new SendInvitationUserRequest();
  }

  SendInvitationUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendInvitationUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendInvitationUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.SendInvitationUserRequest";
  }
  protected:
  explicit SendInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesIdsFieldNumber = 5,
    kPermissionsIdsFieldNumber = 6,
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kUserIdAdminFieldNumber = 4,
    kOrganizationIdFieldNumber = 7,
  };
  // repeated uint32 roles_ids = 5 [json_name = "rolesIds"];
  int roles_ids_size() const;
  private:
  int _internal_roles_ids_size() const;
  public:
  void clear_roles_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roles_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_roles_ids() const;
  void _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_roles_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 roles_ids(int index) const;
  void set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      roles_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_roles_ids();

  // repeated uint32 permissions_ids = 6 [json_name = "permissionsIds"];
  int permissions_ids_size() const;
  private:
  int _internal_permissions_ids_size() const;
  public:
  void clear_permissions_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permissions_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_permissions_ids() const;
  void _internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_permissions_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 permissions_ids(int index) const;
  void set_permissions_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      permissions_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_permissions_ids();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string user_id_admin = 4 [json_name = "userIdAdmin"];
  void clear_user_id_admin();
  const std::string& user_id_admin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id_admin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id_admin();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id_admin();
  void set_allocated_user_id_admin(std::string* user_id_admin);
  private:
  const std::string& _internal_user_id_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id_admin(const std::string& value);
  std::string* _internal_mutable_user_id_admin();
  public:

  // uint32 organization_id = 7 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > roles_ids_;
  mutable std::atomic<int> _roles_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > permissions_ids_;
  mutable std::atomic<int> _permissions_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class SendInvitationUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse) */ {
 public:
  inline SendInvitationUserResponse() : SendInvitationUserResponse(nullptr) {}
  ~SendInvitationUserResponse() override;
  explicit constexpr SendInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendInvitationUserResponse(const SendInvitationUserResponse& from);
  SendInvitationUserResponse(SendInvitationUserResponse&& from) noexcept
    : SendInvitationUserResponse() {
    *this = ::std::move(from);
  }

  inline SendInvitationUserResponse& operator=(const SendInvitationUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationUserResponse& operator=(SendInvitationUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendInvitationUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendInvitationUserResponse* internal_default_instance() {
    return reinterpret_cast<const SendInvitationUserResponse*>(
               &_SendInvitationUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendInvitationUserResponse& a, SendInvitationUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendInvitationUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationUserResponse* New() const final {
    return new SendInvitationUserResponse();
  }

  SendInvitationUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendInvitationUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendInvitationUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.SendInvitationUserResponse";
  }
  protected:
  explicit SendInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 2,
    kRolesFieldNumber = 5,
    kPermissionsFieldNumber = 6,
    kInvitationCodeFieldNumber = 3,
    kResultFieldNumber = 4,
    kErrorFieldNumber = 7,
    kOrganizationFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::accounts::v1alpha1::Project* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
      mutable_projects();
  private:
  const ::accounts::v1alpha1::Project& _internal_projects(int index) const;
  ::accounts::v1alpha1::Project* _internal_add_projects();
  public:
  const ::accounts::v1alpha1::Project& projects(int index) const;
  ::accounts::v1alpha1::Project* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
      projects() const;

  // repeated .accounts.v1alpha1.Role roles = 5 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Role& _internal_roles(int index) const;
  ::accounts::v1alpha1::Role* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Role& roles(int index) const;
  ::accounts::v1alpha1::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
      roles() const;

  // repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // string invitation_code = 3 [json_name = "invitationCode"];
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // string result = 4 [json_name = "result"];
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_MUST_USE_RESULT std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string error = 7 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::accounts::v1alpha1::Organization& organization() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::Organization* release_organization();
  ::accounts::v1alpha1::Organization* mutable_organization();
  void set_allocated_organization(::accounts::v1alpha1::Organization* organization);
  private:
  const ::accounts::v1alpha1::Organization& _internal_organization() const;
  ::accounts::v1alpha1::Organization* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::accounts::v1alpha1::Organization* organization);
  ::accounts::v1alpha1::Organization* unsafe_arena_release_organization();

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project > projects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::accounts::v1alpha1::Organization* organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class GetInvitationUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest) */ {
 public:
  inline GetInvitationUserRequest() : GetInvitationUserRequest(nullptr) {}
  ~GetInvitationUserRequest() override;
  explicit constexpr GetInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInvitationUserRequest(const GetInvitationUserRequest& from);
  GetInvitationUserRequest(GetInvitationUserRequest&& from) noexcept
    : GetInvitationUserRequest() {
    *this = ::std::move(from);
  }

  inline GetInvitationUserRequest& operator=(const GetInvitationUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvitationUserRequest& operator=(GetInvitationUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInvitationUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInvitationUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetInvitationUserRequest*>(
               &_GetInvitationUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetInvitationUserRequest& a, GetInvitationUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvitationUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInvitationUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvitationUserRequest* New() const final {
    return new GetInvitationUserRequest();
  }

  GetInvitationUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvitationUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInvitationUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInvitationUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvitationUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.GetInvitationUserRequest";
  }
  protected:
  explicit GetInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationCodeFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string invitation_code = 1 [json_name = "invitationCode"];
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // string email = 2 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class OrganizationInvitation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.OrganizationInvitation) */ {
 public:
  inline OrganizationInvitation() : OrganizationInvitation(nullptr) {}
  ~OrganizationInvitation() override;
  explicit constexpr OrganizationInvitation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrganizationInvitation(const OrganizationInvitation& from);
  OrganizationInvitation(OrganizationInvitation&& from) noexcept
    : OrganizationInvitation() {
    *this = ::std::move(from);
  }

  inline OrganizationInvitation& operator=(const OrganizationInvitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrganizationInvitation& operator=(OrganizationInvitation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrganizationInvitation& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrganizationInvitation* internal_default_instance() {
    return reinterpret_cast<const OrganizationInvitation*>(
               &_OrganizationInvitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrganizationInvitation& a, OrganizationInvitation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrganizationInvitation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrganizationInvitation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrganizationInvitation* New() const final {
    return new OrganizationInvitation();
  }

  OrganizationInvitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrganizationInvitation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrganizationInvitation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrganizationInvitation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrganizationInvitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.OrganizationInvitation";
  }
  protected:
  explicit OrganizationInvitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 5,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Project projects = 5 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::accounts::v1alpha1::Project* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
      mutable_projects();
  private:
  const ::accounts::v1alpha1::Project& _internal_projects(int index) const;
  ::accounts::v1alpha1::Project* _internal_add_projects();
  public:
  const ::accounts::v1alpha1::Project& projects(int index) const;
  ::accounts::v1alpha1::Project* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
      projects() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string description = 4 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.OrganizationInvitation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project > projects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class GetInvitationUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse) */ {
 public:
  inline GetInvitationUserResponse() : GetInvitationUserResponse(nullptr) {}
  ~GetInvitationUserResponse() override;
  explicit constexpr GetInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInvitationUserResponse(const GetInvitationUserResponse& from);
  GetInvitationUserResponse(GetInvitationUserResponse&& from) noexcept
    : GetInvitationUserResponse() {
    *this = ::std::move(from);
  }

  inline GetInvitationUserResponse& operator=(const GetInvitationUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvitationUserResponse& operator=(GetInvitationUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInvitationUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInvitationUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetInvitationUserResponse*>(
               &_GetInvitationUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetInvitationUserResponse& a, GetInvitationUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvitationUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInvitationUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvitationUserResponse* New() const final {
    return new GetInvitationUserResponse();
  }

  GetInvitationUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvitationUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInvitationUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInvitationUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvitationUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.GetInvitationUserResponse";
  }
  protected:
  explicit GetInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 4,
    kPermissionsFieldNumber = 5,
    kInvitationCodeFieldNumber = 2,
    kEmailFieldNumber = 7,
    kErrorFieldNumber = 9,
    kOrganizationFieldNumber = 6,
    kIdFieldNumber = 1,
    kSuccessFieldNumber = 8,
  };
  // repeated .accounts.v1alpha1.Role roles = 4 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Role& _internal_roles(int index) const;
  ::accounts::v1alpha1::Role* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Role& roles(int index) const;
  ::accounts::v1alpha1::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
      roles() const;

  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // string invitation_code = 2 [json_name = "invitationCode"];
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // string email = 7 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string error = 9 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .accounts.v1alpha1.invitations.v1.OrganizationInvitation organization = 6 [json_name = "organization"];
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::accounts::v1alpha1::invitations::v1::OrganizationInvitation& organization() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* release_organization();
  ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* mutable_organization();
  void set_allocated_organization(::accounts::v1alpha1::invitations::v1::OrganizationInvitation* organization);
  private:
  const ::accounts::v1alpha1::invitations::v1::OrganizationInvitation& _internal_organization() const;
  ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* organization);
  ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* unsafe_arena_release_organization();

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool success = 8 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* organization_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class AgreeInvitationUserRequest_ProjectsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgreeInvitationUserRequest_ProjectsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AgreeInvitationUserRequest_ProjectsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  AgreeInvitationUserRequest_ProjectsEntry_DoNotUse();
  explicit constexpr AgreeInvitationUserRequest_ProjectsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AgreeInvitationUserRequest_ProjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AgreeInvitationUserRequest_ProjectsEntry_DoNotUse& other);
  static const AgreeInvitationUserRequest_ProjectsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AgreeInvitationUserRequest_ProjectsEntry_DoNotUse*>(&_AgreeInvitationUserRequest_ProjectsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AgreeInvitationUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest) */ {
 public:
  inline AgreeInvitationUserRequest() : AgreeInvitationUserRequest(nullptr) {}
  ~AgreeInvitationUserRequest() override;
  explicit constexpr AgreeInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgreeInvitationUserRequest(const AgreeInvitationUserRequest& from);
  AgreeInvitationUserRequest(AgreeInvitationUserRequest&& from) noexcept
    : AgreeInvitationUserRequest() {
    *this = ::std::move(from);
  }

  inline AgreeInvitationUserRequest& operator=(const AgreeInvitationUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgreeInvitationUserRequest& operator=(AgreeInvitationUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgreeInvitationUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgreeInvitationUserRequest* internal_default_instance() {
    return reinterpret_cast<const AgreeInvitationUserRequest*>(
               &_AgreeInvitationUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AgreeInvitationUserRequest& a, AgreeInvitationUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AgreeInvitationUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgreeInvitationUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgreeInvitationUserRequest* New() const final {
    return new AgreeInvitationUserRequest();
  }

  AgreeInvitationUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgreeInvitationUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgreeInvitationUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgreeInvitationUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreeInvitationUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest";
  }
  protected:
  explicit AgreeInvitationUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 5,
    kInvitationCodeFieldNumber = 1,
    kEmailFieldNumber = 2,
    kGuestUserIdFieldNumber = 3,
    kInvitationResponseFieldNumber = 4,
  };
  // map<uint32, uint32> projects = 5 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_projects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_projects();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      projects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_projects();

  // string invitation_code = 1 [json_name = "invitationCode"];
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // string email = 2 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string guest_user_id = 3 [json_name = "guestUserId"];
  void clear_guest_user_id();
  const std::string& guest_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guest_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guest_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_guest_user_id();
  void set_allocated_guest_user_id(std::string* guest_user_id);
  private:
  const std::string& _internal_guest_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guest_user_id(const std::string& value);
  std::string* _internal_mutable_guest_user_id();
  public:

  // .accounts.v1alpha1.invitations.v1.InvitationResponse invitation_response = 4 [json_name = "invitationResponse"];
  void clear_invitation_response();
  ::accounts::v1alpha1::invitations::v1::InvitationResponse invitation_response() const;
  void set_invitation_response(::accounts::v1alpha1::invitations::v1::InvitationResponse value);
  private:
  ::accounts::v1alpha1::invitations::v1::InvitationResponse _internal_invitation_response() const;
  void _internal_set_invitation_response(::accounts::v1alpha1::invitations::v1::InvitationResponse value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AgreeInvitationUserRequest_ProjectsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> projects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guest_user_id_;
  int invitation_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class AgreeInvitationUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse) */ {
 public:
  inline AgreeInvitationUserResponse() : AgreeInvitationUserResponse(nullptr) {}
  ~AgreeInvitationUserResponse() override;
  explicit constexpr AgreeInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgreeInvitationUserResponse(const AgreeInvitationUserResponse& from);
  AgreeInvitationUserResponse(AgreeInvitationUserResponse&& from) noexcept
    : AgreeInvitationUserResponse() {
    *this = ::std::move(from);
  }

  inline AgreeInvitationUserResponse& operator=(const AgreeInvitationUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgreeInvitationUserResponse& operator=(AgreeInvitationUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgreeInvitationUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgreeInvitationUserResponse* internal_default_instance() {
    return reinterpret_cast<const AgreeInvitationUserResponse*>(
               &_AgreeInvitationUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AgreeInvitationUserResponse& a, AgreeInvitationUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AgreeInvitationUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgreeInvitationUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgreeInvitationUserResponse* New() const final {
    return new AgreeInvitationUserResponse();
  }

  AgreeInvitationUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgreeInvitationUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgreeInvitationUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgreeInvitationUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreeInvitationUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse";
  }
  protected:
  explicit AgreeInvitationUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1 [json_name = "result"];
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_MUST_USE_RESULT std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class ListInvitationSendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest) */ {
 public:
  inline ListInvitationSendRequest() : ListInvitationSendRequest(nullptr) {}
  ~ListInvitationSendRequest() override;
  explicit constexpr ListInvitationSendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListInvitationSendRequest(const ListInvitationSendRequest& from);
  ListInvitationSendRequest(ListInvitationSendRequest&& from) noexcept
    : ListInvitationSendRequest() {
    *this = ::std::move(from);
  }

  inline ListInvitationSendRequest& operator=(const ListInvitationSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInvitationSendRequest& operator=(ListInvitationSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInvitationSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInvitationSendRequest* internal_default_instance() {
    return reinterpret_cast<const ListInvitationSendRequest*>(
               &_ListInvitationSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListInvitationSendRequest& a, ListInvitationSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInvitationSendRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInvitationSendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListInvitationSendRequest* New() const final {
    return new ListInvitationSendRequest();
  }

  ListInvitationSendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListInvitationSendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListInvitationSendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListInvitationSendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInvitationSendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.ListInvitationSendRequest";
  }
  protected:
  explicit ListInvitationSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
    kEmailFieldNumber = 4,
    kProjectIdFieldNumber = 2,
    kOrganizationIdFieldNumber = 3,
  };
  // string owner_id = 1 [json_name = "ownerId"];
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // string email = 4 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 3 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class ListInvitationSendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.ListInvitationSendResponse) */ {
 public:
  inline ListInvitationSendResponse() : ListInvitationSendResponse(nullptr) {}
  ~ListInvitationSendResponse() override;
  explicit constexpr ListInvitationSendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListInvitationSendResponse(const ListInvitationSendResponse& from);
  ListInvitationSendResponse(ListInvitationSendResponse&& from) noexcept
    : ListInvitationSendResponse() {
    *this = ::std::move(from);
  }

  inline ListInvitationSendResponse& operator=(const ListInvitationSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInvitationSendResponse& operator=(ListInvitationSendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInvitationSendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInvitationSendResponse* internal_default_instance() {
    return reinterpret_cast<const ListInvitationSendResponse*>(
               &_ListInvitationSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListInvitationSendResponse& a, ListInvitationSendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInvitationSendResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInvitationSendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListInvitationSendResponse* New() const final {
    return new ListInvitationSendResponse();
  }

  ListInvitationSendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListInvitationSendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListInvitationSendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListInvitationSendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInvitationSendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.ListInvitationSendResponse";
  }
  protected:
  explicit ListInvitationSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationUserFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.invitations.v1.GetInvitationUserResponse invitation_user = 1 [json_name = "invitationUser"];
  int invitation_user_size() const;
  private:
  int _internal_invitation_user_size() const;
  public:
  void clear_invitation_user();
  ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* mutable_invitation_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse >*
      mutable_invitation_user();
  private:
  const ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse& _internal_invitation_user(int index) const;
  ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* _internal_add_invitation_user();
  public:
  const ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse& invitation_user(int index) const;
  ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* add_invitation_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse >&
      invitation_user() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.ListInvitationSendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse > invitation_user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class DeleteInvitationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.DeleteInvitationRequest) */ {
 public:
  inline DeleteInvitationRequest() : DeleteInvitationRequest(nullptr) {}
  ~DeleteInvitationRequest() override;
  explicit constexpr DeleteInvitationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteInvitationRequest(const DeleteInvitationRequest& from);
  DeleteInvitationRequest(DeleteInvitationRequest&& from) noexcept
    : DeleteInvitationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInvitationRequest& operator=(const DeleteInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInvitationRequest& operator=(DeleteInvitationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteInvitationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInvitationRequest*>(
               &_DeleteInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteInvitationRequest& a, DeleteInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInvitationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInvitationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInvitationRequest* New() const final {
    return new DeleteInvitationRequest();
  }

  DeleteInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInvitationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteInvitationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteInvitationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.DeleteInvitationRequest";
  }
  protected:
  explicit DeleteInvitationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 2,
  };
  // uint32 invitation_id = 1 [json_name = "invitationId"];
  void clear_invitation_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 invitation_id() const;
  void set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invitation_id() const;
  void _internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.DeleteInvitationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invitation_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// -------------------------------------------------------------------

class DeleteInvitationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse) */ {
 public:
  inline DeleteInvitationResponse() : DeleteInvitationResponse(nullptr) {}
  ~DeleteInvitationResponse() override;
  explicit constexpr DeleteInvitationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteInvitationResponse(const DeleteInvitationResponse& from);
  DeleteInvitationResponse(DeleteInvitationResponse&& from) noexcept
    : DeleteInvitationResponse() {
    *this = ::std::move(from);
  }

  inline DeleteInvitationResponse& operator=(const DeleteInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInvitationResponse& operator=(DeleteInvitationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteInvitationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteInvitationResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteInvitationResponse*>(
               &_DeleteInvitationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteInvitationResponse& a, DeleteInvitationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInvitationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInvitationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInvitationResponse* New() const final {
    return new DeleteInvitationResponse();
  }

  DeleteInvitationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInvitationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteInvitationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteInvitationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInvitationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.invitations.v1.DeleteInvitationResponse";
  }
  protected:
  explicit DeleteInvitationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendInvitationUserRequest

// string name = 1 [json_name = "name"];
inline void SendInvitationUserRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SendInvitationUserRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationUserRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.name)
}
inline std::string* SendInvitationUserRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.name)
  return _s;
}
inline const std::string& SendInvitationUserRequest::_internal_name() const {
  return name_.Get();
}
inline void SendInvitationUserRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationUserRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationUserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.name)
}

// string email = 2 [json_name = "email"];
inline void SendInvitationUserRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& SendInvitationUserRequest::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationUserRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.email)
}
inline std::string* SendInvitationUserRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.email)
  return _s;
}
inline const std::string& SendInvitationUserRequest::_internal_email() const {
  return email_.Get();
}
inline void SendInvitationUserRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationUserRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.email)
}

// string user_id_admin = 4 [json_name = "userIdAdmin"];
inline void SendInvitationUserRequest::clear_user_id_admin() {
  user_id_admin_.ClearToEmpty();
}
inline const std::string& SendInvitationUserRequest::user_id_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.user_id_admin)
  return _internal_user_id_admin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationUserRequest::set_user_id_admin(ArgT0&& arg0, ArgT... args) {
 
 user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.user_id_admin)
}
inline std::string* SendInvitationUserRequest::mutable_user_id_admin() {
  std::string* _s = _internal_mutable_user_id_admin();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.user_id_admin)
  return _s;
}
inline const std::string& SendInvitationUserRequest::_internal_user_id_admin() const {
  return user_id_admin_.Get();
}
inline void SendInvitationUserRequest::_internal_set_user_id_admin(const std::string& value) {
  
  user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationUserRequest::_internal_mutable_user_id_admin() {
  
  return user_id_admin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationUserRequest::release_user_id_admin() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.user_id_admin)
  return user_id_admin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationUserRequest::set_allocated_user_id_admin(std::string* user_id_admin) {
  if (user_id_admin != nullptr) {
    
  } else {
    
  }
  user_id_admin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id_admin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.user_id_admin)
}

// repeated uint32 roles_ids = 5 [json_name = "rolesIds"];
inline int SendInvitationUserRequest::_internal_roles_ids_size() const {
  return roles_ids_.size();
}
inline int SendInvitationUserRequest::roles_ids_size() const {
  return _internal_roles_ids_size();
}
inline void SendInvitationUserRequest::clear_roles_ids() {
  roles_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendInvitationUserRequest::_internal_roles_ids(int index) const {
  return roles_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendInvitationUserRequest::roles_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.roles_ids)
  return _internal_roles_ids(index);
}
inline void SendInvitationUserRequest::set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.roles_ids)
}
inline void SendInvitationUserRequest::_internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Add(value);
}
inline void SendInvitationUserRequest::add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_roles_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.roles_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SendInvitationUserRequest::_internal_roles_ids() const {
  return roles_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SendInvitationUserRequest::roles_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.roles_ids)
  return _internal_roles_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SendInvitationUserRequest::_internal_mutable_roles_ids() {
  return &roles_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SendInvitationUserRequest::mutable_roles_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.roles_ids)
  return _internal_mutable_roles_ids();
}

// repeated uint32 permissions_ids = 6 [json_name = "permissionsIds"];
inline int SendInvitationUserRequest::_internal_permissions_ids_size() const {
  return permissions_ids_.size();
}
inline int SendInvitationUserRequest::permissions_ids_size() const {
  return _internal_permissions_ids_size();
}
inline void SendInvitationUserRequest::clear_permissions_ids() {
  permissions_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendInvitationUserRequest::_internal_permissions_ids(int index) const {
  return permissions_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendInvitationUserRequest::permissions_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.permissions_ids)
  return _internal_permissions_ids(index);
}
inline void SendInvitationUserRequest::set_permissions_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permissions_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.permissions_ids)
}
inline void SendInvitationUserRequest::_internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permissions_ids_.Add(value);
}
inline void SendInvitationUserRequest::add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_permissions_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.permissions_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SendInvitationUserRequest::_internal_permissions_ids() const {
  return permissions_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SendInvitationUserRequest::permissions_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.permissions_ids)
  return _internal_permissions_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SendInvitationUserRequest::_internal_mutable_permissions_ids() {
  return &permissions_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SendInvitationUserRequest::mutable_permissions_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.permissions_ids)
  return _internal_mutable_permissions_ids();
}

// uint32 organization_id = 7 [json_name = "organizationId"];
inline void SendInvitationUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendInvitationUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendInvitationUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.organization_id)
  return _internal_organization_id();
}
inline void SendInvitationUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void SendInvitationUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserRequest.organization_id)
}

// -------------------------------------------------------------------

// SendInvitationUserResponse

// .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
inline bool SendInvitationUserResponse::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool SendInvitationUserResponse::has_organization() const {
  return _internal_has_organization();
}
inline const ::accounts::v1alpha1::Organization& SendInvitationUserResponse::_internal_organization() const {
  const ::accounts::v1alpha1::Organization* p = organization_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::Organization&>(
      ::accounts::v1alpha1::_Organization_default_instance_);
}
inline const ::accounts::v1alpha1::Organization& SendInvitationUserResponse::organization() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.organization)
  return _internal_organization();
}
inline void SendInvitationUserResponse::unsafe_arena_set_allocated_organization(
    ::accounts::v1alpha1::Organization* organization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.organization)
}
inline ::accounts::v1alpha1::Organization* SendInvitationUserResponse::release_organization() {
  
  ::accounts::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::Organization* SendInvitationUserResponse::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.organization)
  
  ::accounts::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::Organization* SendInvitationUserResponse::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::Organization>(GetArenaForAllocation());
    organization_ = p;
  }
  return organization_;
}
inline ::accounts::v1alpha1::Organization* SendInvitationUserResponse::mutable_organization() {
  ::accounts::v1alpha1::Organization* _msg = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.organization)
  return _msg;
}
inline void SendInvitationUserResponse::set_allocated_organization(::accounts::v1alpha1::Organization* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization));
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.organization)
}

// repeated .accounts.v1alpha1.Project projects = 2 [json_name = "projects"];
inline int SendInvitationUserResponse::_internal_projects_size() const {
  return projects_.size();
}
inline int SendInvitationUserResponse::projects_size() const {
  return _internal_projects_size();
}
inline ::accounts::v1alpha1::Project* SendInvitationUserResponse::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
SendInvitationUserResponse::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.projects)
  return &projects_;
}
inline const ::accounts::v1alpha1::Project& SendInvitationUserResponse::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::accounts::v1alpha1::Project& SendInvitationUserResponse::projects(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.projects)
  return _internal_projects(index);
}
inline ::accounts::v1alpha1::Project* SendInvitationUserResponse::_internal_add_projects() {
  return projects_.Add();
}
inline ::accounts::v1alpha1::Project* SendInvitationUserResponse::add_projects() {
  ::accounts::v1alpha1::Project* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
SendInvitationUserResponse::projects() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.projects)
  return projects_;
}

// string invitation_code = 3 [json_name = "invitationCode"];
inline void SendInvitationUserResponse::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
}
inline const std::string& SendInvitationUserResponse::invitation_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationUserResponse::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.invitation_code)
}
inline std::string* SendInvitationUserResponse::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.invitation_code)
  return _s;
}
inline const std::string& SendInvitationUserResponse::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void SendInvitationUserResponse::_internal_set_invitation_code(const std::string& value) {
  
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationUserResponse::_internal_mutable_invitation_code() {
  
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationUserResponse::release_invitation_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.invitation_code)
  return invitation_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationUserResponse::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    
  } else {
    
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.invitation_code)
}

// string result = 4 [json_name = "result"];
inline void SendInvitationUserResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& SendInvitationUserResponse::result() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationUserResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.result)
}
inline std::string* SendInvitationUserResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.result)
  return _s;
}
inline const std::string& SendInvitationUserResponse::_internal_result() const {
  return result_.Get();
}
inline void SendInvitationUserResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationUserResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationUserResponse::release_result() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationUserResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.result)
}

// repeated .accounts.v1alpha1.Role roles = 5 [json_name = "roles"];
inline int SendInvitationUserResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int SendInvitationUserResponse::roles_size() const {
  return _internal_roles_size();
}
inline ::accounts::v1alpha1::Role* SendInvitationUserResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
SendInvitationUserResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Role& SendInvitationUserResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Role& SendInvitationUserResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Role* SendInvitationUserResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Role* SendInvitationUserResponse::add_roles() {
  ::accounts::v1alpha1::Role* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
SendInvitationUserResponse::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.roles)
  return roles_;
}

// repeated .accounts.v1alpha1.Permission permissions = 6 [json_name = "permissions"];
inline int SendInvitationUserResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int SendInvitationUserResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline ::accounts::v1alpha1::Permission* SendInvitationUserResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
SendInvitationUserResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& SendInvitationUserResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& SendInvitationUserResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* SendInvitationUserResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* SendInvitationUserResponse::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
SendInvitationUserResponse::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.permissions)
  return permissions_;
}

// string error = 7 [json_name = "error"];
inline void SendInvitationUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& SendInvitationUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.error)
}
inline std::string* SendInvitationUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.error)
  return _s;
}
inline const std::string& SendInvitationUserResponse::_internal_error() const {
  return error_.Get();
}
inline void SendInvitationUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.SendInvitationUserResponse.error)
}

// -------------------------------------------------------------------

// GetInvitationUserRequest

// string invitation_code = 1 [json_name = "invitationCode"];
inline void GetInvitationUserRequest::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
}
inline const std::string& GetInvitationUserRequest::invitation_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvitationUserRequest::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.invitation_code)
}
inline std::string* GetInvitationUserRequest::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.invitation_code)
  return _s;
}
inline const std::string& GetInvitationUserRequest::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void GetInvitationUserRequest::_internal_set_invitation_code(const std::string& value) {
  
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInvitationUserRequest::_internal_mutable_invitation_code() {
  
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInvitationUserRequest::release_invitation_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.invitation_code)
  return invitation_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInvitationUserRequest::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    
  } else {
    
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.invitation_code)
}

// string email = 2 [json_name = "email"];
inline void GetInvitationUserRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& GetInvitationUserRequest::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvitationUserRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.email)
}
inline std::string* GetInvitationUserRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.email)
  return _s;
}
inline const std::string& GetInvitationUserRequest::_internal_email() const {
  return email_.Get();
}
inline void GetInvitationUserRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInvitationUserRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInvitationUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInvitationUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.GetInvitationUserRequest.email)
}

// -------------------------------------------------------------------

// OrganizationInvitation

// uint32 id = 1 [json_name = "id"];
inline void OrganizationInvitation::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrganizationInvitation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrganizationInvitation::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.OrganizationInvitation.id)
  return _internal_id();
}
inline void OrganizationInvitation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void OrganizationInvitation::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.OrganizationInvitation.id)
}

// string name = 2 [json_name = "name"];
inline void OrganizationInvitation::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OrganizationInvitation::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.OrganizationInvitation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrganizationInvitation::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.OrganizationInvitation.name)
}
inline std::string* OrganizationInvitation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.OrganizationInvitation.name)
  return _s;
}
inline const std::string& OrganizationInvitation::_internal_name() const {
  return name_.Get();
}
inline void OrganizationInvitation::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrganizationInvitation::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrganizationInvitation::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.OrganizationInvitation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrganizationInvitation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.OrganizationInvitation.name)
}

// string image = 3 [json_name = "image"];
inline void OrganizationInvitation::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& OrganizationInvitation::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.OrganizationInvitation.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrganizationInvitation::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.OrganizationInvitation.image)
}
inline std::string* OrganizationInvitation::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.OrganizationInvitation.image)
  return _s;
}
inline const std::string& OrganizationInvitation::_internal_image() const {
  return image_.Get();
}
inline void OrganizationInvitation::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrganizationInvitation::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrganizationInvitation::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.OrganizationInvitation.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrganizationInvitation::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.OrganizationInvitation.image)
}

// string description = 4 [json_name = "description"];
inline void OrganizationInvitation::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& OrganizationInvitation::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.OrganizationInvitation.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrganizationInvitation::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.OrganizationInvitation.description)
}
inline std::string* OrganizationInvitation::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.OrganizationInvitation.description)
  return _s;
}
inline const std::string& OrganizationInvitation::_internal_description() const {
  return description_.Get();
}
inline void OrganizationInvitation::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrganizationInvitation::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrganizationInvitation::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.OrganizationInvitation.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrganizationInvitation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.OrganizationInvitation.description)
}

// repeated .accounts.v1alpha1.Project projects = 5 [json_name = "projects"];
inline int OrganizationInvitation::_internal_projects_size() const {
  return projects_.size();
}
inline int OrganizationInvitation::projects_size() const {
  return _internal_projects_size();
}
inline ::accounts::v1alpha1::Project* OrganizationInvitation::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.OrganizationInvitation.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
OrganizationInvitation::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.OrganizationInvitation.projects)
  return &projects_;
}
inline const ::accounts::v1alpha1::Project& OrganizationInvitation::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::accounts::v1alpha1::Project& OrganizationInvitation::projects(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.OrganizationInvitation.projects)
  return _internal_projects(index);
}
inline ::accounts::v1alpha1::Project* OrganizationInvitation::_internal_add_projects() {
  return projects_.Add();
}
inline ::accounts::v1alpha1::Project* OrganizationInvitation::add_projects() {
  ::accounts::v1alpha1::Project* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.OrganizationInvitation.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
OrganizationInvitation::projects() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.OrganizationInvitation.projects)
  return projects_;
}

// -------------------------------------------------------------------

// GetInvitationUserResponse

// uint32 id = 1 [json_name = "id"];
inline void GetInvitationUserResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInvitationUserResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInvitationUserResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.id)
  return _internal_id();
}
inline void GetInvitationUserResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetInvitationUserResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.id)
}

// string invitation_code = 2 [json_name = "invitationCode"];
inline void GetInvitationUserResponse::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
}
inline const std::string& GetInvitationUserResponse::invitation_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvitationUserResponse::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.invitation_code)
}
inline std::string* GetInvitationUserResponse::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.invitation_code)
  return _s;
}
inline const std::string& GetInvitationUserResponse::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void GetInvitationUserResponse::_internal_set_invitation_code(const std::string& value) {
  
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInvitationUserResponse::_internal_mutable_invitation_code() {
  
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInvitationUserResponse::release_invitation_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.invitation_code)
  return invitation_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInvitationUserResponse::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    
  } else {
    
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.invitation_code)
}

// repeated .accounts.v1alpha1.Role roles = 4 [json_name = "roles"];
inline int GetInvitationUserResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int GetInvitationUserResponse::roles_size() const {
  return _internal_roles_size();
}
inline ::accounts::v1alpha1::Role* GetInvitationUserResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
GetInvitationUserResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Role& GetInvitationUserResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Role& GetInvitationUserResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Role* GetInvitationUserResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Role* GetInvitationUserResponse::add_roles() {
  ::accounts::v1alpha1::Role* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
GetInvitationUserResponse::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.roles)
  return roles_;
}

// repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
inline int GetInvitationUserResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int GetInvitationUserResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline ::accounts::v1alpha1::Permission* GetInvitationUserResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
GetInvitationUserResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& GetInvitationUserResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& GetInvitationUserResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* GetInvitationUserResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* GetInvitationUserResponse::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
GetInvitationUserResponse::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.permissions)
  return permissions_;
}

// .accounts.v1alpha1.invitations.v1.OrganizationInvitation organization = 6 [json_name = "organization"];
inline bool GetInvitationUserResponse::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool GetInvitationUserResponse::has_organization() const {
  return _internal_has_organization();
}
inline void GetInvitationUserResponse::clear_organization() {
  if (GetArenaForAllocation() == nullptr && organization_ != nullptr) {
    delete organization_;
  }
  organization_ = nullptr;
}
inline const ::accounts::v1alpha1::invitations::v1::OrganizationInvitation& GetInvitationUserResponse::_internal_organization() const {
  const ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* p = organization_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::invitations::v1::OrganizationInvitation&>(
      ::accounts::v1alpha1::invitations::v1::_OrganizationInvitation_default_instance_);
}
inline const ::accounts::v1alpha1::invitations::v1::OrganizationInvitation& GetInvitationUserResponse::organization() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.organization)
  return _internal_organization();
}
inline void GetInvitationUserResponse::unsafe_arena_set_allocated_organization(
    ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* organization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.organization)
}
inline ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* GetInvitationUserResponse::release_organization() {
  
  ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* temp = organization_;
  organization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* GetInvitationUserResponse::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.organization)
  
  ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* GetInvitationUserResponse::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::invitations::v1::OrganizationInvitation>(GetArenaForAllocation());
    organization_ = p;
  }
  return organization_;
}
inline ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* GetInvitationUserResponse::mutable_organization() {
  ::accounts::v1alpha1::invitations::v1::OrganizationInvitation* _msg = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.organization)
  return _msg;
}
inline void GetInvitationUserResponse::set_allocated_organization(::accounts::v1alpha1::invitations::v1::OrganizationInvitation* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete organization_;
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::invitations::v1::OrganizationInvitation>::GetOwningArena(organization);
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.organization)
}

// string email = 7 [json_name = "email"];
inline void GetInvitationUserResponse::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& GetInvitationUserResponse::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvitationUserResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.email)
}
inline std::string* GetInvitationUserResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.email)
  return _s;
}
inline const std::string& GetInvitationUserResponse::_internal_email() const {
  return email_.Get();
}
inline void GetInvitationUserResponse::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInvitationUserResponse::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInvitationUserResponse::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInvitationUserResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.email)
}

// bool success = 8 [json_name = "success"];
inline void GetInvitationUserResponse::clear_success() {
  success_ = false;
}
inline bool GetInvitationUserResponse::_internal_success() const {
  return success_;
}
inline bool GetInvitationUserResponse::success() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.success)
  return _internal_success();
}
inline void GetInvitationUserResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetInvitationUserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.success)
}

// string error = 9 [json_name = "error"];
inline void GetInvitationUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& GetInvitationUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvitationUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.error)
}
inline std::string* GetInvitationUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.error)
  return _s;
}
inline const std::string& GetInvitationUserResponse::_internal_error() const {
  return error_.Get();
}
inline void GetInvitationUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInvitationUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInvitationUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInvitationUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.GetInvitationUserResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AgreeInvitationUserRequest

// string invitation_code = 1 [json_name = "invitationCode"];
inline void AgreeInvitationUserRequest::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
}
inline const std::string& AgreeInvitationUserRequest::invitation_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreeInvitationUserRequest::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.invitation_code)
}
inline std::string* AgreeInvitationUserRequest::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.invitation_code)
  return _s;
}
inline const std::string& AgreeInvitationUserRequest::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void AgreeInvitationUserRequest::_internal_set_invitation_code(const std::string& value) {
  
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserRequest::_internal_mutable_invitation_code() {
  
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserRequest::release_invitation_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.invitation_code)
  return invitation_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgreeInvitationUserRequest::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    
  } else {
    
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.invitation_code)
}

// string email = 2 [json_name = "email"];
inline void AgreeInvitationUserRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& AgreeInvitationUserRequest::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreeInvitationUserRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.email)
}
inline std::string* AgreeInvitationUserRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.email)
  return _s;
}
inline const std::string& AgreeInvitationUserRequest::_internal_email() const {
  return email_.Get();
}
inline void AgreeInvitationUserRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgreeInvitationUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.email)
}

// string guest_user_id = 3 [json_name = "guestUserId"];
inline void AgreeInvitationUserRequest::clear_guest_user_id() {
  guest_user_id_.ClearToEmpty();
}
inline const std::string& AgreeInvitationUserRequest::guest_user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.guest_user_id)
  return _internal_guest_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreeInvitationUserRequest::set_guest_user_id(ArgT0&& arg0, ArgT... args) {
 
 guest_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.guest_user_id)
}
inline std::string* AgreeInvitationUserRequest::mutable_guest_user_id() {
  std::string* _s = _internal_mutable_guest_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.guest_user_id)
  return _s;
}
inline const std::string& AgreeInvitationUserRequest::_internal_guest_user_id() const {
  return guest_user_id_.Get();
}
inline void AgreeInvitationUserRequest::_internal_set_guest_user_id(const std::string& value) {
  
  guest_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserRequest::_internal_mutable_guest_user_id() {
  
  return guest_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserRequest::release_guest_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.guest_user_id)
  return guest_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgreeInvitationUserRequest::set_allocated_guest_user_id(std::string* guest_user_id) {
  if (guest_user_id != nullptr) {
    
  } else {
    
  }
  guest_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guest_user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.guest_user_id)
}

// .accounts.v1alpha1.invitations.v1.InvitationResponse invitation_response = 4 [json_name = "invitationResponse"];
inline void AgreeInvitationUserRequest::clear_invitation_response() {
  invitation_response_ = 0;
}
inline ::accounts::v1alpha1::invitations::v1::InvitationResponse AgreeInvitationUserRequest::_internal_invitation_response() const {
  return static_cast< ::accounts::v1alpha1::invitations::v1::InvitationResponse >(invitation_response_);
}
inline ::accounts::v1alpha1::invitations::v1::InvitationResponse AgreeInvitationUserRequest::invitation_response() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.invitation_response)
  return _internal_invitation_response();
}
inline void AgreeInvitationUserRequest::_internal_set_invitation_response(::accounts::v1alpha1::invitations::v1::InvitationResponse value) {
  
  invitation_response_ = value;
}
inline void AgreeInvitationUserRequest::set_invitation_response(::accounts::v1alpha1::invitations::v1::InvitationResponse value) {
  _internal_set_invitation_response(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.invitation_response)
}

// map<uint32, uint32> projects = 5 [json_name = "projects"];
inline int AgreeInvitationUserRequest::_internal_projects_size() const {
  return projects_.size();
}
inline int AgreeInvitationUserRequest::projects_size() const {
  return _internal_projects_size();
}
inline void AgreeInvitationUserRequest::clear_projects() {
  projects_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
AgreeInvitationUserRequest::_internal_projects() const {
  return projects_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
AgreeInvitationUserRequest::projects() const {
  // @@protoc_insertion_point(field_map:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.projects)
  return _internal_projects();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
AgreeInvitationUserRequest::_internal_mutable_projects() {
  return projects_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
AgreeInvitationUserRequest::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_map:accounts.v1alpha1.invitations.v1.AgreeInvitationUserRequest.projects)
  return _internal_mutable_projects();
}

// -------------------------------------------------------------------

// AgreeInvitationUserResponse

// string result = 1 [json_name = "result"];
inline void AgreeInvitationUserResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& AgreeInvitationUserResponse::result() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreeInvitationUserResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse.result)
}
inline std::string* AgreeInvitationUserResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse.result)
  return _s;
}
inline const std::string& AgreeInvitationUserResponse::_internal_result() const {
  return result_.Get();
}
inline void AgreeInvitationUserResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgreeInvitationUserResponse::release_result() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgreeInvitationUserResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.AgreeInvitationUserResponse.result)
}

// -------------------------------------------------------------------

// ListInvitationSendRequest

// string owner_id = 1 [json_name = "ownerId"];
inline void ListInvitationSendRequest::clear_owner_id() {
  owner_id_.ClearToEmpty();
}
inline const std::string& ListInvitationSendRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInvitationSendRequest::set_owner_id(ArgT0&& arg0, ArgT... args) {
 
 owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.owner_id)
}
inline std::string* ListInvitationSendRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.owner_id)
  return _s;
}
inline const std::string& ListInvitationSendRequest::_internal_owner_id() const {
  return owner_id_.Get();
}
inline void ListInvitationSendRequest::_internal_set_owner_id(const std::string& value) {
  
  owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListInvitationSendRequest::_internal_mutable_owner_id() {
  
  return owner_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListInvitationSendRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.owner_id)
  return owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListInvitationSendRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    
  } else {
    
  }
  owner_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.owner_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void ListInvitationSendRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInvitationSendRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInvitationSendRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.project_id)
  return _internal_project_id();
}
inline void ListInvitationSendRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListInvitationSendRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.project_id)
}

// uint32 organization_id = 3 [json_name = "organizationId"];
inline void ListInvitationSendRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInvitationSendRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInvitationSendRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.organization_id)
  return _internal_organization_id();
}
inline void ListInvitationSendRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListInvitationSendRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.organization_id)
}

// string email = 4 [json_name = "email"];
inline void ListInvitationSendRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& ListInvitationSendRequest::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInvitationSendRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.email)
}
inline std::string* ListInvitationSendRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.email)
  return _s;
}
inline const std::string& ListInvitationSendRequest::_internal_email() const {
  return email_.Get();
}
inline void ListInvitationSendRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListInvitationSendRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListInvitationSendRequest::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListInvitationSendRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.ListInvitationSendRequest.email)
}

// -------------------------------------------------------------------

// ListInvitationSendResponse

// repeated .accounts.v1alpha1.invitations.v1.GetInvitationUserResponse invitation_user = 1 [json_name = "invitationUser"];
inline int ListInvitationSendResponse::_internal_invitation_user_size() const {
  return invitation_user_.size();
}
inline int ListInvitationSendResponse::invitation_user_size() const {
  return _internal_invitation_user_size();
}
inline void ListInvitationSendResponse::clear_invitation_user() {
  invitation_user_.Clear();
}
inline ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* ListInvitationSendResponse::mutable_invitation_user(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.ListInvitationSendResponse.invitation_user)
  return invitation_user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse >*
ListInvitationSendResponse::mutable_invitation_user() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.invitations.v1.ListInvitationSendResponse.invitation_user)
  return &invitation_user_;
}
inline const ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse& ListInvitationSendResponse::_internal_invitation_user(int index) const {
  return invitation_user_.Get(index);
}
inline const ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse& ListInvitationSendResponse::invitation_user(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.ListInvitationSendResponse.invitation_user)
  return _internal_invitation_user(index);
}
inline ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* ListInvitationSendResponse::_internal_add_invitation_user() {
  return invitation_user_.Add();
}
inline ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* ListInvitationSendResponse::add_invitation_user() {
  ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse* _add = _internal_add_invitation_user();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.invitations.v1.ListInvitationSendResponse.invitation_user)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::invitations::v1::GetInvitationUserResponse >&
ListInvitationSendResponse::invitation_user() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.invitations.v1.ListInvitationSendResponse.invitation_user)
  return invitation_user_;
}

// -------------------------------------------------------------------

// DeleteInvitationRequest

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void DeleteInvitationRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteInvitationRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteInvitationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.DeleteInvitationRequest.organization_id)
  return _internal_organization_id();
}
inline void DeleteInvitationRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void DeleteInvitationRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.DeleteInvitationRequest.organization_id)
}

// uint32 invitation_id = 1 [json_name = "invitationId"];
inline void DeleteInvitationRequest::clear_invitation_id() {
  invitation_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteInvitationRequest::_internal_invitation_id() const {
  return invitation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteInvitationRequest::invitation_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.DeleteInvitationRequest.invitation_id)
  return _internal_invitation_id();
}
inline void DeleteInvitationRequest::_internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invitation_id_ = value;
}
inline void DeleteInvitationRequest::set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invitation_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.DeleteInvitationRequest.invitation_id)
}

// -------------------------------------------------------------------

// DeleteInvitationResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteInvitationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteInvitationResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteInvitationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.msg)
}
inline std::string* DeleteInvitationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.msg)
  return _s;
}
inline const std::string& DeleteInvitationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteInvitationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteInvitationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteInvitationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteInvitationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteInvitationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteInvitationResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteInvitationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.error)
}
inline std::string* DeleteInvitationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.error)
  return _s;
}
inline const std::string& DeleteInvitationResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteInvitationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteInvitationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteInvitationResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteInvitationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.invitations.v1.DeleteInvitationResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace invitations
}  // namespace v1alpha1
}  // namespace accounts

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::accounts::v1alpha1::invitations::v1::InvitationResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accounts::v1alpha1::invitations::v1::InvitationResponse>() {
  return ::accounts::v1alpha1::invitations::v1::InvitationResponse_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2finvitations_2finvitations_2eproto
