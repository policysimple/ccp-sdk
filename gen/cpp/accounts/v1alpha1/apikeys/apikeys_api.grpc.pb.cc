// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/apikeys/apikeys_api.proto

#include "accounts/v1alpha1/apikeys/apikeys_api.pb.h"
#include "accounts/v1alpha1/apikeys/apikeys_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {
namespace apikeys {
namespace v1 {

static const char* ApiKeyService_method_names[] = {
  "/accounts.v1alpha1.apikeys.v1.ApiKeyService/CreateApiKey",
  "/accounts.v1alpha1.apikeys.v1.ApiKeyService/GetOneApiKey",
  "/accounts.v1alpha1.apikeys.v1.ApiKeyService/ListApiKey",
  "/accounts.v1alpha1.apikeys.v1.ApiKeyService/UpdateApiKey",
  "/accounts.v1alpha1.apikeys.v1.ApiKeyService/DeleteApiKey",
};

std::unique_ptr< ApiKeyService::Stub> ApiKeyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiKeyService::Stub> stub(new ApiKeyService::Stub(channel));
  return stub;
}

ApiKeyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateApiKey_(ApiKeyService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneApiKey_(ApiKeyService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListApiKey_(ApiKeyService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateApiKey_(ApiKeyService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteApiKey_(ApiKeyService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiKeyService::Stub::CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateApiKey_, context, request, response);
}

void ApiKeyService::Stub::experimental_async::CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* ApiKeyService::Stub::AsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_CreateApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* ApiKeyService::Stub::PrepareAsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_CreateApiKey_, context, request, false);
}

::grpc::Status ApiKeyService::Stub::GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneApiKey_, context, request, response);
}

void ApiKeyService::Stub::experimental_async::GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* ApiKeyService::Stub::AsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_GetOneApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* ApiKeyService::Stub::PrepareAsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_GetOneApiKey_, context, request, false);
}

::grpc::Status ApiKeyService::Stub::ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListApiKey_, context, request, response);
}

void ApiKeyService::Stub::experimental_async::ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* ApiKeyService::Stub::AsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* ApiKeyService::Stub::PrepareAsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListApiKey_, context, request, false);
}

::grpc::Status ApiKeyService::Stub::UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateApiKey_, context, request, response);
}

void ApiKeyService::Stub::experimental_async::UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* ApiKeyService::Stub::AsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* ApiKeyService::Stub::PrepareAsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateApiKey_, context, request, false);
}

::grpc::Status ApiKeyService::Stub::DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteApiKey_, context, request, response);
}

void ApiKeyService::Stub::experimental_async::DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApiKey_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* ApiKeyService::Stub::AsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApiKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* ApiKeyService::Stub::PrepareAsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApiKey_, context, request, false);
}

ApiKeyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeyService::Service, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>(
          std::mem_fn(&ApiKeyService::Service::CreateApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeyService::Service, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>(
          std::mem_fn(&ApiKeyService::Service::GetOneApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeyService::Service, ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>(
          std::mem_fn(&ApiKeyService::Service::ListApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeyService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeyService::Service, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>(
          std::mem_fn(&ApiKeyService::Service::UpdateApiKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeyService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeyService::Service, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>(
          std::mem_fn(&ApiKeyService::Service::DeleteApiKey), this)));
}

ApiKeyService::Service::~Service() {
}

::grpc::Status ApiKeyService::Service::CreateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeyService::Service::GetOneApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeyService::Service::ListApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeyService::Service::UpdateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeyService::Service::DeleteApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1
}  // namespace apikeys
}  // namespace v1

