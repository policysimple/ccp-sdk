// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/apikeys/apikeys_api.proto
#ifndef GRPC_accounts_2fv1alpha1_2fapikeys_2fapikeys_5fapi_2eproto__INCLUDED
#define GRPC_accounts_2fv1alpha1_2fapikeys_2fapikeys_5fapi_2eproto__INCLUDED

#include "accounts/v1alpha1/apikeys/apikeys_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace accounts {
namespace v1alpha1 {
namespace apikeys {
namespace v1 {

class ApiKeyService final {
 public:
  static constexpr char const* service_full_name() {
    return "accounts.v1alpha1.apikeys.v1.ApiKeyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>> AsyncCreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>>(AsyncCreateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>> PrepareAsyncCreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>>(PrepareAsyncCreateApiKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>> AsyncGetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>>(AsyncGetOneApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>> PrepareAsyncGetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>>(PrepareAsyncGetOneApiKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>> AsyncListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>>(AsyncListApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>> PrepareAsyncListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>>(PrepareAsyncListApiKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>> AsyncUpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>>(AsyncUpdateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>> PrepareAsyncUpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>>(PrepareAsyncUpdateApiKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>> AsyncDeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>>(AsyncDeleteApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>> PrepareAsyncDeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>>(PrepareAsyncDeleteApiKeyRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* AsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* PrepareAsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* AsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* PrepareAsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* AsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* PrepareAsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* AsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* PrepareAsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* AsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* PrepareAsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>> AsyncCreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>>(AsyncCreateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>> PrepareAsyncCreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>>(PrepareAsyncCreateApiKeyRaw(context, request, cq));
    }
    ::grpc::Status GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>> AsyncGetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>>(AsyncGetOneApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>> PrepareAsyncGetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>>(PrepareAsyncGetOneApiKeyRaw(context, request, cq));
    }
    ::grpc::Status ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>> AsyncListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>>(AsyncListApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>> PrepareAsyncListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>>(PrepareAsyncListApiKeyRaw(context, request, cq));
    }
    ::grpc::Status UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>> AsyncUpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>>(AsyncUpdateApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>> PrepareAsyncUpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>>(PrepareAsyncUpdateApiKeyRaw(context, request, cq));
    }
    ::grpc::Status DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>> AsyncDeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>>(AsyncDeleteApiKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>> PrepareAsyncDeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>>(PrepareAsyncDeleteApiKeyRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOneApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void ListApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteApiKey(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* AsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* PrepareAsyncCreateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* AsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* PrepareAsyncGetOneApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* AsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* PrepareAsyncListApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* AsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* PrepareAsyncUpdateApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* AsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* PrepareAsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateApiKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOneApiKey_;
    const ::grpc::internal::RpcMethod rpcmethod_ListApiKey_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateApiKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteApiKey_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response);
    virtual ::grpc::Status GetOneApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response);
    virtual ::grpc::Status ListApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response);
    virtual ::grpc::Status UpdateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response);
    virtual ::grpc::Status DeleteApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateApiKey() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateApiKey(::grpc::ServerContext* context, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOneApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOneApiKey() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOneApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneApiKey(::grpc::ServerContext* context, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListApiKey() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApiKey(::grpc::ServerContext* context, ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateApiKey() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateApiKey(::grpc::ServerContext* context, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApiKey(::grpc::ServerContext* context, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateApiKey<WithAsyncMethod_GetOneApiKey<WithAsyncMethod_ListApiKey<WithAsyncMethod_UpdateApiKey<WithAsyncMethod_DeleteApiKey<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateApiKey() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOneApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOneApiKey() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOneApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListApiKey() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateApiKey() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateApiKey() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOneApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOneApiKey() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOneApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListApiKey() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateApiKey() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApiKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateApiKey() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>(std::bind(&WithStreamedUnaryMethod_CreateApiKey<BaseClass>::StreamedCreateApiKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::apikeys::v1::CreateApiKeyRequest,::accounts::v1alpha1::apikeys::v1::CreateApiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOneApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOneApiKey() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>(std::bind(&WithStreamedUnaryMethod_GetOneApiKey<BaseClass>::StreamedGetOneApiKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOneApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOneApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOneApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::apikeys::v1::GetOneApiKeyRequest,::accounts::v1alpha1::apikeys::v1::GetOneApiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListApiKey() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>(std::bind(&WithStreamedUnaryMethod_ListApiKey<BaseClass>::StreamedListApiKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::apikeys::v1::ListApiKeyRequest,::accounts::v1alpha1::apikeys::v1::ListApiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateApiKey() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>(std::bind(&WithStreamedUnaryMethod_UpdateApiKey<BaseClass>::StreamedUpdateApiKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::apikeys::v1::UpdateApiKeyRequest,::accounts::v1alpha1::apikeys::v1::UpdateApiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteApiKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteApiKey() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>(std::bind(&WithStreamedUnaryMethod_DeleteApiKey<BaseClass>::StreamedDeleteApiKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteApiKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteApiKey(::grpc::ServerContext* context, const ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest* request, ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteApiKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::apikeys::v1::DeleteApiKeyRequest,::accounts::v1alpha1::apikeys::v1::DeleteApiKeyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateApiKey<WithStreamedUnaryMethod_GetOneApiKey<WithStreamedUnaryMethod_ListApiKey<WithStreamedUnaryMethod_UpdateApiKey<WithStreamedUnaryMethod_DeleteApiKey<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateApiKey<WithStreamedUnaryMethod_GetOneApiKey<WithStreamedUnaryMethod_ListApiKey<WithStreamedUnaryMethod_UpdateApiKey<WithStreamedUnaryMethod_DeleteApiKey<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace apikeys
}  // namespace v1alpha1
}  // namespace accounts


#endif  // GRPC_accounts_2fv1alpha1_2fapikeys_2fapikeys_5fapi_2eproto__INCLUDED
