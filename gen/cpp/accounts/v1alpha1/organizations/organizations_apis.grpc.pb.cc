// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/organizations/organizations_apis.proto

#include "accounts/v1alpha1/organizations/organizations_apis.pb.h"
#include "accounts/v1alpha1/organizations/organizations_apis.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {
namespace organizations {
namespace v1 {

static const char* OrganizationService_method_names[] = {
  "/accounts.v1alpha1.organizations.v1.OrganizationService/CreateOrganization",
  "/accounts.v1alpha1.organizations.v1.OrganizationService/ListOrganization",
  "/accounts.v1alpha1.organizations.v1.OrganizationService/GetOneOrganization",
  "/accounts.v1alpha1.organizations.v1.OrganizationService/UpdateOrganization",
  "/accounts.v1alpha1.organizations.v1.OrganizationService/DeleteOrganization",
  "/accounts.v1alpha1.organizations.v1.OrganizationService/UpdateOrganizationUserPermissions",
};

std::unique_ptr< OrganizationService::Stub> OrganizationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrganizationService::Stub> stub(new OrganizationService::Stub(channel));
  return stub;
}

OrganizationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateOrganization_(OrganizationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrganization_(OrganizationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneOrganization_(OrganizationService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrganization_(OrganizationService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOrganization_(OrganizationService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrganizationUserPermissions_(OrganizationService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrganizationService::Stub::CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOrganization_, context, request, response);
}

void OrganizationService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* OrganizationService::Stub::AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* OrganizationService::Stub::PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, false);
}

::grpc::Status OrganizationService::Stub::ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOrganization_, context, request, response);
}

void OrganizationService::Stub::experimental_async::ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* OrganizationService::Stub::AsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_ListOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* OrganizationService::Stub::PrepareAsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_ListOrganization_, context, request, false);
}

::grpc::Status OrganizationService::Stub::GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneOrganization_, context, request, response);
}

void OrganizationService::Stub::experimental_async::GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* OrganizationService::Stub::AsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOneOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* OrganizationService::Stub::PrepareAsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_GetOneOrganization_, context, request, false);
}

::grpc::Status OrganizationService::Stub::UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateOrganization_, context, request, response);
}

void OrganizationService::Stub::experimental_async::UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* OrganizationService::Stub::AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* OrganizationService::Stub::PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganization_, context, request, false);
}

::grpc::Status OrganizationService::Stub::DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOrganization_, context, request, response);
}

void OrganizationService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* OrganizationService::Stub::AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* OrganizationService::Stub::PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, false);
}

::grpc::Status OrganizationService::Stub::UpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateOrganizationUserPermissions_, context, request, response);
}

void OrganizationService::Stub::experimental_async::UpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOrganizationUserPermissions_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* OrganizationService::Stub::AsyncUpdateOrganizationUserPermissionsRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganizationUserPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* OrganizationService::Stub::PrepareAsyncUpdateOrganizationUserPermissionsRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrganizationUserPermissions_, context, request, false);
}

OrganizationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>(
          std::mem_fn(&OrganizationService::Service::CreateOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>(
          std::mem_fn(&OrganizationService::Service::ListOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>(
          std::mem_fn(&OrganizationService::Service::GetOneOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>(
          std::mem_fn(&OrganizationService::Service::UpdateOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>(
          std::mem_fn(&OrganizationService::Service::DeleteOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrganizationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrganizationService::Service, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>(
          std::mem_fn(&OrganizationService::Service::UpdateOrganizationUserPermissions), this)));
}

OrganizationService::Service::~Service() {
}

::grpc::Status OrganizationService::Service::CreateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::ListOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::GetOneOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::DeleteOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrganizationService::Service::UpdateOrganizationUserPermissions(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1
}  // namespace organizations
}  // namespace v1

