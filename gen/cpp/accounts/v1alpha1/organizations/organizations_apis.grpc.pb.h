// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/organizations/organizations_apis.proto
#ifndef GRPC_accounts_2fv1alpha1_2forganizations_2forganizations_5fapis_2eproto__INCLUDED
#define GRPC_accounts_2fv1alpha1_2forganizations_2forganizations_5fapis_2eproto__INCLUDED

#include "accounts/v1alpha1/organizations/organizations_apis.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace accounts {
namespace v1alpha1 {
namespace organizations {
namespace v1 {

class OrganizationService final {
 public:
  static constexpr char const* service_full_name() {
    return "accounts.v1alpha1.organizations.v1.OrganizationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // /Organization
    virtual ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>> AsyncListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>>(AsyncListOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>> PrepareAsyncListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>>(PrepareAsyncListOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>> AsyncGetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>>(AsyncGetOneOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>> PrepareAsyncGetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>>(PrepareAsyncGetOneOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>> AsyncUpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>>(AsyncUpdateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>> PrepareAsyncUpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>>(PrepareAsyncUpdateOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>> AsyncUpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>>(AsyncUpdateOrganizationUserPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>> PrepareAsyncUpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>>(PrepareAsyncUpdateOrganizationUserPermissionsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // /Organization
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* AsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* PrepareAsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* AsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* PrepareAsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* AsyncUpdateOrganizationUserPermissionsRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* PrepareAsyncUpdateOrganizationUserPermissionsRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    ::grpc::Status ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>> AsyncListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>>(AsyncListOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>> PrepareAsyncListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>>(PrepareAsyncListOrganizationRaw(context, request, cq));
    }
    ::grpc::Status GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>> AsyncGetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>>(AsyncGetOneOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>> PrepareAsyncGetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>>(PrepareAsyncGetOneOrganizationRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>> AsyncUpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>>(AsyncUpdateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>> PrepareAsyncUpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>>(PrepareAsyncUpdateOrganizationRaw(context, request, cq));
    }
    ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>> AsyncUpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>>(AsyncUpdateOrganizationUserPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>> PrepareAsyncUpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>>(PrepareAsyncUpdateOrganizationUserPermissionsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOneOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOrganization(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrganizationUserPermissions(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* AsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* PrepareAsyncListOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* AsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* PrepareAsyncGetOneOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* AsyncUpdateOrganizationUserPermissionsRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* PrepareAsyncUpdateOrganizationUserPermissionsRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOneOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrganizationUserPermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // /Organization
    virtual ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response);
    virtual ::grpc::Status ListOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response);
    virtual ::grpc::Status GetOneOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response);
    virtual ::grpc::Status UpdateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response);
    virtual ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response);
    virtual ::grpc::Status UpdateOrganizationUserPermissions(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListOrganization() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrganization(::grpc::ServerContext* context, ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOneOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOneOrganization() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetOneOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneOrganization(::grpc::ServerContext* context, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganization(::grpc::ServerContext* context, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrganizationUserPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOrganizationUserPermissions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateOrganizationUserPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationUserPermissions(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganizationUserPermissions(::grpc::ServerContext* context, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateOrganization<WithAsyncMethod_ListOrganization<WithAsyncMethod_GetOneOrganization<WithAsyncMethod_UpdateOrganization<WithAsyncMethod_DeleteOrganization<WithAsyncMethod_UpdateOrganizationUserPermissions<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListOrganization() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOneOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOneOrganization() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetOneOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrganizationUserPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOrganizationUserPermissions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateOrganizationUserPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationUserPermissions(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListOrganization() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOneOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOneOrganization() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetOneOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrganizationUserPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateOrganizationUserPermissions() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateOrganizationUserPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationUserPermissions(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganizationUserPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_CreateOrganization<BaseClass>::StreamedCreateOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::organizations::v1::CreateOrganizationRequest,::accounts::v1alpha1::organizations::v1::CreateOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListOrganization() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_ListOrganization<BaseClass>::StreamedListOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::ListOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::organizations::v1::ListOrganizationRequest,::accounts::v1alpha1::organizations::v1::ListOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOneOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOneOrganization() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_GetOneOrganization<BaseClass>::StreamedGetOneOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOneOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOneOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOneOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::organizations::v1::GetOneOrganizationRequest,::accounts::v1alpha1::organizations::v1::GetOneOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOrganization<BaseClass>::StreamedUpdateOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationRequest,::accounts::v1alpha1::organizations::v1::UpdateOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_DeleteOrganization<BaseClass>::StreamedDeleteOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest* request, ::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::organizations::v1::DeleteOrganizationRequest,::accounts::v1alpha1::organizations::v1::DeleteOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrganizationUserPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOrganizationUserPermissions() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOrganizationUserPermissions<BaseClass>::StreamedUpdateOrganizationUserPermissions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOrganizationUserPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrganizationUserPermissions(::grpc::ServerContext* context, const ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest* request, ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrganizationUserPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsRequest,::accounts::v1alpha1::organizations::v1::UpdateOrganizationUserPermissionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_ListOrganization<WithStreamedUnaryMethod_GetOneOrganization<WithStreamedUnaryMethod_UpdateOrganization<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_UpdateOrganizationUserPermissions<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_ListOrganization<WithStreamedUnaryMethod_GetOneOrganization<WithStreamedUnaryMethod_UpdateOrganization<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_UpdateOrganizationUserPermissions<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace organizations
}  // namespace v1alpha1
}  // namespace accounts


#endif  // GRPC_accounts_2fv1alpha1_2forganizations_2forganizations_5fapis_2eproto__INCLUDED
