// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/roles/roles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2froles_2froles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2froles_2froles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "accounts/v1alpha1/accounts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2fv1alpha1_2froles_2froles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2froles_2froles_2eproto;
namespace accounts {
namespace v1alpha1 {
namespace roles {
namespace v1 {
class CreateRoleRequest;
struct CreateRoleRequestDefaultTypeInternal;
extern CreateRoleRequestDefaultTypeInternal _CreateRoleRequest_default_instance_;
class CreateRoleResponse;
struct CreateRoleResponseDefaultTypeInternal;
extern CreateRoleResponseDefaultTypeInternal _CreateRoleResponse_default_instance_;
class DeleteRoleRequest;
struct DeleteRoleRequestDefaultTypeInternal;
extern DeleteRoleRequestDefaultTypeInternal _DeleteRoleRequest_default_instance_;
class DeleteRoleResponse;
struct DeleteRoleResponseDefaultTypeInternal;
extern DeleteRoleResponseDefaultTypeInternal _DeleteRoleResponse_default_instance_;
class GetOneRoleRequest;
struct GetOneRoleRequestDefaultTypeInternal;
extern GetOneRoleRequestDefaultTypeInternal _GetOneRoleRequest_default_instance_;
class GetOneRoleResponse;
struct GetOneRoleResponseDefaultTypeInternal;
extern GetOneRoleResponseDefaultTypeInternal _GetOneRoleResponse_default_instance_;
class GetRolesByOrgUserRequest;
struct GetRolesByOrgUserRequestDefaultTypeInternal;
extern GetRolesByOrgUserRequestDefaultTypeInternal _GetRolesByOrgUserRequest_default_instance_;
class GetRolesByOrgUserResponse;
struct GetRolesByOrgUserResponseDefaultTypeInternal;
extern GetRolesByOrgUserResponseDefaultTypeInternal _GetRolesByOrgUserResponse_default_instance_;
class GetRolesByUserRequest;
struct GetRolesByUserRequestDefaultTypeInternal;
extern GetRolesByUserRequestDefaultTypeInternal _GetRolesByUserRequest_default_instance_;
class GetRolesByUserResponse;
struct GetRolesByUserResponseDefaultTypeInternal;
extern GetRolesByUserResponseDefaultTypeInternal _GetRolesByUserResponse_default_instance_;
class ListRolesRequest;
struct ListRolesRequestDefaultTypeInternal;
extern ListRolesRequestDefaultTypeInternal _ListRolesRequest_default_instance_;
class ListRolesResponse;
struct ListRolesResponseDefaultTypeInternal;
extern ListRolesResponseDefaultTypeInternal _ListRolesResponse_default_instance_;
class UpdateRoleRequest;
struct UpdateRoleRequestDefaultTypeInternal;
extern UpdateRoleRequestDefaultTypeInternal _UpdateRoleRequest_default_instance_;
class UpdateRoleResponse;
struct UpdateRoleResponseDefaultTypeInternal;
extern UpdateRoleResponseDefaultTypeInternal _UpdateRoleResponse_default_instance_;
}  // namespace v1
}  // namespace roles
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> ::accounts::v1alpha1::roles::v1::CreateRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::CreateRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::CreateRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::CreateRoleResponse>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::DeleteRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::DeleteRoleResponse>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::GetOneRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::GetOneRoleResponse>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::GetRolesByUserRequest>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::ListRolesRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::ListRolesRequest>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::ListRolesResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::ListRolesResponse>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::UpdateRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::roles::v1::UpdateRoleResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accounts {
namespace v1alpha1 {
namespace roles {
namespace v1 {

// ===================================================================

class CreateRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.CreateRoleRequest) */ {
 public:
  inline CreateRoleRequest() : CreateRoleRequest(nullptr) {}
  ~CreateRoleRequest() override;
  explicit constexpr CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleRequest(const CreateRoleRequest& from);
  CreateRoleRequest(CreateRoleRequest&& from) noexcept
    : CreateRoleRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoleRequest& operator=(const CreateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRequest& operator=(CreateRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRequest*>(
               &_CreateRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateRoleRequest& a, CreateRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRequest* New() const final {
    return new CreateRoleRequest();
  }

  CreateRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.CreateRoleRequest";
  }
  protected:
  explicit CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionIdsFieldNumber = 6,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kTypePermissionFieldNumber = 5,
    kProjectIdFieldNumber = 3,
    kOrganizationIdFieldNumber = 4,
  };
  // repeated uint32 permission_ids = 6 [json_name = "permissionIds"];
  int permission_ids_size() const;
  private:
  int _internal_permission_ids_size() const;
  public:
  void clear_permission_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_permission_ids() const;
  void _internal_add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_permission_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_ids(int index) const;
  void set_permission_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      permission_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_permission_ids();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type_permission = 5 [json_name = "typePermission"];
  void clear_type_permission();
  const std::string& type_permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_permission();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_permission();
  void set_allocated_type_permission(std::string* type_permission);
  private:
  const std::string& _internal_type_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_permission(const std::string& value);
  std::string* _internal_mutable_type_permission();
  public:

  // uint32 project_id = 3 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.CreateRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > permission_ids_;
  mutable std::atomic<int> _permission_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_permission_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class UpdateRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.UpdateRoleRequest) */ {
 public:
  inline UpdateRoleRequest() : UpdateRoleRequest(nullptr) {}
  ~UpdateRoleRequest() override;
  explicit constexpr UpdateRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoleRequest(const UpdateRoleRequest& from);
  UpdateRoleRequest(UpdateRoleRequest&& from) noexcept
    : UpdateRoleRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRoleRequest& operator=(const UpdateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoleRequest& operator=(UpdateRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRoleRequest*>(
               &_UpdateRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateRoleRequest& a, UpdateRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoleRequest* New() const final {
    return new UpdateRoleRequest();
  }

  UpdateRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.UpdateRoleRequest";
  }
  protected:
  explicit UpdateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolFieldNumber = 2,
    kRolIdFieldNumber = 1,
  };
  // .accounts.v1alpha1.roles.v1.CreateRoleRequest rol = 2 [json_name = "rol"];
  bool has_rol() const;
  private:
  bool _internal_has_rol() const;
  public:
  void clear_rol();
  const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& rol() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::roles::v1::CreateRoleRequest* release_rol();
  ::accounts::v1alpha1::roles::v1::CreateRoleRequest* mutable_rol();
  void set_allocated_rol(::accounts::v1alpha1::roles::v1::CreateRoleRequest* rol);
  private:
  const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& _internal_rol() const;
  ::accounts::v1alpha1::roles::v1::CreateRoleRequest* _internal_mutable_rol();
  public:
  void unsafe_arena_set_allocated_rol(
      ::accounts::v1alpha1::roles::v1::CreateRoleRequest* rol);
  ::accounts::v1alpha1::roles::v1::CreateRoleRequest* unsafe_arena_release_rol();

  // uint32 rol_id = 1 [json_name = "rolId"];
  void clear_rol_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id() const;
  void set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rol_id() const;
  void _internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.UpdateRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::accounts::v1alpha1::roles::v1::CreateRoleRequest* rol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class GetOneRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.GetOneRoleRequest) */ {
 public:
  inline GetOneRoleRequest() : GetOneRoleRequest(nullptr) {}
  ~GetOneRoleRequest() override;
  explicit constexpr GetOneRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneRoleRequest(const GetOneRoleRequest& from);
  GetOneRoleRequest(GetOneRoleRequest&& from) noexcept
    : GetOneRoleRequest() {
    *this = ::std::move(from);
  }

  inline GetOneRoleRequest& operator=(const GetOneRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneRoleRequest& operator=(GetOneRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneRoleRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneRoleRequest*>(
               &_GetOneRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetOneRoleRequest& a, GetOneRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneRoleRequest* New() const final {
    return new GetOneRoleRequest();
  }

  GetOneRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.GetOneRoleRequest";
  }
  protected:
  explicit GetOneRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolIdFieldNumber = 1,
  };
  // uint32 rol_id = 1 [json_name = "rolId"];
  void clear_rol_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id() const;
  void set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rol_id() const;
  void _internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.GetOneRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class GetOneRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.GetOneRoleResponse) */ {
 public:
  inline GetOneRoleResponse() : GetOneRoleResponse(nullptr) {}
  ~GetOneRoleResponse() override;
  explicit constexpr GetOneRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneRoleResponse(const GetOneRoleResponse& from);
  GetOneRoleResponse(GetOneRoleResponse&& from) noexcept
    : GetOneRoleResponse() {
    *this = ::std::move(from);
  }

  inline GetOneRoleResponse& operator=(const GetOneRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneRoleResponse& operator=(GetOneRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneRoleResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneRoleResponse*>(
               &_GetOneRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetOneRoleResponse& a, GetOneRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneRoleResponse* New() const final {
    return new GetOneRoleResponse();
  }

  GetOneRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.GetOneRoleResponse";
  }
  protected:
  explicit GetOneRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 5,
    kNameFieldNumber = 2,
    kErrorFieldNumber = 7,
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 3,
    kProjectIdFieldNumber = 4,
    kIsAdminFieldNumber = 6,
  };
  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string error = 7 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 3 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_admin = 6 [json_name = "isAdmin"];
  void clear_is_admin();
  bool is_admin() const;
  void set_is_admin(bool value);
  private:
  bool _internal_is_admin() const;
  void _internal_set_is_admin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.GetOneRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  bool is_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.DeleteRoleRequest) */ {
 public:
  inline DeleteRoleRequest() : DeleteRoleRequest(nullptr) {}
  ~DeleteRoleRequest() override;
  explicit constexpr DeleteRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoleRequest(const DeleteRoleRequest& from);
  DeleteRoleRequest(DeleteRoleRequest&& from) noexcept
    : DeleteRoleRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRequest& operator=(const DeleteRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleRequest& operator=(DeleteRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRequest*>(
               &_DeleteRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteRoleRequest& a, DeleteRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRequest* New() const final {
    return new DeleteRoleRequest();
  }

  DeleteRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.DeleteRoleRequest";
  }
  protected:
  explicit DeleteRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolIdFieldNumber = 1,
  };
  // uint32 rol_id = 1 [json_name = "rolId"];
  void clear_rol_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id() const;
  void set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rol_id() const;
  void _internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.DeleteRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class ListRolesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.ListRolesRequest) */ {
 public:
  inline ListRolesRequest() : ListRolesRequest(nullptr) {}
  ~ListRolesRequest() override;
  explicit constexpr ListRolesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRolesRequest(const ListRolesRequest& from);
  ListRolesRequest(ListRolesRequest&& from) noexcept
    : ListRolesRequest() {
    *this = ::std::move(from);
  }

  inline ListRolesRequest& operator=(const ListRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRolesRequest& operator=(ListRolesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRolesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRolesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRolesRequest*>(
               &_ListRolesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListRolesRequest& a, ListRolesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRolesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRolesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRolesRequest* New() const final {
    return new ListRolesRequest();
  }

  ListRolesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRolesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRolesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRolesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRolesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.ListRolesRequest";
  }
  protected:
  explicit ListRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 2,
  };
  // uint32 project_id = 1 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.ListRolesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class ListRolesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.ListRolesResponse) */ {
 public:
  inline ListRolesResponse() : ListRolesResponse(nullptr) {}
  ~ListRolesResponse() override;
  explicit constexpr ListRolesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRolesResponse(const ListRolesResponse& from);
  ListRolesResponse(ListRolesResponse&& from) noexcept
    : ListRolesResponse() {
    *this = ::std::move(from);
  }

  inline ListRolesResponse& operator=(const ListRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRolesResponse& operator=(ListRolesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRolesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRolesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRolesResponse*>(
               &_ListRolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListRolesResponse& a, ListRolesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRolesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRolesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRolesResponse* New() const final {
    return new ListRolesResponse();
  }

  ListRolesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRolesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRolesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRolesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRolesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.ListRolesResponse";
  }
  protected:
  explicit ListRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Role roles = 1 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Role& _internal_roles(int index) const;
  ::accounts::v1alpha1::Role* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Role& roles(int index) const;
  ::accounts::v1alpha1::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
      roles() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.ListRolesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role > roles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.CreateRoleResponse) */ {
 public:
  inline CreateRoleResponse() : CreateRoleResponse(nullptr) {}
  ~CreateRoleResponse() override;
  explicit constexpr CreateRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleResponse(const CreateRoleResponse& from);
  CreateRoleResponse(CreateRoleResponse&& from) noexcept
    : CreateRoleResponse() {
    *this = ::std::move(from);
  }

  inline CreateRoleResponse& operator=(const CreateRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleResponse& operator=(CreateRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRoleResponse*>(
               &_CreateRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateRoleResponse& a, CreateRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleResponse* New() const final {
    return new CreateRoleResponse();
  }

  CreateRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.CreateRoleResponse";
  }
  protected:
  explicit CreateRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // uint32 id = 3 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.CreateRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class UpdateRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.UpdateRoleResponse) */ {
 public:
  inline UpdateRoleResponse() : UpdateRoleResponse(nullptr) {}
  ~UpdateRoleResponse() override;
  explicit constexpr UpdateRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoleResponse(const UpdateRoleResponse& from);
  UpdateRoleResponse(UpdateRoleResponse&& from) noexcept
    : UpdateRoleResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRoleResponse& operator=(const UpdateRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoleResponse& operator=(UpdateRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoleResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRoleResponse*>(
               &_UpdateRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateRoleResponse& a, UpdateRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoleResponse* New() const final {
    return new UpdateRoleResponse();
  }

  UpdateRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.UpdateRoleResponse";
  }
  protected:
  explicit UpdateRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.UpdateRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.DeleteRoleResponse) */ {
 public:
  inline DeleteRoleResponse() : DeleteRoleResponse(nullptr) {}
  ~DeleteRoleResponse() override;
  explicit constexpr DeleteRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoleResponse(const DeleteRoleResponse& from);
  DeleteRoleResponse(DeleteRoleResponse&& from) noexcept
    : DeleteRoleResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRoleResponse& operator=(const DeleteRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleResponse& operator=(DeleteRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoleResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleResponse*>(
               &_DeleteRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteRoleResponse& a, DeleteRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleResponse* New() const final {
    return new DeleteRoleResponse();
  }

  DeleteRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.DeleteRoleResponse";
  }
  protected:
  explicit DeleteRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.DeleteRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class GetRolesByUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.GetRolesByUserRequest) */ {
 public:
  inline GetRolesByUserRequest() : GetRolesByUserRequest(nullptr) {}
  ~GetRolesByUserRequest() override;
  explicit constexpr GetRolesByUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRolesByUserRequest(const GetRolesByUserRequest& from);
  GetRolesByUserRequest(GetRolesByUserRequest&& from) noexcept
    : GetRolesByUserRequest() {
    *this = ::std::move(from);
  }

  inline GetRolesByUserRequest& operator=(const GetRolesByUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRolesByUserRequest& operator=(GetRolesByUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRolesByUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRolesByUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetRolesByUserRequest*>(
               &_GetRolesByUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetRolesByUserRequest& a, GetRolesByUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRolesByUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRolesByUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRolesByUserRequest* New() const final {
    return new GetRolesByUserRequest();
  }

  GetRolesByUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRolesByUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRolesByUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRolesByUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRolesByUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.GetRolesByUserRequest";
  }
  protected:
  explicit GetRolesByUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.GetRolesByUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class GetRolesByUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.GetRolesByUserResponse) */ {
 public:
  inline GetRolesByUserResponse() : GetRolesByUserResponse(nullptr) {}
  ~GetRolesByUserResponse() override;
  explicit constexpr GetRolesByUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRolesByUserResponse(const GetRolesByUserResponse& from);
  GetRolesByUserResponse(GetRolesByUserResponse&& from) noexcept
    : GetRolesByUserResponse() {
    *this = ::std::move(from);
  }

  inline GetRolesByUserResponse& operator=(const GetRolesByUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRolesByUserResponse& operator=(GetRolesByUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRolesByUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRolesByUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetRolesByUserResponse*>(
               &_GetRolesByUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetRolesByUserResponse& a, GetRolesByUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRolesByUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRolesByUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRolesByUserResponse* New() const final {
    return new GetRolesByUserResponse();
  }

  GetRolesByUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRolesByUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRolesByUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRolesByUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRolesByUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.GetRolesByUserResponse";
  }
  protected:
  explicit GetRolesByUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationFieldNumber = 1,
    kProjectFieldNumber = 2,
  };
  // repeated .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  int organization_size() const;
  private:
  int _internal_organization_size() const;
  public:
  void clear_organization();
  ::accounts::v1alpha1::Organization* mutable_organization(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
      mutable_organization();
  private:
  const ::accounts::v1alpha1::Organization& _internal_organization(int index) const;
  ::accounts::v1alpha1::Organization* _internal_add_organization();
  public:
  const ::accounts::v1alpha1::Organization& organization(int index) const;
  ::accounts::v1alpha1::Organization* add_organization();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
      organization() const;

  // repeated .accounts.v1alpha1.Project project = 2 [json_name = "project"];
  int project_size() const;
  private:
  int _internal_project_size() const;
  public:
  void clear_project();
  ::accounts::v1alpha1::Project* mutable_project(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
      mutable_project();
  private:
  const ::accounts::v1alpha1::Project& _internal_project(int index) const;
  ::accounts::v1alpha1::Project* _internal_add_project();
  public:
  const ::accounts::v1alpha1::Project& project(int index) const;
  ::accounts::v1alpha1::Project* add_project();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
      project() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.GetRolesByUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization > organization_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project > project_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class GetRolesByOrgUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest) */ {
 public:
  inline GetRolesByOrgUserRequest() : GetRolesByOrgUserRequest(nullptr) {}
  ~GetRolesByOrgUserRequest() override;
  explicit constexpr GetRolesByOrgUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRolesByOrgUserRequest(const GetRolesByOrgUserRequest& from);
  GetRolesByOrgUserRequest(GetRolesByOrgUserRequest&& from) noexcept
    : GetRolesByOrgUserRequest() {
    *this = ::std::move(from);
  }

  inline GetRolesByOrgUserRequest& operator=(const GetRolesByOrgUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRolesByOrgUserRequest& operator=(GetRolesByOrgUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRolesByOrgUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRolesByOrgUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetRolesByOrgUserRequest*>(
               &_GetRolesByOrgUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetRolesByOrgUserRequest& a, GetRolesByOrgUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRolesByOrgUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRolesByOrgUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRolesByOrgUserRequest* New() const final {
    return new GetRolesByOrgUserRequest();
  }

  GetRolesByOrgUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRolesByOrgUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRolesByOrgUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRolesByOrgUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRolesByOrgUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest";
  }
  protected:
  explicit GetRolesByOrgUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 user_id = 3 [json_name = "userId"];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// -------------------------------------------------------------------

class GetRolesByOrgUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse) */ {
 public:
  inline GetRolesByOrgUserResponse() : GetRolesByOrgUserResponse(nullptr) {}
  ~GetRolesByOrgUserResponse() override;
  explicit constexpr GetRolesByOrgUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRolesByOrgUserResponse(const GetRolesByOrgUserResponse& from);
  GetRolesByOrgUserResponse(GetRolesByOrgUserResponse&& from) noexcept
    : GetRolesByOrgUserResponse() {
    *this = ::std::move(from);
  }

  inline GetRolesByOrgUserResponse& operator=(const GetRolesByOrgUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRolesByOrgUserResponse& operator=(GetRolesByOrgUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRolesByOrgUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRolesByOrgUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetRolesByOrgUserResponse*>(
               &_GetRolesByOrgUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetRolesByOrgUserResponse& a, GetRolesByOrgUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRolesByOrgUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRolesByOrgUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRolesByOrgUserResponse* New() const final {
    return new GetRolesByOrgUserResponse();
  }

  GetRolesByOrgUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRolesByOrgUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRolesByOrgUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRolesByOrgUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRolesByOrgUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse";
  }
  protected:
  explicit GetRolesByOrgUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationFieldNumber = 1,
    kProjectFieldNumber = 2,
  };
  // repeated .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
  int organization_size() const;
  private:
  int _internal_organization_size() const;
  public:
  void clear_organization();
  ::accounts::v1alpha1::Organization* mutable_organization(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
      mutable_organization();
  private:
  const ::accounts::v1alpha1::Organization& _internal_organization(int index) const;
  ::accounts::v1alpha1::Organization* _internal_add_organization();
  public:
  const ::accounts::v1alpha1::Organization& organization(int index) const;
  ::accounts::v1alpha1::Organization* add_organization();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
      organization() const;

  // repeated .accounts.v1alpha1.Project project = 2 [json_name = "project"];
  int project_size() const;
  private:
  int _internal_project_size() const;
  public:
  void clear_project();
  ::accounts::v1alpha1::Project* mutable_project(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
      mutable_project();
  private:
  const ::accounts::v1alpha1::Project& _internal_project(int index) const;
  ::accounts::v1alpha1::Project* _internal_add_project();
  public:
  const ::accounts::v1alpha1::Project& project(int index) const;
  ::accounts::v1alpha1::Project* add_project();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
      project() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization > organization_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project > project_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2froles_2froles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateRoleRequest

// string name = 1 [json_name = "name"];
inline void CreateRoleRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleRequest.name)
}
inline std::string* CreateRoleRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.CreateRoleRequest.name)
  return _s;
}
inline const std::string& CreateRoleRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateRoleRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.CreateRoleRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.CreateRoleRequest.name)
}

// string description = 2 [json_name = "description"];
inline void CreateRoleRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreateRoleRequest::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleRequest.description)
}
inline std::string* CreateRoleRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.CreateRoleRequest.description)
  return _s;
}
inline const std::string& CreateRoleRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateRoleRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.CreateRoleRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.CreateRoleRequest.description)
}

// uint32 project_id = 3 [json_name = "projectId"];
inline void CreateRoleRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleRequest.project_id)
  return _internal_project_id();
}
inline void CreateRoleRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void CreateRoleRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleRequest.project_id)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void CreateRoleRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleRequest.organization_id)
  return _internal_organization_id();
}
inline void CreateRoleRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void CreateRoleRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleRequest.organization_id)
}

// string type_permission = 5 [json_name = "typePermission"];
inline void CreateRoleRequest::clear_type_permission() {
  type_permission_.ClearToEmpty();
}
inline const std::string& CreateRoleRequest::type_permission() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleRequest.type_permission)
  return _internal_type_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleRequest::set_type_permission(ArgT0&& arg0, ArgT... args) {
 
 type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleRequest.type_permission)
}
inline std::string* CreateRoleRequest::mutable_type_permission() {
  std::string* _s = _internal_mutable_type_permission();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.CreateRoleRequest.type_permission)
  return _s;
}
inline const std::string& CreateRoleRequest::_internal_type_permission() const {
  return type_permission_.Get();
}
inline void CreateRoleRequest::_internal_set_type_permission(const std::string& value) {
  
  type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::_internal_mutable_type_permission() {
  
  return type_permission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::release_type_permission() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.CreateRoleRequest.type_permission)
  return type_permission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleRequest::set_allocated_type_permission(std::string* type_permission) {
  if (type_permission != nullptr) {
    
  } else {
    
  }
  type_permission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_permission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.CreateRoleRequest.type_permission)
}

// repeated uint32 permission_ids = 6 [json_name = "permissionIds"];
inline int CreateRoleRequest::_internal_permission_ids_size() const {
  return permission_ids_.size();
}
inline int CreateRoleRequest::permission_ids_size() const {
  return _internal_permission_ids_size();
}
inline void CreateRoleRequest::clear_permission_ids() {
  permission_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::_internal_permission_ids(int index) const {
  return permission_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::permission_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleRequest.permission_ids)
  return _internal_permission_ids(index);
}
inline void CreateRoleRequest::set_permission_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permission_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleRequest.permission_ids)
}
inline void CreateRoleRequest::_internal_add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permission_ids_.Add(value);
}
inline void CreateRoleRequest::add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_permission_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.roles.v1.CreateRoleRequest.permission_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateRoleRequest::_internal_permission_ids() const {
  return permission_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateRoleRequest::permission_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.roles.v1.CreateRoleRequest.permission_ids)
  return _internal_permission_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateRoleRequest::_internal_mutable_permission_ids() {
  return &permission_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateRoleRequest::mutable_permission_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.roles.v1.CreateRoleRequest.permission_ids)
  return _internal_mutable_permission_ids();
}

// -------------------------------------------------------------------

// UpdateRoleRequest

// uint32 rol_id = 1 [json_name = "rolId"];
inline void UpdateRoleRequest::clear_rol_id() {
  rol_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateRoleRequest::_internal_rol_id() const {
  return rol_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateRoleRequest::rol_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.UpdateRoleRequest.rol_id)
  return _internal_rol_id();
}
inline void UpdateRoleRequest::_internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rol_id_ = value;
}
inline void UpdateRoleRequest::set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rol_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.UpdateRoleRequest.rol_id)
}

// .accounts.v1alpha1.roles.v1.CreateRoleRequest rol = 2 [json_name = "rol"];
inline bool UpdateRoleRequest::_internal_has_rol() const {
  return this != internal_default_instance() && rol_ != nullptr;
}
inline bool UpdateRoleRequest::has_rol() const {
  return _internal_has_rol();
}
inline void UpdateRoleRequest::clear_rol() {
  if (GetArenaForAllocation() == nullptr && rol_ != nullptr) {
    delete rol_;
  }
  rol_ = nullptr;
}
inline const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& UpdateRoleRequest::_internal_rol() const {
  const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* p = rol_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::roles::v1::CreateRoleRequest&>(
      ::accounts::v1alpha1::roles::v1::_CreateRoleRequest_default_instance_);
}
inline const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& UpdateRoleRequest::rol() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.UpdateRoleRequest.rol)
  return _internal_rol();
}
inline void UpdateRoleRequest::unsafe_arena_set_allocated_rol(
    ::accounts::v1alpha1::roles::v1::CreateRoleRequest* rol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rol_);
  }
  rol_ = rol;
  if (rol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.roles.v1.UpdateRoleRequest.rol)
}
inline ::accounts::v1alpha1::roles::v1::CreateRoleRequest* UpdateRoleRequest::release_rol() {
  
  ::accounts::v1alpha1::roles::v1::CreateRoleRequest* temp = rol_;
  rol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::roles::v1::CreateRoleRequest* UpdateRoleRequest::unsafe_arena_release_rol() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.UpdateRoleRequest.rol)
  
  ::accounts::v1alpha1::roles::v1::CreateRoleRequest* temp = rol_;
  rol_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::roles::v1::CreateRoleRequest* UpdateRoleRequest::_internal_mutable_rol() {
  
  if (rol_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::roles::v1::CreateRoleRequest>(GetArenaForAllocation());
    rol_ = p;
  }
  return rol_;
}
inline ::accounts::v1alpha1::roles::v1::CreateRoleRequest* UpdateRoleRequest::mutable_rol() {
  ::accounts::v1alpha1::roles::v1::CreateRoleRequest* _msg = _internal_mutable_rol();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.UpdateRoleRequest.rol)
  return _msg;
}
inline void UpdateRoleRequest::set_allocated_rol(::accounts::v1alpha1::roles::v1::CreateRoleRequest* rol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rol_;
  }
  if (rol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::roles::v1::CreateRoleRequest>::GetOwningArena(rol);
    if (message_arena != submessage_arena) {
      rol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rol, submessage_arena);
    }
    
  } else {
    
  }
  rol_ = rol;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.UpdateRoleRequest.rol)
}

// -------------------------------------------------------------------

// GetOneRoleRequest

// uint32 rol_id = 1 [json_name = "rolId"];
inline void GetOneRoleRequest::clear_rol_id() {
  rol_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleRequest::_internal_rol_id() const {
  return rol_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleRequest::rol_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleRequest.rol_id)
  return _internal_rol_id();
}
inline void GetOneRoleRequest::_internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rol_id_ = value;
}
inline void GetOneRoleRequest::set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rol_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetOneRoleRequest.rol_id)
}

// -------------------------------------------------------------------

// GetOneRoleResponse

// uint32 id = 1 [json_name = "id"];
inline void GetOneRoleResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleResponse.id)
  return _internal_id();
}
inline void GetOneRoleResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneRoleResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetOneRoleResponse.id)
}

// string name = 2 [json_name = "name"];
inline void GetOneRoleResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOneRoleResponse::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneRoleResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetOneRoleResponse.name)
}
inline std::string* GetOneRoleResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetOneRoleResponse.name)
  return _s;
}
inline const std::string& GetOneRoleResponse::_internal_name() const {
  return name_.Get();
}
inline void GetOneRoleResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneRoleResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneRoleResponse::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.GetOneRoleResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneRoleResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.GetOneRoleResponse.name)
}

// uint32 organization_id = 3 [json_name = "organizationId"];
inline void GetOneRoleResponse::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleResponse.organization_id)
  return _internal_organization_id();
}
inline void GetOneRoleResponse::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void GetOneRoleResponse::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetOneRoleResponse.organization_id)
}

// uint32 project_id = 4 [json_name = "projectId"];
inline void GetOneRoleResponse::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleResponse.project_id)
  return _internal_project_id();
}
inline void GetOneRoleResponse::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void GetOneRoleResponse::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetOneRoleResponse.project_id)
}

// repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
inline int GetOneRoleResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int GetOneRoleResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline ::accounts::v1alpha1::Permission* GetOneRoleResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetOneRoleResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
GetOneRoleResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.roles.v1.GetOneRoleResponse.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& GetOneRoleResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& GetOneRoleResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleResponse.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* GetOneRoleResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* GetOneRoleResponse::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.roles.v1.GetOneRoleResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
GetOneRoleResponse::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.roles.v1.GetOneRoleResponse.permissions)
  return permissions_;
}

// bool is_admin = 6 [json_name = "isAdmin"];
inline void GetOneRoleResponse::clear_is_admin() {
  is_admin_ = false;
}
inline bool GetOneRoleResponse::_internal_is_admin() const {
  return is_admin_;
}
inline bool GetOneRoleResponse::is_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleResponse.is_admin)
  return _internal_is_admin();
}
inline void GetOneRoleResponse::_internal_set_is_admin(bool value) {
  
  is_admin_ = value;
}
inline void GetOneRoleResponse::set_is_admin(bool value) {
  _internal_set_is_admin(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetOneRoleResponse.is_admin)
}

// string error = 7 [json_name = "error"];
inline void GetOneRoleResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& GetOneRoleResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetOneRoleResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneRoleResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetOneRoleResponse.error)
}
inline std::string* GetOneRoleResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetOneRoleResponse.error)
  return _s;
}
inline const std::string& GetOneRoleResponse::_internal_error() const {
  return error_.Get();
}
inline void GetOneRoleResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneRoleResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneRoleResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.GetOneRoleResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneRoleResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.GetOneRoleResponse.error)
}

// -------------------------------------------------------------------

// DeleteRoleRequest

// uint32 rol_id = 1 [json_name = "rolId"];
inline void DeleteRoleRequest::clear_rol_id() {
  rol_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRoleRequest::_internal_rol_id() const {
  return rol_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRoleRequest::rol_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.DeleteRoleRequest.rol_id)
  return _internal_rol_id();
}
inline void DeleteRoleRequest::_internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rol_id_ = value;
}
inline void DeleteRoleRequest::set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rol_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.DeleteRoleRequest.rol_id)
}

// -------------------------------------------------------------------

// ListRolesRequest

// uint32 project_id = 1 [json_name = "projectId"];
inline void ListRolesRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.ListRolesRequest.project_id)
  return _internal_project_id();
}
inline void ListRolesRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListRolesRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.ListRolesRequest.project_id)
}

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void ListRolesRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.ListRolesRequest.organization_id)
  return _internal_organization_id();
}
inline void ListRolesRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListRolesRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.ListRolesRequest.organization_id)
}

// -------------------------------------------------------------------

// ListRolesResponse

// repeated .accounts.v1alpha1.Role roles = 1 [json_name = "roles"];
inline int ListRolesResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int ListRolesResponse::roles_size() const {
  return _internal_roles_size();
}
inline ::accounts::v1alpha1::Role* ListRolesResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.ListRolesResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
ListRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.roles.v1.ListRolesResponse.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Role& ListRolesResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Role& ListRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.ListRolesResponse.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Role* ListRolesResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Role* ListRolesResponse::add_roles() {
  ::accounts::v1alpha1::Role* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.roles.v1.ListRolesResponse.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
ListRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.roles.v1.ListRolesResponse.roles)
  return roles_;
}

// -------------------------------------------------------------------

// CreateRoleResponse

// string msg = 1 [json_name = "msg"];
inline void CreateRoleResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateRoleResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleResponse.msg)
}
inline std::string* CreateRoleResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.CreateRoleResponse.msg)
  return _s;
}
inline const std::string& CreateRoleResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateRoleResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.CreateRoleResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.CreateRoleResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateRoleResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateRoleResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleResponse.error)
}
inline std::string* CreateRoleResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.CreateRoleResponse.error)
  return _s;
}
inline const std::string& CreateRoleResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateRoleResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.CreateRoleResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.CreateRoleResponse.error)
}

// uint32 id = 3 [json_name = "id"];
inline void CreateRoleResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.CreateRoleResponse.id)
  return _internal_id();
}
inline void CreateRoleResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CreateRoleResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.CreateRoleResponse.id)
}

// -------------------------------------------------------------------

// UpdateRoleResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateRoleResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateRoleResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.UpdateRoleResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRoleResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.UpdateRoleResponse.msg)
}
inline std::string* UpdateRoleResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.UpdateRoleResponse.msg)
  return _s;
}
inline const std::string& UpdateRoleResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateRoleResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.UpdateRoleResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRoleResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.UpdateRoleResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateRoleResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateRoleResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.UpdateRoleResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRoleResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.UpdateRoleResponse.error)
}
inline std::string* UpdateRoleResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.UpdateRoleResponse.error)
  return _s;
}
inline const std::string& UpdateRoleResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateRoleResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.UpdateRoleResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRoleResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.UpdateRoleResponse.error)
}

// -------------------------------------------------------------------

// DeleteRoleResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteRoleResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteRoleResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.DeleteRoleResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRoleResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.DeleteRoleResponse.msg)
}
inline std::string* DeleteRoleResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.DeleteRoleResponse.msg)
  return _s;
}
inline const std::string& DeleteRoleResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteRoleResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.DeleteRoleResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRoleResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.DeleteRoleResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteRoleResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteRoleResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.DeleteRoleResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRoleResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.DeleteRoleResponse.error)
}
inline std::string* DeleteRoleResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.DeleteRoleResponse.error)
  return _s;
}
inline const std::string& DeleteRoleResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteRoleResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.DeleteRoleResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRoleResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.DeleteRoleResponse.error)
}

// -------------------------------------------------------------------

// GetRolesByUserRequest

// string user_id = 1 [json_name = "userId"];
inline void GetRolesByUserRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& GetRolesByUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRolesByUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetRolesByUserRequest.user_id)
}
inline std::string* GetRolesByUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetRolesByUserRequest.user_id)
  return _s;
}
inline const std::string& GetRolesByUserRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetRolesByUserRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRolesByUserRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRolesByUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.roles.v1.GetRolesByUserRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRolesByUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.roles.v1.GetRolesByUserRequest.user_id)
}

// -------------------------------------------------------------------

// GetRolesByUserResponse

// repeated .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
inline int GetRolesByUserResponse::_internal_organization_size() const {
  return organization_.size();
}
inline int GetRolesByUserResponse::organization_size() const {
  return _internal_organization_size();
}
inline ::accounts::v1alpha1::Organization* GetRolesByUserResponse::mutable_organization(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.organization)
  return organization_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
GetRolesByUserResponse::mutable_organization() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.organization)
  return &organization_;
}
inline const ::accounts::v1alpha1::Organization& GetRolesByUserResponse::_internal_organization(int index) const {
  return organization_.Get(index);
}
inline const ::accounts::v1alpha1::Organization& GetRolesByUserResponse::organization(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.organization)
  return _internal_organization(index);
}
inline ::accounts::v1alpha1::Organization* GetRolesByUserResponse::_internal_add_organization() {
  return organization_.Add();
}
inline ::accounts::v1alpha1::Organization* GetRolesByUserResponse::add_organization() {
  ::accounts::v1alpha1::Organization* _add = _internal_add_organization();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.organization)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
GetRolesByUserResponse::organization() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.organization)
  return organization_;
}

// repeated .accounts.v1alpha1.Project project = 2 [json_name = "project"];
inline int GetRolesByUserResponse::_internal_project_size() const {
  return project_.size();
}
inline int GetRolesByUserResponse::project_size() const {
  return _internal_project_size();
}
inline ::accounts::v1alpha1::Project* GetRolesByUserResponse::mutable_project(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.project)
  return project_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
GetRolesByUserResponse::mutable_project() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.project)
  return &project_;
}
inline const ::accounts::v1alpha1::Project& GetRolesByUserResponse::_internal_project(int index) const {
  return project_.Get(index);
}
inline const ::accounts::v1alpha1::Project& GetRolesByUserResponse::project(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.project)
  return _internal_project(index);
}
inline ::accounts::v1alpha1::Project* GetRolesByUserResponse::_internal_add_project() {
  return project_.Add();
}
inline ::accounts::v1alpha1::Project* GetRolesByUserResponse::add_project() {
  ::accounts::v1alpha1::Project* _add = _internal_add_project();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.project)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
GetRolesByUserResponse::project() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.roles.v1.GetRolesByUserResponse.project)
  return project_;
}

// -------------------------------------------------------------------

// GetRolesByOrgUserRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void GetRolesByOrgUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRolesByOrgUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRolesByOrgUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest.organization_id)
  return _internal_organization_id();
}
inline void GetRolesByOrgUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void GetRolesByOrgUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest.organization_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void GetRolesByOrgUserRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRolesByOrgUserRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRolesByOrgUserRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest.project_id)
  return _internal_project_id();
}
inline void GetRolesByOrgUserRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void GetRolesByOrgUserRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest.project_id)
}

// uint32 user_id = 3 [json_name = "userId"];
inline void GetRolesByOrgUserRequest::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRolesByOrgUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRolesByOrgUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest.user_id)
  return _internal_user_id();
}
inline void GetRolesByOrgUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void GetRolesByOrgUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.roles.v1.GetRolesByOrgUserRequest.user_id)
}

// -------------------------------------------------------------------

// GetRolesByOrgUserResponse

// repeated .accounts.v1alpha1.Organization organization = 1 [json_name = "organization"];
inline int GetRolesByOrgUserResponse::_internal_organization_size() const {
  return organization_.size();
}
inline int GetRolesByOrgUserResponse::organization_size() const {
  return _internal_organization_size();
}
inline ::accounts::v1alpha1::Organization* GetRolesByOrgUserResponse::mutable_organization(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.organization)
  return organization_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
GetRolesByOrgUserResponse::mutable_organization() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.organization)
  return &organization_;
}
inline const ::accounts::v1alpha1::Organization& GetRolesByOrgUserResponse::_internal_organization(int index) const {
  return organization_.Get(index);
}
inline const ::accounts::v1alpha1::Organization& GetRolesByOrgUserResponse::organization(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.organization)
  return _internal_organization(index);
}
inline ::accounts::v1alpha1::Organization* GetRolesByOrgUserResponse::_internal_add_organization() {
  return organization_.Add();
}
inline ::accounts::v1alpha1::Organization* GetRolesByOrgUserResponse::add_organization() {
  ::accounts::v1alpha1::Organization* _add = _internal_add_organization();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.organization)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
GetRolesByOrgUserResponse::organization() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.organization)
  return organization_;
}

// repeated .accounts.v1alpha1.Project project = 2 [json_name = "project"];
inline int GetRolesByOrgUserResponse::_internal_project_size() const {
  return project_.size();
}
inline int GetRolesByOrgUserResponse::project_size() const {
  return _internal_project_size();
}
inline ::accounts::v1alpha1::Project* GetRolesByOrgUserResponse::mutable_project(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.project)
  return project_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
GetRolesByOrgUserResponse::mutable_project() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.project)
  return &project_;
}
inline const ::accounts::v1alpha1::Project& GetRolesByOrgUserResponse::_internal_project(int index) const {
  return project_.Get(index);
}
inline const ::accounts::v1alpha1::Project& GetRolesByOrgUserResponse::project(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.project)
  return _internal_project(index);
}
inline ::accounts::v1alpha1::Project* GetRolesByOrgUserResponse::_internal_add_project() {
  return project_.Add();
}
inline ::accounts::v1alpha1::Project* GetRolesByOrgUserResponse::add_project() {
  ::accounts::v1alpha1::Project* _add = _internal_add_project();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.project)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
GetRolesByOrgUserResponse::project() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.roles.v1.GetRolesByOrgUserResponse.project)
  return project_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace roles
}  // namespace v1alpha1
}  // namespace accounts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2froles_2froles_2eproto
