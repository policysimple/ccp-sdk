// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/roles/roles_api.proto

#include "accounts/v1alpha1/roles/roles_api.pb.h"
#include "accounts/v1alpha1/roles/roles_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {
namespace roles {
namespace v1 {

static const char* RoleService_method_names[] = {
  "/accounts.v1alpha1.roles.v1.RoleService/CreateRole",
  "/accounts.v1alpha1.roles.v1.RoleService/ListRoles",
  "/accounts.v1alpha1.roles.v1.RoleService/UpdateRole",
  "/accounts.v1alpha1.roles.v1.RoleService/GetOneRole",
  "/accounts.v1alpha1.roles.v1.RoleService/DeleteRole",
  "/accounts.v1alpha1.roles.v1.RoleService/GetRolesByUser",
  "/accounts.v1alpha1.roles.v1.RoleService/GetRolesByOrgUser",
};

std::unique_ptr< RoleService::Stub> RoleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RoleService::Stub> stub(new RoleService::Stub(channel));
  return stub;
}

RoleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateRole_(RoleService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRoles_(RoleService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRole_(RoleService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneRole_(RoleService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRole_(RoleService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesByUser_(RoleService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesByOrgUser_(RoleService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RoleService::Stub::CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRole_, context, request, response);
}

void RoleService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>* RoleService::Stub::AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>* RoleService::Stub::PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, false);
}

::grpc::Status RoleService::Stub::ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListRoles_, context, request, response);
}

void RoleService::Stub::experimental_async::ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListRoles_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>* RoleService::Stub::AsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::ListRolesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>* RoleService::Stub::PrepareAsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::ListRolesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoles_, context, request, false);
}

::grpc::Status RoleService::Stub::UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateRole_, context, request, response);
}

void RoleService::Stub::experimental_async::UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* RoleService::Stub::AsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* RoleService::Stub::PrepareAsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRole_, context, request, false);
}

::grpc::Status RoleService::Stub::GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneRole_, context, request, response);
}

void RoleService::Stub::experimental_async::GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* RoleService::Stub::AsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>::Create(channel_.get(), cq, rpcmethod_GetOneRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* RoleService::Stub::PrepareAsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>::Create(channel_.get(), cq, rpcmethod_GetOneRole_, context, request, false);
}

::grpc::Status RoleService::Stub::DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRole_, context, request, response);
}

void RoleService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* RoleService::Stub::AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* RoleService::Stub::PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, false);
}

::grpc::Status RoleService::Stub::GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRolesByUser_, context, request, response);
}

void RoleService::Stub::experimental_async::GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRolesByUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* RoleService::Stub::AsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>::Create(channel_.get(), cq, rpcmethod_GetRolesByUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* RoleService::Stub::PrepareAsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>::Create(channel_.get(), cq, rpcmethod_GetRolesByUser_, context, request, false);
}

::grpc::Status RoleService::Stub::GetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRolesByOrgUser_, context, request, response);
}

void RoleService::Stub::experimental_async::GetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRolesByOrgUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* RoleService::Stub::AsyncGetRolesByOrgUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>::Create(channel_.get(), cq, rpcmethod_GetRolesByOrgUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* RoleService::Stub::PrepareAsyncGetRolesByOrgUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>::Create(channel_.get(), cq, rpcmethod_GetRolesByOrgUser_, context, request, false);
}

RoleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoleService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoleService::Service, ::accounts::v1alpha1::roles::v1::CreateRoleRequest, ::accounts::v1alpha1::roles::v1::CreateRoleResponse>(
          std::mem_fn(&RoleService::Service::CreateRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoleService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoleService::Service, ::accounts::v1alpha1::roles::v1::ListRolesRequest, ::accounts::v1alpha1::roles::v1::ListRolesResponse>(
          std::mem_fn(&RoleService::Service::ListRoles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoleService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoleService::Service, ::accounts::v1alpha1::roles::v1::UpdateRoleRequest, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>(
          std::mem_fn(&RoleService::Service::UpdateRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoleService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoleService::Service, ::accounts::v1alpha1::roles::v1::GetOneRoleRequest, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>(
          std::mem_fn(&RoleService::Service::GetOneRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoleService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoleService::Service, ::accounts::v1alpha1::roles::v1::DeleteRoleRequest, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>(
          std::mem_fn(&RoleService::Service::DeleteRole), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoleService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoleService::Service, ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>(
          std::mem_fn(&RoleService::Service::GetRolesByUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoleService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoleService::Service, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>(
          std::mem_fn(&RoleService::Service::GetRolesByOrgUser), this)));
}

RoleService::Service::~Service() {
}

::grpc::Status RoleService::Service::CreateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoleService::Service::ListRoles(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoleService::Service::UpdateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoleService::Service::GetOneRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoleService::Service::DeleteRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoleService::Service::GetRolesByUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoleService::Service::GetRolesByOrgUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1
}  // namespace roles
}  // namespace v1

