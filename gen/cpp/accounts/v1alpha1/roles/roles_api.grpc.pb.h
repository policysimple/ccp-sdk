// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/roles/roles_api.proto
#ifndef GRPC_accounts_2fv1alpha1_2froles_2froles_5fapi_2eproto__INCLUDED
#define GRPC_accounts_2fv1alpha1_2froles_2froles_5fapi_2eproto__INCLUDED

#include "accounts/v1alpha1/roles/roles_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace accounts {
namespace v1alpha1 {
namespace roles {
namespace v1 {

class RoleService final {
 public:
  static constexpr char const* service_full_name() {
    return "accounts.v1alpha1.roles.v1.RoleService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>> AsyncCreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::ListRolesResponse>> AsyncListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::ListRolesResponse>>(AsyncListRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::ListRolesResponse>> PrepareAsyncListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::ListRolesResponse>>(PrepareAsyncListRolesRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>> AsyncUpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>>(AsyncUpdateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>> PrepareAsyncUpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>>(PrepareAsyncUpdateRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>> AsyncGetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>>(AsyncGetOneRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>> PrepareAsyncGetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>>(PrepareAsyncGetOneRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>> AsyncDeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    // Users
    virtual ::grpc::Status GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>> AsyncGetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>>(AsyncGetRolesByUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>> PrepareAsyncGetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>>(PrepareAsyncGetRolesByUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>> AsyncGetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>>(AsyncGetRolesByOrgUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>> PrepareAsyncGetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>>(PrepareAsyncGetRolesByOrgUserRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Users
      virtual void GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::ListRolesResponse>* AsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::ListRolesResponse>* PrepareAsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* AsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* PrepareAsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* AsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* PrepareAsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* AsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* PrepareAsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* AsyncGetRolesByOrgUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* PrepareAsyncGetRolesByOrgUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>> AsyncCreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    ::grpc::Status ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>> AsyncListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>>(AsyncListRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>> PrepareAsyncListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>>(PrepareAsyncListRolesRaw(context, request, cq));
    }
    ::grpc::Status UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>> AsyncUpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>>(AsyncUpdateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>> PrepareAsyncUpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>>(PrepareAsyncUpdateRoleRaw(context, request, cq));
    }
    ::grpc::Status GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>> AsyncGetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>>(AsyncGetOneRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>> PrepareAsyncGetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>>(PrepareAsyncGetOneRoleRaw(context, request, cq));
    }
    ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>> AsyncDeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    ::grpc::Status GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>> AsyncGetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>>(AsyncGetRolesByUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>> PrepareAsyncGetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>>(PrepareAsyncGetRolesByUserRaw(context, request, cq));
    }
    ::grpc::Status GetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>> AsyncGetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>>(AsyncGetRolesByOrgUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>> PrepareAsyncGetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>>(PrepareAsyncGetRolesByOrgUserRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response, std::function<void(::grpc::Status)>) override;
      void ListRoles(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOneRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRole(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRolesByUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRolesByOrgUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>* AsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::ListRolesResponse>* PrepareAsyncListRolesRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* AsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* PrepareAsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* AsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* PrepareAsyncGetOneRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* AsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* PrepareAsyncGetRolesByUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* AsyncGetRolesByOrgUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* PrepareAsyncGetRolesByOrgUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRole_;
    const ::grpc::internal::RpcMethod rpcmethod_ListRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRole_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOneRole_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRole_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRolesByUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRolesByOrgUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response);
    virtual ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response);
    virtual ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response);
    virtual ::grpc::Status GetOneRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response);
    virtual ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response);
    // Users
    virtual ::grpc::Status GetRolesByUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response);
    virtual ::grpc::Status GetRolesByOrgUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateRole() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::roles::v1::CreateRoleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListRoles() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRoles(::grpc::ServerContext* context, ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::roles::v1::ListRolesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateRole() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRole(::grpc::ServerContext* context, ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOneRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOneRole() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetOneRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneRole(::grpc::ServerContext* context, ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteRole() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRolesByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRolesByUser() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetRolesByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesByUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesByUser(::grpc::ServerContext* context, ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRolesByOrgUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRolesByOrgUser() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetRolesByOrgUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesByOrgUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesByOrgUser(::grpc::ServerContext* context, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateRole<WithAsyncMethod_ListRoles<WithAsyncMethod_UpdateRole<WithAsyncMethod_GetOneRole<WithAsyncMethod_DeleteRole<WithAsyncMethod_GetRolesByUser<WithAsyncMethod_GetRolesByOrgUser<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateRole() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListRoles() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateRole() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOneRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOneRole() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetOneRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteRole() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRolesByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRolesByUser() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetRolesByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesByUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRolesByOrgUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRolesByOrgUser() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetRolesByOrgUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesByOrgUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateRole() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListRoles() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRoles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateRole() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOneRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOneRole() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetOneRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteRole() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRolesByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRolesByUser() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetRolesByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesByUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesByUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRolesByOrgUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRolesByOrgUser() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetRolesByOrgUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesByOrgUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesByOrgUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateRole() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::roles::v1::CreateRoleRequest, ::accounts::v1alpha1::roles::v1::CreateRoleResponse>(std::bind(&WithStreamedUnaryMethod_CreateRole<BaseClass>::StreamedCreateRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::CreateRoleRequest* request, ::accounts::v1alpha1::roles::v1::CreateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::roles::v1::CreateRoleRequest,::accounts::v1alpha1::roles::v1::CreateRoleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListRoles() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::roles::v1::ListRolesRequest, ::accounts::v1alpha1::roles::v1::ListRolesResponse>(std::bind(&WithStreamedUnaryMethod_ListRoles<BaseClass>::StreamedListRoles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::ListRolesRequest* request, ::accounts::v1alpha1::roles::v1::ListRolesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::roles::v1::ListRolesRequest,::accounts::v1alpha1::roles::v1::ListRolesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateRole() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::roles::v1::UpdateRoleRequest, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse>(std::bind(&WithStreamedUnaryMethod_UpdateRole<BaseClass>::StreamedUpdateRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::UpdateRoleRequest* request, ::accounts::v1alpha1::roles::v1::UpdateRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::roles::v1::UpdateRoleRequest,::accounts::v1alpha1::roles::v1::UpdateRoleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOneRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOneRole() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::roles::v1::GetOneRoleRequest, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse>(std::bind(&WithStreamedUnaryMethod_GetOneRole<BaseClass>::StreamedGetOneRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOneRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOneRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetOneRoleRequest* request, ::accounts::v1alpha1::roles::v1::GetOneRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOneRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::roles::v1::GetOneRoleRequest,::accounts::v1alpha1::roles::v1::GetOneRoleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteRole() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::roles::v1::DeleteRoleRequest, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse>(std::bind(&WithStreamedUnaryMethod_DeleteRole<BaseClass>::StreamedDeleteRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::DeleteRoleRequest* request, ::accounts::v1alpha1::roles::v1::DeleteRoleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::roles::v1::DeleteRoleRequest,::accounts::v1alpha1::roles::v1::DeleteRoleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRolesByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRolesByUser() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>(std::bind(&WithStreamedUnaryMethod_GetRolesByUser<BaseClass>::StreamedGetRolesByUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRolesByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRolesByUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRolesByUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::roles::v1::GetRolesByUserRequest,::accounts::v1alpha1::roles::v1::GetRolesByUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRolesByOrgUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRolesByOrgUser() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>(std::bind(&WithStreamedUnaryMethod_GetRolesByOrgUser<BaseClass>::StreamedGetRolesByOrgUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRolesByOrgUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRolesByOrgUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest* request, ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRolesByOrgUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounts::v1alpha1::roles::v1::GetRolesByOrgUserRequest,::accounts::v1alpha1::roles::v1::GetRolesByOrgUserResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_ListRoles<WithStreamedUnaryMethod_UpdateRole<WithStreamedUnaryMethod_GetOneRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_GetRolesByUser<WithStreamedUnaryMethod_GetRolesByOrgUser<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_ListRoles<WithStreamedUnaryMethod_UpdateRole<WithStreamedUnaryMethod_GetOneRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_GetRolesByUser<WithStreamedUnaryMethod_GetRolesByOrgUser<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace roles
}  // namespace v1alpha1
}  // namespace accounts


#endif  // GRPC_accounts_2fv1alpha1_2froles_2froles_5fapi_2eproto__INCLUDED
