// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/tokens/tokens.proto

#include "accounts/v1alpha1/tokens/tokens.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace accounts {
namespace v1alpha1 {
namespace tokens {
namespace v1 {
constexpr GetOneTokenCCPRequest::GetOneTokenCCPRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetOneTokenCCPRequestDefaultTypeInternal {
  constexpr GetOneTokenCCPRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneTokenCCPRequestDefaultTypeInternal() {}
  union {
    GetOneTokenCCPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneTokenCCPRequestDefaultTypeInternal _GetOneTokenCCPRequest_default_instance_;
constexpr GetOneTokenCCPResponse::GetOneTokenCCPResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_dex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , email_verified_(false){}
struct GetOneTokenCCPResponseDefaultTypeInternal {
  constexpr GetOneTokenCCPResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneTokenCCPResponseDefaultTypeInternal() {}
  union {
    GetOneTokenCCPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneTokenCCPResponseDefaultTypeInternal _GetOneTokenCCPResponse_default_instance_;
constexpr CreateTokenCCPRequest::CreateTokenCCPRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_dex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateTokenCCPRequestDefaultTypeInternal {
  constexpr CreateTokenCCPRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTokenCCPRequestDefaultTypeInternal() {}
  union {
    CreateTokenCCPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTokenCCPRequestDefaultTypeInternal _CreateTokenCCPRequest_default_instance_;
constexpr CreateTokenCCPResponse::CreateTokenCCPResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_ccp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_expiration_mfa_(int64_t{0}){}
struct CreateTokenCCPResponseDefaultTypeInternal {
  constexpr CreateTokenCCPResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTokenCCPResponseDefaultTypeInternal() {}
  union {
    CreateTokenCCPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTokenCCPResponseDefaultTypeInternal _CreateTokenCCPResponse_default_instance_;
constexpr Log::Log(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , system_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_web_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LogDefaultTypeInternal {
  constexpr LogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogDefaultTypeInternal _Log_default_instance_;
constexpr SaveLogsRequest::SaveLogsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_(nullptr){}
struct SaveLogsRequestDefaultTypeInternal {
  constexpr SaveLogsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveLogsRequestDefaultTypeInternal() {}
  union {
    SaveLogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveLogsRequestDefaultTypeInternal _SaveLogsRequest_default_instance_;
constexpr SaveLogsResponse::SaveLogsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SaveLogsResponseDefaultTypeInternal {
  constexpr SaveLogsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveLogsResponseDefaultTypeInternal() {}
  union {
    SaveLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveLogsResponseDefaultTypeInternal _SaveLogsResponse_default_instance_;
constexpr LogsRequest::LogsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LogsRequestDefaultTypeInternal {
  constexpr LogsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogsRequestDefaultTypeInternal() {}
  union {
    LogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogsRequestDefaultTypeInternal _LogsRequest_default_instance_;
constexpr LogsResponse::LogsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_(){}
struct LogsResponseDefaultTypeInternal {
  constexpr LogsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogsResponseDefaultTypeInternal() {}
  union {
    LogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogsResponseDefaultTypeInternal _LogsResponse_default_instance_;
constexpr EnableOrDisableMFARequest::EnableOrDisableMFARequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EnableOrDisableMFARequestDefaultTypeInternal {
  constexpr EnableOrDisableMFARequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnableOrDisableMFARequestDefaultTypeInternal() {}
  union {
    EnableOrDisableMFARequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnableOrDisableMFARequestDefaultTypeInternal _EnableOrDisableMFARequest_default_instance_;
constexpr EnableOrDisableMFAResponse::EnableOrDisableMFAResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EnableOrDisableMFAResponseDefaultTypeInternal {
  constexpr EnableOrDisableMFAResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnableOrDisableMFAResponseDefaultTypeInternal() {}
  union {
    EnableOrDisableMFAResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnableOrDisableMFAResponseDefaultTypeInternal _EnableOrDisableMFAResponse_default_instance_;
constexpr MFARequest::MFARequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : numbers_()
  , _numbers_cached_byte_size_(0)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MFARequestDefaultTypeInternal {
  constexpr MFARequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MFARequestDefaultTypeInternal() {}
  union {
    MFARequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MFARequestDefaultTypeInternal _MFARequest_default_instance_;
constexpr MFAResponse::MFAResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_ccp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MFAResponseDefaultTypeInternal {
  constexpr MFAResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MFAResponseDefaultTypeInternal() {}
  union {
    MFAResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MFAResponseDefaultTypeInternal _MFAResponse_default_instance_;
}  // namespace v1
}  // namespace tokens
}  // namespace v1alpha1
}  // namespace accounts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPRequest, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse, token_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse, email_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse, user_id_dex_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse, first_name_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse, email_verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::CreateTokenCCPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::CreateTokenCCPRequest, token_dex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse, token_ccp_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse, time_expiration_mfa_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::Log, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::Log, system_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::Log, client_web_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::Log, ip_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::Log, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::SaveLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::SaveLogsRequest, log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::SaveLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::SaveLogsResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::LogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::LogsRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::LogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::LogsResponse, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::EnableOrDisableMFARequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::EnableOrDisableMFARequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::EnableOrDisableMFAResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::EnableOrDisableMFAResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::EnableOrDisableMFAResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::MFARequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::MFARequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::MFARequest, numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::MFAResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::MFAResponse, token_ccp_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::MFAResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::accounts::v1alpha1::tokens::v1::MFAResponse, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPRequest)},
  { 6, -1, sizeof(::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse)},
  { 17, -1, sizeof(::accounts::v1alpha1::tokens::v1::CreateTokenCCPRequest)},
  { 23, -1, sizeof(::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse)},
  { 32, -1, sizeof(::accounts::v1alpha1::tokens::v1::Log)},
  { 42, -1, sizeof(::accounts::v1alpha1::tokens::v1::SaveLogsRequest)},
  { 48, -1, sizeof(::accounts::v1alpha1::tokens::v1::SaveLogsResponse)},
  { 54, -1, sizeof(::accounts::v1alpha1::tokens::v1::LogsRequest)},
  { 60, -1, sizeof(::accounts::v1alpha1::tokens::v1::LogsResponse)},
  { 66, -1, sizeof(::accounts::v1alpha1::tokens::v1::EnableOrDisableMFARequest)},
  { 72, -1, sizeof(::accounts::v1alpha1::tokens::v1::EnableOrDisableMFAResponse)},
  { 79, -1, sizeof(::accounts::v1alpha1::tokens::v1::MFARequest)},
  { 86, -1, sizeof(::accounts::v1alpha1::tokens::v1::MFAResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_GetOneTokenCCPRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_GetOneTokenCCPResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_CreateTokenCCPRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_CreateTokenCCPResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_SaveLogsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_SaveLogsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_LogsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_LogsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_EnableOrDisableMFARequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_EnableOrDisableMFAResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_MFARequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accounts::v1alpha1::tokens::v1::_MFAResponse_default_instance_),
};

const char descriptor_table_protodef_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%accounts/v1alpha1/tokens/tokens.proto\022"
  "\033accounts.v1alpha1.tokens.v1\"-\n\025GetOneTo"
  "kenCCPRequest\022\024\n\005token\030\001 \001(\tR\005token\"\303\001\n\026"
  "GetOneTokenCCPResponse\022\027\n\007user_id\030\001 \001(\rR"
  "\006userId\022\024\n\005token\030\002 \001(\tR\005token\022\024\n\005email\030\003"
  " \001(\tR\005email\022\036\n\013user_id_dex\030\004 \001(\tR\tuserId"
  "Dex\022\035\n\nfirst_name\030\005 \001(\tR\tfirstName\022%\n\016em"
  "ail_verified\030\006 \001(\010R\remailVerified\"4\n\025Cre"
  "ateTokenCCPRequest\022\033\n\ttoken_dex\030\001 \001(\tR\010t"
  "okenDex\"\220\001\n\026CreateTokenCCPResponse\022\033\n\tto"
  "ken_ccp\030\001 \001(\tR\010tokenCcp\022\020\n\003msg\030\002 \001(\tR\003ms"
  "g\022.\n\023time_expiration_mfa\030\005 \001(\003R\021timeExpi"
  "rationMfa\022\027\n\007user_id\030\006 \001(\tR\006userId\"y\n\003Lo"
  "g\022\027\n\007user_id\030\001 \001(\tR\006userId\022\026\n\006system\030\002 \001"
  "(\tR\006system\022\035\n\nclient_web\030\003 \001(\tR\tclientWe"
  "b\022\016\n\002ip\030\004 \001(\tR\002ip\022\022\n\004date\030\005 \001(\tR\004date\"E\n"
  "\017SaveLogsRequest\0222\n\003log\030\001 \001(\0132 .accounts"
  ".v1alpha1.tokens.v1.LogR\003log\"$\n\020SaveLogs"
  "Response\022\020\n\003msg\030\001 \001(\tR\003msg\"&\n\013LogsReques"
  "t\022\027\n\007user_id\030\001 \001(\tR\006userId\"D\n\014LogsRespon"
  "se\0224\n\004logs\030\001 \003(\0132 .accounts.v1alpha1.tok"
  "ens.v1.LogR\004logs\"4\n\031EnableOrDisableMFARe"
  "quest\022\027\n\007user_id\030\001 \001(\tR\006userId\"D\n\032Enable"
  "OrDisableMFAResponse\022\020\n\003msg\030\001 \001(\tR\003msg\022\024"
  "\n\005error\030\002 \001(\tR\005error\"\?\n\nMFARequest\022\027\n\007us"
  "er_id\030\001 \001(\tR\006userId\022\030\n\007numbers\030\003 \003(\005R\007nu"
  "mbers\"R\n\013MFAResponse\022\033\n\ttoken_ccp\030\001 \001(\tR"
  "\010tokenCcp\022\020\n\003msg\030\002 \001(\tR\003msg\022\024\n\005error\030\003 \001"
  "(\tR\005errorB;Z9github.com/cuemby/ccp-sdk/g"
  "en/go/accounts/v1alpha1/tokensb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto = {
  false, false, 1198, descriptor_table_protodef_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto, "accounts/v1alpha1/tokens/tokens.proto", 
  &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto::offsets,
  file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto, file_level_enum_descriptors_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto, file_level_service_descriptors_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter() {
  return &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto(&descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto);
namespace accounts {
namespace v1alpha1 {
namespace tokens {
namespace v1 {

// ===================================================================

class GetOneTokenCCPRequest::_Internal {
 public:
};

GetOneTokenCCPRequest::GetOneTokenCCPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
}
GetOneTokenCCPRequest::GetOneTokenCCPRequest(const GetOneTokenCCPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
}

inline void GetOneTokenCCPRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetOneTokenCCPRequest::~GetOneTokenCCPRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneTokenCCPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneTokenCCPRequest::ArenaDtor(void* object) {
  GetOneTokenCCPRequest* _this = reinterpret_cast< GetOneTokenCCPRequest* >(object);
  (void)_this;
}
void GetOneTokenCCPRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneTokenCCPRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneTokenCCPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneTokenCCPRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1 [json_name = "token"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneTokenCCPRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1 [json_name = "token"];
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
  return target;
}

size_t GetOneTokenCCPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1 [json_name = "token"];
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneTokenCCPRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneTokenCCPRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneTokenCCPRequest::GetClassData() const { return &_class_data_; }

void GetOneTokenCCPRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneTokenCCPRequest *>(to)->MergeFrom(
      static_cast<const GetOneTokenCCPRequest &>(from));
}


void GetOneTokenCCPRequest::MergeFrom(const GetOneTokenCCPRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneTokenCCPRequest::CopyFrom(const GetOneTokenCCPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneTokenCCPRequest::IsInitialized() const {
  return true;
}

void GetOneTokenCCPRequest::InternalSwap(GetOneTokenCCPRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneTokenCCPRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[0]);
}

// ===================================================================

class GetOneTokenCCPResponse::_Internal {
 public:
};

GetOneTokenCCPResponse::GetOneTokenCCPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
}
GetOneTokenCCPResponse::GetOneTokenCCPResponse(const GetOneTokenCCPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  user_id_dex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id_dex().empty()) {
    user_id_dex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id_dex(), 
      GetArenaForAllocation());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&email_verified_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(email_verified_));
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
}

inline void GetOneTokenCCPResponse::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_dex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&email_verified_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(email_verified_));
}

GetOneTokenCCPResponse::~GetOneTokenCCPResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneTokenCCPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_dex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneTokenCCPResponse::ArenaDtor(void* object) {
  GetOneTokenCCPResponse* _this = reinterpret_cast< GetOneTokenCCPResponse* >(object);
  (void)_this;
}
void GetOneTokenCCPResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneTokenCCPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneTokenCCPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  email_.ClearToEmpty();
  user_id_dex_.ClearToEmpty();
  first_name_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&email_verified_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(email_verified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneTokenCCPResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2 [json_name = "token"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 3 [json_name = "email"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id_dex = 4 [json_name = "userIdDex"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id_dex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.user_id_dex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 5 [json_name = "firstName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool email_verified = 6 [json_name = "emailVerified"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          email_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneTokenCCPResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string token = 2 [json_name = "token"];
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // string email = 3 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string user_id_dex = 4 [json_name = "userIdDex"];
  if (!this->_internal_user_id_dex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id_dex().data(), static_cast<int>(this->_internal_user_id_dex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.user_id_dex");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id_dex(), target);
  }

  // string first_name = 5 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse.first_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_first_name(), target);
  }

  // bool email_verified = 6 [json_name = "emailVerified"];
  if (this->_internal_email_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_email_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
  return target;
}

size_t GetOneTokenCCPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2 [json_name = "token"];
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string email = 3 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string user_id_dex = 4 [json_name = "userIdDex"];
  if (!this->_internal_user_id_dex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id_dex());
  }

  // string first_name = 5 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // uint32 user_id = 1 [json_name = "userId"];
  if (this->_internal_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // bool email_verified = 6 [json_name = "emailVerified"];
  if (this->_internal_email_verified() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneTokenCCPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneTokenCCPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneTokenCCPResponse::GetClassData() const { return &_class_data_; }

void GetOneTokenCCPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneTokenCCPResponse *>(to)->MergeFrom(
      static_cast<const GetOneTokenCCPResponse &>(from));
}


void GetOneTokenCCPResponse::MergeFrom(const GetOneTokenCCPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_user_id_dex().empty()) {
    _internal_set_user_id_dex(from._internal_user_id_dex());
  }
  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_email_verified() != 0) {
    _internal_set_email_verified(from._internal_email_verified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneTokenCCPResponse::CopyFrom(const GetOneTokenCCPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.GetOneTokenCCPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneTokenCCPResponse::IsInitialized() const {
  return true;
}

void GetOneTokenCCPResponse::InternalSwap(GetOneTokenCCPResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_dex_, GetArenaForAllocation(),
      &other->user_id_dex_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, GetArenaForAllocation(),
      &other->first_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOneTokenCCPResponse, email_verified_)
      + sizeof(GetOneTokenCCPResponse::email_verified_)
      - PROTOBUF_FIELD_OFFSET(GetOneTokenCCPResponse, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneTokenCCPResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[1]);
}

// ===================================================================

class CreateTokenCCPRequest::_Internal {
 public:
};

CreateTokenCCPRequest::CreateTokenCCPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
}
CreateTokenCCPRequest::CreateTokenCCPRequest(const CreateTokenCCPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_dex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_dex().empty()) {
    token_dex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_dex(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
}

inline void CreateTokenCCPRequest::SharedCtor() {
token_dex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateTokenCCPRequest::~CreateTokenCCPRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTokenCCPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_dex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTokenCCPRequest::ArenaDtor(void* object) {
  CreateTokenCCPRequest* _this = reinterpret_cast< CreateTokenCCPRequest* >(object);
  (void)_this;
}
void CreateTokenCCPRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTokenCCPRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTokenCCPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_dex_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTokenCCPRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token_dex = 1 [json_name = "tokenDex"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_dex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest.token_dex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTokenCCPRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_dex = 1 [json_name = "tokenDex"];
  if (!this->_internal_token_dex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_dex().data(), static_cast<int>(this->_internal_token_dex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest.token_dex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_dex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
  return target;
}

size_t CreateTokenCCPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_dex = 1 [json_name = "tokenDex"];
  if (!this->_internal_token_dex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_dex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTokenCCPRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTokenCCPRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTokenCCPRequest::GetClassData() const { return &_class_data_; }

void CreateTokenCCPRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTokenCCPRequest *>(to)->MergeFrom(
      static_cast<const CreateTokenCCPRequest &>(from));
}


void CreateTokenCCPRequest::MergeFrom(const CreateTokenCCPRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_dex().empty()) {
    _internal_set_token_dex(from._internal_token_dex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTokenCCPRequest::CopyFrom(const CreateTokenCCPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTokenCCPRequest::IsInitialized() const {
  return true;
}

void CreateTokenCCPRequest::InternalSwap(CreateTokenCCPRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_dex_, GetArenaForAllocation(),
      &other->token_dex_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTokenCCPRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[2]);
}

// ===================================================================

class CreateTokenCCPResponse::_Internal {
 public:
};

CreateTokenCCPResponse::CreateTokenCCPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
}
CreateTokenCCPResponse::CreateTokenCCPResponse(const CreateTokenCCPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_ccp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_ccp().empty()) {
    token_ccp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_ccp(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  time_expiration_mfa_ = from.time_expiration_mfa_;
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
}

inline void CreateTokenCCPResponse::SharedCtor() {
token_ccp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_expiration_mfa_ = int64_t{0};
}

CreateTokenCCPResponse::~CreateTokenCCPResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTokenCCPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_ccp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTokenCCPResponse::ArenaDtor(void* object) {
  CreateTokenCCPResponse* _this = reinterpret_cast< CreateTokenCCPResponse* >(object);
  (void)_this;
}
void CreateTokenCCPResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTokenCCPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTokenCCPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_ccp_.ClearToEmpty();
  msg_.ClearToEmpty();
  user_id_.ClearToEmpty();
  time_expiration_mfa_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTokenCCPResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token_ccp = 1 [json_name = "tokenCcp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_ccp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse.token_ccp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2 [json_name = "msg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_expiration_mfa = 5 [json_name = "timeExpirationMfa"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_expiration_mfa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 6 [json_name = "userId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTokenCCPResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_ccp = 1 [json_name = "tokenCcp"];
  if (!this->_internal_token_ccp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_ccp().data(), static_cast<int>(this->_internal_token_ccp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse.token_ccp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_ccp(), target);
  }

  // string msg = 2 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int64 time_expiration_mfa = 5 [json_name = "timeExpirationMfa"];
  if (this->_internal_time_expiration_mfa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_time_expiration_mfa(), target);
  }

  // string user_id = 6 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse.user_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
  return target;
}

size_t CreateTokenCCPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_ccp = 1 [json_name = "tokenCcp"];
  if (!this->_internal_token_ccp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_ccp());
  }

  // string msg = 2 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string user_id = 6 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // int64 time_expiration_mfa = 5 [json_name = "timeExpirationMfa"];
  if (this->_internal_time_expiration_mfa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_expiration_mfa());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTokenCCPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTokenCCPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTokenCCPResponse::GetClassData() const { return &_class_data_; }

void CreateTokenCCPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTokenCCPResponse *>(to)->MergeFrom(
      static_cast<const CreateTokenCCPResponse &>(from));
}


void CreateTokenCCPResponse::MergeFrom(const CreateTokenCCPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_ccp().empty()) {
    _internal_set_token_ccp(from._internal_token_ccp());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_time_expiration_mfa() != 0) {
    _internal_set_time_expiration_mfa(from._internal_time_expiration_mfa());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTokenCCPResponse::CopyFrom(const CreateTokenCCPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.CreateTokenCCPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTokenCCPResponse::IsInitialized() const {
  return true;
}

void CreateTokenCCPResponse::InternalSwap(CreateTokenCCPResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_ccp_, GetArenaForAllocation(),
      &other->token_ccp_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(time_expiration_mfa_, other->time_expiration_mfa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTokenCCPResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[3]);
}

// ===================================================================

class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_system(), 
      GetArenaForAllocation());
  }
  client_web_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_web().empty()) {
    client_web_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_web(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.Log)
}

inline void Log::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
client_web_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.Log)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_web_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Log::ArenaDtor(void* object) {
  Log* _this = reinterpret_cast< Log* >(object);
  (void)_this;
}
void Log::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  system_.ClearToEmpty();
  client_web_.ClearToEmpty();
  ip_.ClearToEmpty();
  date_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.Log.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system = 2 [json_name = "system"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_system();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.Log.system"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_web = 3 [json_name = "clientWeb"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_web();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.Log.client_web"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 4 [json_name = "ip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.Log.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 5 [json_name = "date"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.Log.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.Log.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string system = 2 [json_name = "system"];
  if (!this->_internal_system().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.Log.system");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_system(), target);
  }

  // string client_web = 3 [json_name = "clientWeb"];
  if (!this->_internal_client_web().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_web().data(), static_cast<int>(this->_internal_client_web().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.Log.client_web");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_web(), target);
  }

  // string ip = 4 [json_name = "ip"];
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.Log.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // string date = 5 [json_name = "date"];
  if (!this->_internal_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.Log.date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string system = 2 [json_name = "system"];
  if (!this->_internal_system().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string client_web = 3 [json_name = "clientWeb"];
  if (!this->_internal_client_web().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_web());
  }

  // string ip = 4 [json_name = "ip"];
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string date = 5 [json_name = "date"];
  if (!this->_internal_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }

void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Log *>(to)->MergeFrom(
      static_cast<const Log &>(from));
}


void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.Log)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_system().empty()) {
    _internal_set_system(from._internal_system());
  }
  if (!from._internal_client_web().empty()) {
    _internal_set_client_web(from._internal_client_web());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_date().empty()) {
    _internal_set_date(from._internal_date());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &system_, GetArenaForAllocation(),
      &other->system_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_web_, GetArenaForAllocation(),
      &other->client_web_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_, GetArenaForAllocation(),
      &other->date_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[4]);
}

// ===================================================================

class SaveLogsRequest::_Internal {
 public:
  static const ::accounts::v1alpha1::tokens::v1::Log& log(const SaveLogsRequest* msg);
};

const ::accounts::v1alpha1::tokens::v1::Log&
SaveLogsRequest::_Internal::log(const SaveLogsRequest* msg) {
  return *msg->log_;
}
SaveLogsRequest::SaveLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
}
SaveLogsRequest::SaveLogsRequest(const SaveLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_log()) {
    log_ = new ::accounts::v1alpha1::tokens::v1::Log(*from.log_);
  } else {
    log_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
}

inline void SaveLogsRequest::SharedCtor() {
log_ = nullptr;
}

SaveLogsRequest::~SaveLogsRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveLogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete log_;
}

void SaveLogsRequest::ArenaDtor(void* object) {
  SaveLogsRequest* _this = reinterpret_cast< SaveLogsRequest* >(object);
  (void)_this;
}
void SaveLogsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveLogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveLogsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .accounts.v1alpha1.tokens.v1.Log log = 1 [json_name = "log"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveLogsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .accounts.v1alpha1.tokens.v1.Log log = 1 [json_name = "log"];
  if (this->_internal_has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::log(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
  return target;
}

size_t SaveLogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .accounts.v1alpha1.tokens.v1.Log log = 1 [json_name = "log"];
  if (this->_internal_has_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveLogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveLogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveLogsRequest::GetClassData() const { return &_class_data_; }

void SaveLogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SaveLogsRequest *>(to)->MergeFrom(
      static_cast<const SaveLogsRequest &>(from));
}


void SaveLogsRequest::MergeFrom(const SaveLogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_log()) {
    _internal_mutable_log()->::accounts::v1alpha1::tokens::v1::Log::MergeFrom(from._internal_log());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveLogsRequest::CopyFrom(const SaveLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.SaveLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveLogsRequest::IsInitialized() const {
  return true;
}

void SaveLogsRequest::InternalSwap(SaveLogsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(log_, other->log_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveLogsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[5]);
}

// ===================================================================

class SaveLogsResponse::_Internal {
 public:
};

SaveLogsResponse::SaveLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
}
SaveLogsResponse::SaveLogsResponse(const SaveLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
}

inline void SaveLogsResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveLogsResponse::~SaveLogsResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveLogsResponse::ArenaDtor(void* object) {
  SaveLogsResponse* _this = reinterpret_cast< SaveLogsResponse* >(object);
  (void)_this;
}
void SaveLogsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveLogsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveLogsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.SaveLogsResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveLogsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.SaveLogsResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
  return target;
}

size_t SaveLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveLogsResponse::GetClassData() const { return &_class_data_; }

void SaveLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SaveLogsResponse *>(to)->MergeFrom(
      static_cast<const SaveLogsResponse &>(from));
}


void SaveLogsResponse::MergeFrom(const SaveLogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveLogsResponse::CopyFrom(const SaveLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.SaveLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveLogsResponse::IsInitialized() const {
  return true;
}

void SaveLogsResponse::InternalSwap(SaveLogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveLogsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[6]);
}

// ===================================================================

class LogsRequest::_Internal {
 public:
};

LogsRequest::LogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.LogsRequest)
}
LogsRequest::LogsRequest(const LogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.LogsRequest)
}

inline void LogsRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogsRequest::~LogsRequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.LogsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogsRequest::ArenaDtor(void* object) {
  LogsRequest* _this = reinterpret_cast< LogsRequest* >(object);
  (void)_this;
}
void LogsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.LogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.LogsRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.LogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.LogsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.LogsRequest)
  return target;
}

size_t LogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.LogsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsRequest::GetClassData() const { return &_class_data_; }

void LogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LogsRequest *>(to)->MergeFrom(
      static_cast<const LogsRequest &>(from));
}


void LogsRequest::MergeFrom(const LogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.LogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsRequest::CopyFrom(const LogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.LogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsRequest::IsInitialized() const {
  return true;
}

void LogsRequest::InternalSwap(LogsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[7]);
}

// ===================================================================

class LogsResponse::_Internal {
 public:
};

LogsResponse::LogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.LogsResponse)
}
LogsResponse::LogsResponse(const LogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.LogsResponse)
}

inline void LogsResponse::SharedCtor() {
}

LogsResponse::~LogsResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.LogsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogsResponse::ArenaDtor(void* object) {
  LogsResponse* _this = reinterpret_cast< LogsResponse* >(object);
  (void)_this;
}
void LogsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.LogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accounts.v1alpha1.tokens.v1.Log logs = 1 [json_name = "logs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.LogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.tokens.v1.Log logs = 1 [json_name = "logs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.LogsResponse)
  return target;
}

size_t LogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.LogsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accounts.v1alpha1.tokens.v1.Log logs = 1 [json_name = "logs"];
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsResponse::GetClassData() const { return &_class_data_; }

void LogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LogsResponse *>(to)->MergeFrom(
      static_cast<const LogsResponse &>(from));
}


void LogsResponse::MergeFrom(const LogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.LogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsResponse::CopyFrom(const LogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.LogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsResponse::IsInitialized() const {
  return true;
}

void LogsResponse::InternalSwap(LogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[8]);
}

// ===================================================================

class EnableOrDisableMFARequest::_Internal {
 public:
};

EnableOrDisableMFARequest::EnableOrDisableMFARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
}
EnableOrDisableMFARequest::EnableOrDisableMFARequest(const EnableOrDisableMFARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
}

inline void EnableOrDisableMFARequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnableOrDisableMFARequest::~EnableOrDisableMFARequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnableOrDisableMFARequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableOrDisableMFARequest::ArenaDtor(void* object) {
  EnableOrDisableMFARequest* _this = reinterpret_cast< EnableOrDisableMFARequest* >(object);
  (void)_this;
}
void EnableOrDisableMFARequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableOrDisableMFARequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnableOrDisableMFARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableOrDisableMFARequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableOrDisableMFARequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
  return target;
}

size_t EnableOrDisableMFARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableOrDisableMFARequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnableOrDisableMFARequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableOrDisableMFARequest::GetClassData() const { return &_class_data_; }

void EnableOrDisableMFARequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnableOrDisableMFARequest *>(to)->MergeFrom(
      static_cast<const EnableOrDisableMFARequest &>(from));
}


void EnableOrDisableMFARequest::MergeFrom(const EnableOrDisableMFARequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableOrDisableMFARequest::CopyFrom(const EnableOrDisableMFARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableOrDisableMFARequest::IsInitialized() const {
  return true;
}

void EnableOrDisableMFARequest::InternalSwap(EnableOrDisableMFARequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableOrDisableMFARequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[9]);
}

// ===================================================================

class EnableOrDisableMFAResponse::_Internal {
 public:
};

EnableOrDisableMFAResponse::EnableOrDisableMFAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
}
EnableOrDisableMFAResponse::EnableOrDisableMFAResponse(const EnableOrDisableMFAResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
}

inline void EnableOrDisableMFAResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnableOrDisableMFAResponse::~EnableOrDisableMFAResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnableOrDisableMFAResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableOrDisableMFAResponse::ArenaDtor(void* object) {
  EnableOrDisableMFAResponse* _this = reinterpret_cast< EnableOrDisableMFAResponse* >(object);
  (void)_this;
}
void EnableOrDisableMFAResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableOrDisableMFAResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnableOrDisableMFAResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableOrDisableMFAResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableOrDisableMFAResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
  return target;
}

size_t EnableOrDisableMFAResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableOrDisableMFAResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnableOrDisableMFAResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableOrDisableMFAResponse::GetClassData() const { return &_class_data_; }

void EnableOrDisableMFAResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnableOrDisableMFAResponse *>(to)->MergeFrom(
      static_cast<const EnableOrDisableMFAResponse &>(from));
}


void EnableOrDisableMFAResponse::MergeFrom(const EnableOrDisableMFAResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableOrDisableMFAResponse::CopyFrom(const EnableOrDisableMFAResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.EnableOrDisableMFAResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableOrDisableMFAResponse::IsInitialized() const {
  return true;
}

void EnableOrDisableMFAResponse::InternalSwap(EnableOrDisableMFAResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableOrDisableMFAResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[10]);
}

// ===================================================================

class MFARequest::_Internal {
 public:
};

MFARequest::MFARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  numbers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.MFARequest)
}
MFARequest::MFARequest(const MFARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      numbers_(from.numbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.MFARequest)
}

inline void MFARequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MFARequest::~MFARequest() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.MFARequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MFARequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MFARequest::ArenaDtor(void* object) {
  MFARequest* _this = reinterpret_cast< MFARequest* >(object);
  (void)_this;
}
void MFARequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MFARequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MFARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.MFARequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numbers_.Clear();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MFARequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.MFARequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 numbers = 3 [json_name = "numbers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MFARequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.MFARequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.MFARequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated int32 numbers = 3 [json_name = "numbers"];
  {
    int byte_size = _numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_numbers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.MFARequest)
  return target;
}

size_t MFARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.MFARequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 numbers = 3 [json_name = "numbers"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MFARequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MFARequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MFARequest::GetClassData() const { return &_class_data_; }

void MFARequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MFARequest *>(to)->MergeFrom(
      static_cast<const MFARequest &>(from));
}


void MFARequest::MergeFrom(const MFARequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.MFARequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numbers_.MergeFrom(from.numbers_);
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MFARequest::CopyFrom(const MFARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.MFARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFARequest::IsInitialized() const {
  return true;
}

void MFARequest::InternalSwap(MFARequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  numbers_.InternalSwap(&other->numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MFARequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[11]);
}

// ===================================================================

class MFAResponse::_Internal {
 public:
};

MFAResponse::MFAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accounts.v1alpha1.tokens.v1.MFAResponse)
}
MFAResponse::MFAResponse(const MFAResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_ccp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_ccp().empty()) {
    token_ccp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_ccp(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:accounts.v1alpha1.tokens.v1.MFAResponse)
}

inline void MFAResponse::SharedCtor() {
token_ccp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MFAResponse::~MFAResponse() {
  // @@protoc_insertion_point(destructor:accounts.v1alpha1.tokens.v1.MFAResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MFAResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_ccp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MFAResponse::ArenaDtor(void* object) {
  MFAResponse* _this = reinterpret_cast< MFAResponse* >(object);
  (void)_this;
}
void MFAResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MFAResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MFAResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:accounts.v1alpha1.tokens.v1.MFAResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_ccp_.ClearToEmpty();
  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MFAResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token_ccp = 1 [json_name = "tokenCcp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_ccp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.MFAResponse.token_ccp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2 [json_name = "msg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.MFAResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 3 [json_name = "error"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accounts.v1alpha1.tokens.v1.MFAResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MFAResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accounts.v1alpha1.tokens.v1.MFAResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_ccp = 1 [json_name = "tokenCcp"];
  if (!this->_internal_token_ccp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_ccp().data(), static_cast<int>(this->_internal_token_ccp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.MFAResponse.token_ccp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_ccp(), target);
  }

  // string msg = 2 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.MFAResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "accounts.v1alpha1.tokens.v1.MFAResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accounts.v1alpha1.tokens.v1.MFAResponse)
  return target;
}

size_t MFAResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accounts.v1alpha1.tokens.v1.MFAResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_ccp = 1 [json_name = "tokenCcp"];
  if (!this->_internal_token_ccp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_ccp());
  }

  // string msg = 2 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 3 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MFAResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MFAResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MFAResponse::GetClassData() const { return &_class_data_; }

void MFAResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MFAResponse *>(to)->MergeFrom(
      static_cast<const MFAResponse &>(from));
}


void MFAResponse::MergeFrom(const MFAResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accounts.v1alpha1.tokens.v1.MFAResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_ccp().empty()) {
    _internal_set_token_ccp(from._internal_token_ccp());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MFAResponse::CopyFrom(const MFAResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accounts.v1alpha1.tokens.v1.MFAResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFAResponse::IsInitialized() const {
  return true;
}

void MFAResponse::InternalSwap(MFAResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_ccp_, GetArenaForAllocation(),
      &other->token_ccp_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MFAResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_getter, &descriptor_table_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto_once,
      file_level_metadata_accounts_2fv1alpha1_2ftokens_2ftokens_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace tokens
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::GetOneTokenCCPRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::GetOneTokenCCPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::GetOneTokenCCPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::GetOneTokenCCPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::CreateTokenCCPRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::CreateTokenCCPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::CreateTokenCCPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::CreateTokenCCPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::Log* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::SaveLogsRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::SaveLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::SaveLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::SaveLogsResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::SaveLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::SaveLogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::LogsRequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::LogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::LogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::LogsResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::LogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::LogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::EnableOrDisableMFARequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::EnableOrDisableMFARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::EnableOrDisableMFARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::EnableOrDisableMFAResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::EnableOrDisableMFAResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::EnableOrDisableMFAResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::MFARequest* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::MFARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::MFARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::accounts::v1alpha1::tokens::v1::MFAResponse* Arena::CreateMaybeMessage< ::accounts::v1alpha1::tokens::v1::MFAResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accounts::v1alpha1::tokens::v1::MFAResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
