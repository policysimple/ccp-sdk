// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounts/v1alpha1/users/users_api.proto

#include "accounts/v1alpha1/users/users_api.pb.h"
#include "accounts/v1alpha1/users/users_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace accounts {
namespace v1alpha1 {
namespace users {
namespace v1 {

static const char* UserService_method_names[] = {
  "/accounts.v1alpha1.users.v1.UserService/CreateUser",
  "/accounts.v1alpha1.users.v1.UserService/ListUser",
  "/accounts.v1alpha1.users.v1.UserService/GetOneUser",
  "/accounts.v1alpha1.users.v1.UserService/UpdateUser",
  "/accounts.v1alpha1.users.v1.UserService/DeleteUser",
  "/accounts.v1alpha1.users.v1.UserService/ListUserPagination",
  "/accounts.v1alpha1.users.v1.UserService/SendInvitationUser",
  "/accounts.v1alpha1.users.v1.UserService/GetInvitationUser",
  "/accounts.v1alpha1.users.v1.UserService/AgreeInvitationUser",
  "/accounts.v1alpha1.users.v1.UserService/ListInvitationUser",
  "/accounts.v1alpha1.users.v1.UserService/CheckUser",
  "/accounts.v1alpha1.users.v1.UserService/SendVerificationEmail",
  "/accounts.v1alpha1.users.v1.UserService/VerifyEmail",
  "/accounts.v1alpha1.users.v1.UserService/GetUsersEmailFilter",
  "/accounts.v1alpha1.users.v1.UserService/GetListUserDex",
  "/accounts.v1alpha1.users.v1.UserService/GetOneUserDex",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateUser_(UserService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUser_(UserService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneUser_(UserService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(UserService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(UserService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUserPagination_(UserService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendInvitationUser_(UserService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInvitationUser_(UserService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AgreeInvitationUser_(UserService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInvitationUser_(UserService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckUser_(UserService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendVerificationEmail_(UserService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyEmail_(UserService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsersEmailFilter_(UserService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetListUserDex_(UserService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOneUserDex_(UserService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::CreateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CreateUserRequest& request, ::accounts::v1alpha1::users::v1::CreateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

void UserService::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CreateUserRequest* request, ::accounts::v1alpha1::users::v1::CreateUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::CreateUserResponse>* UserService::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::CreateUserResponse>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::CreateUserResponse>* UserService::Stub::PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::CreateUserResponse>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, false);
}

::grpc::Status UserService::Stub::ListUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserRequest& request, ::accounts::v1alpha1::users::v1::ListUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUser_, context, request, response);
}

void UserService::Stub::experimental_async::ListUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserRequest* request, ::accounts::v1alpha1::users::v1::ListUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::ListUserResponse>* UserService::Stub::AsyncListUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::ListUserResponse>::Create(channel_.get(), cq, rpcmethod_ListUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::ListUserResponse>* UserService::Stub::PrepareAsyncListUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::ListUserResponse>::Create(channel_.get(), cq, rpcmethod_ListUser_, context, request, false);
}

::grpc::Status UserService::Stub::GetOneUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserRequest& request, ::accounts::v1alpha1::users::v1::GetOneUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneUser_, context, request, response);
}

void UserService::Stub::experimental_async::GetOneUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserRequest* request, ::accounts::v1alpha1::users::v1::GetOneUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetOneUserResponse>* UserService::Stub::AsyncGetOneUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetOneUserResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetOneUserResponse>* UserService::Stub::PrepareAsyncGetOneUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetOneUserResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUser_, context, request, false);
}

::grpc::Status UserService::Stub::UpdateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::UpdateUserRequest& request, ::accounts::v1alpha1::users::v1::UpdateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void UserService::Stub::experimental_async::UpdateUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::UpdateUserRequest* request, ::accounts::v1alpha1::users::v1::UpdateUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::UpdateUserResponse>* UserService::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::UpdateUserResponse>::Create(channel_.get(), cq, rpcmethod_UpdateUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::UpdateUserResponse>* UserService::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::UpdateUserResponse>::Create(channel_.get(), cq, rpcmethod_UpdateUser_, context, request, false);
}

::grpc::Status UserService::Stub::DeleteUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::DeleteUserRequest& request, ::accounts::v1alpha1::users::v1::DeleteUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void UserService::Stub::experimental_async::DeleteUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::DeleteUserRequest* request, ::accounts::v1alpha1::users::v1::DeleteUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::DeleteUserResponse>* UserService::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::DeleteUserResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::DeleteUserResponse>* UserService::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::DeleteUserResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUser_, context, request, false);
}

::grpc::Status UserService::Stub::ListUserPagination(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserPaginationRequest& request, ::accounts::v1alpha1::users::v1::ListUserPaginationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUserPagination_, context, request, response);
}

void UserService::Stub::experimental_async::ListUserPagination(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserPaginationRequest* request, ::accounts::v1alpha1::users::v1::ListUserPaginationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUserPagination_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::ListUserPaginationResponse>* UserService::Stub::AsyncListUserPaginationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserPaginationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::ListUserPaginationResponse>::Create(channel_.get(), cq, rpcmethod_ListUserPagination_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::ListUserPaginationResponse>* UserService::Stub::PrepareAsyncListUserPaginationRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListUserPaginationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::ListUserPaginationResponse>::Create(channel_.get(), cq, rpcmethod_ListUserPagination_, context, request, false);
}

::grpc::Status UserService::Stub::SendInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendInvitationUserRequest& request, ::accounts::v1alpha1::users::v1::SendInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendInvitationUser_, context, request, response);
}

void UserService::Stub::experimental_async::SendInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::SendInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::SendInvitationUserResponse>* UserService::Stub::AsyncSendInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::SendInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_SendInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::SendInvitationUserResponse>* UserService::Stub::PrepareAsyncSendInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::SendInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_SendInvitationUser_, context, request, false);
}

::grpc::Status UserService::Stub::GetInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetInvitationUserRequest& request, ::accounts::v1alpha1::users::v1::GetInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInvitationUser_, context, request, response);
}

void UserService::Stub::experimental_async::GetInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::GetInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetInvitationUserResponse>* UserService::Stub::AsyncGetInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_GetInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetInvitationUserResponse>* UserService::Stub::PrepareAsyncGetInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_GetInvitationUser_, context, request, false);
}

::grpc::Status UserService::Stub::AgreeInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::AgreeInvitationUserRequest& request, ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AgreeInvitationUser_, context, request, response);
}

void UserService::Stub::experimental_async::AgreeInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::AgreeInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AgreeInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse>* UserService::Stub::AsyncAgreeInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::AgreeInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_AgreeInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse>* UserService::Stub::PrepareAsyncAgreeInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::AgreeInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_AgreeInvitationUser_, context, request, false);
}

::grpc::Status UserService::Stub::ListInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListInvitationUserRequest& request, ::accounts::v1alpha1::users::v1::ListInvitationUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInvitationUser_, context, request, response);
}

void UserService::Stub::experimental_async::ListInvitationUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::ListInvitationUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListInvitationUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::ListInvitationUserResponse>* UserService::Stub::AsyncListInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::ListInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_ListInvitationUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::ListInvitationUserResponse>* UserService::Stub::PrepareAsyncListInvitationUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::ListInvitationUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::ListInvitationUserResponse>::Create(channel_.get(), cq, rpcmethod_ListInvitationUser_, context, request, false);
}

::grpc::Status UserService::Stub::CheckUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CheckUserRequest& request, ::accounts::v1alpha1::users::v1::CheckUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckUser_, context, request, response);
}

void UserService::Stub::experimental_async::CheckUser(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CheckUserRequest* request, ::accounts::v1alpha1::users::v1::CheckUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::CheckUserResponse>* UserService::Stub::AsyncCheckUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CheckUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::CheckUserResponse>::Create(channel_.get(), cq, rpcmethod_CheckUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::CheckUserResponse>* UserService::Stub::PrepareAsyncCheckUserRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::CheckUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::CheckUserResponse>::Create(channel_.get(), cq, rpcmethod_CheckUser_, context, request, false);
}

::grpc::Status UserService::Stub::SendVerificationEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendVerificationEmailRequest& request, ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendVerificationEmail_, context, request, response);
}

void UserService::Stub::experimental_async::SendVerificationEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendVerificationEmailRequest* request, ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendVerificationEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse>* UserService::Stub::AsyncSendVerificationEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendVerificationEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse>::Create(channel_.get(), cq, rpcmethod_SendVerificationEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse>* UserService::Stub::PrepareAsyncSendVerificationEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::SendVerificationEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse>::Create(channel_.get(), cq, rpcmethod_SendVerificationEmail_, context, request, false);
}

::grpc::Status UserService::Stub::VerifyEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::VerifyEmailRequest& request, ::accounts::v1alpha1::users::v1::VerifyEmailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyEmail_, context, request, response);
}

void UserService::Stub::experimental_async::VerifyEmail(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::VerifyEmailRequest* request, ::accounts::v1alpha1::users::v1::VerifyEmailResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyEmail_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::VerifyEmailResponse>* UserService::Stub::AsyncVerifyEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::VerifyEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::VerifyEmailResponse>::Create(channel_.get(), cq, rpcmethod_VerifyEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::VerifyEmailResponse>* UserService::Stub::PrepareAsyncVerifyEmailRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::VerifyEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::VerifyEmailResponse>::Create(channel_.get(), cq, rpcmethod_VerifyEmail_, context, request, false);
}

::grpc::Status UserService::Stub::GetUsersEmailFilter(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest& request, ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUsersEmailFilter_, context, request, response);
}

void UserService::Stub::experimental_async::GetUsersEmailFilter(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest* request, ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUsersEmailFilter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse>* UserService::Stub::AsyncGetUsersEmailFilterRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse>::Create(channel_.get(), cq, rpcmethod_GetUsersEmailFilter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse>* UserService::Stub::PrepareAsyncGetUsersEmailFilterRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse>::Create(channel_.get(), cq, rpcmethod_GetUsersEmailFilter_, context, request, false);
}

::grpc::Status UserService::Stub::GetListUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetListUserDexRequest& request, ::accounts::v1alpha1::users::v1::GetListUserDexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetListUserDex_, context, request, response);
}

void UserService::Stub::experimental_async::GetListUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetListUserDexRequest* request, ::accounts::v1alpha1::users::v1::GetListUserDexResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetListUserDex_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetListUserDexResponse>* UserService::Stub::AsyncGetListUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetListUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetListUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetListUserDex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetListUserDexResponse>* UserService::Stub::PrepareAsyncGetListUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetListUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetListUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetListUserDex_, context, request, false);
}

::grpc::Status UserService::Stub::GetOneUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserDexRequest& request, ::accounts::v1alpha1::users::v1::GetOneUserDexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOneUserDex_, context, request, response);
}

void UserService::Stub::experimental_async::GetOneUserDex(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserDexRequest* request, ::accounts::v1alpha1::users::v1::GetOneUserDexResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOneUserDex_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetOneUserDexResponse>* UserService::Stub::AsyncGetOneUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetOneUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUserDex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::accounts::v1alpha1::users::v1::GetOneUserDexResponse>* UserService::Stub::PrepareAsyncGetOneUserDexRaw(::grpc::ClientContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserDexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::accounts::v1alpha1::users::v1::GetOneUserDexResponse>::Create(channel_.get(), cq, rpcmethod_GetOneUserDex_, context, request, false);
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::CreateUserRequest, ::accounts::v1alpha1::users::v1::CreateUserResponse>(
          std::mem_fn(&UserService::Service::CreateUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::ListUserRequest, ::accounts::v1alpha1::users::v1::ListUserResponse>(
          std::mem_fn(&UserService::Service::ListUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::GetOneUserRequest, ::accounts::v1alpha1::users::v1::GetOneUserResponse>(
          std::mem_fn(&UserService::Service::GetOneUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::UpdateUserRequest, ::accounts::v1alpha1::users::v1::UpdateUserResponse>(
          std::mem_fn(&UserService::Service::UpdateUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::DeleteUserRequest, ::accounts::v1alpha1::users::v1::DeleteUserResponse>(
          std::mem_fn(&UserService::Service::DeleteUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::ListUserPaginationRequest, ::accounts::v1alpha1::users::v1::ListUserPaginationResponse>(
          std::mem_fn(&UserService::Service::ListUserPagination), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::SendInvitationUserRequest, ::accounts::v1alpha1::users::v1::SendInvitationUserResponse>(
          std::mem_fn(&UserService::Service::SendInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::GetInvitationUserRequest, ::accounts::v1alpha1::users::v1::GetInvitationUserResponse>(
          std::mem_fn(&UserService::Service::GetInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::AgreeInvitationUserRequest, ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse>(
          std::mem_fn(&UserService::Service::AgreeInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::ListInvitationUserRequest, ::accounts::v1alpha1::users::v1::ListInvitationUserResponse>(
          std::mem_fn(&UserService::Service::ListInvitationUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::CheckUserRequest, ::accounts::v1alpha1::users::v1::CheckUserResponse>(
          std::mem_fn(&UserService::Service::CheckUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::SendVerificationEmailRequest, ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse>(
          std::mem_fn(&UserService::Service::SendVerificationEmail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::VerifyEmailRequest, ::accounts::v1alpha1::users::v1::VerifyEmailResponse>(
          std::mem_fn(&UserService::Service::VerifyEmail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest, ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse>(
          std::mem_fn(&UserService::Service::GetUsersEmailFilter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::GetListUserDexRequest, ::accounts::v1alpha1::users::v1::GetListUserDexResponse>(
          std::mem_fn(&UserService::Service::GetListUserDex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::accounts::v1alpha1::users::v1::GetOneUserDexRequest, ::accounts::v1alpha1::users::v1::GetOneUserDexResponse>(
          std::mem_fn(&UserService::Service::GetOneUserDex), this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::CreateUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::CreateUserRequest* request, ::accounts::v1alpha1::users::v1::CreateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ListUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::ListUserRequest* request, ::accounts::v1alpha1::users::v1::ListUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetOneUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserRequest* request, ::accounts::v1alpha1::users::v1::GetOneUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::UpdateUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::UpdateUserRequest* request, ::accounts::v1alpha1::users::v1::UpdateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::DeleteUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::DeleteUserRequest* request, ::accounts::v1alpha1::users::v1::DeleteUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ListUserPagination(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::ListUserPaginationRequest* request, ::accounts::v1alpha1::users::v1::ListUserPaginationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::SendInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::SendInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::SendInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::GetInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::GetInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::AgreeInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::AgreeInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::AgreeInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ListInvitationUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::ListInvitationUserRequest* request, ::accounts::v1alpha1::users::v1::ListInvitationUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::CheckUser(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::CheckUserRequest* request, ::accounts::v1alpha1::users::v1::CheckUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::SendVerificationEmail(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::SendVerificationEmailRequest* request, ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::VerifyEmail(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::VerifyEmailRequest* request, ::accounts::v1alpha1::users::v1::VerifyEmailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetUsersEmailFilter(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest* request, ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetListUserDex(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::GetListUserDexRequest* request, ::accounts::v1alpha1::users::v1::GetListUserDexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetOneUserDex(::grpc::ServerContext* context, const ::accounts::v1alpha1::users::v1::GetOneUserDexRequest* request, ::accounts::v1alpha1::users::v1::GetOneUserDexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace accounts
}  // namespace v1alpha1
}  // namespace users
}  // namespace v1

