// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/users/users.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2fusers_2fusers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2fusers_2fusers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "accounts/v1alpha1/accounts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2fv1alpha1_2fusers_2fusers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
namespace accounts {
namespace v1alpha1 {
namespace users {
namespace v1 {
class CheckUserRequest;
struct CheckUserRequestDefaultTypeInternal;
extern CheckUserRequestDefaultTypeInternal _CheckUserRequest_default_instance_;
class CheckUserResponse;
struct CheckUserResponseDefaultTypeInternal;
extern CheckUserResponseDefaultTypeInternal _CheckUserResponse_default_instance_;
class CreateUserRequest;
struct CreateUserRequestDefaultTypeInternal;
extern CreateUserRequestDefaultTypeInternal _CreateUserRequest_default_instance_;
class CreateUserResponse;
struct CreateUserResponseDefaultTypeInternal;
extern CreateUserResponseDefaultTypeInternal _CreateUserResponse_default_instance_;
class DeleteUserRequest;
struct DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class DeleteUserResponse;
struct DeleteUserResponseDefaultTypeInternal;
extern DeleteUserResponseDefaultTypeInternal _DeleteUserResponse_default_instance_;
class GetListUserDexRequest;
struct GetListUserDexRequestDefaultTypeInternal;
extern GetListUserDexRequestDefaultTypeInternal _GetListUserDexRequest_default_instance_;
class GetListUserDexResponse;
struct GetListUserDexResponseDefaultTypeInternal;
extern GetListUserDexResponseDefaultTypeInternal _GetListUserDexResponse_default_instance_;
class GetOneUserDexRequest;
struct GetOneUserDexRequestDefaultTypeInternal;
extern GetOneUserDexRequestDefaultTypeInternal _GetOneUserDexRequest_default_instance_;
class GetOneUserDexResponse;
struct GetOneUserDexResponseDefaultTypeInternal;
extern GetOneUserDexResponseDefaultTypeInternal _GetOneUserDexResponse_default_instance_;
class GetOneUserRequest;
struct GetOneUserRequestDefaultTypeInternal;
extern GetOneUserRequestDefaultTypeInternal _GetOneUserRequest_default_instance_;
class GetOneUserResponse;
struct GetOneUserResponseDefaultTypeInternal;
extern GetOneUserResponseDefaultTypeInternal _GetOneUserResponse_default_instance_;
class GetUsersEmailFilterRequest;
struct GetUsersEmailFilterRequestDefaultTypeInternal;
extern GetUsersEmailFilterRequestDefaultTypeInternal _GetUsersEmailFilterRequest_default_instance_;
class GetUsersEmailFilterResponse;
struct GetUsersEmailFilterResponseDefaultTypeInternal;
extern GetUsersEmailFilterResponseDefaultTypeInternal _GetUsersEmailFilterResponse_default_instance_;
class ListUserPaginationRequest;
struct ListUserPaginationRequestDefaultTypeInternal;
extern ListUserPaginationRequestDefaultTypeInternal _ListUserPaginationRequest_default_instance_;
class ListUserPaginationResponse;
struct ListUserPaginationResponseDefaultTypeInternal;
extern ListUserPaginationResponseDefaultTypeInternal _ListUserPaginationResponse_default_instance_;
class ListUserRequest;
struct ListUserRequestDefaultTypeInternal;
extern ListUserRequestDefaultTypeInternal _ListUserRequest_default_instance_;
class ListUserResponse;
struct ListUserResponseDefaultTypeInternal;
extern ListUserResponseDefaultTypeInternal _ListUserResponse_default_instance_;
class SendVerificationEmailRequest;
struct SendVerificationEmailRequestDefaultTypeInternal;
extern SendVerificationEmailRequestDefaultTypeInternal _SendVerificationEmailRequest_default_instance_;
class SendVerificationEmailResponse;
struct SendVerificationEmailResponseDefaultTypeInternal;
extern SendVerificationEmailResponseDefaultTypeInternal _SendVerificationEmailResponse_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UpdateUserResponse;
struct UpdateUserResponseDefaultTypeInternal;
extern UpdateUserResponseDefaultTypeInternal _UpdateUserResponse_default_instance_;
class UsersDex;
struct UsersDexDefaultTypeInternal;
extern UsersDexDefaultTypeInternal _UsersDex_default_instance_;
class VerifyEmailRequest;
struct VerifyEmailRequestDefaultTypeInternal;
extern VerifyEmailRequestDefaultTypeInternal _VerifyEmailRequest_default_instance_;
class VerifyEmailResponse;
struct VerifyEmailResponseDefaultTypeInternal;
extern VerifyEmailResponseDefaultTypeInternal _VerifyEmailResponse_default_instance_;
}  // namespace v1
}  // namespace users
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> ::accounts::v1alpha1::users::v1::CheckUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::CheckUserRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::CheckUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::CheckUserResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::CreateUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::CreateUserRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::CreateUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::CreateUserResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::DeleteUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::DeleteUserRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::DeleteUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::DeleteUserResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetListUserDexRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetListUserDexRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetListUserDexResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetListUserDexResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetOneUserDexRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetOneUserDexRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetOneUserDexResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetOneUserDexResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetOneUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetOneUserRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetOneUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetOneUserResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetUsersEmailFilterRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::GetUsersEmailFilterResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::ListUserPaginationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::ListUserPaginationRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::ListUserPaginationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::ListUserPaginationResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::ListUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::ListUserRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::ListUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::ListUserResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::SendVerificationEmailRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::SendVerificationEmailRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::SendVerificationEmailResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::SendVerificationEmailResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::UpdateUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::UpdateUserRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::UpdateUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::UpdateUserResponse>(Arena*);
template<> ::accounts::v1alpha1::users::v1::UsersDex* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::UsersDex>(Arena*);
template<> ::accounts::v1alpha1::users::v1::VerifyEmailRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::VerifyEmailRequest>(Arena*);
template<> ::accounts::v1alpha1::users::v1::VerifyEmailResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::users::v1::VerifyEmailResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accounts {
namespace v1alpha1 {
namespace users {
namespace v1 {

// ===================================================================

class CreateUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.CreateUserResponse) */ {
 public:
  inline CreateUserResponse() : CreateUserResponse(nullptr) {}
  ~CreateUserResponse() override;
  explicit constexpr CreateUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserResponse(const CreateUserResponse& from);
  CreateUserResponse(CreateUserResponse&& from) noexcept
    : CreateUserResponse() {
    *this = ::std::move(from);
  }

  inline CreateUserResponse& operator=(const CreateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserResponse& operator=(CreateUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUserResponse*>(
               &_CreateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateUserResponse& a, CreateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserResponse* New() const final {
    return new CreateUserResponse();
  }

  CreateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.CreateUserResponse";
  }
  protected:
  explicit CreateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.CreateUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.UpdateUserResponse) */ {
 public:
  inline UpdateUserResponse() : UpdateUserResponse(nullptr) {}
  ~UpdateUserResponse() override;
  explicit constexpr UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserResponse(const UpdateUserResponse& from);
  UpdateUserResponse(UpdateUserResponse&& from) noexcept
    : UpdateUserResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserResponse& operator=(const UpdateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserResponse& operator=(UpdateUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserResponse*>(
               &_UpdateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateUserResponse& a, UpdateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserResponse* New() const final {
    return new UpdateUserResponse();
  }

  UpdateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.UpdateUserResponse";
  }
  protected:
  explicit UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.UpdateUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.DeleteUserResponse) */ {
 public:
  inline DeleteUserResponse() : DeleteUserResponse(nullptr) {}
  ~DeleteUserResponse() override;
  explicit constexpr DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserResponse(const DeleteUserResponse& from);
  DeleteUserResponse(DeleteUserResponse&& from) noexcept
    : DeleteUserResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUserResponse& operator=(const DeleteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserResponse& operator=(DeleteUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUserResponse*>(
               &_DeleteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteUserResponse& a, DeleteUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserResponse* New() const final {
    return new DeleteUserResponse();
  }

  DeleteUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.DeleteUserResponse";
  }
  protected:
  explicit DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.DeleteUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class ListUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.ListUserRequest) */ {
 public:
  inline ListUserRequest() : ListUserRequest(nullptr) {}
  ~ListUserRequest() override;
  explicit constexpr ListUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserRequest(const ListUserRequest& from);
  ListUserRequest(ListUserRequest&& from) noexcept
    : ListUserRequest() {
    *this = ::std::move(from);
  }

  inline ListUserRequest& operator=(const ListUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserRequest& operator=(ListUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserRequest*>(
               &_ListUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListUserRequest& a, ListUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserRequest* New() const final {
    return new ListUserRequest();
  }

  ListUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.ListUserRequest";
  }
  protected:
  explicit ListUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.ListUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class CreateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.CreateUserRequest) */ {
 public:
  inline CreateUserRequest() : CreateUserRequest(nullptr) {}
  ~CreateUserRequest() override;
  explicit constexpr CreateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserRequest(const CreateUserRequest& from);
  CreateUserRequest(CreateUserRequest&& from) noexcept
    : CreateUserRequest() {
    *this = ::std::move(from);
  }

  inline CreateUserRequest& operator=(const CreateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRequest& operator=(CreateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUserRequest*>(
               &_CreateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateUserRequest& a, CreateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserRequest* New() const final {
    return new CreateUserRequest();
  }

  CreateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.CreateUserRequest";
  }
  protected:
  explicit CreateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesIdsFieldNumber = 6,
    kPermissionsIdsFieldNumber = 7,
    kOrganizationsIdsFieldNumber = 8,
    kUserIdFieldNumber = 1,
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kPhoneNumberFieldNumber = 9,
    kCountryFieldNumber = 10,
    kCityFieldNumber = 11,
    kZipCodeFieldNumber = 12,
    kAddressFieldNumber = 13,
    kStateFieldNumber = 14,
    kEmojiCountryFieldNumber = 15,
    kInvitationCodeFieldNumber = 16,
    kLanguageFieldNumber = 18,
    kPhoneCodeFieldNumber = 27,
    kOptionalAddressFieldNumber = 28,
    kImageFieldNumber = 29,
    kIsActiveFieldNumber = 5,
    kIsMfaEnabledFieldNumber = 17,
    kPushNotificationFieldNumber = 19,
    kEmailNotificationFieldNumber = 20,
    kNewLoginNotificationFieldNumber = 21,
    kCreateNotificationFieldNumber = 22,
    kUpdateNotificationFieldNumber = 23,
    kDeleteNotificationFieldNumber = 24,
    kApplicationNotificationFieldNumber = 25,
    kReadNotificationFieldNumber = 26,
  };
  // repeated uint32 roles_ids = 6 [json_name = "rolesIds"];
  int roles_ids_size() const;
  private:
  int _internal_roles_ids_size() const;
  public:
  void clear_roles_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roles_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_roles_ids() const;
  void _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_roles_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 roles_ids(int index) const;
  void set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      roles_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_roles_ids();

  // repeated uint32 permissions_ids = 7 [json_name = "permissionsIds"];
  int permissions_ids_size() const;
  private:
  int _internal_permissions_ids_size() const;
  public:
  void clear_permissions_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permissions_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_permissions_ids() const;
  void _internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_permissions_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 permissions_ids(int index) const;
  void set_permissions_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      permissions_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_permissions_ids();

  // repeated uint32 organizations_ids = 8 [json_name = "organizationsIds"];
  int organizations_ids_size() const;
  private:
  int _internal_organizations_ids_size() const;
  public:
  void clear_organizations_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organizations_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_organizations_ids() const;
  void _internal_add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_organizations_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 organizations_ids(int index) const;
  void set_organizations_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      organizations_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_organizations_ids();

  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string first_name = 2 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 3 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 4 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone_number = 9 [json_name = "phoneNumber"];
  void clear_phone_number();
  const std::string& phone_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string country = 10 [json_name = "country"];
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_MUST_USE_RESULT std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string city = 11 [json_name = "city"];
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_MUST_USE_RESULT std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string zip_code = 12 [json_name = "zipCode"];
  void clear_zip_code();
  const std::string& zip_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zip_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zip_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_zip_code();
  void set_allocated_zip_code(std::string* zip_code);
  private:
  const std::string& _internal_zip_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zip_code(const std::string& value);
  std::string* _internal_mutable_zip_code();
  public:

  // string address = 13 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string state = 14 [json_name = "state"];
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string emoji_country = 15 [json_name = "emojiCountry"];
  void clear_emoji_country();
  const std::string& emoji_country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_emoji_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_emoji_country();
  PROTOBUF_MUST_USE_RESULT std::string* release_emoji_country();
  void set_allocated_emoji_country(std::string* emoji_country);
  private:
  const std::string& _internal_emoji_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emoji_country(const std::string& value);
  std::string* _internal_mutable_emoji_country();
  public:

  // string invitation_code = 16 [json_name = "invitationCode"];
  void clear_invitation_code();
  const std::string& invitation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitation_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_invitation_code();
  void set_allocated_invitation_code(std::string* invitation_code);
  private:
  const std::string& _internal_invitation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitation_code(const std::string& value);
  std::string* _internal_mutable_invitation_code();
  public:

  // string language = 18 [json_name = "language"];
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_MUST_USE_RESULT std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string phone_code = 27 [json_name = "phoneCode"];
  void clear_phone_code();
  const std::string& phone_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_phone_code();
  void set_allocated_phone_code(std::string* phone_code);
  private:
  const std::string& _internal_phone_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_code(const std::string& value);
  std::string* _internal_mutable_phone_code();
  public:

  // string optional_address = 28 [json_name = "optionalAddress"];
  void clear_optional_address();
  const std::string& optional_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_optional_address();
  void set_allocated_optional_address(std::string* optional_address);
  private:
  const std::string& _internal_optional_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_address(const std::string& value);
  std::string* _internal_mutable_optional_address();
  public:

  // string image = 29 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bool is_active = 5 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool is_mfa_enabled = 17 [json_name = "isMfaEnabled"];
  void clear_is_mfa_enabled();
  bool is_mfa_enabled() const;
  void set_is_mfa_enabled(bool value);
  private:
  bool _internal_is_mfa_enabled() const;
  void _internal_set_is_mfa_enabled(bool value);
  public:

  // bool push_notification = 19 [json_name = "pushNotification"];
  void clear_push_notification();
  bool push_notification() const;
  void set_push_notification(bool value);
  private:
  bool _internal_push_notification() const;
  void _internal_set_push_notification(bool value);
  public:

  // bool email_notification = 20 [json_name = "emailNotification"];
  void clear_email_notification();
  bool email_notification() const;
  void set_email_notification(bool value);
  private:
  bool _internal_email_notification() const;
  void _internal_set_email_notification(bool value);
  public:

  // bool new_login_notification = 21 [json_name = "newLoginNotification"];
  void clear_new_login_notification();
  bool new_login_notification() const;
  void set_new_login_notification(bool value);
  private:
  bool _internal_new_login_notification() const;
  void _internal_set_new_login_notification(bool value);
  public:

  // bool create_notification = 22 [json_name = "createNotification"];
  void clear_create_notification();
  bool create_notification() const;
  void set_create_notification(bool value);
  private:
  bool _internal_create_notification() const;
  void _internal_set_create_notification(bool value);
  public:

  // bool update_notification = 23 [json_name = "updateNotification"];
  void clear_update_notification();
  bool update_notification() const;
  void set_update_notification(bool value);
  private:
  bool _internal_update_notification() const;
  void _internal_set_update_notification(bool value);
  public:

  // bool delete_notification = 24 [json_name = "deleteNotification"];
  void clear_delete_notification();
  bool delete_notification() const;
  void set_delete_notification(bool value);
  private:
  bool _internal_delete_notification() const;
  void _internal_set_delete_notification(bool value);
  public:

  // bool application_notification = 25 [json_name = "applicationNotification"];
  void clear_application_notification();
  bool application_notification() const;
  void set_application_notification(bool value);
  private:
  bool _internal_application_notification() const;
  void _internal_set_application_notification(bool value);
  public:

  // bool read_notification = 26 [json_name = "readNotification"];
  void clear_read_notification();
  bool read_notification() const;
  void set_read_notification(bool value);
  private:
  bool _internal_read_notification() const;
  void _internal_set_read_notification(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.CreateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > roles_ids_;
  mutable std::atomic<int> _roles_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > permissions_ids_;
  mutable std::atomic<int> _permissions_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > organizations_ids_;
  mutable std::atomic<int> _organizations_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zip_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emoji_country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  bool is_active_;
  bool is_mfa_enabled_;
  bool push_notification_;
  bool email_notification_;
  bool new_login_notification_;
  bool create_notification_;
  bool update_notification_;
  bool delete_notification_;
  bool application_notification_;
  bool read_notification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  ~UpdateUserRequest() override;
  explicit constexpr UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserRequest* New() const final {
    return new UpdateUserRequest();
  }

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kAuthIdFieldNumber = 1,
  };
  // .accounts.v1alpha1.users.v1.CreateUserRequest auth = 2 [json_name = "auth"];
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const ::accounts::v1alpha1::users::v1::CreateUserRequest& auth() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::users::v1::CreateUserRequest* release_auth();
  ::accounts::v1alpha1::users::v1::CreateUserRequest* mutable_auth();
  void set_allocated_auth(::accounts::v1alpha1::users::v1::CreateUserRequest* auth);
  private:
  const ::accounts::v1alpha1::users::v1::CreateUserRequest& _internal_auth() const;
  ::accounts::v1alpha1::users::v1::CreateUserRequest* _internal_mutable_auth();
  public:
  void unsafe_arena_set_allocated_auth(
      ::accounts::v1alpha1::users::v1::CreateUserRequest* auth);
  ::accounts::v1alpha1::users::v1::CreateUserRequest* unsafe_arena_release_auth();

  // uint32 auth_id = 1 [json_name = "authId"];
  void clear_auth_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_id() const;
  void set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auth_id() const;
  void _internal_set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::accounts::v1alpha1::users::v1::CreateUserRequest* auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.DeleteUserRequest) */ {
 public:
  inline DeleteUserRequest() : DeleteUserRequest(nullptr) {}
  ~DeleteUserRequest() override;
  explicit constexpr DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRequest(const DeleteUserRequest& from);
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRequest* New() const final {
    return new DeleteUserRequest();
  }

  DeleteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.DeleteUserRequest";
  }
  protected:
  explicit DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 2,
  };
  // uint32 user_id = 1 [json_name = "userId"];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.DeleteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetOneUserRequest) */ {
 public:
  inline GetOneUserRequest() : GetOneUserRequest(nullptr) {}
  ~GetOneUserRequest() override;
  explicit constexpr GetOneUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserRequest(const GetOneUserRequest& from);
  GetOneUserRequest(GetOneUserRequest&& from) noexcept
    : GetOneUserRequest() {
    *this = ::std::move(from);
  }

  inline GetOneUserRequest& operator=(const GetOneUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserRequest& operator=(GetOneUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneUserRequest*>(
               &_GetOneUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetOneUserRequest& a, GetOneUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserRequest* New() const final {
    return new GetOneUserRequest();
  }

  GetOneUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetOneUserRequest";
  }
  protected:
  explicit GetOneUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 2,
  };
  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetOneUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetOneUserResponse) */ {
 public:
  inline GetOneUserResponse() : GetOneUserResponse(nullptr) {}
  ~GetOneUserResponse() override;
  explicit constexpr GetOneUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserResponse(const GetOneUserResponse& from);
  GetOneUserResponse(GetOneUserResponse&& from) noexcept
    : GetOneUserResponse() {
    *this = ::std::move(from);
  }

  inline GetOneUserResponse& operator=(const GetOneUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserResponse& operator=(GetOneUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneUserResponse*>(
               &_GetOneUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetOneUserResponse& a, GetOneUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserResponse* New() const final {
    return new GetOneUserResponse();
  }

  GetOneUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetOneUserResponse";
  }
  protected:
  explicit GetOneUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kErrorFieldNumber = 3,
    kUserFieldNumber = 1,
  };
  // string msg = 2 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 3 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .accounts.v1alpha1.UserDetail user = 1 [json_name = "user"];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::accounts::v1alpha1::UserDetail& user() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::UserDetail* release_user();
  ::accounts::v1alpha1::UserDetail* mutable_user();
  void set_allocated_user(::accounts::v1alpha1::UserDetail* user);
  private:
  const ::accounts::v1alpha1::UserDetail& _internal_user() const;
  ::accounts::v1alpha1::UserDetail* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::accounts::v1alpha1::UserDetail* user);
  ::accounts::v1alpha1::UserDetail* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetOneUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::accounts::v1alpha1::UserDetail* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class ListUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.ListUserResponse) */ {
 public:
  inline ListUserResponse() : ListUserResponse(nullptr) {}
  ~ListUserResponse() override;
  explicit constexpr ListUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserResponse(const ListUserResponse& from);
  ListUserResponse(ListUserResponse&& from) noexcept
    : ListUserResponse() {
    *this = ::std::move(from);
  }

  inline ListUserResponse& operator=(const ListUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserResponse& operator=(ListUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserResponse* internal_default_instance() {
    return reinterpret_cast<const ListUserResponse*>(
               &_ListUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListUserResponse& a, ListUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserResponse* New() const final {
    return new ListUserResponse();
  }

  ListUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.ListUserResponse";
  }
  protected:
  explicit ListUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::accounts::v1alpha1::UserList* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
      mutable_users();
  private:
  const ::accounts::v1alpha1::UserList& _internal_users(int index) const;
  ::accounts::v1alpha1::UserList* _internal_add_users();
  public:
  const ::accounts::v1alpha1::UserList& users(int index) const;
  ::accounts::v1alpha1::UserList* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
      users() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.ListUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class ListUserPaginationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.ListUserPaginationRequest) */ {
 public:
  inline ListUserPaginationRequest() : ListUserPaginationRequest(nullptr) {}
  ~ListUserPaginationRequest() override;
  explicit constexpr ListUserPaginationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserPaginationRequest(const ListUserPaginationRequest& from);
  ListUserPaginationRequest(ListUserPaginationRequest&& from) noexcept
    : ListUserPaginationRequest() {
    *this = ::std::move(from);
  }

  inline ListUserPaginationRequest& operator=(const ListUserPaginationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserPaginationRequest& operator=(ListUserPaginationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserPaginationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserPaginationRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserPaginationRequest*>(
               &_ListUserPaginationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListUserPaginationRequest& a, ListUserPaginationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserPaginationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserPaginationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserPaginationRequest* New() const final {
    return new ListUserPaginationRequest();
  }

  ListUserPaginationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserPaginationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserPaginationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserPaginationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserPaginationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.ListUserPaginationRequest";
  }
  protected:
  explicit ListUserPaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // int32 offset = 1 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit = 2 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.ListUserPaginationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class ListUserPaginationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.ListUserPaginationResponse) */ {
 public:
  inline ListUserPaginationResponse() : ListUserPaginationResponse(nullptr) {}
  ~ListUserPaginationResponse() override;
  explicit constexpr ListUserPaginationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserPaginationResponse(const ListUserPaginationResponse& from);
  ListUserPaginationResponse(ListUserPaginationResponse&& from) noexcept
    : ListUserPaginationResponse() {
    *this = ::std::move(from);
  }

  inline ListUserPaginationResponse& operator=(const ListUserPaginationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserPaginationResponse& operator=(ListUserPaginationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserPaginationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserPaginationResponse* internal_default_instance() {
    return reinterpret_cast<const ListUserPaginationResponse*>(
               &_ListUserPaginationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListUserPaginationResponse& a, ListUserPaginationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserPaginationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserPaginationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserPaginationResponse* New() const final {
    return new ListUserPaginationResponse();
  }

  ListUserPaginationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserPaginationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserPaginationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserPaginationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserPaginationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.ListUserPaginationResponse";
  }
  protected:
  explicit ListUserPaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.UserList users = 2 [json_name = "users"];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::accounts::v1alpha1::UserList* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
      mutable_users();
  private:
  const ::accounts::v1alpha1::UserList& _internal_users(int index) const;
  ::accounts::v1alpha1::UserList* _internal_add_users();
  public:
  const ::accounts::v1alpha1::UserList& users(int index) const;
  ::accounts::v1alpha1::UserList* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
      users() const;

  // int64 count = 1 [json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.ListUserPaginationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList > users_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetListUserDexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetListUserDexRequest) */ {
 public:
  inline GetListUserDexRequest() : GetListUserDexRequest(nullptr) {}
  ~GetListUserDexRequest() override;
  explicit constexpr GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetListUserDexRequest(const GetListUserDexRequest& from);
  GetListUserDexRequest(GetListUserDexRequest&& from) noexcept
    : GetListUserDexRequest() {
    *this = ::std::move(from);
  }

  inline GetListUserDexRequest& operator=(const GetListUserDexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListUserDexRequest& operator=(GetListUserDexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetListUserDexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetListUserDexRequest* internal_default_instance() {
    return reinterpret_cast<const GetListUserDexRequest*>(
               &_GetListUserDexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetListUserDexRequest& a, GetListUserDexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListUserDexRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListUserDexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListUserDexRequest* New() const final {
    return new GetListUserDexRequest();
  }

  GetListUserDexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListUserDexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetListUserDexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetListUserDexRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListUserDexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetListUserDexRequest";
  }
  protected:
  explicit GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetListUserDexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetListUserDexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetListUserDexResponse) */ {
 public:
  inline GetListUserDexResponse() : GetListUserDexResponse(nullptr) {}
  ~GetListUserDexResponse() override;
  explicit constexpr GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetListUserDexResponse(const GetListUserDexResponse& from);
  GetListUserDexResponse(GetListUserDexResponse&& from) noexcept
    : GetListUserDexResponse() {
    *this = ::std::move(from);
  }

  inline GetListUserDexResponse& operator=(const GetListUserDexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListUserDexResponse& operator=(GetListUserDexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetListUserDexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetListUserDexResponse* internal_default_instance() {
    return reinterpret_cast<const GetListUserDexResponse*>(
               &_GetListUserDexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetListUserDexResponse& a, GetListUserDexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListUserDexResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListUserDexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListUserDexResponse* New() const final {
    return new GetListUserDexResponse();
  }

  GetListUserDexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListUserDexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetListUserDexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetListUserDexResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListUserDexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetListUserDexResponse";
  }
  protected:
  explicit GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersDexFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.users.v1.UsersDex users_dex = 1 [json_name = "usersDex"];
  int users_dex_size() const;
  private:
  int _internal_users_dex_size() const;
  public:
  void clear_users_dex();
  ::accounts::v1alpha1::users::v1::UsersDex* mutable_users_dex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::users::v1::UsersDex >*
      mutable_users_dex();
  private:
  const ::accounts::v1alpha1::users::v1::UsersDex& _internal_users_dex(int index) const;
  ::accounts::v1alpha1::users::v1::UsersDex* _internal_add_users_dex();
  public:
  const ::accounts::v1alpha1::users::v1::UsersDex& users_dex(int index) const;
  ::accounts::v1alpha1::users::v1::UsersDex* add_users_dex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::users::v1::UsersDex >&
      users_dex() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetListUserDexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::users::v1::UsersDex > users_dex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserDexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetOneUserDexRequest) */ {
 public:
  inline GetOneUserDexRequest() : GetOneUserDexRequest(nullptr) {}
  ~GetOneUserDexRequest() override;
  explicit constexpr GetOneUserDexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserDexRequest(const GetOneUserDexRequest& from);
  GetOneUserDexRequest(GetOneUserDexRequest&& from) noexcept
    : GetOneUserDexRequest() {
    *this = ::std::move(from);
  }

  inline GetOneUserDexRequest& operator=(const GetOneUserDexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserDexRequest& operator=(GetOneUserDexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserDexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserDexRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneUserDexRequest*>(
               &_GetOneUserDexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetOneUserDexRequest& a, GetOneUserDexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserDexRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserDexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserDexRequest* New() const final {
    return new GetOneUserDexRequest();
  }

  GetOneUserDexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserDexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserDexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserDexRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserDexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetOneUserDexRequest";
  }
  protected:
  explicit GetOneUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .accounts.v1alpha1.users.v1.CreateUserRequest user = 2 [json_name = "user"];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::accounts::v1alpha1::users::v1::CreateUserRequest& user() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::users::v1::CreateUserRequest* release_user();
  ::accounts::v1alpha1::users::v1::CreateUserRequest* mutable_user();
  void set_allocated_user(::accounts::v1alpha1::users::v1::CreateUserRequest* user);
  private:
  const ::accounts::v1alpha1::users::v1::CreateUserRequest& _internal_user() const;
  ::accounts::v1alpha1::users::v1::CreateUserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::accounts::v1alpha1::users::v1::CreateUserRequest* user);
  ::accounts::v1alpha1::users::v1::CreateUserRequest* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetOneUserDexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::accounts::v1alpha1::users::v1::CreateUserRequest* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserDexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetOneUserDexResponse) */ {
 public:
  inline GetOneUserDexResponse() : GetOneUserDexResponse(nullptr) {}
  ~GetOneUserDexResponse() override;
  explicit constexpr GetOneUserDexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserDexResponse(const GetOneUserDexResponse& from);
  GetOneUserDexResponse(GetOneUserDexResponse&& from) noexcept
    : GetOneUserDexResponse() {
    *this = ::std::move(from);
  }

  inline GetOneUserDexResponse& operator=(const GetOneUserDexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserDexResponse& operator=(GetOneUserDexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserDexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserDexResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneUserDexResponse*>(
               &_GetOneUserDexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetOneUserDexResponse& a, GetOneUserDexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserDexResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserDexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserDexResponse* New() const final {
    return new GetOneUserDexResponse();
  }

  GetOneUserDexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserDexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserDexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserDexResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserDexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetOneUserDexResponse";
  }
  protected:
  explicit GetOneUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kErrorFieldNumber = 3,
    kUserFieldNumber = 1,
  };
  // string msg = 2 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 3 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .accounts.v1alpha1.UserDetail user = 1 [json_name = "user"];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::accounts::v1alpha1::UserDetail& user() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::UserDetail* release_user();
  ::accounts::v1alpha1::UserDetail* mutable_user();
  void set_allocated_user(::accounts::v1alpha1::UserDetail* user);
  private:
  const ::accounts::v1alpha1::UserDetail& _internal_user() const;
  ::accounts::v1alpha1::UserDetail* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::accounts::v1alpha1::UserDetail* user);
  ::accounts::v1alpha1::UserDetail* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetOneUserDexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::accounts::v1alpha1::UserDetail* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class SendVerificationEmailRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.SendVerificationEmailRequest) */ {
 public:
  inline SendVerificationEmailRequest() : SendVerificationEmailRequest(nullptr) {}
  ~SendVerificationEmailRequest() override;
  explicit constexpr SendVerificationEmailRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendVerificationEmailRequest(const SendVerificationEmailRequest& from);
  SendVerificationEmailRequest(SendVerificationEmailRequest&& from) noexcept
    : SendVerificationEmailRequest() {
    *this = ::std::move(from);
  }

  inline SendVerificationEmailRequest& operator=(const SendVerificationEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendVerificationEmailRequest& operator=(SendVerificationEmailRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendVerificationEmailRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendVerificationEmailRequest* internal_default_instance() {
    return reinterpret_cast<const SendVerificationEmailRequest*>(
               &_SendVerificationEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SendVerificationEmailRequest& a, SendVerificationEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendVerificationEmailRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendVerificationEmailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendVerificationEmailRequest* New() const final {
    return new SendVerificationEmailRequest();
  }

  SendVerificationEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendVerificationEmailRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendVerificationEmailRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendVerificationEmailRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendVerificationEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.SendVerificationEmailRequest";
  }
  protected:
  explicit SendVerificationEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kNameFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // string email = 1 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 3 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.SendVerificationEmailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class SendVerificationEmailResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.SendVerificationEmailResponse) */ {
 public:
  inline SendVerificationEmailResponse() : SendVerificationEmailResponse(nullptr) {}
  ~SendVerificationEmailResponse() override;
  explicit constexpr SendVerificationEmailResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendVerificationEmailResponse(const SendVerificationEmailResponse& from);
  SendVerificationEmailResponse(SendVerificationEmailResponse&& from) noexcept
    : SendVerificationEmailResponse() {
    *this = ::std::move(from);
  }

  inline SendVerificationEmailResponse& operator=(const SendVerificationEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendVerificationEmailResponse& operator=(SendVerificationEmailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendVerificationEmailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendVerificationEmailResponse* internal_default_instance() {
    return reinterpret_cast<const SendVerificationEmailResponse*>(
               &_SendVerificationEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SendVerificationEmailResponse& a, SendVerificationEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendVerificationEmailResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendVerificationEmailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendVerificationEmailResponse* New() const final {
    return new SendVerificationEmailResponse();
  }

  SendVerificationEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendVerificationEmailResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendVerificationEmailResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendVerificationEmailResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendVerificationEmailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.SendVerificationEmailResponse";
  }
  protected:
  explicit SendVerificationEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHtmlResultFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string html_result = 1 [json_name = "htmlResult"];
  void clear_html_result();
  const std::string& html_result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_html_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_html_result();
  PROTOBUF_MUST_USE_RESULT std::string* release_html_result();
  void set_allocated_html_result(std::string* html_result);
  private:
  const std::string& _internal_html_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_html_result(const std::string& value);
  std::string* _internal_mutable_html_result();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.SendVerificationEmailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr html_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class VerifyEmailRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.VerifyEmailRequest) */ {
 public:
  inline VerifyEmailRequest() : VerifyEmailRequest(nullptr) {}
  ~VerifyEmailRequest() override;
  explicit constexpr VerifyEmailRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyEmailRequest(const VerifyEmailRequest& from);
  VerifyEmailRequest(VerifyEmailRequest&& from) noexcept
    : VerifyEmailRequest() {
    *this = ::std::move(from);
  }

  inline VerifyEmailRequest& operator=(const VerifyEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyEmailRequest& operator=(VerifyEmailRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyEmailRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyEmailRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyEmailRequest*>(
               &_VerifyEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VerifyEmailRequest& a, VerifyEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyEmailRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyEmailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyEmailRequest* New() const final {
    return new VerifyEmailRequest();
  }

  VerifyEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyEmailRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyEmailRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VerifyEmailRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.VerifyEmailRequest";
  }
  protected:
  explicit VerifyEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.VerifyEmailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class VerifyEmailResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.VerifyEmailResponse) */ {
 public:
  inline VerifyEmailResponse() : VerifyEmailResponse(nullptr) {}
  ~VerifyEmailResponse() override;
  explicit constexpr VerifyEmailResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyEmailResponse(const VerifyEmailResponse& from);
  VerifyEmailResponse(VerifyEmailResponse&& from) noexcept
    : VerifyEmailResponse() {
    *this = ::std::move(from);
  }

  inline VerifyEmailResponse& operator=(const VerifyEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyEmailResponse& operator=(VerifyEmailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyEmailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyEmailResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyEmailResponse*>(
               &_VerifyEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VerifyEmailResponse& a, VerifyEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyEmailResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyEmailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyEmailResponse* New() const final {
    return new VerifyEmailResponse();
  }

  VerifyEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyEmailResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyEmailResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VerifyEmailResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyEmailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.VerifyEmailResponse";
  }
  protected:
  explicit VerifyEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.VerifyEmailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class CheckUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.CheckUserRequest) */ {
 public:
  inline CheckUserRequest() : CheckUserRequest(nullptr) {}
  ~CheckUserRequest() override;
  explicit constexpr CheckUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUserRequest(const CheckUserRequest& from);
  CheckUserRequest(CheckUserRequest&& from) noexcept
    : CheckUserRequest() {
    *this = ::std::move(from);
  }

  inline CheckUserRequest& operator=(const CheckUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserRequest& operator=(CheckUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUserRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUserRequest*>(
               &_CheckUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CheckUserRequest& a, CheckUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserRequest* New() const final {
    return new CheckUserRequest();
  }

  CheckUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.CheckUserRequest";
  }
  protected:
  explicit CheckUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesIdsFieldNumber = 10,
    kPermissionFieldNumber = 4,
    kUserIdDexFieldNumber = 5,
    kUserIdAdminFieldNumber = 6,
    kTypePermissionFieldNumber = 9,
    kApiKeyValueFieldNumber = 11,
    kTokenCcpAdminFieldNumber = 12,
    kTokenCcpUserIdFieldNumber = 13,
    kOrganizationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kGetOrganizationFromProjectFieldNumber = 3,
    kUserIdFieldNumber = 7,
  };
  // repeated uint32 roles_ids = 10 [json_name = "rolesIds"];
  int roles_ids_size() const;
  private:
  int _internal_roles_ids_size() const;
  public:
  void clear_roles_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roles_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_roles_ids() const;
  void _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_roles_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 roles_ids(int index) const;
  void set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      roles_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_roles_ids();

  // string permission = 4 [json_name = "permission"];
  void clear_permission();
  const std::string& permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permission();
  PROTOBUF_MUST_USE_RESULT std::string* release_permission();
  void set_allocated_permission(std::string* permission);
  private:
  const std::string& _internal_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permission(const std::string& value);
  std::string* _internal_mutable_permission();
  public:

  // string user_id_dex = 5 [json_name = "userIdDex"];
  void clear_user_id_dex();
  const std::string& user_id_dex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id_dex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id_dex();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id_dex();
  void set_allocated_user_id_dex(std::string* user_id_dex);
  private:
  const std::string& _internal_user_id_dex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id_dex(const std::string& value);
  std::string* _internal_mutable_user_id_dex();
  public:

  // string user_id_admin = 6 [json_name = "userIdAdmin"];
  void clear_user_id_admin();
  const std::string& user_id_admin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id_admin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id_admin();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id_admin();
  void set_allocated_user_id_admin(std::string* user_id_admin);
  private:
  const std::string& _internal_user_id_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id_admin(const std::string& value);
  std::string* _internal_mutable_user_id_admin();
  public:

  // string type_permission = 9 [json_name = "typePermission"];
  void clear_type_permission();
  const std::string& type_permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_permission();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_permission();
  void set_allocated_type_permission(std::string* type_permission);
  private:
  const std::string& _internal_type_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_permission(const std::string& value);
  std::string* _internal_mutable_type_permission();
  public:

  // string api_key_value = 11 [json_name = "apiKeyValue"];
  void clear_api_key_value();
  const std::string& api_key_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_key_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_key_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_api_key_value();
  void set_allocated_api_key_value(std::string* api_key_value);
  private:
  const std::string& _internal_api_key_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_key_value(const std::string& value);
  std::string* _internal_mutable_api_key_value();
  public:

  // string token_ccp_admin = 12 [json_name = "tokenCcpAdmin"];
  void clear_token_ccp_admin();
  const std::string& token_ccp_admin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_ccp_admin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_ccp_admin();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_ccp_admin();
  void set_allocated_token_ccp_admin(std::string* token_ccp_admin);
  private:
  const std::string& _internal_token_ccp_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_ccp_admin(const std::string& value);
  std::string* _internal_mutable_token_ccp_admin();
  public:

  // string token_ccp_user_id = 13 [json_name = "tokenCcpUserId"];
  void clear_token_ccp_user_id();
  const std::string& token_ccp_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_ccp_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_ccp_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_ccp_user_id();
  void set_allocated_token_ccp_user_id(std::string* token_ccp_user_id);
  private:
  const std::string& _internal_token_ccp_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_ccp_user_id(const std::string& value);
  std::string* _internal_mutable_token_ccp_user_id();
  public:

  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 get_organization_from_project = 3 [json_name = "getOrganizationFromProject"];
  void clear_get_organization_from_project();
  ::PROTOBUF_NAMESPACE_ID::uint32 get_organization_from_project() const;
  void set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_get_organization_from_project() const;
  void _internal_set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 user_id = 7 [json_name = "userId"];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.CheckUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > roles_ids_;
  mutable std::atomic<int> _roles_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_dex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_admin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_permission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_key_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_ccp_admin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_ccp_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 get_organization_from_project_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class CheckUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.CheckUserResponse) */ {
 public:
  inline CheckUserResponse() : CheckUserResponse(nullptr) {}
  ~CheckUserResponse() override;
  explicit constexpr CheckUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUserResponse(const CheckUserResponse& from);
  CheckUserResponse(CheckUserResponse&& from) noexcept
    : CheckUserResponse() {
    *this = ::std::move(from);
  }

  inline CheckUserResponse& operator=(const CheckUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserResponse& operator=(CheckUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUserResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUserResponse*>(
               &_CheckUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CheckUserResponse& a, CheckUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserResponse* New() const final {
    return new CheckUserResponse();
  }

  CheckUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.CheckUserResponse";
  }
  protected:
  explicit CheckUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 4,
    kIsExistsFieldNumber = 1,
    kIsAdminFieldNumber = 3,
  };
  // string msg = 4 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool is_exists = 1 [json_name = "isExists"];
  void clear_is_exists();
  bool is_exists() const;
  void set_is_exists(bool value);
  private:
  bool _internal_is_exists() const;
  void _internal_set_is_exists(bool value);
  public:

  // bool is_admin = 3 [json_name = "isAdmin"];
  void clear_is_admin();
  bool is_admin() const;
  void set_is_admin(bool value);
  private:
  bool _internal_is_admin() const;
  void _internal_set_is_admin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.CheckUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool is_exists_;
  bool is_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UsersDex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.UsersDex) */ {
 public:
  inline UsersDex() : UsersDex(nullptr) {}
  ~UsersDex() override;
  explicit constexpr UsersDex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsersDex(const UsersDex& from);
  UsersDex(UsersDex&& from) noexcept
    : UsersDex() {
    *this = ::std::move(from);
  }

  inline UsersDex& operator=(const UsersDex& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersDex& operator=(UsersDex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsersDex& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsersDex* internal_default_instance() {
    return reinterpret_cast<const UsersDex*>(
               &_UsersDex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UsersDex& a, UsersDex& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersDex* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersDex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsersDex* New() const final {
    return new UsersDex();
  }

  UsersDex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsersDex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsersDex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UsersDex& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersDex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.UsersDex";
  }
  protected:
  explicit UsersDex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kProviderFieldNumber = 2,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string provider = 2 [json_name = "provider"];
  void clear_provider();
  const std::string& provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.UsersDex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetUsersEmailFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest) */ {
 public:
  inline GetUsersEmailFilterRequest() : GetUsersEmailFilterRequest(nullptr) {}
  ~GetUsersEmailFilterRequest() override;
  explicit constexpr GetUsersEmailFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUsersEmailFilterRequest(const GetUsersEmailFilterRequest& from);
  GetUsersEmailFilterRequest(GetUsersEmailFilterRequest&& from) noexcept
    : GetUsersEmailFilterRequest() {
    *this = ::std::move(from);
  }

  inline GetUsersEmailFilterRequest& operator=(const GetUsersEmailFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUsersEmailFilterRequest& operator=(GetUsersEmailFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUsersEmailFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUsersEmailFilterRequest* internal_default_instance() {
    return reinterpret_cast<const GetUsersEmailFilterRequest*>(
               &_GetUsersEmailFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetUsersEmailFilterRequest& a, GetUsersEmailFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUsersEmailFilterRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUsersEmailFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUsersEmailFilterRequest* New() const final {
    return new GetUsersEmailFilterRequest();
  }

  GetUsersEmailFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUsersEmailFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUsersEmailFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUsersEmailFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUsersEmailFilterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest";
  }
  protected:
  explicit GetUsersEmailFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// -------------------------------------------------------------------

class GetUsersEmailFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse) */ {
 public:
  inline GetUsersEmailFilterResponse() : GetUsersEmailFilterResponse(nullptr) {}
  ~GetUsersEmailFilterResponse() override;
  explicit constexpr GetUsersEmailFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUsersEmailFilterResponse(const GetUsersEmailFilterResponse& from);
  GetUsersEmailFilterResponse(GetUsersEmailFilterResponse&& from) noexcept
    : GetUsersEmailFilterResponse() {
    *this = ::std::move(from);
  }

  inline GetUsersEmailFilterResponse& operator=(const GetUsersEmailFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUsersEmailFilterResponse& operator=(GetUsersEmailFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUsersEmailFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUsersEmailFilterResponse* internal_default_instance() {
    return reinterpret_cast<const GetUsersEmailFilterResponse*>(
               &_GetUsersEmailFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetUsersEmailFilterResponse& a, GetUsersEmailFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUsersEmailFilterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUsersEmailFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUsersEmailFilterResponse* New() const final {
    return new GetUsersEmailFilterResponse();
  }

  GetUsersEmailFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUsersEmailFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUsersEmailFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUsersEmailFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUsersEmailFilterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse";
  }
  protected:
  explicit GetUsersEmailFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::accounts::v1alpha1::UserList* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
      mutable_users();
  private:
  const ::accounts::v1alpha1::UserList& _internal_users(int index) const;
  ::accounts::v1alpha1::UserList* _internal_add_users();
  public:
  const ::accounts::v1alpha1::UserList& users(int index) const;
  ::accounts::v1alpha1::UserList* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
      users() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2fusers_2fusers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateUserResponse

// string msg = 1 [json_name = "msg"];
inline void CreateUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserResponse.msg)
}
inline std::string* CreateUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserResponse.msg)
  return _s;
}
inline const std::string& CreateUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserResponse.error)
}
inline std::string* CreateUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserResponse.error)
  return _s;
}
inline const std::string& CreateUserResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserResponse.error)
}

// -------------------------------------------------------------------

// UpdateUserResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.UpdateUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.UpdateUserResponse.msg)
}
inline std::string* UpdateUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.UpdateUserResponse.msg)
  return _s;
}
inline const std::string& UpdateUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.UpdateUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.UpdateUserResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.UpdateUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.UpdateUserResponse.error)
}
inline std::string* UpdateUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.UpdateUserResponse.error)
  return _s;
}
inline const std::string& UpdateUserResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.UpdateUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.UpdateUserResponse.error)
}

// -------------------------------------------------------------------

// DeleteUserResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.DeleteUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.DeleteUserResponse.msg)
}
inline std::string* DeleteUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.DeleteUserResponse.msg)
  return _s;
}
inline const std::string& DeleteUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.DeleteUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.DeleteUserResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.DeleteUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.DeleteUserResponse.error)
}
inline std::string* DeleteUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.DeleteUserResponse.error)
  return _s;
}
inline const std::string& DeleteUserResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.DeleteUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.DeleteUserResponse.error)
}

// -------------------------------------------------------------------

// ListUserRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void ListUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.ListUserRequest.organization_id)
  return _internal_organization_id();
}
inline void ListUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.ListUserRequest.organization_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void ListUserRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.ListUserRequest.project_id)
  return _internal_project_id();
}
inline void ListUserRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListUserRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.ListUserRequest.project_id)
}

// -------------------------------------------------------------------

// CreateUserRequest

// string user_id = 1 [json_name = "userId"];
inline void CreateUserRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.user_id)
}
inline std::string* CreateUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.user_id)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void CreateUserRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.user_id)
}

// string first_name = 2 [json_name = "firstName"];
inline void CreateUserRequest::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.first_name)
}
inline std::string* CreateUserRequest::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.first_name)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_first_name() const {
  return first_name_.Get();
}
inline void CreateUserRequest::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.first_name)
}

// string last_name = 3 [json_name = "lastName"];
inline void CreateUserRequest::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.last_name)
}
inline std::string* CreateUserRequest::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.last_name)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_last_name() const {
  return last_name_.Get();
}
inline void CreateUserRequest::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.last_name)
}

// string email = 4 [json_name = "email"];
inline void CreateUserRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.email)
}
inline std::string* CreateUserRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.email)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_email() const {
  return email_.Get();
}
inline void CreateUserRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.email)
}

// bool is_active = 5 [json_name = "isActive"];
inline void CreateUserRequest::clear_is_active() {
  is_active_ = false;
}
inline bool CreateUserRequest::_internal_is_active() const {
  return is_active_;
}
inline bool CreateUserRequest::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.is_active)
  return _internal_is_active();
}
inline void CreateUserRequest::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void CreateUserRequest::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.is_active)
}

// repeated uint32 roles_ids = 6 [json_name = "rolesIds"];
inline int CreateUserRequest::_internal_roles_ids_size() const {
  return roles_ids_.size();
}
inline int CreateUserRequest::roles_ids_size() const {
  return _internal_roles_ids_size();
}
inline void CreateUserRequest::clear_roles_ids() {
  roles_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_roles_ids(int index) const {
  return roles_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::roles_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.roles_ids)
  return _internal_roles_ids(index);
}
inline void CreateUserRequest::set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.roles_ids)
}
inline void CreateUserRequest::_internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Add(value);
}
inline void CreateUserRequest::add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_roles_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.CreateUserRequest.roles_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::_internal_roles_ids() const {
  return roles_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::roles_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.CreateUserRequest.roles_ids)
  return _internal_roles_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::_internal_mutable_roles_ids() {
  return &roles_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::mutable_roles_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.CreateUserRequest.roles_ids)
  return _internal_mutable_roles_ids();
}

// repeated uint32 permissions_ids = 7 [json_name = "permissionsIds"];
inline int CreateUserRequest::_internal_permissions_ids_size() const {
  return permissions_ids_.size();
}
inline int CreateUserRequest::permissions_ids_size() const {
  return _internal_permissions_ids_size();
}
inline void CreateUserRequest::clear_permissions_ids() {
  permissions_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_permissions_ids(int index) const {
  return permissions_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::permissions_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.permissions_ids)
  return _internal_permissions_ids(index);
}
inline void CreateUserRequest::set_permissions_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permissions_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.permissions_ids)
}
inline void CreateUserRequest::_internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permissions_ids_.Add(value);
}
inline void CreateUserRequest::add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_permissions_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.CreateUserRequest.permissions_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::_internal_permissions_ids() const {
  return permissions_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::permissions_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.CreateUserRequest.permissions_ids)
  return _internal_permissions_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::_internal_mutable_permissions_ids() {
  return &permissions_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::mutable_permissions_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.CreateUserRequest.permissions_ids)
  return _internal_mutable_permissions_ids();
}

// repeated uint32 organizations_ids = 8 [json_name = "organizationsIds"];
inline int CreateUserRequest::_internal_organizations_ids_size() const {
  return organizations_ids_.size();
}
inline int CreateUserRequest::organizations_ids_size() const {
  return _internal_organizations_ids_size();
}
inline void CreateUserRequest::clear_organizations_ids() {
  organizations_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_organizations_ids(int index) const {
  return organizations_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::organizations_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.organizations_ids)
  return _internal_organizations_ids(index);
}
inline void CreateUserRequest::set_organizations_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  organizations_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.organizations_ids)
}
inline void CreateUserRequest::_internal_add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  organizations_ids_.Add(value);
}
inline void CreateUserRequest::add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_organizations_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.CreateUserRequest.organizations_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::_internal_organizations_ids() const {
  return organizations_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::organizations_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.CreateUserRequest.organizations_ids)
  return _internal_organizations_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::_internal_mutable_organizations_ids() {
  return &organizations_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::mutable_organizations_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.CreateUserRequest.organizations_ids)
  return _internal_mutable_organizations_ids();
}

// string phone_number = 9 [json_name = "phoneNumber"];
inline void CreateUserRequest::clear_phone_number() {
  phone_number_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::phone_number() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.phone_number)
  return _internal_phone_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_phone_number(ArgT0&& arg0, ArgT... args) {
 
 phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.phone_number)
}
inline std::string* CreateUserRequest::mutable_phone_number() {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.phone_number)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void CreateUserRequest::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_phone_number() {
  
  return phone_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_phone_number() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.phone_number)
  return phone_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.phone_number)
}

// string country = 10 [json_name = "country"];
inline void CreateUserRequest::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::country() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_country(ArgT0&& arg0, ArgT... args) {
 
 country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.country)
}
inline std::string* CreateUserRequest::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.country)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_country() const {
  return country_.Get();
}
inline void CreateUserRequest::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_country() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.country)
}

// string city = 11 [json_name = "city"];
inline void CreateUserRequest::clear_city() {
  city_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::city() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_city(ArgT0&& arg0, ArgT... args) {
 
 city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.city)
}
inline std::string* CreateUserRequest::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.city)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_city() const {
  return city_.Get();
}
inline void CreateUserRequest::_internal_set_city(const std::string& value) {
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_city() {
  
  return city_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_city() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.city)
}

// string zip_code = 12 [json_name = "zipCode"];
inline void CreateUserRequest::clear_zip_code() {
  zip_code_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::zip_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.zip_code)
  return _internal_zip_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_zip_code(ArgT0&& arg0, ArgT... args) {
 
 zip_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.zip_code)
}
inline std::string* CreateUserRequest::mutable_zip_code() {
  std::string* _s = _internal_mutable_zip_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.zip_code)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_zip_code() const {
  return zip_code_.Get();
}
inline void CreateUserRequest::_internal_set_zip_code(const std::string& value) {
  
  zip_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_zip_code() {
  
  return zip_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_zip_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.zip_code)
  return zip_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_zip_code(std::string* zip_code) {
  if (zip_code != nullptr) {
    
  } else {
    
  }
  zip_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zip_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.zip_code)
}

// string address = 13 [json_name = "address"];
inline void CreateUserRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::address() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.address)
}
inline std::string* CreateUserRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.address)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_address() const {
  return address_.Get();
}
inline void CreateUserRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_address() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.address)
}

// string state = 14 [json_name = "state"];
inline void CreateUserRequest::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::state() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.state)
}
inline std::string* CreateUserRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.state)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_state() const {
  return state_.Get();
}
inline void CreateUserRequest::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_state() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.state)
}

// string emoji_country = 15 [json_name = "emojiCountry"];
inline void CreateUserRequest::clear_emoji_country() {
  emoji_country_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::emoji_country() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.emoji_country)
  return _internal_emoji_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_emoji_country(ArgT0&& arg0, ArgT... args) {
 
 emoji_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.emoji_country)
}
inline std::string* CreateUserRequest::mutable_emoji_country() {
  std::string* _s = _internal_mutable_emoji_country();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.emoji_country)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_emoji_country() const {
  return emoji_country_.Get();
}
inline void CreateUserRequest::_internal_set_emoji_country(const std::string& value) {
  
  emoji_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_emoji_country() {
  
  return emoji_country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_emoji_country() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.emoji_country)
  return emoji_country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_emoji_country(std::string* emoji_country) {
  if (emoji_country != nullptr) {
    
  } else {
    
  }
  emoji_country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emoji_country,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.emoji_country)
}

// string invitation_code = 16 [json_name = "invitationCode"];
inline void CreateUserRequest::clear_invitation_code() {
  invitation_code_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::invitation_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.invitation_code)
  return _internal_invitation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_invitation_code(ArgT0&& arg0, ArgT... args) {
 
 invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.invitation_code)
}
inline std::string* CreateUserRequest::mutable_invitation_code() {
  std::string* _s = _internal_mutable_invitation_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.invitation_code)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_invitation_code() const {
  return invitation_code_.Get();
}
inline void CreateUserRequest::_internal_set_invitation_code(const std::string& value) {
  
  invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_invitation_code() {
  
  return invitation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_invitation_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.invitation_code)
  return invitation_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_invitation_code(std::string* invitation_code) {
  if (invitation_code != nullptr) {
    
  } else {
    
  }
  invitation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.invitation_code)
}

// bool is_mfa_enabled = 17 [json_name = "isMfaEnabled"];
inline void CreateUserRequest::clear_is_mfa_enabled() {
  is_mfa_enabled_ = false;
}
inline bool CreateUserRequest::_internal_is_mfa_enabled() const {
  return is_mfa_enabled_;
}
inline bool CreateUserRequest::is_mfa_enabled() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.is_mfa_enabled)
  return _internal_is_mfa_enabled();
}
inline void CreateUserRequest::_internal_set_is_mfa_enabled(bool value) {
  
  is_mfa_enabled_ = value;
}
inline void CreateUserRequest::set_is_mfa_enabled(bool value) {
  _internal_set_is_mfa_enabled(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.is_mfa_enabled)
}

// string language = 18 [json_name = "language"];
inline void CreateUserRequest::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::language() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.language)
}
inline std::string* CreateUserRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.language)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_language() const {
  return language_.Get();
}
inline void CreateUserRequest::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_language() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.language)
}

// bool push_notification = 19 [json_name = "pushNotification"];
inline void CreateUserRequest::clear_push_notification() {
  push_notification_ = false;
}
inline bool CreateUserRequest::_internal_push_notification() const {
  return push_notification_;
}
inline bool CreateUserRequest::push_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.push_notification)
  return _internal_push_notification();
}
inline void CreateUserRequest::_internal_set_push_notification(bool value) {
  
  push_notification_ = value;
}
inline void CreateUserRequest::set_push_notification(bool value) {
  _internal_set_push_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.push_notification)
}

// bool email_notification = 20 [json_name = "emailNotification"];
inline void CreateUserRequest::clear_email_notification() {
  email_notification_ = false;
}
inline bool CreateUserRequest::_internal_email_notification() const {
  return email_notification_;
}
inline bool CreateUserRequest::email_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.email_notification)
  return _internal_email_notification();
}
inline void CreateUserRequest::_internal_set_email_notification(bool value) {
  
  email_notification_ = value;
}
inline void CreateUserRequest::set_email_notification(bool value) {
  _internal_set_email_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.email_notification)
}

// bool new_login_notification = 21 [json_name = "newLoginNotification"];
inline void CreateUserRequest::clear_new_login_notification() {
  new_login_notification_ = false;
}
inline bool CreateUserRequest::_internal_new_login_notification() const {
  return new_login_notification_;
}
inline bool CreateUserRequest::new_login_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.new_login_notification)
  return _internal_new_login_notification();
}
inline void CreateUserRequest::_internal_set_new_login_notification(bool value) {
  
  new_login_notification_ = value;
}
inline void CreateUserRequest::set_new_login_notification(bool value) {
  _internal_set_new_login_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.new_login_notification)
}

// bool create_notification = 22 [json_name = "createNotification"];
inline void CreateUserRequest::clear_create_notification() {
  create_notification_ = false;
}
inline bool CreateUserRequest::_internal_create_notification() const {
  return create_notification_;
}
inline bool CreateUserRequest::create_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.create_notification)
  return _internal_create_notification();
}
inline void CreateUserRequest::_internal_set_create_notification(bool value) {
  
  create_notification_ = value;
}
inline void CreateUserRequest::set_create_notification(bool value) {
  _internal_set_create_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.create_notification)
}

// bool update_notification = 23 [json_name = "updateNotification"];
inline void CreateUserRequest::clear_update_notification() {
  update_notification_ = false;
}
inline bool CreateUserRequest::_internal_update_notification() const {
  return update_notification_;
}
inline bool CreateUserRequest::update_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.update_notification)
  return _internal_update_notification();
}
inline void CreateUserRequest::_internal_set_update_notification(bool value) {
  
  update_notification_ = value;
}
inline void CreateUserRequest::set_update_notification(bool value) {
  _internal_set_update_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.update_notification)
}

// bool delete_notification = 24 [json_name = "deleteNotification"];
inline void CreateUserRequest::clear_delete_notification() {
  delete_notification_ = false;
}
inline bool CreateUserRequest::_internal_delete_notification() const {
  return delete_notification_;
}
inline bool CreateUserRequest::delete_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.delete_notification)
  return _internal_delete_notification();
}
inline void CreateUserRequest::_internal_set_delete_notification(bool value) {
  
  delete_notification_ = value;
}
inline void CreateUserRequest::set_delete_notification(bool value) {
  _internal_set_delete_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.delete_notification)
}

// bool application_notification = 25 [json_name = "applicationNotification"];
inline void CreateUserRequest::clear_application_notification() {
  application_notification_ = false;
}
inline bool CreateUserRequest::_internal_application_notification() const {
  return application_notification_;
}
inline bool CreateUserRequest::application_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.application_notification)
  return _internal_application_notification();
}
inline void CreateUserRequest::_internal_set_application_notification(bool value) {
  
  application_notification_ = value;
}
inline void CreateUserRequest::set_application_notification(bool value) {
  _internal_set_application_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.application_notification)
}

// bool read_notification = 26 [json_name = "readNotification"];
inline void CreateUserRequest::clear_read_notification() {
  read_notification_ = false;
}
inline bool CreateUserRequest::_internal_read_notification() const {
  return read_notification_;
}
inline bool CreateUserRequest::read_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.read_notification)
  return _internal_read_notification();
}
inline void CreateUserRequest::_internal_set_read_notification(bool value) {
  
  read_notification_ = value;
}
inline void CreateUserRequest::set_read_notification(bool value) {
  _internal_set_read_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.read_notification)
}

// string phone_code = 27 [json_name = "phoneCode"];
inline void CreateUserRequest::clear_phone_code() {
  phone_code_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::phone_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.phone_code)
  return _internal_phone_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_phone_code(ArgT0&& arg0, ArgT... args) {
 
 phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.phone_code)
}
inline std::string* CreateUserRequest::mutable_phone_code() {
  std::string* _s = _internal_mutable_phone_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.phone_code)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_phone_code() const {
  return phone_code_.Get();
}
inline void CreateUserRequest::_internal_set_phone_code(const std::string& value) {
  
  phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_phone_code() {
  
  return phone_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_phone_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.phone_code)
  return phone_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_phone_code(std::string* phone_code) {
  if (phone_code != nullptr) {
    
  } else {
    
  }
  phone_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.phone_code)
}

// string optional_address = 28 [json_name = "optionalAddress"];
inline void CreateUserRequest::clear_optional_address() {
  optional_address_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::optional_address() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.optional_address)
  return _internal_optional_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_optional_address(ArgT0&& arg0, ArgT... args) {
 
 optional_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.optional_address)
}
inline std::string* CreateUserRequest::mutable_optional_address() {
  std::string* _s = _internal_mutable_optional_address();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.optional_address)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_optional_address() const {
  return optional_address_.Get();
}
inline void CreateUserRequest::_internal_set_optional_address(const std::string& value) {
  
  optional_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_optional_address() {
  
  return optional_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_optional_address() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.optional_address)
  return optional_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_optional_address(std::string* optional_address) {
  if (optional_address != nullptr) {
    
  } else {
    
  }
  optional_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.optional_address)
}

// string image = 29 [json_name = "image"];
inline void CreateUserRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CreateUserRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CreateUserRequest.image)
}
inline std::string* CreateUserRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CreateUserRequest.image)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_image() const {
  return image_.Get();
}
inline void CreateUserRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CreateUserRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CreateUserRequest.image)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// uint32 auth_id = 1 [json_name = "authId"];
inline void UpdateUserRequest::clear_auth_id() {
  auth_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::_internal_auth_id() const {
  return auth_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::auth_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.UpdateUserRequest.auth_id)
  return _internal_auth_id();
}
inline void UpdateUserRequest::_internal_set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  auth_id_ = value;
}
inline void UpdateUserRequest::set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.UpdateUserRequest.auth_id)
}

// .accounts.v1alpha1.users.v1.CreateUserRequest auth = 2 [json_name = "auth"];
inline bool UpdateUserRequest::_internal_has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline bool UpdateUserRequest::has_auth() const {
  return _internal_has_auth();
}
inline void UpdateUserRequest::clear_auth() {
  if (GetArenaForAllocation() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
inline const ::accounts::v1alpha1::users::v1::CreateUserRequest& UpdateUserRequest::_internal_auth() const {
  const ::accounts::v1alpha1::users::v1::CreateUserRequest* p = auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::users::v1::CreateUserRequest&>(
      ::accounts::v1alpha1::users::v1::_CreateUserRequest_default_instance_);
}
inline const ::accounts::v1alpha1::users::v1::CreateUserRequest& UpdateUserRequest::auth() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.UpdateUserRequest.auth)
  return _internal_auth();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_auth(
    ::accounts::v1alpha1::users::v1::CreateUserRequest* auth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_);
  }
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.users.v1.UpdateUserRequest.auth)
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* UpdateUserRequest::release_auth() {
  
  ::accounts::v1alpha1::users::v1::CreateUserRequest* temp = auth_;
  auth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* UpdateUserRequest::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.UpdateUserRequest.auth)
  
  ::accounts::v1alpha1::users::v1::CreateUserRequest* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* UpdateUserRequest::_internal_mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::users::v1::CreateUserRequest>(GetArenaForAllocation());
    auth_ = p;
  }
  return auth_;
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* UpdateUserRequest::mutable_auth() {
  ::accounts::v1alpha1::users::v1::CreateUserRequest* _msg = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.UpdateUserRequest.auth)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_auth(::accounts::v1alpha1::users::v1::CreateUserRequest* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete auth_;
  }
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::users::v1::CreateUserRequest>::GetOwningArena(auth);
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.UpdateUserRequest.auth)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// uint32 user_id = 1 [json_name = "userId"];
inline void DeleteUserRequest::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.DeleteUserRequest.user_id)
  return _internal_user_id();
}
inline void DeleteUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void DeleteUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.DeleteUserRequest.user_id)
}

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void DeleteUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.DeleteUserRequest.organization_id)
  return _internal_organization_id();
}
inline void DeleteUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void DeleteUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.DeleteUserRequest.organization_id)
}

// -------------------------------------------------------------------

// GetOneUserRequest

// uint32 id = 1 [json_name = "id"];
inline void GetOneUserRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserRequest::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserRequest.id)
  return _internal_id();
}
inline void GetOneUserRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneUserRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetOneUserRequest.id)
}

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void GetOneUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserRequest.organization_id)
  return _internal_organization_id();
}
inline void GetOneUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void GetOneUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetOneUserRequest.organization_id)
}

// -------------------------------------------------------------------

// GetOneUserResponse

// .accounts.v1alpha1.UserDetail user = 1 [json_name = "user"];
inline bool GetOneUserResponse::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GetOneUserResponse::has_user() const {
  return _internal_has_user();
}
inline const ::accounts::v1alpha1::UserDetail& GetOneUserResponse::_internal_user() const {
  const ::accounts::v1alpha1::UserDetail* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::UserDetail&>(
      ::accounts::v1alpha1::_UserDetail_default_instance_);
}
inline const ::accounts::v1alpha1::UserDetail& GetOneUserResponse::user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserResponse.user)
  return _internal_user();
}
inline void GetOneUserResponse::unsafe_arena_set_allocated_user(
    ::accounts::v1alpha1::UserDetail* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.users.v1.GetOneUserResponse.user)
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserResponse::release_user() {
  
  ::accounts::v1alpha1::UserDetail* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserResponse.user)
  
  ::accounts::v1alpha1::UserDetail* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserResponse::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::UserDetail>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserResponse::mutable_user() {
  ::accounts::v1alpha1::UserDetail* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserResponse.user)
  return _msg;
}
inline void GetOneUserResponse::set_allocated_user(::accounts::v1alpha1::UserDetail* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserResponse.user)
}

// string msg = 2 [json_name = "msg"];
inline void GetOneUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetOneUserResponse.msg)
}
inline std::string* GetOneUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserResponse.msg)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void GetOneUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserResponse.msg)
}

// string error = 3 [json_name = "error"];
inline void GetOneUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetOneUserResponse.error)
}
inline std::string* GetOneUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserResponse.error)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_error() const {
  return error_.Get();
}
inline void GetOneUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserResponse.error)
}

// -------------------------------------------------------------------

// ListUserResponse

// repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
inline int ListUserResponse::_internal_users_size() const {
  return users_.size();
}
inline int ListUserResponse::users_size() const {
  return _internal_users_size();
}
inline ::accounts::v1alpha1::UserList* ListUserResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.ListUserResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
ListUserResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.ListUserResponse.users)
  return &users_;
}
inline const ::accounts::v1alpha1::UserList& ListUserResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::accounts::v1alpha1::UserList& ListUserResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.ListUserResponse.users)
  return _internal_users(index);
}
inline ::accounts::v1alpha1::UserList* ListUserResponse::_internal_add_users() {
  return users_.Add();
}
inline ::accounts::v1alpha1::UserList* ListUserResponse::add_users() {
  ::accounts::v1alpha1::UserList* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.ListUserResponse.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
ListUserResponse::users() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.ListUserResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// ListUserPaginationRequest

// int32 offset = 1 [json_name = "offset"];
inline void ListUserPaginationRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::offset() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.ListUserPaginationRequest.offset)
  return _internal_offset();
}
inline void ListUserPaginationRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void ListUserPaginationRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.ListUserPaginationRequest.offset)
}

// int32 limit = 2 [json_name = "limit"];
inline void ListUserPaginationRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::limit() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.ListUserPaginationRequest.limit)
  return _internal_limit();
}
inline void ListUserPaginationRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void ListUserPaginationRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.ListUserPaginationRequest.limit)
}

// -------------------------------------------------------------------

// ListUserPaginationResponse

// int64 count = 1 [json_name = "count"];
inline void ListUserPaginationResponse::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListUserPaginationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListUserPaginationResponse::count() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.ListUserPaginationResponse.count)
  return _internal_count();
}
inline void ListUserPaginationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ListUserPaginationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.ListUserPaginationResponse.count)
}

// repeated .accounts.v1alpha1.UserList users = 2 [json_name = "users"];
inline int ListUserPaginationResponse::_internal_users_size() const {
  return users_.size();
}
inline int ListUserPaginationResponse::users_size() const {
  return _internal_users_size();
}
inline ::accounts::v1alpha1::UserList* ListUserPaginationResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.ListUserPaginationResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
ListUserPaginationResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.ListUserPaginationResponse.users)
  return &users_;
}
inline const ::accounts::v1alpha1::UserList& ListUserPaginationResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::accounts::v1alpha1::UserList& ListUserPaginationResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.ListUserPaginationResponse.users)
  return _internal_users(index);
}
inline ::accounts::v1alpha1::UserList* ListUserPaginationResponse::_internal_add_users() {
  return users_.Add();
}
inline ::accounts::v1alpha1::UserList* ListUserPaginationResponse::add_users() {
  ::accounts::v1alpha1::UserList* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.ListUserPaginationResponse.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
ListUserPaginationResponse::users() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.ListUserPaginationResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// GetListUserDexRequest

// -------------------------------------------------------------------

// GetListUserDexResponse

// repeated .accounts.v1alpha1.users.v1.UsersDex users_dex = 1 [json_name = "usersDex"];
inline int GetListUserDexResponse::_internal_users_dex_size() const {
  return users_dex_.size();
}
inline int GetListUserDexResponse::users_dex_size() const {
  return _internal_users_dex_size();
}
inline void GetListUserDexResponse::clear_users_dex() {
  users_dex_.Clear();
}
inline ::accounts::v1alpha1::users::v1::UsersDex* GetListUserDexResponse::mutable_users_dex(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetListUserDexResponse.users_dex)
  return users_dex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::users::v1::UsersDex >*
GetListUserDexResponse::mutable_users_dex() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.GetListUserDexResponse.users_dex)
  return &users_dex_;
}
inline const ::accounts::v1alpha1::users::v1::UsersDex& GetListUserDexResponse::_internal_users_dex(int index) const {
  return users_dex_.Get(index);
}
inline const ::accounts::v1alpha1::users::v1::UsersDex& GetListUserDexResponse::users_dex(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetListUserDexResponse.users_dex)
  return _internal_users_dex(index);
}
inline ::accounts::v1alpha1::users::v1::UsersDex* GetListUserDexResponse::_internal_add_users_dex() {
  return users_dex_.Add();
}
inline ::accounts::v1alpha1::users::v1::UsersDex* GetListUserDexResponse::add_users_dex() {
  ::accounts::v1alpha1::users::v1::UsersDex* _add = _internal_add_users_dex();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.GetListUserDexResponse.users_dex)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::users::v1::UsersDex >&
GetListUserDexResponse::users_dex() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.GetListUserDexResponse.users_dex)
  return users_dex_;
}

// -------------------------------------------------------------------

// GetOneUserDexRequest

// string user_id = 1 [json_name = "userId"];
inline void GetOneUserDexRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& GetOneUserDexRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user_id)
}
inline std::string* GetOneUserDexRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user_id)
  return _s;
}
inline const std::string& GetOneUserDexRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetOneUserDexRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user_id)
}

// .accounts.v1alpha1.users.v1.CreateUserRequest user = 2 [json_name = "user"];
inline bool GetOneUserDexRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GetOneUserDexRequest::has_user() const {
  return _internal_has_user();
}
inline void GetOneUserDexRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::accounts::v1alpha1::users::v1::CreateUserRequest& GetOneUserDexRequest::_internal_user() const {
  const ::accounts::v1alpha1::users::v1::CreateUserRequest* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::users::v1::CreateUserRequest&>(
      ::accounts::v1alpha1::users::v1::_CreateUserRequest_default_instance_);
}
inline const ::accounts::v1alpha1::users::v1::CreateUserRequest& GetOneUserDexRequest::user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user)
  return _internal_user();
}
inline void GetOneUserDexRequest::unsafe_arena_set_allocated_user(
    ::accounts::v1alpha1::users::v1::CreateUserRequest* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user)
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* GetOneUserDexRequest::release_user() {
  
  ::accounts::v1alpha1::users::v1::CreateUserRequest* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* GetOneUserDexRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user)
  
  ::accounts::v1alpha1::users::v1::CreateUserRequest* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* GetOneUserDexRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::users::v1::CreateUserRequest>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::accounts::v1alpha1::users::v1::CreateUserRequest* GetOneUserDexRequest::mutable_user() {
  ::accounts::v1alpha1::users::v1::CreateUserRequest* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user)
  return _msg;
}
inline void GetOneUserDexRequest::set_allocated_user(::accounts::v1alpha1::users::v1::CreateUserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::users::v1::CreateUserRequest>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserDexRequest.user)
}

// -------------------------------------------------------------------

// GetOneUserDexResponse

// .accounts.v1alpha1.UserDetail user = 1 [json_name = "user"];
inline bool GetOneUserDexResponse::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GetOneUserDexResponse::has_user() const {
  return _internal_has_user();
}
inline const ::accounts::v1alpha1::UserDetail& GetOneUserDexResponse::_internal_user() const {
  const ::accounts::v1alpha1::UserDetail* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::UserDetail&>(
      ::accounts::v1alpha1::_UserDetail_default_instance_);
}
inline const ::accounts::v1alpha1::UserDetail& GetOneUserDexResponse::user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserDexResponse.user)
  return _internal_user();
}
inline void GetOneUserDexResponse::unsafe_arena_set_allocated_user(
    ::accounts::v1alpha1::UserDetail* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.users.v1.GetOneUserDexResponse.user)
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserDexResponse::release_user() {
  
  ::accounts::v1alpha1::UserDetail* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserDexResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserDexResponse.user)
  
  ::accounts::v1alpha1::UserDetail* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserDexResponse::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::UserDetail>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::accounts::v1alpha1::UserDetail* GetOneUserDexResponse::mutable_user() {
  ::accounts::v1alpha1::UserDetail* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserDexResponse.user)
  return _msg;
}
inline void GetOneUserDexResponse::set_allocated_user(::accounts::v1alpha1::UserDetail* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserDexResponse.user)
}

// string msg = 2 [json_name = "msg"];
inline void GetOneUserDexResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserDexResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetOneUserDexResponse.msg)
}
inline std::string* GetOneUserDexResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserDexResponse.msg)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_msg() const {
  return msg_.Get();
}
inline void GetOneUserDexResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserDexResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserDexResponse.msg)
}

// string error = 3 [json_name = "error"];
inline void GetOneUserDexResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetOneUserDexResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetOneUserDexResponse.error)
}
inline std::string* GetOneUserDexResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetOneUserDexResponse.error)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_error() const {
  return error_.Get();
}
inline void GetOneUserDexResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetOneUserDexResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetOneUserDexResponse.error)
}

// -------------------------------------------------------------------

// SendVerificationEmailRequest

// string email = 1 [json_name = "email"];
inline void SendVerificationEmailRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& SendVerificationEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendVerificationEmailRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.email)
}
inline std::string* SendVerificationEmailRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.email)
  return _s;
}
inline const std::string& SendVerificationEmailRequest::_internal_email() const {
  return email_.Get();
}
inline void SendVerificationEmailRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendVerificationEmailRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.email)
}

// string name = 2 [json_name = "name"];
inline void SendVerificationEmailRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SendVerificationEmailRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendVerificationEmailRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.name)
}
inline std::string* SendVerificationEmailRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.name)
  return _s;
}
inline const std::string& SendVerificationEmailRequest::_internal_name() const {
  return name_.Get();
}
inline void SendVerificationEmailRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendVerificationEmailRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.name)
}

// string url = 3 [json_name = "url"];
inline void SendVerificationEmailRequest::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& SendVerificationEmailRequest::url() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendVerificationEmailRequest::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.url)
}
inline std::string* SendVerificationEmailRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.url)
  return _s;
}
inline const std::string& SendVerificationEmailRequest::_internal_url() const {
  return url_.Get();
}
inline void SendVerificationEmailRequest::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailRequest::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailRequest::release_url() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendVerificationEmailRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.SendVerificationEmailRequest.url)
}

// -------------------------------------------------------------------

// SendVerificationEmailResponse

// string html_result = 1 [json_name = "htmlResult"];
inline void SendVerificationEmailResponse::clear_html_result() {
  html_result_.ClearToEmpty();
}
inline const std::string& SendVerificationEmailResponse::html_result() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.html_result)
  return _internal_html_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendVerificationEmailResponse::set_html_result(ArgT0&& arg0, ArgT... args) {
 
 html_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.html_result)
}
inline std::string* SendVerificationEmailResponse::mutable_html_result() {
  std::string* _s = _internal_mutable_html_result();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.html_result)
  return _s;
}
inline const std::string& SendVerificationEmailResponse::_internal_html_result() const {
  return html_result_.Get();
}
inline void SendVerificationEmailResponse::_internal_set_html_result(const std::string& value) {
  
  html_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailResponse::_internal_mutable_html_result() {
  
  return html_result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailResponse::release_html_result() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.html_result)
  return html_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendVerificationEmailResponse::set_allocated_html_result(std::string* html_result) {
  if (html_result != nullptr) {
    
  } else {
    
  }
  html_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), html_result,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.html_result)
}

// string error = 2 [json_name = "error"];
inline void SendVerificationEmailResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& SendVerificationEmailResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendVerificationEmailResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.error)
}
inline std::string* SendVerificationEmailResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.error)
  return _s;
}
inline const std::string& SendVerificationEmailResponse::_internal_error() const {
  return error_.Get();
}
inline void SendVerificationEmailResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendVerificationEmailResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendVerificationEmailResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.SendVerificationEmailResponse.error)
}

// -------------------------------------------------------------------

// VerifyEmailRequest

// string token = 1 [json_name = "token"];
inline void VerifyEmailRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& VerifyEmailRequest::token() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.VerifyEmailRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyEmailRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.VerifyEmailRequest.token)
}
inline std::string* VerifyEmailRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.VerifyEmailRequest.token)
  return _s;
}
inline const std::string& VerifyEmailRequest::_internal_token() const {
  return token_.Get();
}
inline void VerifyEmailRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VerifyEmailRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VerifyEmailRequest::release_token() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.VerifyEmailRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VerifyEmailRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.VerifyEmailRequest.token)
}

// -------------------------------------------------------------------

// VerifyEmailResponse

// string msg = 1 [json_name = "msg"];
inline void VerifyEmailResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& VerifyEmailResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.VerifyEmailResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyEmailResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.VerifyEmailResponse.msg)
}
inline std::string* VerifyEmailResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.VerifyEmailResponse.msg)
  return _s;
}
inline const std::string& VerifyEmailResponse::_internal_msg() const {
  return msg_.Get();
}
inline void VerifyEmailResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VerifyEmailResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VerifyEmailResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.VerifyEmailResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VerifyEmailResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.VerifyEmailResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void VerifyEmailResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& VerifyEmailResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.VerifyEmailResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyEmailResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.VerifyEmailResponse.error)
}
inline std::string* VerifyEmailResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.VerifyEmailResponse.error)
  return _s;
}
inline const std::string& VerifyEmailResponse::_internal_error() const {
  return error_.Get();
}
inline void VerifyEmailResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VerifyEmailResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VerifyEmailResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.VerifyEmailResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VerifyEmailResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.VerifyEmailResponse.error)
}

// -------------------------------------------------------------------

// CheckUserRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void CheckUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.organization_id)
  return _internal_organization_id();
}
inline void CheckUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void CheckUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.organization_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void CheckUserRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.project_id)
  return _internal_project_id();
}
inline void CheckUserRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void CheckUserRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.project_id)
}

// uint32 get_organization_from_project = 3 [json_name = "getOrganizationFromProject"];
inline void CheckUserRequest::clear_get_organization_from_project() {
  get_organization_from_project_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_get_organization_from_project() const {
  return get_organization_from_project_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::get_organization_from_project() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.get_organization_from_project)
  return _internal_get_organization_from_project();
}
inline void CheckUserRequest::_internal_set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  get_organization_from_project_ = value;
}
inline void CheckUserRequest::set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_get_organization_from_project(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.get_organization_from_project)
}

// string permission = 4 [json_name = "permission"];
inline void CheckUserRequest::clear_permission() {
  permission_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::permission() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.permission)
  return _internal_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_permission(ArgT0&& arg0, ArgT... args) {
 
 permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.permission)
}
inline std::string* CheckUserRequest::mutable_permission() {
  std::string* _s = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserRequest.permission)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_permission() const {
  return permission_.Get();
}
inline void CheckUserRequest::_internal_set_permission(const std::string& value) {
  
  permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_permission() {
  
  return permission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_permission() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserRequest.permission)
  return permission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_permission(std::string* permission) {
  if (permission != nullptr) {
    
  } else {
    
  }
  permission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserRequest.permission)
}

// string user_id_dex = 5 [json_name = "userIdDex"];
inline void CheckUserRequest::clear_user_id_dex() {
  user_id_dex_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::user_id_dex() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_dex)
  return _internal_user_id_dex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_user_id_dex(ArgT0&& arg0, ArgT... args) {
 
 user_id_dex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_dex)
}
inline std::string* CheckUserRequest::mutable_user_id_dex() {
  std::string* _s = _internal_mutable_user_id_dex();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_dex)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_user_id_dex() const {
  return user_id_dex_.Get();
}
inline void CheckUserRequest::_internal_set_user_id_dex(const std::string& value) {
  
  user_id_dex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_user_id_dex() {
  
  return user_id_dex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_user_id_dex() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_dex)
  return user_id_dex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_user_id_dex(std::string* user_id_dex) {
  if (user_id_dex != nullptr) {
    
  } else {
    
  }
  user_id_dex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id_dex,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_dex)
}

// string user_id_admin = 6 [json_name = "userIdAdmin"];
inline void CheckUserRequest::clear_user_id_admin() {
  user_id_admin_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::user_id_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_admin)
  return _internal_user_id_admin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_user_id_admin(ArgT0&& arg0, ArgT... args) {
 
 user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_admin)
}
inline std::string* CheckUserRequest::mutable_user_id_admin() {
  std::string* _s = _internal_mutable_user_id_admin();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_admin)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_user_id_admin() const {
  return user_id_admin_.Get();
}
inline void CheckUserRequest::_internal_set_user_id_admin(const std::string& value) {
  
  user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_user_id_admin() {
  
  return user_id_admin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_user_id_admin() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_admin)
  return user_id_admin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_user_id_admin(std::string* user_id_admin) {
  if (user_id_admin != nullptr) {
    
  } else {
    
  }
  user_id_admin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id_admin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserRequest.user_id_admin)
}

// uint32 user_id = 7 [json_name = "userId"];
inline void CheckUserRequest::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.user_id)
  return _internal_user_id();
}
inline void CheckUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void CheckUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.user_id)
}

// string type_permission = 9 [json_name = "typePermission"];
inline void CheckUserRequest::clear_type_permission() {
  type_permission_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::type_permission() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.type_permission)
  return _internal_type_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_type_permission(ArgT0&& arg0, ArgT... args) {
 
 type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.type_permission)
}
inline std::string* CheckUserRequest::mutable_type_permission() {
  std::string* _s = _internal_mutable_type_permission();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserRequest.type_permission)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_type_permission() const {
  return type_permission_.Get();
}
inline void CheckUserRequest::_internal_set_type_permission(const std::string& value) {
  
  type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_type_permission() {
  
  return type_permission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_type_permission() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserRequest.type_permission)
  return type_permission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_type_permission(std::string* type_permission) {
  if (type_permission != nullptr) {
    
  } else {
    
  }
  type_permission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_permission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserRequest.type_permission)
}

// repeated uint32 roles_ids = 10 [json_name = "rolesIds"];
inline int CheckUserRequest::_internal_roles_ids_size() const {
  return roles_ids_.size();
}
inline int CheckUserRequest::roles_ids_size() const {
  return _internal_roles_ids_size();
}
inline void CheckUserRequest::clear_roles_ids() {
  roles_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_roles_ids(int index) const {
  return roles_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::roles_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.roles_ids)
  return _internal_roles_ids(index);
}
inline void CheckUserRequest::set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.roles_ids)
}
inline void CheckUserRequest::_internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Add(value);
}
inline void CheckUserRequest::add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_roles_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.CheckUserRequest.roles_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CheckUserRequest::_internal_roles_ids() const {
  return roles_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CheckUserRequest::roles_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.CheckUserRequest.roles_ids)
  return _internal_roles_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CheckUserRequest::_internal_mutable_roles_ids() {
  return &roles_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CheckUserRequest::mutable_roles_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.CheckUserRequest.roles_ids)
  return _internal_mutable_roles_ids();
}

// string api_key_value = 11 [json_name = "apiKeyValue"];
inline void CheckUserRequest::clear_api_key_value() {
  api_key_value_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::api_key_value() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.api_key_value)
  return _internal_api_key_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_api_key_value(ArgT0&& arg0, ArgT... args) {
 
 api_key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.api_key_value)
}
inline std::string* CheckUserRequest::mutable_api_key_value() {
  std::string* _s = _internal_mutable_api_key_value();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserRequest.api_key_value)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_api_key_value() const {
  return api_key_value_.Get();
}
inline void CheckUserRequest::_internal_set_api_key_value(const std::string& value) {
  
  api_key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_api_key_value() {
  
  return api_key_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_api_key_value() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserRequest.api_key_value)
  return api_key_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_api_key_value(std::string* api_key_value) {
  if (api_key_value != nullptr) {
    
  } else {
    
  }
  api_key_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_key_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserRequest.api_key_value)
}

// string token_ccp_admin = 12 [json_name = "tokenCcpAdmin"];
inline void CheckUserRequest::clear_token_ccp_admin() {
  token_ccp_admin_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::token_ccp_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_admin)
  return _internal_token_ccp_admin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_token_ccp_admin(ArgT0&& arg0, ArgT... args) {
 
 token_ccp_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_admin)
}
inline std::string* CheckUserRequest::mutable_token_ccp_admin() {
  std::string* _s = _internal_mutable_token_ccp_admin();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_admin)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_token_ccp_admin() const {
  return token_ccp_admin_.Get();
}
inline void CheckUserRequest::_internal_set_token_ccp_admin(const std::string& value) {
  
  token_ccp_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_token_ccp_admin() {
  
  return token_ccp_admin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_token_ccp_admin() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_admin)
  return token_ccp_admin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_token_ccp_admin(std::string* token_ccp_admin) {
  if (token_ccp_admin != nullptr) {
    
  } else {
    
  }
  token_ccp_admin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_ccp_admin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_admin)
}

// string token_ccp_user_id = 13 [json_name = "tokenCcpUserId"];
inline void CheckUserRequest::clear_token_ccp_user_id() {
  token_ccp_user_id_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::token_ccp_user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_user_id)
  return _internal_token_ccp_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_token_ccp_user_id(ArgT0&& arg0, ArgT... args) {
 
 token_ccp_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_user_id)
}
inline std::string* CheckUserRequest::mutable_token_ccp_user_id() {
  std::string* _s = _internal_mutable_token_ccp_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_user_id)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_token_ccp_user_id() const {
  return token_ccp_user_id_.Get();
}
inline void CheckUserRequest::_internal_set_token_ccp_user_id(const std::string& value) {
  
  token_ccp_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_token_ccp_user_id() {
  
  return token_ccp_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_token_ccp_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_user_id)
  return token_ccp_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_token_ccp_user_id(std::string* token_ccp_user_id) {
  if (token_ccp_user_id != nullptr) {
    
  } else {
    
  }
  token_ccp_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_ccp_user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserRequest.token_ccp_user_id)
}

// -------------------------------------------------------------------

// CheckUserResponse

// bool is_exists = 1 [json_name = "isExists"];
inline void CheckUserResponse::clear_is_exists() {
  is_exists_ = false;
}
inline bool CheckUserResponse::_internal_is_exists() const {
  return is_exists_;
}
inline bool CheckUserResponse::is_exists() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserResponse.is_exists)
  return _internal_is_exists();
}
inline void CheckUserResponse::_internal_set_is_exists(bool value) {
  
  is_exists_ = value;
}
inline void CheckUserResponse::set_is_exists(bool value) {
  _internal_set_is_exists(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserResponse.is_exists)
}

// bool is_admin = 3 [json_name = "isAdmin"];
inline void CheckUserResponse::clear_is_admin() {
  is_admin_ = false;
}
inline bool CheckUserResponse::_internal_is_admin() const {
  return is_admin_;
}
inline bool CheckUserResponse::is_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserResponse.is_admin)
  return _internal_is_admin();
}
inline void CheckUserResponse::_internal_set_is_admin(bool value) {
  
  is_admin_ = value;
}
inline void CheckUserResponse::set_is_admin(bool value) {
  _internal_set_is_admin(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserResponse.is_admin)
}

// string msg = 4 [json_name = "msg"];
inline void CheckUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CheckUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.CheckUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.CheckUserResponse.msg)
}
inline std::string* CheckUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.CheckUserResponse.msg)
  return _s;
}
inline const std::string& CheckUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CheckUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.CheckUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.CheckUserResponse.msg)
}

// -------------------------------------------------------------------

// UsersDex

// string user_id = 1 [json_name = "userId"];
inline void UsersDex::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UsersDex::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.UsersDex.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.UsersDex.user_id)
}
inline std::string* UsersDex::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.UsersDex.user_id)
  return _s;
}
inline const std::string& UsersDex::_internal_user_id() const {
  return user_id_.Get();
}
inline void UsersDex::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.UsersDex.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.UsersDex.user_id)
}

// string provider = 2 [json_name = "provider"];
inline void UsersDex::clear_provider() {
  provider_.ClearToEmpty();
}
inline const std::string& UsersDex::provider() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.UsersDex.provider)
  return _internal_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_provider(ArgT0&& arg0, ArgT... args) {
 
 provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.UsersDex.provider)
}
inline std::string* UsersDex::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.UsersDex.provider)
  return _s;
}
inline const std::string& UsersDex::_internal_provider() const {
  return provider_.Get();
}
inline void UsersDex::_internal_set_provider(const std::string& value) {
  
  provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_provider() {
  
  return provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_provider() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.UsersDex.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.UsersDex.provider)
}

// -------------------------------------------------------------------

// GetUsersEmailFilterRequest

// string value = 1 [json_name = "value"];
inline void GetUsersEmailFilterRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GetUsersEmailFilterRequest::value() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUsersEmailFilterRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest.value)
}
inline std::string* GetUsersEmailFilterRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest.value)
  return _s;
}
inline const std::string& GetUsersEmailFilterRequest::_internal_value() const {
  return value_.Get();
}
inline void GetUsersEmailFilterRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUsersEmailFilterRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUsersEmailFilterRequest::release_value() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUsersEmailFilterRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.users.v1.GetUsersEmailFilterRequest.value)
}

// -------------------------------------------------------------------

// GetUsersEmailFilterResponse

// repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
inline int GetUsersEmailFilterResponse::_internal_users_size() const {
  return users_.size();
}
inline int GetUsersEmailFilterResponse::users_size() const {
  return _internal_users_size();
}
inline ::accounts::v1alpha1::UserList* GetUsersEmailFilterResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
GetUsersEmailFilterResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse.users)
  return &users_;
}
inline const ::accounts::v1alpha1::UserList& GetUsersEmailFilterResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::accounts::v1alpha1::UserList& GetUsersEmailFilterResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse.users)
  return _internal_users(index);
}
inline ::accounts::v1alpha1::UserList* GetUsersEmailFilterResponse::_internal_add_users() {
  return users_.Add();
}
inline ::accounts::v1alpha1::UserList* GetUsersEmailFilterResponse::add_users() {
  ::accounts::v1alpha1::UserList* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
GetUsersEmailFilterResponse::users() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.users.v1.GetUsersEmailFilterResponse.users)
  return users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace users
}  // namespace v1alpha1
}  // namespace accounts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2fusers_2fusers_2eproto
