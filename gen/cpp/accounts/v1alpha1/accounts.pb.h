// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/accounts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2faccounts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2faccounts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2fv1alpha1_2faccounts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2fv1alpha1_2faccounts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto;
namespace accounts {
namespace v1alpha1 {
class MemberProject;
struct MemberProjectDefaultTypeInternal;
extern MemberProjectDefaultTypeInternal _MemberProject_default_instance_;
class MemberRol;
struct MemberRolDefaultTypeInternal;
extern MemberRolDefaultTypeInternal _MemberRol_default_instance_;
class Organization;
struct OrganizationDefaultTypeInternal;
extern OrganizationDefaultTypeInternal _Organization_default_instance_;
class Permission;
struct PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class Role;
struct RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class UserDetail;
struct UserDetailDefaultTypeInternal;
extern UserDetailDefaultTypeInternal _UserDetail_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> ::accounts::v1alpha1::MemberProject* Arena::CreateMaybeMessage<::accounts::v1alpha1::MemberProject>(Arena*);
template<> ::accounts::v1alpha1::MemberRol* Arena::CreateMaybeMessage<::accounts::v1alpha1::MemberRol>(Arena*);
template<> ::accounts::v1alpha1::Organization* Arena::CreateMaybeMessage<::accounts::v1alpha1::Organization>(Arena*);
template<> ::accounts::v1alpha1::Permission* Arena::CreateMaybeMessage<::accounts::v1alpha1::Permission>(Arena*);
template<> ::accounts::v1alpha1::Project* Arena::CreateMaybeMessage<::accounts::v1alpha1::Project>(Arena*);
template<> ::accounts::v1alpha1::Role* Arena::CreateMaybeMessage<::accounts::v1alpha1::Role>(Arena*);
template<> ::accounts::v1alpha1::UserDetail* Arena::CreateMaybeMessage<::accounts::v1alpha1::UserDetail>(Arena*);
template<> ::accounts::v1alpha1::UserList* Arena::CreateMaybeMessage<::accounts::v1alpha1::UserList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accounts {
namespace v1alpha1 {

// ===================================================================

class Role final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Role) */ {
 public:
  inline Role() : Role(nullptr) {}
  ~Role() override;
  explicit constexpr Role(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Role& default_instance() {
    return *internal_default_instance();
  }
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Role* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return new Role();
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Role& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Role& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Role";
  }
  protected:
  explicit Role(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kProjectIdFieldNumber = 3,
    kOrganizationIdFieldNumber = 4,
    kIsAdminFieldNumber = 6,
  };
  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 3 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_admin = 6 [json_name = "isAdmin"];
  void clear_is_admin();
  bool is_admin() const;
  void set_is_admin(bool value);
  private:
  bool _internal_is_admin() const;
  void _internal_set_is_admin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Role)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  bool is_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UserList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  explicit constexpr UserList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserList* New() const final {
    return new UserList();
  }

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UserList";
  }
  protected:
  explicit UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kImageFieldNumber = 8,
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 6,
    kIsSuperUserFieldNumber = 7,
  };
  // string first_name = 2 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 3 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 4 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string user_id = 5 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string image = 8 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_active = 6 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool is_super_user = 7 [json_name = "isSuperUser"];
  void clear_is_super_user();
  bool is_super_user() const;
  void set_is_super_user(bool value);
  private:
  bool _internal_is_super_user() const;
  void _internal_set_is_super_user(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_active_;
  bool is_super_user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class MemberRol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.MemberRol) */ {
 public:
  inline MemberRol() : MemberRol(nullptr) {}
  ~MemberRol() override;
  explicit constexpr MemberRol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemberRol(const MemberRol& from);
  MemberRol(MemberRol&& from) noexcept
    : MemberRol() {
    *this = ::std::move(from);
  }

  inline MemberRol& operator=(const MemberRol& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberRol& operator=(MemberRol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemberRol& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemberRol* internal_default_instance() {
    return reinterpret_cast<const MemberRol*>(
               &_MemberRol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemberRol& a, MemberRol& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberRol* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemberRol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberRol* New() const final {
    return new MemberRol();
  }

  MemberRol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberRol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemberRol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemberRol& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberRol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.MemberRol";
  }
  protected:
  explicit MemberRol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 4,
    kIdFieldNumber = 1,
    kIsAdminFieldNumber = 3,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 4 [json_name = "uid"];
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_admin = 3 [json_name = "isAdmin"];
  void clear_is_admin();
  bool is_admin() const;
  void set_is_admin(bool value);
  private:
  bool _internal_is_admin() const;
  void _internal_set_is_admin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.MemberRol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class MemberProject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.MemberProject) */ {
 public:
  inline MemberProject() : MemberProject(nullptr) {}
  ~MemberProject() override;
  explicit constexpr MemberProject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemberProject(const MemberProject& from);
  MemberProject(MemberProject&& from) noexcept
    : MemberProject() {
    *this = ::std::move(from);
  }

  inline MemberProject& operator=(const MemberProject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberProject& operator=(MemberProject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemberProject& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemberProject* internal_default_instance() {
    return reinterpret_cast<const MemberProject*>(
               &_MemberProject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemberProject& a, MemberProject& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberProject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemberProject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberProject* New() const final {
    return new MemberProject();
  }

  MemberProject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberProject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemberProject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemberProject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberProject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.MemberProject";
  }
  protected:
  explicit MemberProject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kImageFieldNumber = 6,
    kUidFieldNumber = 9,
    kRoleFieldNumber = 7,
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 5,
  };
  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string first_name = 3 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string image = 6 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string uid = 9 [json_name = "uid"];
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // .accounts.v1alpha1.Role role = 7 [json_name = "role"];
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::accounts::v1alpha1::Role& role() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::Role* release_role();
  ::accounts::v1alpha1::Role* mutable_role();
  void set_allocated_role(::accounts::v1alpha1::Role* role);
  private:
  const ::accounts::v1alpha1::Role& _internal_role() const;
  ::accounts::v1alpha1::Role* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::accounts::v1alpha1::Role* role);
  ::accounts::v1alpha1::Role* unsafe_arena_release_role();

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_active = 5 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.MemberProject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::accounts::v1alpha1::Role* role_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Permission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Permission) */ {
 public:
  inline Permission() : Permission(nullptr) {}
  ~Permission() override;
  explicit constexpr Permission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Permission(const Permission& from);
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permission& operator=(Permission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Permission& default_instance() {
    return *internal_default_instance();
  }
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(Permission* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return new Permission();
  }

  Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Permission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Permission& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Permission";
  }
  protected:
  explicit Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kActionFieldNumber = 3,
    kTypeFieldNumber = 4,
    kFullNameFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string action = 3 [json_name = "action"];
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string type = 4 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string full_name = 5 [json_name = "fullName"];
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Permission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit constexpr Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const final {
    return new Project();
  }

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Project& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 8,
    kUsersFieldNumber = 9,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 4,
  };
  // repeated .accounts.v1alpha1.Role roles = 8 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Role& _internal_roles(int index) const;
  ::accounts::v1alpha1::Role* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Role& roles(int index) const;
  ::accounts::v1alpha1::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
      roles() const;

  // repeated .accounts.v1alpha1.MemberProject users = 9 [json_name = "users"];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::accounts::v1alpha1::MemberProject* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::MemberProject >*
      mutable_users();
  private:
  const ::accounts::v1alpha1::MemberProject& _internal_users(int index) const;
  ::accounts::v1alpha1::MemberProject* _internal_add_users();
  public:
  const ::accounts::v1alpha1::MemberProject& users(int index) const;
  ::accounts::v1alpha1::MemberProject* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::MemberProject >&
      users() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string description = 5 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string created_at = 6 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 7 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::MemberProject > users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Organization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Organization) */ {
 public:
  inline Organization() : Organization(nullptr) {}
  ~Organization() override;
  explicit constexpr Organization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Organization(const Organization& from);
  Organization(Organization&& from) noexcept
    : Organization() {
    *this = ::std::move(from);
  }

  inline Organization& operator=(const Organization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Organization& operator=(Organization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Organization& default_instance() {
    return *internal_default_instance();
  }
  static inline const Organization* internal_default_instance() {
    return reinterpret_cast<const Organization*>(
               &_Organization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Organization& a, Organization& b) {
    a.Swap(&b);
  }
  inline void Swap(Organization* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Organization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Organization* New() const final {
    return new Organization();
  }

  Organization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Organization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Organization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Organization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Organization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Organization";
  }
  protected:
  explicit Organization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 8,
    kProjectsFieldNumber = 10,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kSlugFieldNumber = 9,
    kOwnerFieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Role roles = 8 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Role& _internal_roles(int index) const;
  ::accounts::v1alpha1::Role* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Role& roles(int index) const;
  ::accounts::v1alpha1::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
      roles() const;

  // repeated .accounts.v1alpha1.Project projects = 10 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::accounts::v1alpha1::Project* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
      mutable_projects();
  private:
  const ::accounts::v1alpha1::Project& _internal_projects(int index) const;
  ::accounts::v1alpha1::Project* _internal_add_projects();
  public:
  const ::accounts::v1alpha1::Project& projects(int index) const;
  ::accounts::v1alpha1::Project* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
      projects() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string description = 4 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string slug = 9 [json_name = "slug"];
  void clear_slug();
  const std::string& slug() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slug(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slug();
  PROTOBUF_MUST_USE_RESULT std::string* release_slug();
  void set_allocated_slug(std::string* slug);
  private:
  const std::string& _internal_slug() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slug(const std::string& value);
  std::string* _internal_mutable_slug();
  public:

  // .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::accounts::v1alpha1::UserList& owner() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::UserList* release_owner();
  ::accounts::v1alpha1::UserList* mutable_owner();
  void set_allocated_owner(::accounts::v1alpha1::UserList* owner);
  private:
  const ::accounts::v1alpha1::UserList& _internal_owner() const;
  ::accounts::v1alpha1::UserList* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::accounts::v1alpha1::UserList* owner);
  ::accounts::v1alpha1::UserList* unsafe_arena_release_owner();

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Organization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project > projects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slug_;
  ::accounts::v1alpha1::UserList* owner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UserDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UserDetail) */ {
 public:
  inline UserDetail() : UserDetail(nullptr) {}
  ~UserDetail() override;
  explicit constexpr UserDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDetail(const UserDetail& from);
  UserDetail(UserDetail&& from) noexcept
    : UserDetail() {
    *this = ::std::move(from);
  }

  inline UserDetail& operator=(const UserDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDetail& operator=(UserDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDetail* internal_default_instance() {
    return reinterpret_cast<const UserDetail*>(
               &_UserDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserDetail& a, UserDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDetail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDetail* New() const final {
    return new UserDetail();
  }

  UserDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserDetail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UserDetail";
  }
  protected:
  explicit UserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 9,
    kPermissionsFieldNumber = 10,
    kOrganizationsFieldNumber = 12,
    kUserIdFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kEmailFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
    kPhoneNumberFieldNumber = 15,
    kCountryFieldNumber = 16,
    kCityFieldNumber = 17,
    kZipCodeFieldNumber = 18,
    kAddressFieldNumber = 19,
    kStateFieldNumber = 20,
    kEmojiCountryFieldNumber = 21,
    kTokenCcpFieldNumber = 23,
    kLanguageFieldNumber = 26,
    kPhoneCodeFieldNumber = 35,
    kOptionalAddressFieldNumber = 36,
    kImageFieldNumber = 37,
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 6,
    kIsSuperUserFieldNumber = 11,
    kIsMfaEnabledFieldNumber = 22,
    kEmailVerifiedFieldNumber = 24,
    kPushNotificationFieldNumber = 27,
    kEmailNotificationFieldNumber = 28,
    kNewLoginNotificationFieldNumber = 29,
    kCreateNotificationFieldNumber = 30,
    kUpdateNotificationFieldNumber = 31,
    kDeleteNotificationFieldNumber = 32,
    kApplicationNotificationFieldNumber = 33,
    kReadNotificationFieldNumber = 34,
  };
  // repeated .accounts.v1alpha1.Role roles = 9 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Role& _internal_roles(int index) const;
  ::accounts::v1alpha1::Role* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Role& roles(int index) const;
  ::accounts::v1alpha1::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
      roles() const;

  // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
  int organizations_size() const;
  private:
  int _internal_organizations_size() const;
  public:
  void clear_organizations();
  ::accounts::v1alpha1::Organization* mutable_organizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
      mutable_organizations();
  private:
  const ::accounts::v1alpha1::Organization& _internal_organizations(int index) const;
  ::accounts::v1alpha1::Organization* _internal_add_organizations();
  public:
  const ::accounts::v1alpha1::Organization& organizations(int index) const;
  ::accounts::v1alpha1::Organization* add_organizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
      organizations() const;

  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string first_name = 3 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 5 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string created_at = 7 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 8 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // string phone_number = 15 [json_name = "phoneNumber"];
  void clear_phone_number();
  const std::string& phone_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string country = 16 [json_name = "country"];
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_MUST_USE_RESULT std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string city = 17 [json_name = "city"];
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_MUST_USE_RESULT std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string zip_code = 18 [json_name = "zipCode"];
  void clear_zip_code();
  const std::string& zip_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zip_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zip_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_zip_code();
  void set_allocated_zip_code(std::string* zip_code);
  private:
  const std::string& _internal_zip_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zip_code(const std::string& value);
  std::string* _internal_mutable_zip_code();
  public:

  // string address = 19 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string state = 20 [json_name = "state"];
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string emoji_country = 21 [json_name = "emojiCountry"];
  void clear_emoji_country();
  const std::string& emoji_country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_emoji_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_emoji_country();
  PROTOBUF_MUST_USE_RESULT std::string* release_emoji_country();
  void set_allocated_emoji_country(std::string* emoji_country);
  private:
  const std::string& _internal_emoji_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emoji_country(const std::string& value);
  std::string* _internal_mutable_emoji_country();
  public:

  // string token_ccp = 23 [json_name = "tokenCcp"];
  void clear_token_ccp();
  const std::string& token_ccp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_ccp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_ccp();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_ccp();
  void set_allocated_token_ccp(std::string* token_ccp);
  private:
  const std::string& _internal_token_ccp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_ccp(const std::string& value);
  std::string* _internal_mutable_token_ccp();
  public:

  // string language = 26 [json_name = "language"];
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_MUST_USE_RESULT std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string phone_code = 35 [json_name = "phoneCode"];
  void clear_phone_code();
  const std::string& phone_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_phone_code();
  void set_allocated_phone_code(std::string* phone_code);
  private:
  const std::string& _internal_phone_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_code(const std::string& value);
  std::string* _internal_mutable_phone_code();
  public:

  // string optional_address = 36 [json_name = "optionalAddress"];
  void clear_optional_address();
  const std::string& optional_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_optional_address();
  void set_allocated_optional_address(std::string* optional_address);
  private:
  const std::string& _internal_optional_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_address(const std::string& value);
  std::string* _internal_mutable_optional_address();
  public:

  // string image = 37 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_active = 6 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool is_super_user = 11 [json_name = "isSuperUser"];
  void clear_is_super_user();
  bool is_super_user() const;
  void set_is_super_user(bool value);
  private:
  bool _internal_is_super_user() const;
  void _internal_set_is_super_user(bool value);
  public:

  // bool is_mfa_enabled = 22 [json_name = "isMfaEnabled"];
  void clear_is_mfa_enabled();
  bool is_mfa_enabled() const;
  void set_is_mfa_enabled(bool value);
  private:
  bool _internal_is_mfa_enabled() const;
  void _internal_set_is_mfa_enabled(bool value);
  public:

  // bool email_verified = 24 [json_name = "emailVerified"];
  void clear_email_verified();
  bool email_verified() const;
  void set_email_verified(bool value);
  private:
  bool _internal_email_verified() const;
  void _internal_set_email_verified(bool value);
  public:

  // bool push_notification = 27 [json_name = "pushNotification"];
  void clear_push_notification();
  bool push_notification() const;
  void set_push_notification(bool value);
  private:
  bool _internal_push_notification() const;
  void _internal_set_push_notification(bool value);
  public:

  // bool email_notification = 28 [json_name = "emailNotification"];
  void clear_email_notification();
  bool email_notification() const;
  void set_email_notification(bool value);
  private:
  bool _internal_email_notification() const;
  void _internal_set_email_notification(bool value);
  public:

  // bool new_login_notification = 29 [json_name = "newLoginNotification"];
  void clear_new_login_notification();
  bool new_login_notification() const;
  void set_new_login_notification(bool value);
  private:
  bool _internal_new_login_notification() const;
  void _internal_set_new_login_notification(bool value);
  public:

  // bool create_notification = 30 [json_name = "createNotification"];
  void clear_create_notification();
  bool create_notification() const;
  void set_create_notification(bool value);
  private:
  bool _internal_create_notification() const;
  void _internal_set_create_notification(bool value);
  public:

  // bool update_notification = 31 [json_name = "updateNotification"];
  void clear_update_notification();
  bool update_notification() const;
  void set_update_notification(bool value);
  private:
  bool _internal_update_notification() const;
  void _internal_set_update_notification(bool value);
  public:

  // bool delete_notification = 32 [json_name = "deleteNotification"];
  void clear_delete_notification();
  bool delete_notification() const;
  void set_delete_notification(bool value);
  private:
  bool _internal_delete_notification() const;
  void _internal_set_delete_notification(bool value);
  public:

  // bool application_notification = 33 [json_name = "applicationNotification"];
  void clear_application_notification();
  bool application_notification() const;
  void set_application_notification(bool value);
  private:
  bool _internal_application_notification() const;
  void _internal_set_application_notification(bool value);
  public:

  // bool read_notification = 34 [json_name = "readNotification"];
  void clear_read_notification();
  bool read_notification() const;
  void set_read_notification(bool value);
  private:
  bool _internal_read_notification() const;
  void _internal_set_read_notification(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UserDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization > organizations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zip_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emoji_country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_ccp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_active_;
  bool is_super_user_;
  bool is_mfa_enabled_;
  bool email_verified_;
  bool push_notification_;
  bool email_notification_;
  bool new_login_notification_;
  bool create_notification_;
  bool update_notification_;
  bool delete_notification_;
  bool application_notification_;
  bool read_notification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Role

// uint32 id = 1 [json_name = "id"];
inline void Role::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Role.id)
  return _internal_id();
}
inline void Role::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Role::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Role.id)
}

// string name = 2 [json_name = "name"];
inline void Role::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Role.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Role::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Role.name)
}
inline std::string* Role::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Role.name)
  return _s;
}
inline const std::string& Role::_internal_name() const {
  return name_.Get();
}
inline void Role::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Role::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Role.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Role.name)
}

// uint32 project_id = 3 [json_name = "projectId"];
inline void Role::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Role.project_id)
  return _internal_project_id();
}
inline void Role::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Role::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Role.project_id)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void Role::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Role.organization_id)
  return _internal_organization_id();
}
inline void Role::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Role::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Role.organization_id)
}

// repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
inline int Role::_internal_permissions_size() const {
  return permissions_.size();
}
inline int Role::permissions_size() const {
  return _internal_permissions_size();
}
inline void Role::clear_permissions() {
  permissions_.Clear();
}
inline ::accounts::v1alpha1::Permission* Role::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Role.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
Role::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.Role.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& Role::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& Role::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Role.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* Role::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* Role::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.Role.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
Role::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.Role.permissions)
  return permissions_;
}

// bool is_admin = 6 [json_name = "isAdmin"];
inline void Role::clear_is_admin() {
  is_admin_ = false;
}
inline bool Role::_internal_is_admin() const {
  return is_admin_;
}
inline bool Role::is_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Role.is_admin)
  return _internal_is_admin();
}
inline void Role::_internal_set_is_admin(bool value) {
  
  is_admin_ = value;
}
inline void Role::set_is_admin(bool value) {
  _internal_set_is_admin(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Role.is_admin)
}

// -------------------------------------------------------------------

// UserList

// uint32 id = 1 [json_name = "id"];
inline void UserList::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserList::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserList::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.id)
  return _internal_id();
}
inline void UserList::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UserList::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.id)
}

// string first_name = 2 [json_name = "firstName"];
inline void UserList::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& UserList::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.first_name)
}
inline std::string* UserList::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.first_name)
  return _s;
}
inline const std::string& UserList::_internal_first_name() const {
  return first_name_.Get();
}
inline void UserList::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.first_name)
}

// string last_name = 3 [json_name = "lastName"];
inline void UserList::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& UserList::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.last_name)
}
inline std::string* UserList::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.last_name)
  return _s;
}
inline const std::string& UserList::_internal_last_name() const {
  return last_name_.Get();
}
inline void UserList::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.last_name)
}

// string email = 4 [json_name = "email"];
inline void UserList::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserList::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.email)
}
inline std::string* UserList::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.email)
  return _s;
}
inline const std::string& UserList::_internal_email() const {
  return email_.Get();
}
inline void UserList::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.email)
}

// string user_id = 5 [json_name = "userId"];
inline void UserList::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UserList::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.user_id)
}
inline std::string* UserList::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.user_id)
  return _s;
}
inline const std::string& UserList::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserList::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.user_id)
}

// bool is_active = 6 [json_name = "isActive"];
inline void UserList::clear_is_active() {
  is_active_ = false;
}
inline bool UserList::_internal_is_active() const {
  return is_active_;
}
inline bool UserList::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.is_active)
  return _internal_is_active();
}
inline void UserList::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void UserList::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.is_active)
}

// bool is_super_user = 7 [json_name = "isSuperUser"];
inline void UserList::clear_is_super_user() {
  is_super_user_ = false;
}
inline bool UserList::_internal_is_super_user() const {
  return is_super_user_;
}
inline bool UserList::is_super_user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.is_super_user)
  return _internal_is_super_user();
}
inline void UserList::_internal_set_is_super_user(bool value) {
  
  is_super_user_ = value;
}
inline void UserList::set_is_super_user(bool value) {
  _internal_set_is_super_user(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.is_super_user)
}

// string image = 8 [json_name = "image"];
inline void UserList::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& UserList::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.image)
}
inline std::string* UserList::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.image)
  return _s;
}
inline const std::string& UserList::_internal_image() const {
  return image_.Get();
}
inline void UserList::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.image)
}

// -------------------------------------------------------------------

// MemberRol

// uint32 id = 1 [json_name = "id"];
inline void MemberRol::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberRol::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberRol::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberRol.id)
  return _internal_id();
}
inline void MemberRol::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MemberRol::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberRol.id)
}

// string name = 2 [json_name = "name"];
inline void MemberRol::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MemberRol::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberRol.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberRol::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberRol.name)
}
inline std::string* MemberRol::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberRol.name)
  return _s;
}
inline const std::string& MemberRol::_internal_name() const {
  return name_.Get();
}
inline void MemberRol::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemberRol::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemberRol::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberRol.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemberRol::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberRol.name)
}

// bool is_admin = 3 [json_name = "isAdmin"];
inline void MemberRol::clear_is_admin() {
  is_admin_ = false;
}
inline bool MemberRol::_internal_is_admin() const {
  return is_admin_;
}
inline bool MemberRol::is_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberRol.is_admin)
  return _internal_is_admin();
}
inline void MemberRol::_internal_set_is_admin(bool value) {
  
  is_admin_ = value;
}
inline void MemberRol::set_is_admin(bool value) {
  _internal_set_is_admin(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberRol.is_admin)
}

// string uid = 4 [json_name = "uid"];
inline void MemberRol::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& MemberRol::uid() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberRol.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberRol::set_uid(ArgT0&& arg0, ArgT... args) {
 
 uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberRol.uid)
}
inline std::string* MemberRol::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberRol.uid)
  return _s;
}
inline const std::string& MemberRol::_internal_uid() const {
  return uid_.Get();
}
inline void MemberRol::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemberRol::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemberRol::release_uid() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberRol.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemberRol::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberRol.uid)
}

// -------------------------------------------------------------------

// MemberProject

// uint32 id = 1 [json_name = "id"];
inline void MemberProject::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberProject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberProject::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.id)
  return _internal_id();
}
inline void MemberProject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MemberProject::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberProject.id)
}

// string user_id = 2 [json_name = "userId"];
inline void MemberProject::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& MemberProject::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberProject::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberProject.user_id)
}
inline std::string* MemberProject::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberProject.user_id)
  return _s;
}
inline const std::string& MemberProject::_internal_user_id() const {
  return user_id_.Get();
}
inline void MemberProject::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemberProject::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemberProject::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberProject.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemberProject::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberProject.user_id)
}

// string first_name = 3 [json_name = "firstName"];
inline void MemberProject::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& MemberProject::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberProject::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberProject.first_name)
}
inline std::string* MemberProject::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberProject.first_name)
  return _s;
}
inline const std::string& MemberProject::_internal_first_name() const {
  return first_name_.Get();
}
inline void MemberProject::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemberProject::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemberProject::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberProject.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemberProject::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberProject.first_name)
}

// string last_name = 4 [json_name = "lastName"];
inline void MemberProject::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& MemberProject::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberProject::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberProject.last_name)
}
inline std::string* MemberProject::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberProject.last_name)
  return _s;
}
inline const std::string& MemberProject::_internal_last_name() const {
  return last_name_.Get();
}
inline void MemberProject::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemberProject::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemberProject::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberProject.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemberProject::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberProject.last_name)
}

// bool is_active = 5 [json_name = "isActive"];
inline void MemberProject::clear_is_active() {
  is_active_ = false;
}
inline bool MemberProject::_internal_is_active() const {
  return is_active_;
}
inline bool MemberProject::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.is_active)
  return _internal_is_active();
}
inline void MemberProject::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void MemberProject::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberProject.is_active)
}

// string image = 6 [json_name = "image"];
inline void MemberProject::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& MemberProject::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberProject::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberProject.image)
}
inline std::string* MemberProject::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberProject.image)
  return _s;
}
inline const std::string& MemberProject::_internal_image() const {
  return image_.Get();
}
inline void MemberProject::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemberProject::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemberProject::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberProject.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemberProject::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberProject.image)
}

// .accounts.v1alpha1.Role role = 7 [json_name = "role"];
inline bool MemberProject::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool MemberProject::has_role() const {
  return _internal_has_role();
}
inline void MemberProject::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::accounts::v1alpha1::Role& MemberProject::_internal_role() const {
  const ::accounts::v1alpha1::Role* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::Role&>(
      ::accounts::v1alpha1::_Role_default_instance_);
}
inline const ::accounts::v1alpha1::Role& MemberProject::role() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.role)
  return _internal_role();
}
inline void MemberProject::unsafe_arena_set_allocated_role(
    ::accounts::v1alpha1::Role* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.MemberProject.role)
}
inline ::accounts::v1alpha1::Role* MemberProject::release_role() {
  
  ::accounts::v1alpha1::Role* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::Role* MemberProject::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberProject.role)
  
  ::accounts::v1alpha1::Role* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::Role* MemberProject::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::Role>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::accounts::v1alpha1::Role* MemberProject::mutable_role() {
  ::accounts::v1alpha1::Role* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberProject.role)
  return _msg;
}
inline void MemberProject::set_allocated_role(::accounts::v1alpha1::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::Role>::GetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberProject.role)
}

// string uid = 9 [json_name = "uid"];
inline void MemberProject::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& MemberProject::uid() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.MemberProject.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberProject::set_uid(ArgT0&& arg0, ArgT... args) {
 
 uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.MemberProject.uid)
}
inline std::string* MemberProject::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.MemberProject.uid)
  return _s;
}
inline const std::string& MemberProject::_internal_uid() const {
  return uid_.Get();
}
inline void MemberProject::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemberProject::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemberProject::release_uid() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.MemberProject.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemberProject::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.MemberProject.uid)
}

// -------------------------------------------------------------------

// Permission

// uint32 id = 1 [json_name = "id"];
inline void Permission::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Permission::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Permission::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.id)
  return _internal_id();
}
inline void Permission::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Permission::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.id)
}

// string name = 2 [json_name = "name"];
inline void Permission::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Permission::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Permission::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.name)
}
inline std::string* Permission::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Permission.name)
  return _s;
}
inline const std::string& Permission::_internal_name() const {
  return name_.Get();
}
inline void Permission::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Permission::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Permission.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Permission::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Permission.name)
}

// string action = 3 [json_name = "action"];
inline void Permission::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& Permission::action() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Permission::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.action)
}
inline std::string* Permission::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Permission.action)
  return _s;
}
inline const std::string& Permission::_internal_action() const {
  return action_.Get();
}
inline void Permission::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Permission::release_action() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Permission.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Permission::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Permission.action)
}

// string type = 4 [json_name = "type"];
inline void Permission::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Permission::type() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Permission::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.type)
}
inline std::string* Permission::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Permission.type)
  return _s;
}
inline const std::string& Permission::_internal_type() const {
  return type_.Get();
}
inline void Permission::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Permission::release_type() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Permission.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Permission::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Permission.type)
}

// string full_name = 5 [json_name = "fullName"];
inline void Permission::clear_full_name() {
  full_name_.ClearToEmpty();
}
inline const std::string& Permission::full_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Permission::set_full_name(ArgT0&& arg0, ArgT... args) {
 
 full_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.full_name)
}
inline std::string* Permission::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Permission.full_name)
  return _s;
}
inline const std::string& Permission::_internal_full_name() const {
  return full_name_.Get();
}
inline void Permission::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_full_name() {
  
  return full_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Permission::release_full_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Permission.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Permission::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Permission.full_name)
}

// -------------------------------------------------------------------

// Project

// int32 id = 1 [json_name = "id"];
inline void Project::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.id)
  return _internal_id();
}
inline void Project::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Project::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.id)
}

// string name = 2 [json_name = "name"];
inline void Project::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.name)
}
inline std::string* Project::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.name)
  return _s;
}
inline const std::string& Project::_internal_name() const {
  return name_.Get();
}
inline void Project::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.name)
}

// string image = 3 [json_name = "image"];
inline void Project::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& Project::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.image)
}
inline std::string* Project::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.image)
  return _s;
}
inline const std::string& Project::_internal_image() const {
  return image_.Get();
}
inline void Project::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.image)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void Project::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Project::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Project::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.organization_id)
  return _internal_organization_id();
}
inline void Project::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Project::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.organization_id)
}

// string description = 5 [json_name = "description"];
inline void Project::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Project::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.description)
}
inline std::string* Project::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.description)
  return _s;
}
inline const std::string& Project::_internal_description() const {
  return description_.Get();
}
inline void Project::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.description)
}

// string created_at = 6 [json_name = "createdAt"];
inline void Project::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Project::created_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.created_at)
}
inline std::string* Project::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.created_at)
  return _s;
}
inline const std::string& Project::_internal_created_at() const {
  return created_at_.Get();
}
inline void Project::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_created_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.created_at)
}

// string updated_at = 7 [json_name = "updatedAt"];
inline void Project::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Project::updated_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.updated_at)
}
inline std::string* Project::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.updated_at)
  return _s;
}
inline const std::string& Project::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Project::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_updated_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.updated_at)
}

// repeated .accounts.v1alpha1.Role roles = 8 [json_name = "roles"];
inline int Project::_internal_roles_size() const {
  return roles_.size();
}
inline int Project::roles_size() const {
  return _internal_roles_size();
}
inline void Project::clear_roles() {
  roles_.Clear();
}
inline ::accounts::v1alpha1::Role* Project::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
Project::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.Project.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Role& Project::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Role& Project::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Role* Project::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Role* Project::add_roles() {
  ::accounts::v1alpha1::Role* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.Project.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
Project::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.Project.roles)
  return roles_;
}

// repeated .accounts.v1alpha1.MemberProject users = 9 [json_name = "users"];
inline int Project::_internal_users_size() const {
  return users_.size();
}
inline int Project::users_size() const {
  return _internal_users_size();
}
inline void Project::clear_users() {
  users_.Clear();
}
inline ::accounts::v1alpha1::MemberProject* Project::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::MemberProject >*
Project::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.Project.users)
  return &users_;
}
inline const ::accounts::v1alpha1::MemberProject& Project::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::accounts::v1alpha1::MemberProject& Project::users(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.users)
  return _internal_users(index);
}
inline ::accounts::v1alpha1::MemberProject* Project::_internal_add_users() {
  return users_.Add();
}
inline ::accounts::v1alpha1::MemberProject* Project::add_users() {
  ::accounts::v1alpha1::MemberProject* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.Project.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::MemberProject >&
Project::users() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.Project.users)
  return users_;
}

// -------------------------------------------------------------------

// Organization

// uint32 id = 1 [json_name = "id"];
inline void Organization::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Organization::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Organization::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.id)
  return _internal_id();
}
inline void Organization::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Organization::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.id)
}

// string name = 2 [json_name = "name"];
inline void Organization::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Organization::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.name)
}
inline std::string* Organization::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.name)
  return _s;
}
inline const std::string& Organization::_internal_name() const {
  return name_.Get();
}
inline void Organization::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Organization.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Organization.name)
}

// string image = 3 [json_name = "image"];
inline void Organization::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& Organization::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.image)
}
inline std::string* Organization::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.image)
  return _s;
}
inline const std::string& Organization::_internal_image() const {
  return image_.Get();
}
inline void Organization::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Organization.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Organization.image)
}

// string description = 4 [json_name = "description"];
inline void Organization::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Organization::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.description)
}
inline std::string* Organization::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.description)
  return _s;
}
inline const std::string& Organization::_internal_description() const {
  return description_.Get();
}
inline void Organization::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Organization.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Organization.description)
}

// .accounts.v1alpha1.UserList owner = 7 [json_name = "owner"];
inline bool Organization::_internal_has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline bool Organization::has_owner() const {
  return _internal_has_owner();
}
inline void Organization::clear_owner() {
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
inline const ::accounts::v1alpha1::UserList& Organization::_internal_owner() const {
  const ::accounts::v1alpha1::UserList* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::UserList&>(
      ::accounts::v1alpha1::_UserList_default_instance_);
}
inline const ::accounts::v1alpha1::UserList& Organization::owner() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.owner)
  return _internal_owner();
}
inline void Organization::unsafe_arena_set_allocated_owner(
    ::accounts::v1alpha1::UserList* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.Organization.owner)
}
inline ::accounts::v1alpha1::UserList* Organization::release_owner() {
  
  ::accounts::v1alpha1::UserList* temp = owner_;
  owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::UserList* Organization::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Organization.owner)
  
  ::accounts::v1alpha1::UserList* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::UserList* Organization::_internal_mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::UserList>(GetArenaForAllocation());
    owner_ = p;
  }
  return owner_;
}
inline ::accounts::v1alpha1::UserList* Organization::mutable_owner() {
  ::accounts::v1alpha1::UserList* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.owner)
  return _msg;
}
inline void Organization::set_allocated_owner(::accounts::v1alpha1::UserList* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::UserList>::GetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Organization.owner)
}

// repeated .accounts.v1alpha1.Role roles = 8 [json_name = "roles"];
inline int Organization::_internal_roles_size() const {
  return roles_.size();
}
inline int Organization::roles_size() const {
  return _internal_roles_size();
}
inline void Organization::clear_roles() {
  roles_.Clear();
}
inline ::accounts::v1alpha1::Role* Organization::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
Organization::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.Organization.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Role& Organization::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Role& Organization::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Role* Organization::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Role* Organization::add_roles() {
  ::accounts::v1alpha1::Role* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.Organization.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
Organization::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.Organization.roles)
  return roles_;
}

// string slug = 9 [json_name = "slug"];
inline void Organization::clear_slug() {
  slug_.ClearToEmpty();
}
inline const std::string& Organization::slug() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.slug)
  return _internal_slug();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_slug(ArgT0&& arg0, ArgT... args) {
 
 slug_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.slug)
}
inline std::string* Organization::mutable_slug() {
  std::string* _s = _internal_mutable_slug();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.slug)
  return _s;
}
inline const std::string& Organization::_internal_slug() const {
  return slug_.Get();
}
inline void Organization::_internal_set_slug(const std::string& value) {
  
  slug_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_slug() {
  
  return slug_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_slug() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Organization.slug)
  return slug_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_slug(std::string* slug) {
  if (slug != nullptr) {
    
  } else {
    
  }
  slug_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slug,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Organization.slug)
}

// repeated .accounts.v1alpha1.Project projects = 10 [json_name = "projects"];
inline int Organization::_internal_projects_size() const {
  return projects_.size();
}
inline int Organization::projects_size() const {
  return _internal_projects_size();
}
inline void Organization::clear_projects() {
  projects_.Clear();
}
inline ::accounts::v1alpha1::Project* Organization::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
Organization::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.Organization.projects)
  return &projects_;
}
inline const ::accounts::v1alpha1::Project& Organization::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::accounts::v1alpha1::Project& Organization::projects(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.projects)
  return _internal_projects(index);
}
inline ::accounts::v1alpha1::Project* Organization::_internal_add_projects() {
  return projects_.Add();
}
inline ::accounts::v1alpha1::Project* Organization::add_projects() {
  ::accounts::v1alpha1::Project* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.Organization.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
Organization::projects() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.Organization.projects)
  return projects_;
}

// -------------------------------------------------------------------

// UserDetail

// uint32 id = 1 [json_name = "id"];
inline void UserDetail::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDetail::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDetail::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.id)
  return _internal_id();
}
inline void UserDetail::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UserDetail::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.id)
}

// string user_id = 2 [json_name = "userId"];
inline void UserDetail::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UserDetail::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.user_id)
}
inline std::string* UserDetail::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.user_id)
  return _s;
}
inline const std::string& UserDetail::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserDetail::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.user_id)
}

// string first_name = 3 [json_name = "firstName"];
inline void UserDetail::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& UserDetail::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.first_name)
}
inline std::string* UserDetail::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.first_name)
  return _s;
}
inline const std::string& UserDetail::_internal_first_name() const {
  return first_name_.Get();
}
inline void UserDetail::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.first_name)
}

// string last_name = 4 [json_name = "lastName"];
inline void UserDetail::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& UserDetail::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.last_name)
}
inline std::string* UserDetail::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.last_name)
  return _s;
}
inline const std::string& UserDetail::_internal_last_name() const {
  return last_name_.Get();
}
inline void UserDetail::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.last_name)
}

// string email = 5 [json_name = "email"];
inline void UserDetail::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserDetail::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.email)
}
inline std::string* UserDetail::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.email)
  return _s;
}
inline const std::string& UserDetail::_internal_email() const {
  return email_.Get();
}
inline void UserDetail::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.email)
}

// bool is_active = 6 [json_name = "isActive"];
inline void UserDetail::clear_is_active() {
  is_active_ = false;
}
inline bool UserDetail::_internal_is_active() const {
  return is_active_;
}
inline bool UserDetail::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.is_active)
  return _internal_is_active();
}
inline void UserDetail::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void UserDetail::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.is_active)
}

// string created_at = 7 [json_name = "createdAt"];
inline void UserDetail::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& UserDetail::created_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.created_at)
}
inline std::string* UserDetail::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.created_at)
  return _s;
}
inline const std::string& UserDetail::_internal_created_at() const {
  return created_at_.Get();
}
inline void UserDetail::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_created_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.created_at)
}

// string updated_at = 8 [json_name = "updatedAt"];
inline void UserDetail::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& UserDetail::updated_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.updated_at)
}
inline std::string* UserDetail::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.updated_at)
  return _s;
}
inline const std::string& UserDetail::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void UserDetail::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_updated_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.updated_at)
}

// repeated .accounts.v1alpha1.Role roles = 9 [json_name = "roles"];
inline int UserDetail::_internal_roles_size() const {
  return roles_.size();
}
inline int UserDetail::roles_size() const {
  return _internal_roles_size();
}
inline void UserDetail::clear_roles() {
  roles_.Clear();
}
inline ::accounts::v1alpha1::Role* UserDetail::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >*
UserDetail::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.UserDetail.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Role& UserDetail::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Role& UserDetail::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Role* UserDetail::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Role* UserDetail::add_roles() {
  ::accounts::v1alpha1::Role* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.UserDetail.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Role >&
UserDetail::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.UserDetail.roles)
  return roles_;
}

// repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
inline int UserDetail::_internal_permissions_size() const {
  return permissions_.size();
}
inline int UserDetail::permissions_size() const {
  return _internal_permissions_size();
}
inline void UserDetail::clear_permissions() {
  permissions_.Clear();
}
inline ::accounts::v1alpha1::Permission* UserDetail::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
UserDetail::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.UserDetail.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& UserDetail::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& UserDetail::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* UserDetail::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* UserDetail::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.UserDetail.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
UserDetail::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.UserDetail.permissions)
  return permissions_;
}

// bool is_super_user = 11 [json_name = "isSuperUser"];
inline void UserDetail::clear_is_super_user() {
  is_super_user_ = false;
}
inline bool UserDetail::_internal_is_super_user() const {
  return is_super_user_;
}
inline bool UserDetail::is_super_user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.is_super_user)
  return _internal_is_super_user();
}
inline void UserDetail::_internal_set_is_super_user(bool value) {
  
  is_super_user_ = value;
}
inline void UserDetail::set_is_super_user(bool value) {
  _internal_set_is_super_user(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.is_super_user)
}

// repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
inline int UserDetail::_internal_organizations_size() const {
  return organizations_.size();
}
inline int UserDetail::organizations_size() const {
  return _internal_organizations_size();
}
inline void UserDetail::clear_organizations() {
  organizations_.Clear();
}
inline ::accounts::v1alpha1::Organization* UserDetail::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.organizations)
  return organizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
UserDetail::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.UserDetail.organizations)
  return &organizations_;
}
inline const ::accounts::v1alpha1::Organization& UserDetail::_internal_organizations(int index) const {
  return organizations_.Get(index);
}
inline const ::accounts::v1alpha1::Organization& UserDetail::organizations(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.organizations)
  return _internal_organizations(index);
}
inline ::accounts::v1alpha1::Organization* UserDetail::_internal_add_organizations() {
  return organizations_.Add();
}
inline ::accounts::v1alpha1::Organization* UserDetail::add_organizations() {
  ::accounts::v1alpha1::Organization* _add = _internal_add_organizations();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.UserDetail.organizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
UserDetail::organizations() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.UserDetail.organizations)
  return organizations_;
}

// string phone_number = 15 [json_name = "phoneNumber"];
inline void UserDetail::clear_phone_number() {
  phone_number_.ClearToEmpty();
}
inline const std::string& UserDetail::phone_number() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.phone_number)
  return _internal_phone_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_phone_number(ArgT0&& arg0, ArgT... args) {
 
 phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.phone_number)
}
inline std::string* UserDetail::mutable_phone_number() {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.phone_number)
  return _s;
}
inline const std::string& UserDetail::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void UserDetail::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_phone_number() {
  
  return phone_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_phone_number() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.phone_number)
  return phone_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.phone_number)
}

// string country = 16 [json_name = "country"];
inline void UserDetail::clear_country() {
  country_.ClearToEmpty();
}
inline const std::string& UserDetail::country() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_country(ArgT0&& arg0, ArgT... args) {
 
 country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.country)
}
inline std::string* UserDetail::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.country)
  return _s;
}
inline const std::string& UserDetail::_internal_country() const {
  return country_.Get();
}
inline void UserDetail::_internal_set_country(const std::string& value) {
  
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_country() {
  
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_country() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.country)
}

// string city = 17 [json_name = "city"];
inline void UserDetail::clear_city() {
  city_.ClearToEmpty();
}
inline const std::string& UserDetail::city() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_city(ArgT0&& arg0, ArgT... args) {
 
 city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.city)
}
inline std::string* UserDetail::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.city)
  return _s;
}
inline const std::string& UserDetail::_internal_city() const {
  return city_.Get();
}
inline void UserDetail::_internal_set_city(const std::string& value) {
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_city() {
  
  return city_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_city() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.city)
}

// string zip_code = 18 [json_name = "zipCode"];
inline void UserDetail::clear_zip_code() {
  zip_code_.ClearToEmpty();
}
inline const std::string& UserDetail::zip_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.zip_code)
  return _internal_zip_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_zip_code(ArgT0&& arg0, ArgT... args) {
 
 zip_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.zip_code)
}
inline std::string* UserDetail::mutable_zip_code() {
  std::string* _s = _internal_mutable_zip_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.zip_code)
  return _s;
}
inline const std::string& UserDetail::_internal_zip_code() const {
  return zip_code_.Get();
}
inline void UserDetail::_internal_set_zip_code(const std::string& value) {
  
  zip_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_zip_code() {
  
  return zip_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_zip_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.zip_code)
  return zip_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_zip_code(std::string* zip_code) {
  if (zip_code != nullptr) {
    
  } else {
    
  }
  zip_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zip_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.zip_code)
}

// string address = 19 [json_name = "address"];
inline void UserDetail::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& UserDetail::address() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.address)
}
inline std::string* UserDetail::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.address)
  return _s;
}
inline const std::string& UserDetail::_internal_address() const {
  return address_.Get();
}
inline void UserDetail::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_address() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.address)
}

// string state = 20 [json_name = "state"];
inline void UserDetail::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& UserDetail::state() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.state)
}
inline std::string* UserDetail::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.state)
  return _s;
}
inline const std::string& UserDetail::_internal_state() const {
  return state_.Get();
}
inline void UserDetail::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_state() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.state)
}

// string emoji_country = 21 [json_name = "emojiCountry"];
inline void UserDetail::clear_emoji_country() {
  emoji_country_.ClearToEmpty();
}
inline const std::string& UserDetail::emoji_country() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.emoji_country)
  return _internal_emoji_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_emoji_country(ArgT0&& arg0, ArgT... args) {
 
 emoji_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.emoji_country)
}
inline std::string* UserDetail::mutable_emoji_country() {
  std::string* _s = _internal_mutable_emoji_country();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.emoji_country)
  return _s;
}
inline const std::string& UserDetail::_internal_emoji_country() const {
  return emoji_country_.Get();
}
inline void UserDetail::_internal_set_emoji_country(const std::string& value) {
  
  emoji_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_emoji_country() {
  
  return emoji_country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_emoji_country() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.emoji_country)
  return emoji_country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_emoji_country(std::string* emoji_country) {
  if (emoji_country != nullptr) {
    
  } else {
    
  }
  emoji_country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emoji_country,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.emoji_country)
}

// bool is_mfa_enabled = 22 [json_name = "isMfaEnabled"];
inline void UserDetail::clear_is_mfa_enabled() {
  is_mfa_enabled_ = false;
}
inline bool UserDetail::_internal_is_mfa_enabled() const {
  return is_mfa_enabled_;
}
inline bool UserDetail::is_mfa_enabled() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.is_mfa_enabled)
  return _internal_is_mfa_enabled();
}
inline void UserDetail::_internal_set_is_mfa_enabled(bool value) {
  
  is_mfa_enabled_ = value;
}
inline void UserDetail::set_is_mfa_enabled(bool value) {
  _internal_set_is_mfa_enabled(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.is_mfa_enabled)
}

// string token_ccp = 23 [json_name = "tokenCcp"];
inline void UserDetail::clear_token_ccp() {
  token_ccp_.ClearToEmpty();
}
inline const std::string& UserDetail::token_ccp() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.token_ccp)
  return _internal_token_ccp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_token_ccp(ArgT0&& arg0, ArgT... args) {
 
 token_ccp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.token_ccp)
}
inline std::string* UserDetail::mutable_token_ccp() {
  std::string* _s = _internal_mutable_token_ccp();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.token_ccp)
  return _s;
}
inline const std::string& UserDetail::_internal_token_ccp() const {
  return token_ccp_.Get();
}
inline void UserDetail::_internal_set_token_ccp(const std::string& value) {
  
  token_ccp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_token_ccp() {
  
  return token_ccp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_token_ccp() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.token_ccp)
  return token_ccp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_token_ccp(std::string* token_ccp) {
  if (token_ccp != nullptr) {
    
  } else {
    
  }
  token_ccp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_ccp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.token_ccp)
}

// bool email_verified = 24 [json_name = "emailVerified"];
inline void UserDetail::clear_email_verified() {
  email_verified_ = false;
}
inline bool UserDetail::_internal_email_verified() const {
  return email_verified_;
}
inline bool UserDetail::email_verified() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.email_verified)
  return _internal_email_verified();
}
inline void UserDetail::_internal_set_email_verified(bool value) {
  
  email_verified_ = value;
}
inline void UserDetail::set_email_verified(bool value) {
  _internal_set_email_verified(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.email_verified)
}

// string language = 26 [json_name = "language"];
inline void UserDetail::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& UserDetail::language() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.language)
}
inline std::string* UserDetail::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.language)
  return _s;
}
inline const std::string& UserDetail::_internal_language() const {
  return language_.Get();
}
inline void UserDetail::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_language() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.language)
}

// bool push_notification = 27 [json_name = "pushNotification"];
inline void UserDetail::clear_push_notification() {
  push_notification_ = false;
}
inline bool UserDetail::_internal_push_notification() const {
  return push_notification_;
}
inline bool UserDetail::push_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.push_notification)
  return _internal_push_notification();
}
inline void UserDetail::_internal_set_push_notification(bool value) {
  
  push_notification_ = value;
}
inline void UserDetail::set_push_notification(bool value) {
  _internal_set_push_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.push_notification)
}

// bool email_notification = 28 [json_name = "emailNotification"];
inline void UserDetail::clear_email_notification() {
  email_notification_ = false;
}
inline bool UserDetail::_internal_email_notification() const {
  return email_notification_;
}
inline bool UserDetail::email_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.email_notification)
  return _internal_email_notification();
}
inline void UserDetail::_internal_set_email_notification(bool value) {
  
  email_notification_ = value;
}
inline void UserDetail::set_email_notification(bool value) {
  _internal_set_email_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.email_notification)
}

// bool new_login_notification = 29 [json_name = "newLoginNotification"];
inline void UserDetail::clear_new_login_notification() {
  new_login_notification_ = false;
}
inline bool UserDetail::_internal_new_login_notification() const {
  return new_login_notification_;
}
inline bool UserDetail::new_login_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.new_login_notification)
  return _internal_new_login_notification();
}
inline void UserDetail::_internal_set_new_login_notification(bool value) {
  
  new_login_notification_ = value;
}
inline void UserDetail::set_new_login_notification(bool value) {
  _internal_set_new_login_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.new_login_notification)
}

// bool create_notification = 30 [json_name = "createNotification"];
inline void UserDetail::clear_create_notification() {
  create_notification_ = false;
}
inline bool UserDetail::_internal_create_notification() const {
  return create_notification_;
}
inline bool UserDetail::create_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.create_notification)
  return _internal_create_notification();
}
inline void UserDetail::_internal_set_create_notification(bool value) {
  
  create_notification_ = value;
}
inline void UserDetail::set_create_notification(bool value) {
  _internal_set_create_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.create_notification)
}

// bool update_notification = 31 [json_name = "updateNotification"];
inline void UserDetail::clear_update_notification() {
  update_notification_ = false;
}
inline bool UserDetail::_internal_update_notification() const {
  return update_notification_;
}
inline bool UserDetail::update_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.update_notification)
  return _internal_update_notification();
}
inline void UserDetail::_internal_set_update_notification(bool value) {
  
  update_notification_ = value;
}
inline void UserDetail::set_update_notification(bool value) {
  _internal_set_update_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.update_notification)
}

// bool delete_notification = 32 [json_name = "deleteNotification"];
inline void UserDetail::clear_delete_notification() {
  delete_notification_ = false;
}
inline bool UserDetail::_internal_delete_notification() const {
  return delete_notification_;
}
inline bool UserDetail::delete_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.delete_notification)
  return _internal_delete_notification();
}
inline void UserDetail::_internal_set_delete_notification(bool value) {
  
  delete_notification_ = value;
}
inline void UserDetail::set_delete_notification(bool value) {
  _internal_set_delete_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.delete_notification)
}

// bool application_notification = 33 [json_name = "applicationNotification"];
inline void UserDetail::clear_application_notification() {
  application_notification_ = false;
}
inline bool UserDetail::_internal_application_notification() const {
  return application_notification_;
}
inline bool UserDetail::application_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.application_notification)
  return _internal_application_notification();
}
inline void UserDetail::_internal_set_application_notification(bool value) {
  
  application_notification_ = value;
}
inline void UserDetail::set_application_notification(bool value) {
  _internal_set_application_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.application_notification)
}

// bool read_notification = 34 [json_name = "readNotification"];
inline void UserDetail::clear_read_notification() {
  read_notification_ = false;
}
inline bool UserDetail::_internal_read_notification() const {
  return read_notification_;
}
inline bool UserDetail::read_notification() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.read_notification)
  return _internal_read_notification();
}
inline void UserDetail::_internal_set_read_notification(bool value) {
  
  read_notification_ = value;
}
inline void UserDetail::set_read_notification(bool value) {
  _internal_set_read_notification(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.read_notification)
}

// string phone_code = 35 [json_name = "phoneCode"];
inline void UserDetail::clear_phone_code() {
  phone_code_.ClearToEmpty();
}
inline const std::string& UserDetail::phone_code() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.phone_code)
  return _internal_phone_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_phone_code(ArgT0&& arg0, ArgT... args) {
 
 phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.phone_code)
}
inline std::string* UserDetail::mutable_phone_code() {
  std::string* _s = _internal_mutable_phone_code();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.phone_code)
  return _s;
}
inline const std::string& UserDetail::_internal_phone_code() const {
  return phone_code_.Get();
}
inline void UserDetail::_internal_set_phone_code(const std::string& value) {
  
  phone_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_phone_code() {
  
  return phone_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_phone_code() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.phone_code)
  return phone_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_phone_code(std::string* phone_code) {
  if (phone_code != nullptr) {
    
  } else {
    
  }
  phone_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.phone_code)
}

// string optional_address = 36 [json_name = "optionalAddress"];
inline void UserDetail::clear_optional_address() {
  optional_address_.ClearToEmpty();
}
inline const std::string& UserDetail::optional_address() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.optional_address)
  return _internal_optional_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_optional_address(ArgT0&& arg0, ArgT... args) {
 
 optional_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.optional_address)
}
inline std::string* UserDetail::mutable_optional_address() {
  std::string* _s = _internal_mutable_optional_address();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.optional_address)
  return _s;
}
inline const std::string& UserDetail::_internal_optional_address() const {
  return optional_address_.Get();
}
inline void UserDetail::_internal_set_optional_address(const std::string& value) {
  
  optional_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_optional_address() {
  
  return optional_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_optional_address() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.optional_address)
  return optional_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_optional_address(std::string* optional_address) {
  if (optional_address != nullptr) {
    
  } else {
    
  }
  optional_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.optional_address)
}

// string image = 37 [json_name = "image"];
inline void UserDetail::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& UserDetail::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserDetail.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDetail::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserDetail.image)
}
inline std::string* UserDetail::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserDetail.image)
  return _s;
}
inline const std::string& UserDetail::_internal_image() const {
  return image_.Get();
}
inline void UserDetail::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDetail::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserDetail.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDetail::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserDetail.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace accounts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2faccounts_2eproto
