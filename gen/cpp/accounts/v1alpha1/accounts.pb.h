// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts/v1alpha1/accounts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2faccounts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2faccounts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2fv1alpha1_2faccounts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2fv1alpha1_2faccounts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[69]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2fv1alpha1_2faccounts_2eproto;
namespace accounts {
namespace v1alpha1 {
class AssignPermissionRequest;
struct AssignPermissionRequestDefaultTypeInternal;
extern AssignPermissionRequestDefaultTypeInternal _AssignPermissionRequest_default_instance_;
class CheckUserRequest;
struct CheckUserRequestDefaultTypeInternal;
extern CheckUserRequestDefaultTypeInternal _CheckUserRequest_default_instance_;
class CheckUserResponse;
struct CheckUserResponseDefaultTypeInternal;
extern CheckUserResponseDefaultTypeInternal _CheckUserResponse_default_instance_;
class CreateOrganizationRequest;
struct CreateOrganizationRequestDefaultTypeInternal;
extern CreateOrganizationRequestDefaultTypeInternal _CreateOrganizationRequest_default_instance_;
class CreateOrganizationResponse;
struct CreateOrganizationResponseDefaultTypeInternal;
extern CreateOrganizationResponseDefaultTypeInternal _CreateOrganizationResponse_default_instance_;
class CreatePermissionRequest;
struct CreatePermissionRequestDefaultTypeInternal;
extern CreatePermissionRequestDefaultTypeInternal _CreatePermissionRequest_default_instance_;
class CreatePermissionResponse;
struct CreatePermissionResponseDefaultTypeInternal;
extern CreatePermissionResponseDefaultTypeInternal _CreatePermissionResponse_default_instance_;
class CreateProjectRequest;
struct CreateProjectRequestDefaultTypeInternal;
extern CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
class CreateProjectResponse;
struct CreateProjectResponseDefaultTypeInternal;
extern CreateProjectResponseDefaultTypeInternal _CreateProjectResponse_default_instance_;
class CreateRoleRequest;
struct CreateRoleRequestDefaultTypeInternal;
extern CreateRoleRequestDefaultTypeInternal _CreateRoleRequest_default_instance_;
class CreateRoleResponse;
struct CreateRoleResponseDefaultTypeInternal;
extern CreateRoleResponseDefaultTypeInternal _CreateRoleResponse_default_instance_;
class CreateUserRequest;
struct CreateUserRequestDefaultTypeInternal;
extern CreateUserRequestDefaultTypeInternal _CreateUserRequest_default_instance_;
class CreateUserResponse;
struct CreateUserResponseDefaultTypeInternal;
extern CreateUserResponseDefaultTypeInternal _CreateUserResponse_default_instance_;
class DeleteOrganizationRequest;
struct DeleteOrganizationRequestDefaultTypeInternal;
extern DeleteOrganizationRequestDefaultTypeInternal _DeleteOrganizationRequest_default_instance_;
class DeleteOrganizationResponse;
struct DeleteOrganizationResponseDefaultTypeInternal;
extern DeleteOrganizationResponseDefaultTypeInternal _DeleteOrganizationResponse_default_instance_;
class DeletePermissionRequest;
struct DeletePermissionRequestDefaultTypeInternal;
extern DeletePermissionRequestDefaultTypeInternal _DeletePermissionRequest_default_instance_;
class DeletePermissionResponse;
struct DeletePermissionResponseDefaultTypeInternal;
extern DeletePermissionResponseDefaultTypeInternal _DeletePermissionResponse_default_instance_;
class DeleteProjectRequest;
struct DeleteProjectRequestDefaultTypeInternal;
extern DeleteProjectRequestDefaultTypeInternal _DeleteProjectRequest_default_instance_;
class DeleteProjectResponse;
struct DeleteProjectResponseDefaultTypeInternal;
extern DeleteProjectResponseDefaultTypeInternal _DeleteProjectResponse_default_instance_;
class DeleteRoleRequest;
struct DeleteRoleRequestDefaultTypeInternal;
extern DeleteRoleRequestDefaultTypeInternal _DeleteRoleRequest_default_instance_;
class DeleteRoleResponse;
struct DeleteRoleResponseDefaultTypeInternal;
extern DeleteRoleResponseDefaultTypeInternal _DeleteRoleResponse_default_instance_;
class DeleteUserRequest;
struct DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class DeleteUserResponse;
struct DeleteUserResponseDefaultTypeInternal;
extern DeleteUserResponseDefaultTypeInternal _DeleteUserResponse_default_instance_;
class GetListUserDexRequest;
struct GetListUserDexRequestDefaultTypeInternal;
extern GetListUserDexRequestDefaultTypeInternal _GetListUserDexRequest_default_instance_;
class GetListUserDexResponse;
struct GetListUserDexResponseDefaultTypeInternal;
extern GetListUserDexResponseDefaultTypeInternal _GetListUserDexResponse_default_instance_;
class GetOneOrganizationRequest;
struct GetOneOrganizationRequestDefaultTypeInternal;
extern GetOneOrganizationRequestDefaultTypeInternal _GetOneOrganizationRequest_default_instance_;
class GetOneOrganizationResponse;
struct GetOneOrganizationResponseDefaultTypeInternal;
extern GetOneOrganizationResponseDefaultTypeInternal _GetOneOrganizationResponse_default_instance_;
class GetOnePermissionRequest;
struct GetOnePermissionRequestDefaultTypeInternal;
extern GetOnePermissionRequestDefaultTypeInternal _GetOnePermissionRequest_default_instance_;
class GetOnePermissionResponse;
struct GetOnePermissionResponseDefaultTypeInternal;
extern GetOnePermissionResponseDefaultTypeInternal _GetOnePermissionResponse_default_instance_;
class GetOneProjectRequest;
struct GetOneProjectRequestDefaultTypeInternal;
extern GetOneProjectRequestDefaultTypeInternal _GetOneProjectRequest_default_instance_;
class GetOneProjectResponse;
struct GetOneProjectResponseDefaultTypeInternal;
extern GetOneProjectResponseDefaultTypeInternal _GetOneProjectResponse_default_instance_;
class GetOneRoleRequest;
struct GetOneRoleRequestDefaultTypeInternal;
extern GetOneRoleRequestDefaultTypeInternal _GetOneRoleRequest_default_instance_;
class GetOneRoleResponse;
struct GetOneRoleResponseDefaultTypeInternal;
extern GetOneRoleResponseDefaultTypeInternal _GetOneRoleResponse_default_instance_;
class GetOneUserDexRequest;
struct GetOneUserDexRequestDefaultTypeInternal;
extern GetOneUserDexRequestDefaultTypeInternal _GetOneUserDexRequest_default_instance_;
class GetOneUserDexResponse;
struct GetOneUserDexResponseDefaultTypeInternal;
extern GetOneUserDexResponseDefaultTypeInternal _GetOneUserDexResponse_default_instance_;
class GetOneUserRequest;
struct GetOneUserRequestDefaultTypeInternal;
extern GetOneUserRequestDefaultTypeInternal _GetOneUserRequest_default_instance_;
class GetOneUserResponse;
struct GetOneUserResponseDefaultTypeInternal;
extern GetOneUserResponseDefaultTypeInternal _GetOneUserResponse_default_instance_;
class ListOrganizationRequest;
struct ListOrganizationRequestDefaultTypeInternal;
extern ListOrganizationRequestDefaultTypeInternal _ListOrganizationRequest_default_instance_;
class ListOrganizationResponse;
struct ListOrganizationResponseDefaultTypeInternal;
extern ListOrganizationResponseDefaultTypeInternal _ListOrganizationResponse_default_instance_;
class ListPermissionRequest;
struct ListPermissionRequestDefaultTypeInternal;
extern ListPermissionRequestDefaultTypeInternal _ListPermissionRequest_default_instance_;
class ListPermissionResponse;
struct ListPermissionResponseDefaultTypeInternal;
extern ListPermissionResponseDefaultTypeInternal _ListPermissionResponse_default_instance_;
class ListProjectPaginationRequest;
struct ListProjectPaginationRequestDefaultTypeInternal;
extern ListProjectPaginationRequestDefaultTypeInternal _ListProjectPaginationRequest_default_instance_;
class ListProjectPaginationResponse;
struct ListProjectPaginationResponseDefaultTypeInternal;
extern ListProjectPaginationResponseDefaultTypeInternal _ListProjectPaginationResponse_default_instance_;
class ListProjectRequest;
struct ListProjectRequestDefaultTypeInternal;
extern ListProjectRequestDefaultTypeInternal _ListProjectRequest_default_instance_;
class ListProjectResponse;
struct ListProjectResponseDefaultTypeInternal;
extern ListProjectResponseDefaultTypeInternal _ListProjectResponse_default_instance_;
class ListRolesRequest;
struct ListRolesRequestDefaultTypeInternal;
extern ListRolesRequestDefaultTypeInternal _ListRolesRequest_default_instance_;
class ListRolesResponse;
struct ListRolesResponseDefaultTypeInternal;
extern ListRolesResponseDefaultTypeInternal _ListRolesResponse_default_instance_;
class ListUserPaginationRequest;
struct ListUserPaginationRequestDefaultTypeInternal;
extern ListUserPaginationRequestDefaultTypeInternal _ListUserPaginationRequest_default_instance_;
class ListUserPaginationResponse;
struct ListUserPaginationResponseDefaultTypeInternal;
extern ListUserPaginationResponseDefaultTypeInternal _ListUserPaginationResponse_default_instance_;
class ListUserRequest;
struct ListUserRequestDefaultTypeInternal;
extern ListUserRequestDefaultTypeInternal _ListUserRequest_default_instance_;
class ListUserResponse;
struct ListUserResponseDefaultTypeInternal;
extern ListUserResponseDefaultTypeInternal _ListUserResponse_default_instance_;
class Member;
struct MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class Organization;
struct OrganizationDefaultTypeInternal;
extern OrganizationDefaultTypeInternal _Organization_default_instance_;
class Permission;
struct PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class ProjectOrganization;
struct ProjectOrganizationDefaultTypeInternal;
extern ProjectOrganizationDefaultTypeInternal _ProjectOrganization_default_instance_;
class Rol;
struct RolDefaultTypeInternal;
extern RolDefaultTypeInternal _Rol_default_instance_;
class UpdateOrganizationRequest;
struct UpdateOrganizationRequestDefaultTypeInternal;
extern UpdateOrganizationRequestDefaultTypeInternal _UpdateOrganizationRequest_default_instance_;
class UpdateOrganizationResponse;
struct UpdateOrganizationResponseDefaultTypeInternal;
extern UpdateOrganizationResponseDefaultTypeInternal _UpdateOrganizationResponse_default_instance_;
class UpdatePermissionRequest;
struct UpdatePermissionRequestDefaultTypeInternal;
extern UpdatePermissionRequestDefaultTypeInternal _UpdatePermissionRequest_default_instance_;
class UpdatePermissionResponse;
struct UpdatePermissionResponseDefaultTypeInternal;
extern UpdatePermissionResponseDefaultTypeInternal _UpdatePermissionResponse_default_instance_;
class UpdateProjectRequest;
struct UpdateProjectRequestDefaultTypeInternal;
extern UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;
class UpdateProjectResponse;
struct UpdateProjectResponseDefaultTypeInternal;
extern UpdateProjectResponseDefaultTypeInternal _UpdateProjectResponse_default_instance_;
class UpdateRoleRequest;
struct UpdateRoleRequestDefaultTypeInternal;
extern UpdateRoleRequestDefaultTypeInternal _UpdateRoleRequest_default_instance_;
class UpdateRoleResponse;
struct UpdateRoleResponseDefaultTypeInternal;
extern UpdateRoleResponseDefaultTypeInternal _UpdateRoleResponse_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UpdateUserResponse;
struct UpdateUserResponseDefaultTypeInternal;
extern UpdateUserResponseDefaultTypeInternal _UpdateUserResponse_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
class UsersDex;
struct UsersDexDefaultTypeInternal;
extern UsersDexDefaultTypeInternal _UsersDex_default_instance_;
}  // namespace v1alpha1
}  // namespace accounts
PROTOBUF_NAMESPACE_OPEN
template<> ::accounts::v1alpha1::AssignPermissionRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::AssignPermissionRequest>(Arena*);
template<> ::accounts::v1alpha1::CheckUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::CheckUserRequest>(Arena*);
template<> ::accounts::v1alpha1::CheckUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::CheckUserResponse>(Arena*);
template<> ::accounts::v1alpha1::CreateOrganizationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateOrganizationRequest>(Arena*);
template<> ::accounts::v1alpha1::CreateOrganizationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateOrganizationResponse>(Arena*);
template<> ::accounts::v1alpha1::CreatePermissionRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreatePermissionRequest>(Arena*);
template<> ::accounts::v1alpha1::CreatePermissionResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreatePermissionResponse>(Arena*);
template<> ::accounts::v1alpha1::CreateProjectRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateProjectRequest>(Arena*);
template<> ::accounts::v1alpha1::CreateProjectResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateProjectResponse>(Arena*);
template<> ::accounts::v1alpha1::CreateRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::CreateRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateRoleResponse>(Arena*);
template<> ::accounts::v1alpha1::CreateUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateUserRequest>(Arena*);
template<> ::accounts::v1alpha1::CreateUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::CreateUserResponse>(Arena*);
template<> ::accounts::v1alpha1::DeleteOrganizationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteOrganizationRequest>(Arena*);
template<> ::accounts::v1alpha1::DeleteOrganizationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteOrganizationResponse>(Arena*);
template<> ::accounts::v1alpha1::DeletePermissionRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeletePermissionRequest>(Arena*);
template<> ::accounts::v1alpha1::DeletePermissionResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeletePermissionResponse>(Arena*);
template<> ::accounts::v1alpha1::DeleteProjectRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteProjectRequest>(Arena*);
template<> ::accounts::v1alpha1::DeleteProjectResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteProjectResponse>(Arena*);
template<> ::accounts::v1alpha1::DeleteRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::DeleteRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteRoleResponse>(Arena*);
template<> ::accounts::v1alpha1::DeleteUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteUserRequest>(Arena*);
template<> ::accounts::v1alpha1::DeleteUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::DeleteUserResponse>(Arena*);
template<> ::accounts::v1alpha1::GetListUserDexRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetListUserDexRequest>(Arena*);
template<> ::accounts::v1alpha1::GetListUserDexResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetListUserDexResponse>(Arena*);
template<> ::accounts::v1alpha1::GetOneOrganizationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneOrganizationRequest>(Arena*);
template<> ::accounts::v1alpha1::GetOneOrganizationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneOrganizationResponse>(Arena*);
template<> ::accounts::v1alpha1::GetOnePermissionRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOnePermissionRequest>(Arena*);
template<> ::accounts::v1alpha1::GetOnePermissionResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOnePermissionResponse>(Arena*);
template<> ::accounts::v1alpha1::GetOneProjectRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneProjectRequest>(Arena*);
template<> ::accounts::v1alpha1::GetOneProjectResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneProjectResponse>(Arena*);
template<> ::accounts::v1alpha1::GetOneRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::GetOneRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneRoleResponse>(Arena*);
template<> ::accounts::v1alpha1::GetOneUserDexRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneUserDexRequest>(Arena*);
template<> ::accounts::v1alpha1::GetOneUserDexResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneUserDexResponse>(Arena*);
template<> ::accounts::v1alpha1::GetOneUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneUserRequest>(Arena*);
template<> ::accounts::v1alpha1::GetOneUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::GetOneUserResponse>(Arena*);
template<> ::accounts::v1alpha1::ListOrganizationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListOrganizationRequest>(Arena*);
template<> ::accounts::v1alpha1::ListOrganizationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListOrganizationResponse>(Arena*);
template<> ::accounts::v1alpha1::ListPermissionRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListPermissionRequest>(Arena*);
template<> ::accounts::v1alpha1::ListPermissionResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListPermissionResponse>(Arena*);
template<> ::accounts::v1alpha1::ListProjectPaginationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListProjectPaginationRequest>(Arena*);
template<> ::accounts::v1alpha1::ListProjectPaginationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListProjectPaginationResponse>(Arena*);
template<> ::accounts::v1alpha1::ListProjectRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListProjectRequest>(Arena*);
template<> ::accounts::v1alpha1::ListProjectResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListProjectResponse>(Arena*);
template<> ::accounts::v1alpha1::ListRolesRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListRolesRequest>(Arena*);
template<> ::accounts::v1alpha1::ListRolesResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListRolesResponse>(Arena*);
template<> ::accounts::v1alpha1::ListUserPaginationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListUserPaginationRequest>(Arena*);
template<> ::accounts::v1alpha1::ListUserPaginationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListUserPaginationResponse>(Arena*);
template<> ::accounts::v1alpha1::ListUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListUserRequest>(Arena*);
template<> ::accounts::v1alpha1::ListUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::ListUserResponse>(Arena*);
template<> ::accounts::v1alpha1::Member* Arena::CreateMaybeMessage<::accounts::v1alpha1::Member>(Arena*);
template<> ::accounts::v1alpha1::Organization* Arena::CreateMaybeMessage<::accounts::v1alpha1::Organization>(Arena*);
template<> ::accounts::v1alpha1::Permission* Arena::CreateMaybeMessage<::accounts::v1alpha1::Permission>(Arena*);
template<> ::accounts::v1alpha1::Project* Arena::CreateMaybeMessage<::accounts::v1alpha1::Project>(Arena*);
template<> ::accounts::v1alpha1::ProjectOrganization* Arena::CreateMaybeMessage<::accounts::v1alpha1::ProjectOrganization>(Arena*);
template<> ::accounts::v1alpha1::Rol* Arena::CreateMaybeMessage<::accounts::v1alpha1::Rol>(Arena*);
template<> ::accounts::v1alpha1::UpdateOrganizationRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateOrganizationRequest>(Arena*);
template<> ::accounts::v1alpha1::UpdateOrganizationResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateOrganizationResponse>(Arena*);
template<> ::accounts::v1alpha1::UpdatePermissionRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdatePermissionRequest>(Arena*);
template<> ::accounts::v1alpha1::UpdatePermissionResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdatePermissionResponse>(Arena*);
template<> ::accounts::v1alpha1::UpdateProjectRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateProjectRequest>(Arena*);
template<> ::accounts::v1alpha1::UpdateProjectResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateProjectResponse>(Arena*);
template<> ::accounts::v1alpha1::UpdateRoleRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateRoleRequest>(Arena*);
template<> ::accounts::v1alpha1::UpdateRoleResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateRoleResponse>(Arena*);
template<> ::accounts::v1alpha1::UpdateUserRequest* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateUserRequest>(Arena*);
template<> ::accounts::v1alpha1::UpdateUserResponse* Arena::CreateMaybeMessage<::accounts::v1alpha1::UpdateUserResponse>(Arena*);
template<> ::accounts::v1alpha1::UserList* Arena::CreateMaybeMessage<::accounts::v1alpha1::UserList>(Arena*);
template<> ::accounts::v1alpha1::UsersDex* Arena::CreateMaybeMessage<::accounts::v1alpha1::UsersDex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accounts {
namespace v1alpha1 {

// ===================================================================

class CheckUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CheckUserRequest) */ {
 public:
  inline CheckUserRequest() : CheckUserRequest(nullptr) {}
  ~CheckUserRequest() override;
  explicit constexpr CheckUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUserRequest(const CheckUserRequest& from);
  CheckUserRequest(CheckUserRequest&& from) noexcept
    : CheckUserRequest() {
    *this = ::std::move(from);
  }

  inline CheckUserRequest& operator=(const CheckUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserRequest& operator=(CheckUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUserRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUserRequest*>(
               &_CheckUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckUserRequest& a, CheckUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserRequest* New() const final {
    return new CheckUserRequest();
  }

  CheckUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CheckUserRequest";
  }
  protected:
  explicit CheckUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesIdsFieldNumber = 10,
    kPermissionFieldNumber = 4,
    kUserIdDexFieldNumber = 5,
    kUserIdAdminFieldNumber = 6,
    kTypePermissionFieldNumber = 9,
    kOrganizationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kGetOrganizationFromProjectFieldNumber = 3,
    kUserIdFieldNumber = 7,
  };
  // repeated uint32 roles_ids = 10 [json_name = "rolesIds"];
  int roles_ids_size() const;
  private:
  int _internal_roles_ids_size() const;
  public:
  void clear_roles_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roles_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_roles_ids() const;
  void _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_roles_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 roles_ids(int index) const;
  void set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      roles_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_roles_ids();

  // string permission = 4 [json_name = "permission"];
  void clear_permission();
  const std::string& permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permission();
  PROTOBUF_MUST_USE_RESULT std::string* release_permission();
  void set_allocated_permission(std::string* permission);
  private:
  const std::string& _internal_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permission(const std::string& value);
  std::string* _internal_mutable_permission();
  public:

  // string user_id_dex = 5 [json_name = "userIdDex"];
  void clear_user_id_dex();
  const std::string& user_id_dex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id_dex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id_dex();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id_dex();
  void set_allocated_user_id_dex(std::string* user_id_dex);
  private:
  const std::string& _internal_user_id_dex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id_dex(const std::string& value);
  std::string* _internal_mutable_user_id_dex();
  public:

  // string user_id_admin = 6 [json_name = "userIdAdmin"];
  void clear_user_id_admin();
  const std::string& user_id_admin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id_admin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id_admin();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id_admin();
  void set_allocated_user_id_admin(std::string* user_id_admin);
  private:
  const std::string& _internal_user_id_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id_admin(const std::string& value);
  std::string* _internal_mutable_user_id_admin();
  public:

  // string type_permission = 9 [json_name = "typePermission"];
  void clear_type_permission();
  const std::string& type_permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_permission();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_permission();
  void set_allocated_type_permission(std::string* type_permission);
  private:
  const std::string& _internal_type_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_permission(const std::string& value);
  std::string* _internal_mutable_type_permission();
  public:

  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 get_organization_from_project = 3 [json_name = "getOrganizationFromProject"];
  void clear_get_organization_from_project();
  ::PROTOBUF_NAMESPACE_ID::uint32 get_organization_from_project() const;
  void set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_get_organization_from_project() const;
  void _internal_set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 user_id = 7 [json_name = "userId"];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CheckUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > roles_ids_;
  mutable std::atomic<int> _roles_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_dex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_admin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_permission_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 get_organization_from_project_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CheckUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CheckUserResponse) */ {
 public:
  inline CheckUserResponse() : CheckUserResponse(nullptr) {}
  ~CheckUserResponse() override;
  explicit constexpr CheckUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUserResponse(const CheckUserResponse& from);
  CheckUserResponse(CheckUserResponse&& from) noexcept
    : CheckUserResponse() {
    *this = ::std::move(from);
  }

  inline CheckUserResponse& operator=(const CheckUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserResponse& operator=(CheckUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUserResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUserResponse*>(
               &_CheckUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckUserResponse& a, CheckUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserResponse* New() const final {
    return new CheckUserResponse();
  }

  CheckUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CheckUserResponse";
  }
  protected:
  explicit CheckUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kIsExistsFieldNumber = 1,
  };
  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool is_exists = 1 [json_name = "isExists"];
  void clear_is_exists();
  bool is_exists() const;
  void set_is_exists(bool value);
  private:
  bool _internal_is_exists() const;
  void _internal_set_is_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CheckUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool is_exists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UsersDex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UsersDex) */ {
 public:
  inline UsersDex() : UsersDex(nullptr) {}
  ~UsersDex() override;
  explicit constexpr UsersDex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsersDex(const UsersDex& from);
  UsersDex(UsersDex&& from) noexcept
    : UsersDex() {
    *this = ::std::move(from);
  }

  inline UsersDex& operator=(const UsersDex& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersDex& operator=(UsersDex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsersDex& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsersDex* internal_default_instance() {
    return reinterpret_cast<const UsersDex*>(
               &_UsersDex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UsersDex& a, UsersDex& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersDex* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersDex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsersDex* New() const final {
    return new UsersDex();
  }

  UsersDex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsersDex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsersDex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UsersDex& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersDex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UsersDex";
  }
  protected:
  explicit UsersDex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kProviderFieldNumber = 2,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string provider = 2 [json_name = "provider"];
  void clear_provider();
  const std::string& provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UsersDex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateUserResponse) */ {
 public:
  inline CreateUserResponse() : CreateUserResponse(nullptr) {}
  ~CreateUserResponse() override;
  explicit constexpr CreateUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserResponse(const CreateUserResponse& from);
  CreateUserResponse(CreateUserResponse&& from) noexcept
    : CreateUserResponse() {
    *this = ::std::move(from);
  }

  inline CreateUserResponse& operator=(const CreateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserResponse& operator=(CreateUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUserResponse*>(
               &_CreateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateUserResponse& a, CreateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserResponse* New() const final {
    return new CreateUserResponse();
  }

  CreateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateUserResponse";
  }
  protected:
  explicit CreateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateUserResponse) */ {
 public:
  inline UpdateUserResponse() : UpdateUserResponse(nullptr) {}
  ~UpdateUserResponse() override;
  explicit constexpr UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserResponse(const UpdateUserResponse& from);
  UpdateUserResponse(UpdateUserResponse&& from) noexcept
    : UpdateUserResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserResponse& operator=(const UpdateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserResponse& operator=(UpdateUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserResponse*>(
               &_UpdateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateUserResponse& a, UpdateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserResponse* New() const final {
    return new UpdateUserResponse();
  }

  UpdateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateUserResponse";
  }
  protected:
  explicit UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteUserResponse) */ {
 public:
  inline DeleteUserResponse() : DeleteUserResponse(nullptr) {}
  ~DeleteUserResponse() override;
  explicit constexpr DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserResponse(const DeleteUserResponse& from);
  DeleteUserResponse(DeleteUserResponse&& from) noexcept
    : DeleteUserResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUserResponse& operator=(const DeleteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserResponse& operator=(DeleteUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUserResponse*>(
               &_DeleteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteUserResponse& a, DeleteUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserResponse* New() const final {
    return new DeleteUserResponse();
  }

  DeleteUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteUserResponse";
  }
  protected:
  explicit DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListUserRequest) */ {
 public:
  inline ListUserRequest() : ListUserRequest(nullptr) {}
  ~ListUserRequest() override;
  explicit constexpr ListUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserRequest(const ListUserRequest& from);
  ListUserRequest(ListUserRequest&& from) noexcept
    : ListUserRequest() {
    *this = ::std::move(from);
  }

  inline ListUserRequest& operator=(const ListUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserRequest& operator=(ListUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserRequest*>(
               &_ListUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListUserRequest& a, ListUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserRequest* New() const final {
    return new ListUserRequest();
  }

  ListUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListUserRequest";
  }
  protected:
  explicit ListUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateUserRequest) */ {
 public:
  inline CreateUserRequest() : CreateUserRequest(nullptr) {}
  ~CreateUserRequest() override;
  explicit constexpr CreateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserRequest(const CreateUserRequest& from);
  CreateUserRequest(CreateUserRequest&& from) noexcept
    : CreateUserRequest() {
    *this = ::std::move(from);
  }

  inline CreateUserRequest& operator=(const CreateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRequest& operator=(CreateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUserRequest*>(
               &_CreateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateUserRequest& a, CreateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserRequest* New() const final {
    return new CreateUserRequest();
  }

  CreateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateUserRequest";
  }
  protected:
  explicit CreateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesIdsFieldNumber = 6,
    kPermissionsIdsFieldNumber = 7,
    kOrganizationsIdsFieldNumber = 8,
    kUserIdFieldNumber = 1,
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kIsActiveFieldNumber = 5,
  };
  // repeated uint32 roles_ids = 6 [json_name = "rolesIds"];
  int roles_ids_size() const;
  private:
  int _internal_roles_ids_size() const;
  public:
  void clear_roles_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roles_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_roles_ids() const;
  void _internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_roles_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 roles_ids(int index) const;
  void set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      roles_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_roles_ids();

  // repeated uint32 permissions_ids = 7 [json_name = "permissionsIds"];
  int permissions_ids_size() const;
  private:
  int _internal_permissions_ids_size() const;
  public:
  void clear_permissions_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permissions_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_permissions_ids() const;
  void _internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_permissions_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 permissions_ids(int index) const;
  void set_permissions_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      permissions_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_permissions_ids();

  // repeated uint32 organizations_ids = 8 [json_name = "organizationsIds"];
  int organizations_ids_size() const;
  private:
  int _internal_organizations_ids_size() const;
  public:
  void clear_organizations_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organizations_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_organizations_ids() const;
  void _internal_add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_organizations_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 organizations_ids(int index) const;
  void set_organizations_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      organizations_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_organizations_ids();

  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string first_name = 2 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 3 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 4 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bool is_active = 5 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > roles_ids_;
  mutable std::atomic<int> _roles_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > permissions_ids_;
  mutable std::atomic<int> _permissions_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > organizations_ids_;
  mutable std::atomic<int> _organizations_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  ~UpdateUserRequest() override;
  explicit constexpr UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserRequest* New() const final {
    return new UpdateUserRequest();
  }

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kAuthIdFieldNumber = 1,
  };
  // .accounts.v1alpha1.CreateUserRequest auth = 2 [json_name = "auth"];
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const ::accounts::v1alpha1::CreateUserRequest& auth() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::CreateUserRequest* release_auth();
  ::accounts::v1alpha1::CreateUserRequest* mutable_auth();
  void set_allocated_auth(::accounts::v1alpha1::CreateUserRequest* auth);
  private:
  const ::accounts::v1alpha1::CreateUserRequest& _internal_auth() const;
  ::accounts::v1alpha1::CreateUserRequest* _internal_mutable_auth();
  public:
  void unsafe_arena_set_allocated_auth(
      ::accounts::v1alpha1::CreateUserRequest* auth);
  ::accounts::v1alpha1::CreateUserRequest* unsafe_arena_release_auth();

  // uint32 auth_id = 1 [json_name = "authId"];
  void clear_auth_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_id() const;
  void set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auth_id() const;
  void _internal_set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::accounts::v1alpha1::CreateUserRequest* auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteUserRequest) */ {
 public:
  inline DeleteUserRequest() : DeleteUserRequest(nullptr) {}
  ~DeleteUserRequest() override;
  explicit constexpr DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRequest(const DeleteUserRequest& from);
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRequest* New() const final {
    return new DeleteUserRequest();
  }

  DeleteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteUserRequest";
  }
  protected:
  explicit DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthIdFieldNumber = 1,
  };
  // uint32 auth_id = 1 [json_name = "authId"];
  void clear_auth_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_id() const;
  void set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auth_id() const;
  void _internal_set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UserList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  explicit constexpr UserList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserList* New() const final {
    return new UserList();
  }

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UserList";
  }
  protected:
  explicit UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 6,
    kIsSuperUserFieldNumber = 7,
  };
  // string first_name = 2 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 3 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 4 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string user_id = 5 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_active = 6 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool is_super_user = 7 [json_name = "isSuperUser"];
  void clear_is_super_user();
  bool is_super_user() const;
  void set_is_super_user(bool value);
  private:
  bool _internal_is_super_user() const;
  void _internal_set_is_super_user(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_active_;
  bool is_super_user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneUserRequest) */ {
 public:
  inline GetOneUserRequest() : GetOneUserRequest(nullptr) {}
  ~GetOneUserRequest() override;
  explicit constexpr GetOneUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserRequest(const GetOneUserRequest& from);
  GetOneUserRequest(GetOneUserRequest&& from) noexcept
    : GetOneUserRequest() {
    *this = ::std::move(from);
  }

  inline GetOneUserRequest& operator=(const GetOneUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserRequest& operator=(GetOneUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneUserRequest*>(
               &_GetOneUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetOneUserRequest& a, GetOneUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserRequest* New() const final {
    return new GetOneUserRequest();
  }

  GetOneUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneUserRequest";
  }
  protected:
  explicit GetOneUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneUserResponse) */ {
 public:
  inline GetOneUserResponse() : GetOneUserResponse(nullptr) {}
  ~GetOneUserResponse() override;
  explicit constexpr GetOneUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserResponse(const GetOneUserResponse& from);
  GetOneUserResponse(GetOneUserResponse&& from) noexcept
    : GetOneUserResponse() {
    *this = ::std::move(from);
  }

  inline GetOneUserResponse& operator=(const GetOneUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserResponse& operator=(GetOneUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneUserResponse*>(
               &_GetOneUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetOneUserResponse& a, GetOneUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserResponse* New() const final {
    return new GetOneUserResponse();
  }

  GetOneUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneUserResponse";
  }
  protected:
  explicit GetOneUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 9,
    kPermissionsFieldNumber = 10,
    kOrganizationsFieldNumber = 12,
    kUserIdFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kEmailFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 6,
    kIsSuperUserFieldNumber = 11,
  };
  // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Rol* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Rol& _internal_roles(int index) const;
  ::accounts::v1alpha1::Rol* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Rol& roles(int index) const;
  ::accounts::v1alpha1::Rol* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
      roles() const;

  // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
  int organizations_size() const;
  private:
  int _internal_organizations_size() const;
  public:
  void clear_organizations();
  ::accounts::v1alpha1::Organization* mutable_organizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
      mutable_organizations();
  private:
  const ::accounts::v1alpha1::Organization& _internal_organizations(int index) const;
  ::accounts::v1alpha1::Organization* _internal_add_organizations();
  public:
  const ::accounts::v1alpha1::Organization& organizations(int index) const;
  ::accounts::v1alpha1::Organization* add_organizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
      organizations() const;

  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string first_name = 3 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 5 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string created_at = 7 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 8 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_active = 6 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool is_super_user = 11 [json_name = "isSuperUser"];
  void clear_is_super_user();
  bool is_super_user() const;
  void set_is_super_user(bool value);
  private:
  bool _internal_is_super_user() const;
  void _internal_set_is_super_user(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization > organizations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_active_;
  bool is_super_user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListUserResponse) */ {
 public:
  inline ListUserResponse() : ListUserResponse(nullptr) {}
  ~ListUserResponse() override;
  explicit constexpr ListUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserResponse(const ListUserResponse& from);
  ListUserResponse(ListUserResponse&& from) noexcept
    : ListUserResponse() {
    *this = ::std::move(from);
  }

  inline ListUserResponse& operator=(const ListUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserResponse& operator=(ListUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserResponse* internal_default_instance() {
    return reinterpret_cast<const ListUserResponse*>(
               &_ListUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListUserResponse& a, ListUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserResponse* New() const final {
    return new ListUserResponse();
  }

  ListUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListUserResponse";
  }
  protected:
  explicit ListUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::accounts::v1alpha1::UserList* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
      mutable_users();
  private:
  const ::accounts::v1alpha1::UserList& _internal_users(int index) const;
  ::accounts::v1alpha1::UserList* _internal_add_users();
  public:
  const ::accounts::v1alpha1::UserList& users(int index) const;
  ::accounts::v1alpha1::UserList* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
      users() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListUserPaginationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListUserPaginationRequest) */ {
 public:
  inline ListUserPaginationRequest() : ListUserPaginationRequest(nullptr) {}
  ~ListUserPaginationRequest() override;
  explicit constexpr ListUserPaginationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserPaginationRequest(const ListUserPaginationRequest& from);
  ListUserPaginationRequest(ListUserPaginationRequest&& from) noexcept
    : ListUserPaginationRequest() {
    *this = ::std::move(from);
  }

  inline ListUserPaginationRequest& operator=(const ListUserPaginationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserPaginationRequest& operator=(ListUserPaginationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserPaginationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserPaginationRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserPaginationRequest*>(
               &_ListUserPaginationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListUserPaginationRequest& a, ListUserPaginationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserPaginationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserPaginationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserPaginationRequest* New() const final {
    return new ListUserPaginationRequest();
  }

  ListUserPaginationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserPaginationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserPaginationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserPaginationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserPaginationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListUserPaginationRequest";
  }
  protected:
  explicit ListUserPaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // int32 offset = 1 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit = 2 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListUserPaginationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListUserPaginationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListUserPaginationResponse) */ {
 public:
  inline ListUserPaginationResponse() : ListUserPaginationResponse(nullptr) {}
  ~ListUserPaginationResponse() override;
  explicit constexpr ListUserPaginationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserPaginationResponse(const ListUserPaginationResponse& from);
  ListUserPaginationResponse(ListUserPaginationResponse&& from) noexcept
    : ListUserPaginationResponse() {
    *this = ::std::move(from);
  }

  inline ListUserPaginationResponse& operator=(const ListUserPaginationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserPaginationResponse& operator=(ListUserPaginationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserPaginationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserPaginationResponse* internal_default_instance() {
    return reinterpret_cast<const ListUserPaginationResponse*>(
               &_ListUserPaginationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListUserPaginationResponse& a, ListUserPaginationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserPaginationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserPaginationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserPaginationResponse* New() const final {
    return new ListUserPaginationResponse();
  }

  ListUserPaginationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserPaginationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserPaginationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUserPaginationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserPaginationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListUserPaginationResponse";
  }
  protected:
  explicit ListUserPaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.UserList users = 2 [json_name = "users"];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::accounts::v1alpha1::UserList* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
      mutable_users();
  private:
  const ::accounts::v1alpha1::UserList& _internal_users(int index) const;
  ::accounts::v1alpha1::UserList* _internal_add_users();
  public:
  const ::accounts::v1alpha1::UserList& users(int index) const;
  ::accounts::v1alpha1::UserList* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
      users() const;

  // int64 count = 1 [json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListUserPaginationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList > users_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Rol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Rol) */ {
 public:
  inline Rol() : Rol(nullptr) {}
  ~Rol() override;
  explicit constexpr Rol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rol(const Rol& from);
  Rol(Rol&& from) noexcept
    : Rol() {
    *this = ::std::move(from);
  }

  inline Rol& operator=(const Rol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rol& operator=(Rol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rol& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rol* internal_default_instance() {
    return reinterpret_cast<const Rol*>(
               &_Rol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Rol& a, Rol& b) {
    a.Swap(&b);
  }
  inline void Swap(Rol* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rol* New() const final {
    return new Rol();
  }

  Rol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rol& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Rol";
  }
  protected:
  explicit Rol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kProjectIdFieldNumber = 3,
    kOrganizationIdFieldNumber = 4,
  };
  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 3 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Rol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateRoleRequest) */ {
 public:
  inline CreateRoleRequest() : CreateRoleRequest(nullptr) {}
  ~CreateRoleRequest() override;
  explicit constexpr CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleRequest(const CreateRoleRequest& from);
  CreateRoleRequest(CreateRoleRequest&& from) noexcept
    : CreateRoleRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoleRequest& operator=(const CreateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRequest& operator=(CreateRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRequest*>(
               &_CreateRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateRoleRequest& a, CreateRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRequest* New() const final {
    return new CreateRoleRequest();
  }

  CreateRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateRoleRequest";
  }
  protected:
  explicit CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionIdsFieldNumber = 6,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kTypePermissionFieldNumber = 5,
    kProjectIdFieldNumber = 3,
    kOrganizationIdFieldNumber = 4,
  };
  // repeated uint32 permission_ids = 6 [json_name = "permissionIds"];
  int permission_ids_size() const;
  private:
  int _internal_permission_ids_size() const;
  public:
  void clear_permission_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_permission_ids() const;
  void _internal_add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_permission_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_ids(int index) const;
  void set_permission_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      permission_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_permission_ids();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type_permission = 5 [json_name = "typePermission"];
  void clear_type_permission();
  const std::string& type_permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_permission();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_permission();
  void set_allocated_type_permission(std::string* type_permission);
  private:
  const std::string& _internal_type_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_permission(const std::string& value);
  std::string* _internal_mutable_type_permission();
  public:

  // uint32 project_id = 3 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > permission_ids_;
  mutable std::atomic<int> _permission_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_permission_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateRoleRequest) */ {
 public:
  inline UpdateRoleRequest() : UpdateRoleRequest(nullptr) {}
  ~UpdateRoleRequest() override;
  explicit constexpr UpdateRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoleRequest(const UpdateRoleRequest& from);
  UpdateRoleRequest(UpdateRoleRequest&& from) noexcept
    : UpdateRoleRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRoleRequest& operator=(const UpdateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoleRequest& operator=(UpdateRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRoleRequest*>(
               &_UpdateRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateRoleRequest& a, UpdateRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoleRequest* New() const final {
    return new UpdateRoleRequest();
  }

  UpdateRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateRoleRequest";
  }
  protected:
  explicit UpdateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolFieldNumber = 2,
    kRolIdFieldNumber = 1,
  };
  // .accounts.v1alpha1.CreateRoleRequest rol = 2 [json_name = "rol"];
  bool has_rol() const;
  private:
  bool _internal_has_rol() const;
  public:
  void clear_rol();
  const ::accounts::v1alpha1::CreateRoleRequest& rol() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::CreateRoleRequest* release_rol();
  ::accounts::v1alpha1::CreateRoleRequest* mutable_rol();
  void set_allocated_rol(::accounts::v1alpha1::CreateRoleRequest* rol);
  private:
  const ::accounts::v1alpha1::CreateRoleRequest& _internal_rol() const;
  ::accounts::v1alpha1::CreateRoleRequest* _internal_mutable_rol();
  public:
  void unsafe_arena_set_allocated_rol(
      ::accounts::v1alpha1::CreateRoleRequest* rol);
  ::accounts::v1alpha1::CreateRoleRequest* unsafe_arena_release_rol();

  // uint32 rol_id = 1 [json_name = "rolId"];
  void clear_rol_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id() const;
  void set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rol_id() const;
  void _internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::accounts::v1alpha1::CreateRoleRequest* rol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneRoleRequest) */ {
 public:
  inline GetOneRoleRequest() : GetOneRoleRequest(nullptr) {}
  ~GetOneRoleRequest() override;
  explicit constexpr GetOneRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneRoleRequest(const GetOneRoleRequest& from);
  GetOneRoleRequest(GetOneRoleRequest&& from) noexcept
    : GetOneRoleRequest() {
    *this = ::std::move(from);
  }

  inline GetOneRoleRequest& operator=(const GetOneRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneRoleRequest& operator=(GetOneRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneRoleRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneRoleRequest*>(
               &_GetOneRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetOneRoleRequest& a, GetOneRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneRoleRequest* New() const final {
    return new GetOneRoleRequest();
  }

  GetOneRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneRoleRequest";
  }
  protected:
  explicit GetOneRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolIdFieldNumber = 1,
  };
  // uint32 rol_id = 1 [json_name = "rolId"];
  void clear_rol_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id() const;
  void set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rol_id() const;
  void _internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneRoleResponse) */ {
 public:
  inline GetOneRoleResponse() : GetOneRoleResponse(nullptr) {}
  ~GetOneRoleResponse() override;
  explicit constexpr GetOneRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneRoleResponse(const GetOneRoleResponse& from);
  GetOneRoleResponse(GetOneRoleResponse&& from) noexcept
    : GetOneRoleResponse() {
    *this = ::std::move(from);
  }

  inline GetOneRoleResponse& operator=(const GetOneRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneRoleResponse& operator=(GetOneRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneRoleResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneRoleResponse*>(
               &_GetOneRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetOneRoleResponse& a, GetOneRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneRoleResponse* New() const final {
    return new GetOneRoleResponse();
  }

  GetOneRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneRoleResponse";
  }
  protected:
  explicit GetOneRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 3,
    kProjectIdFieldNumber = 4,
  };
  // repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 3 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteRoleRequest) */ {
 public:
  inline DeleteRoleRequest() : DeleteRoleRequest(nullptr) {}
  ~DeleteRoleRequest() override;
  explicit constexpr DeleteRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoleRequest(const DeleteRoleRequest& from);
  DeleteRoleRequest(DeleteRoleRequest&& from) noexcept
    : DeleteRoleRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRequest& operator=(const DeleteRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleRequest& operator=(DeleteRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRequest*>(
               &_DeleteRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteRoleRequest& a, DeleteRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRequest* New() const final {
    return new DeleteRoleRequest();
  }

  DeleteRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRoleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteRoleRequest";
  }
  protected:
  explicit DeleteRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolIdFieldNumber = 1,
  };
  // uint32 rol_id = 1 [json_name = "rolId"];
  void clear_rol_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id() const;
  void set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rol_id() const;
  void _internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rol_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListRolesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListRolesRequest) */ {
 public:
  inline ListRolesRequest() : ListRolesRequest(nullptr) {}
  ~ListRolesRequest() override;
  explicit constexpr ListRolesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRolesRequest(const ListRolesRequest& from);
  ListRolesRequest(ListRolesRequest&& from) noexcept
    : ListRolesRequest() {
    *this = ::std::move(from);
  }

  inline ListRolesRequest& operator=(const ListRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRolesRequest& operator=(ListRolesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRolesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRolesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRolesRequest*>(
               &_ListRolesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListRolesRequest& a, ListRolesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRolesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRolesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRolesRequest* New() const final {
    return new ListRolesRequest();
  }

  ListRolesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRolesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRolesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRolesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRolesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListRolesRequest";
  }
  protected:
  explicit ListRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 2,
  };
  // uint32 project_id = 1 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListRolesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListRolesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListRolesResponse) */ {
 public:
  inline ListRolesResponse() : ListRolesResponse(nullptr) {}
  ~ListRolesResponse() override;
  explicit constexpr ListRolesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRolesResponse(const ListRolesResponse& from);
  ListRolesResponse(ListRolesResponse&& from) noexcept
    : ListRolesResponse() {
    *this = ::std::move(from);
  }

  inline ListRolesResponse& operator=(const ListRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRolesResponse& operator=(ListRolesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRolesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRolesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRolesResponse*>(
               &_ListRolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListRolesResponse& a, ListRolesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRolesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRolesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRolesResponse* New() const final {
    return new ListRolesResponse();
  }

  ListRolesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRolesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRolesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRolesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRolesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListRolesResponse";
  }
  protected:
  explicit ListRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Rol roles = 1 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Rol* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Rol& _internal_roles(int index) const;
  ::accounts::v1alpha1::Rol* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Rol& roles(int index) const;
  ::accounts::v1alpha1::Rol* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
      roles() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListRolesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol > roles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateRoleResponse) */ {
 public:
  inline CreateRoleResponse() : CreateRoleResponse(nullptr) {}
  ~CreateRoleResponse() override;
  explicit constexpr CreateRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleResponse(const CreateRoleResponse& from);
  CreateRoleResponse(CreateRoleResponse&& from) noexcept
    : CreateRoleResponse() {
    *this = ::std::move(from);
  }

  inline CreateRoleResponse& operator=(const CreateRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleResponse& operator=(CreateRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRoleResponse*>(
               &_CreateRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CreateRoleResponse& a, CreateRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleResponse* New() const final {
    return new CreateRoleResponse();
  }

  CreateRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateRoleResponse";
  }
  protected:
  explicit CreateRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateRoleResponse) */ {
 public:
  inline UpdateRoleResponse() : UpdateRoleResponse(nullptr) {}
  ~UpdateRoleResponse() override;
  explicit constexpr UpdateRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoleResponse(const UpdateRoleResponse& from);
  UpdateRoleResponse(UpdateRoleResponse&& from) noexcept
    : UpdateRoleResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRoleResponse& operator=(const UpdateRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoleResponse& operator=(UpdateRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoleResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRoleResponse*>(
               &_UpdateRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateRoleResponse& a, UpdateRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoleResponse* New() const final {
    return new UpdateRoleResponse();
  }

  UpdateRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateRoleResponse";
  }
  protected:
  explicit UpdateRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteRoleResponse) */ {
 public:
  inline DeleteRoleResponse() : DeleteRoleResponse(nullptr) {}
  ~DeleteRoleResponse() override;
  explicit constexpr DeleteRoleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoleResponse(const DeleteRoleResponse& from);
  DeleteRoleResponse(DeleteRoleResponse&& from) noexcept
    : DeleteRoleResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRoleResponse& operator=(const DeleteRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleResponse& operator=(DeleteRoleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoleResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleResponse*>(
               &_DeleteRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteRoleResponse& a, DeleteRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleResponse* New() const final {
    return new DeleteRoleResponse();
  }

  DeleteRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRoleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRoleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteRoleResponse";
  }
  protected:
  explicit DeleteRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit constexpr Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const final {
    return new Project();
  }

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Project& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 8,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 4,
  };
  // repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Rol* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Rol& _internal_roles(int index) const;
  ::accounts::v1alpha1::Rol* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Rol& roles(int index) const;
  ::accounts::v1alpha1::Rol* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
      roles() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string description = 5 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string created_at = 6 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 7 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol > roles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateProjectRequest) */ {
 public:
  inline CreateProjectRequest() : CreateProjectRequest(nullptr) {}
  ~CreateProjectRequest() override;
  explicit constexpr CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectRequest(const CreateProjectRequest& from);
  CreateProjectRequest(CreateProjectRequest&& from) noexcept
    : CreateProjectRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectRequest& operator=(const CreateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectRequest& operator=(CreateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRequest*>(
               &_CreateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CreateProjectRequest& a, CreateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProjectRequest* New() const final {
    return new CreateProjectRequest();
  }

  CreateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateProjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateProjectRequest";
  }
  protected:
  explicit CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kImageFieldNumber = 3,
    kUserIdFieldNumber = 5,
    kOrganizationIdFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string user_id = 5 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneProjectRequest) */ {
 public:
  inline GetOneProjectRequest() : GetOneProjectRequest(nullptr) {}
  ~GetOneProjectRequest() override;
  explicit constexpr GetOneProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneProjectRequest(const GetOneProjectRequest& from);
  GetOneProjectRequest(GetOneProjectRequest&& from) noexcept
    : GetOneProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetOneProjectRequest& operator=(const GetOneProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneProjectRequest& operator=(GetOneProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneProjectRequest*>(
               &_GetOneProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetOneProjectRequest& a, GetOneProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneProjectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneProjectRequest* New() const final {
    return new GetOneProjectRequest();
  }

  GetOneProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneProjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneProjectRequest";
  }
  protected:
  explicit GetOneProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteProjectRequest) */ {
 public:
  inline DeleteProjectRequest() : DeleteProjectRequest(nullptr) {}
  ~DeleteProjectRequest() override;
  explicit constexpr DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectRequest(const DeleteProjectRequest& from);
  DeleteProjectRequest(DeleteProjectRequest&& from) noexcept
    : DeleteProjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRequest& operator=(const DeleteProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectRequest& operator=(DeleteProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRequest*>(
               &_DeleteProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DeleteProjectRequest& a, DeleteProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectRequest* New() const final {
    return new DeleteProjectRequest();
  }

  DeleteProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteProjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteProjectRequest";
  }
  protected:
  explicit DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListProjectRequest) */ {
 public:
  inline ListProjectRequest() : ListProjectRequest(nullptr) {}
  ~ListProjectRequest() override;
  explicit constexpr ListProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectRequest(const ListProjectRequest& from);
  ListProjectRequest(ListProjectRequest&& from) noexcept
    : ListProjectRequest() {
    *this = ::std::move(from);
  }

  inline ListProjectRequest& operator=(const ListProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectRequest& operator=(ListProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectRequest* internal_default_instance() {
    return reinterpret_cast<const ListProjectRequest*>(
               &_ListProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ListProjectRequest& a, ListProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectRequest* New() const final {
    return new ListProjectRequest();
  }

  ListProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListProjectRequest";
  }
  protected:
  explicit ListProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateProjectRequest) */ {
 public:
  inline UpdateProjectRequest() : UpdateProjectRequest(nullptr) {}
  ~UpdateProjectRequest() override;
  explicit constexpr UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectRequest(const UpdateProjectRequest& from);
  UpdateProjectRequest(UpdateProjectRequest&& from) noexcept
    : UpdateProjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRequest& operator=(const UpdateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectRequest& operator=(UpdateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRequest*>(
               &_UpdateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UpdateProjectRequest& a, UpdateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectRequest* New() const final {
    return new UpdateProjectRequest();
  }

  UpdateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateProjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateProjectRequest";
  }
  protected:
  explicit UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .accounts.v1alpha1.CreateProjectRequest project = 2 [json_name = "project"];
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const ::accounts::v1alpha1::CreateProjectRequest& project() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::CreateProjectRequest* release_project();
  ::accounts::v1alpha1::CreateProjectRequest* mutable_project();
  void set_allocated_project(::accounts::v1alpha1::CreateProjectRequest* project);
  private:
  const ::accounts::v1alpha1::CreateProjectRequest& _internal_project() const;
  ::accounts::v1alpha1::CreateProjectRequest* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::accounts::v1alpha1::CreateProjectRequest* project);
  ::accounts::v1alpha1::CreateProjectRequest* unsafe_arena_release_project();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::accounts::v1alpha1::CreateProjectRequest* project_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateProjectResponse) */ {
 public:
  inline CreateProjectResponse() : CreateProjectResponse(nullptr) {}
  ~CreateProjectResponse() override;
  explicit constexpr CreateProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectResponse(const CreateProjectResponse& from);
  CreateProjectResponse(CreateProjectResponse&& from) noexcept
    : CreateProjectResponse() {
    *this = ::std::move(from);
  }

  inline CreateProjectResponse& operator=(const CreateProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectResponse& operator=(CreateProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProjectResponse*>(
               &_CreateProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CreateProjectResponse& a, CreateProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProjectResponse* New() const final {
    return new CreateProjectResponse();
  }

  CreateProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateProjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateProjectResponse";
  }
  protected:
  explicit CreateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateProjectResponse) */ {
 public:
  inline UpdateProjectResponse() : UpdateProjectResponse(nullptr) {}
  ~UpdateProjectResponse() override;
  explicit constexpr UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectResponse(const UpdateProjectResponse& from);
  UpdateProjectResponse(UpdateProjectResponse&& from) noexcept
    : UpdateProjectResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProjectResponse& operator=(const UpdateProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectResponse& operator=(UpdateProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectResponse*>(
               &_UpdateProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UpdateProjectResponse& a, UpdateProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectResponse* New() const final {
    return new UpdateProjectResponse();
  }

  UpdateProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateProjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateProjectResponse";
  }
  protected:
  explicit UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteProjectResponse) */ {
 public:
  inline DeleteProjectResponse() : DeleteProjectResponse(nullptr) {}
  ~DeleteProjectResponse() override;
  explicit constexpr DeleteProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectResponse(const DeleteProjectResponse& from);
  DeleteProjectResponse(DeleteProjectResponse&& from) noexcept
    : DeleteProjectResponse() {
    *this = ::std::move(from);
  }

  inline DeleteProjectResponse& operator=(const DeleteProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectResponse& operator=(DeleteProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectResponse*>(
               &_DeleteProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DeleteProjectResponse& a, DeleteProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectResponse* New() const final {
    return new DeleteProjectResponse();
  }

  DeleteProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteProjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteProjectResponse";
  }
  protected:
  explicit DeleteProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneProjectResponse) */ {
 public:
  inline GetOneProjectResponse() : GetOneProjectResponse(nullptr) {}
  ~GetOneProjectResponse() override;
  explicit constexpr GetOneProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneProjectResponse(const GetOneProjectResponse& from);
  GetOneProjectResponse(GetOneProjectResponse&& from) noexcept
    : GetOneProjectResponse() {
    *this = ::std::move(from);
  }

  inline GetOneProjectResponse& operator=(const GetOneProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneProjectResponse& operator=(GetOneProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneProjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneProjectResponse*>(
               &_GetOneProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetOneProjectResponse& a, GetOneProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneProjectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneProjectResponse* New() const final {
    return new GetOneProjectResponse();
  }

  GetOneProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneProjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneProjectResponse";
  }
  protected:
  explicit GetOneProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 8,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 4,
  };
  // repeated .accounts.v1alpha1.Member members = 8 [json_name = "members"];
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::accounts::v1alpha1::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >*
      mutable_members();
  private:
  const ::accounts::v1alpha1::Member& _internal_members(int index) const;
  ::accounts::v1alpha1::Member* _internal_add_members();
  public:
  const ::accounts::v1alpha1::Member& members(int index) const;
  ::accounts::v1alpha1::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >&
      members() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string description = 5 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string created_at = 6 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 7 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListProjectResponse) */ {
 public:
  inline ListProjectResponse() : ListProjectResponse(nullptr) {}
  ~ListProjectResponse() override;
  explicit constexpr ListProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectResponse(const ListProjectResponse& from);
  ListProjectResponse(ListProjectResponse&& from) noexcept
    : ListProjectResponse() {
    *this = ::std::move(from);
  }

  inline ListProjectResponse& operator=(const ListProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectResponse& operator=(ListProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectResponse* internal_default_instance() {
    return reinterpret_cast<const ListProjectResponse*>(
               &_ListProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ListProjectResponse& a, ListProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectResponse* New() const final {
    return new ListProjectResponse();
  }

  ListProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListProjectResponse";
  }
  protected:
  explicit ListProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::accounts::v1alpha1::Project* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
      mutable_projects();
  private:
  const ::accounts::v1alpha1::Project& _internal_projects(int index) const;
  ::accounts::v1alpha1::Project* _internal_add_projects();
  public:
  const ::accounts::v1alpha1::Project& projects(int index) const;
  ::accounts::v1alpha1::Project* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
      projects() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project > projects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListProjectPaginationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListProjectPaginationRequest) */ {
 public:
  inline ListProjectPaginationRequest() : ListProjectPaginationRequest(nullptr) {}
  ~ListProjectPaginationRequest() override;
  explicit constexpr ListProjectPaginationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectPaginationRequest(const ListProjectPaginationRequest& from);
  ListProjectPaginationRequest(ListProjectPaginationRequest&& from) noexcept
    : ListProjectPaginationRequest() {
    *this = ::std::move(from);
  }

  inline ListProjectPaginationRequest& operator=(const ListProjectPaginationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectPaginationRequest& operator=(ListProjectPaginationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProjectPaginationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectPaginationRequest* internal_default_instance() {
    return reinterpret_cast<const ListProjectPaginationRequest*>(
               &_ListProjectPaginationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ListProjectPaginationRequest& a, ListProjectPaginationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectPaginationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectPaginationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectPaginationRequest* New() const final {
    return new ListProjectPaginationRequest();
  }

  ListProjectPaginationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectPaginationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProjectPaginationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProjectPaginationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectPaginationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListProjectPaginationRequest";
  }
  protected:
  explicit ListProjectPaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // int32 offset = 1 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit = 2 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListProjectPaginationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListProjectPaginationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListProjectPaginationResponse) */ {
 public:
  inline ListProjectPaginationResponse() : ListProjectPaginationResponse(nullptr) {}
  ~ListProjectPaginationResponse() override;
  explicit constexpr ListProjectPaginationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectPaginationResponse(const ListProjectPaginationResponse& from);
  ListProjectPaginationResponse(ListProjectPaginationResponse&& from) noexcept
    : ListProjectPaginationResponse() {
    *this = ::std::move(from);
  }

  inline ListProjectPaginationResponse& operator=(const ListProjectPaginationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectPaginationResponse& operator=(ListProjectPaginationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProjectPaginationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectPaginationResponse* internal_default_instance() {
    return reinterpret_cast<const ListProjectPaginationResponse*>(
               &_ListProjectPaginationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ListProjectPaginationResponse& a, ListProjectPaginationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectPaginationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectPaginationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectPaginationResponse* New() const final {
    return new ListProjectPaginationResponse();
  }

  ListProjectPaginationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectPaginationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProjectPaginationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProjectPaginationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectPaginationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListProjectPaginationResponse";
  }
  protected:
  explicit ListProjectPaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::accounts::v1alpha1::Project* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
      mutable_projects();
  private:
  const ::accounts::v1alpha1::Project& _internal_projects(int index) const;
  ::accounts::v1alpha1::Project* _internal_add_projects();
  public:
  const ::accounts::v1alpha1::Project& projects(int index) const;
  ::accounts::v1alpha1::Project* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
      projects() const;

  // int64 count = 2 [json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListProjectPaginationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project > projects_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Permission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Permission) */ {
 public:
  inline Permission() : Permission(nullptr) {}
  ~Permission() override;
  explicit constexpr Permission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Permission(const Permission& from);
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permission& operator=(Permission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Permission& default_instance() {
    return *internal_default_instance();
  }
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(Permission* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return new Permission();
  }

  Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Permission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Permission& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Permission";
  }
  protected:
  explicit Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Permission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListPermissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListPermissionResponse) */ {
 public:
  inline ListPermissionResponse() : ListPermissionResponse(nullptr) {}
  ~ListPermissionResponse() override;
  explicit constexpr ListPermissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPermissionResponse(const ListPermissionResponse& from);
  ListPermissionResponse(ListPermissionResponse&& from) noexcept
    : ListPermissionResponse() {
    *this = ::std::move(from);
  }

  inline ListPermissionResponse& operator=(const ListPermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPermissionResponse& operator=(ListPermissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPermissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPermissionResponse* internal_default_instance() {
    return reinterpret_cast<const ListPermissionResponse*>(
               &_ListPermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ListPermissionResponse& a, ListPermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPermissionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPermissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPermissionResponse* New() const final {
    return new ListPermissionResponse();
  }

  ListPermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPermissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPermissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPermissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListPermissionResponse";
  }
  protected:
  explicit ListPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Permission permissions = 1 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListPermissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class AssignPermissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.AssignPermissionRequest) */ {
 public:
  inline AssignPermissionRequest() : AssignPermissionRequest(nullptr) {}
  ~AssignPermissionRequest() override;
  explicit constexpr AssignPermissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssignPermissionRequest(const AssignPermissionRequest& from);
  AssignPermissionRequest(AssignPermissionRequest&& from) noexcept
    : AssignPermissionRequest() {
    *this = ::std::move(from);
  }

  inline AssignPermissionRequest& operator=(const AssignPermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignPermissionRequest& operator=(AssignPermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignPermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignPermissionRequest* internal_default_instance() {
    return reinterpret_cast<const AssignPermissionRequest*>(
               &_AssignPermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AssignPermissionRequest& a, AssignPermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignPermissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignPermissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignPermissionRequest* New() const final {
    return new AssignPermissionRequest();
  }

  AssignPermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignPermissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssignPermissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssignPermissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignPermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.AssignPermissionRequest";
  }
  protected:
  explicit AssignPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPermissionIdFieldNumber = 2,
  };
  // uint32 user_id = 1 [json_name = "userId"];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 permission_id = 2 [json_name = "permissionId"];
  void clear_permission_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id() const;
  void set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_id() const;
  void _internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.AssignPermissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListPermissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListPermissionRequest) */ {
 public:
  inline ListPermissionRequest() : ListPermissionRequest(nullptr) {}
  ~ListPermissionRequest() override;
  explicit constexpr ListPermissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPermissionRequest(const ListPermissionRequest& from);
  ListPermissionRequest(ListPermissionRequest&& from) noexcept
    : ListPermissionRequest() {
    *this = ::std::move(from);
  }

  inline ListPermissionRequest& operator=(const ListPermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPermissionRequest& operator=(ListPermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPermissionRequest* internal_default_instance() {
    return reinterpret_cast<const ListPermissionRequest*>(
               &_ListPermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ListPermissionRequest& a, ListPermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPermissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPermissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPermissionRequest* New() const final {
    return new ListPermissionRequest();
  }

  ListPermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPermissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPermissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPermissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListPermissionRequest";
  }
  protected:
  explicit ListPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // string type = 1 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListPermissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreatePermissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreatePermissionRequest) */ {
 public:
  inline CreatePermissionRequest() : CreatePermissionRequest(nullptr) {}
  ~CreatePermissionRequest() override;
  explicit constexpr CreatePermissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePermissionRequest(const CreatePermissionRequest& from);
  CreatePermissionRequest(CreatePermissionRequest&& from) noexcept
    : CreatePermissionRequest() {
    *this = ::std::move(from);
  }

  inline CreatePermissionRequest& operator=(const CreatePermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePermissionRequest& operator=(CreatePermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePermissionRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePermissionRequest*>(
               &_CreatePermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CreatePermissionRequest& a, CreatePermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePermissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePermissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePermissionRequest* New() const final {
    return new CreatePermissionRequest();
  }

  CreatePermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePermissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePermissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreatePermissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreatePermissionRequest";
  }
  protected:
  explicit CreatePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreatePermissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdatePermissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdatePermissionRequest) */ {
 public:
  inline UpdatePermissionRequest() : UpdatePermissionRequest(nullptr) {}
  ~UpdatePermissionRequest() override;
  explicit constexpr UpdatePermissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePermissionRequest(const UpdatePermissionRequest& from);
  UpdatePermissionRequest(UpdatePermissionRequest&& from) noexcept
    : UpdatePermissionRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePermissionRequest& operator=(const UpdatePermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePermissionRequest& operator=(UpdatePermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePermissionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePermissionRequest*>(
               &_UpdatePermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UpdatePermissionRequest& a, UpdatePermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePermissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePermissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePermissionRequest* New() const final {
    return new UpdatePermissionRequest();
  }

  UpdatePermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePermissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePermissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdatePermissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdatePermissionRequest";
  }
  protected:
  explicit UpdatePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kPermissionIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint32 permission_id = 1 [json_name = "permissionId"];
  void clear_permission_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id() const;
  void set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_id() const;
  void _internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdatePermissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOnePermissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOnePermissionRequest) */ {
 public:
  inline GetOnePermissionRequest() : GetOnePermissionRequest(nullptr) {}
  ~GetOnePermissionRequest() override;
  explicit constexpr GetOnePermissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOnePermissionRequest(const GetOnePermissionRequest& from);
  GetOnePermissionRequest(GetOnePermissionRequest&& from) noexcept
    : GetOnePermissionRequest() {
    *this = ::std::move(from);
  }

  inline GetOnePermissionRequest& operator=(const GetOnePermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOnePermissionRequest& operator=(GetOnePermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOnePermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOnePermissionRequest* internal_default_instance() {
    return reinterpret_cast<const GetOnePermissionRequest*>(
               &_GetOnePermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetOnePermissionRequest& a, GetOnePermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOnePermissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOnePermissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOnePermissionRequest* New() const final {
    return new GetOnePermissionRequest();
  }

  GetOnePermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOnePermissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOnePermissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOnePermissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOnePermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOnePermissionRequest";
  }
  protected:
  explicit GetOnePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionIdFieldNumber = 1,
  };
  // uint32 permission_id = 1 [json_name = "permissionId"];
  void clear_permission_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id() const;
  void set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_id() const;
  void _internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOnePermissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOnePermissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOnePermissionResponse) */ {
 public:
  inline GetOnePermissionResponse() : GetOnePermissionResponse(nullptr) {}
  ~GetOnePermissionResponse() override;
  explicit constexpr GetOnePermissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOnePermissionResponse(const GetOnePermissionResponse& from);
  GetOnePermissionResponse(GetOnePermissionResponse&& from) noexcept
    : GetOnePermissionResponse() {
    *this = ::std::move(from);
  }

  inline GetOnePermissionResponse& operator=(const GetOnePermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOnePermissionResponse& operator=(GetOnePermissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOnePermissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOnePermissionResponse* internal_default_instance() {
    return reinterpret_cast<const GetOnePermissionResponse*>(
               &_GetOnePermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetOnePermissionResponse& a, GetOnePermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOnePermissionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOnePermissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOnePermissionResponse* New() const final {
    return new GetOnePermissionResponse();
  }

  GetOnePermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOnePermissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOnePermissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOnePermissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOnePermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOnePermissionResponse";
  }
  protected:
  explicit GetOnePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOnePermissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeletePermissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeletePermissionRequest) */ {
 public:
  inline DeletePermissionRequest() : DeletePermissionRequest(nullptr) {}
  ~DeletePermissionRequest() override;
  explicit constexpr DeletePermissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePermissionRequest(const DeletePermissionRequest& from);
  DeletePermissionRequest(DeletePermissionRequest&& from) noexcept
    : DeletePermissionRequest() {
    *this = ::std::move(from);
  }

  inline DeletePermissionRequest& operator=(const DeletePermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePermissionRequest& operator=(DeletePermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePermissionRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePermissionRequest*>(
               &_DeletePermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DeletePermissionRequest& a, DeletePermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePermissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePermissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePermissionRequest* New() const final {
    return new DeletePermissionRequest();
  }

  DeletePermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePermissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePermissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeletePermissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeletePermissionRequest";
  }
  protected:
  explicit DeletePermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionIdFieldNumber = 1,
  };
  // uint32 permission_id = 1 [json_name = "permissionId"];
  void clear_permission_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id() const;
  void set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission_id() const;
  void _internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeletePermissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdatePermissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdatePermissionResponse) */ {
 public:
  inline UpdatePermissionResponse() : UpdatePermissionResponse(nullptr) {}
  ~UpdatePermissionResponse() override;
  explicit constexpr UpdatePermissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePermissionResponse(const UpdatePermissionResponse& from);
  UpdatePermissionResponse(UpdatePermissionResponse&& from) noexcept
    : UpdatePermissionResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePermissionResponse& operator=(const UpdatePermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePermissionResponse& operator=(UpdatePermissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePermissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePermissionResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePermissionResponse*>(
               &_UpdatePermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UpdatePermissionResponse& a, UpdatePermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePermissionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePermissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePermissionResponse* New() const final {
    return new UpdatePermissionResponse();
  }

  UpdatePermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePermissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePermissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdatePermissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdatePermissionResponse";
  }
  protected:
  explicit UpdatePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdatePermissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeletePermissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeletePermissionResponse) */ {
 public:
  inline DeletePermissionResponse() : DeletePermissionResponse(nullptr) {}
  ~DeletePermissionResponse() override;
  explicit constexpr DeletePermissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePermissionResponse(const DeletePermissionResponse& from);
  DeletePermissionResponse(DeletePermissionResponse&& from) noexcept
    : DeletePermissionResponse() {
    *this = ::std::move(from);
  }

  inline DeletePermissionResponse& operator=(const DeletePermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePermissionResponse& operator=(DeletePermissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePermissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePermissionResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePermissionResponse*>(
               &_DeletePermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DeletePermissionResponse& a, DeletePermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePermissionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePermissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePermissionResponse* New() const final {
    return new DeletePermissionResponse();
  }

  DeletePermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePermissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePermissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeletePermissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeletePermissionResponse";
  }
  protected:
  explicit DeletePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeletePermissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreatePermissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreatePermissionResponse) */ {
 public:
  inline CreatePermissionResponse() : CreatePermissionResponse(nullptr) {}
  ~CreatePermissionResponse() override;
  explicit constexpr CreatePermissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePermissionResponse(const CreatePermissionResponse& from);
  CreatePermissionResponse(CreatePermissionResponse&& from) noexcept
    : CreatePermissionResponse() {
    *this = ::std::move(from);
  }

  inline CreatePermissionResponse& operator=(const CreatePermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePermissionResponse& operator=(CreatePermissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePermissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePermissionResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePermissionResponse*>(
               &_CreatePermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CreatePermissionResponse& a, CreatePermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePermissionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePermissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePermissionResponse* New() const final {
    return new CreatePermissionResponse();
  }

  CreatePermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePermissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePermissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreatePermissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreatePermissionResponse";
  }
  protected:
  explicit CreatePermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreatePermissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Member) */ {
 public:
  inline Member() : Member(nullptr) {}
  ~Member() override;
  explicit constexpr Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }
  inline void Swap(Member* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return new Member();
  }

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Member";
  }
  protected:
  explicit Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 5,
  };
  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string first_name = 3 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_active = 5 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ProjectOrganization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ProjectOrganization) */ {
 public:
  inline ProjectOrganization() : ProjectOrganization(nullptr) {}
  ~ProjectOrganization() override;
  explicit constexpr ProjectOrganization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectOrganization(const ProjectOrganization& from);
  ProjectOrganization(ProjectOrganization&& from) noexcept
    : ProjectOrganization() {
    *this = ::std::move(from);
  }

  inline ProjectOrganization& operator=(const ProjectOrganization& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectOrganization& operator=(ProjectOrganization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectOrganization& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectOrganization* internal_default_instance() {
    return reinterpret_cast<const ProjectOrganization*>(
               &_ProjectOrganization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ProjectOrganization& a, ProjectOrganization& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectOrganization* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectOrganization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectOrganization* New() const final {
    return new ProjectOrganization();
  }

  ProjectOrganization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectOrganization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectOrganization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProjectOrganization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectOrganization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ProjectOrganization";
  }
  protected:
  explicit ProjectOrganization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string description = 4 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ProjectOrganization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class Organization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.Organization) */ {
 public:
  inline Organization() : Organization(nullptr) {}
  ~Organization() override;
  explicit constexpr Organization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Organization(const Organization& from);
  Organization(Organization&& from) noexcept
    : Organization() {
    *this = ::std::move(from);
  }

  inline Organization& operator=(const Organization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Organization& operator=(Organization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Organization& default_instance() {
    return *internal_default_instance();
  }
  static inline const Organization* internal_default_instance() {
    return reinterpret_cast<const Organization*>(
               &_Organization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Organization& a, Organization& b) {
    a.Swap(&b);
  }
  inline void Swap(Organization* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Organization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Organization* New() const final {
    return new Organization();
  }

  Organization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Organization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Organization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Organization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Organization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.Organization";
  }
  protected:
  explicit Organization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.Organization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateOrganizationRequest) */ {
 public:
  inline CreateOrganizationRequest() : CreateOrganizationRequest(nullptr) {}
  ~CreateOrganizationRequest() override;
  explicit constexpr CreateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrganizationRequest(const CreateOrganizationRequest& from);
  CreateOrganizationRequest(CreateOrganizationRequest&& from) noexcept
    : CreateOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationRequest& operator=(const CreateOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationRequest& operator=(CreateOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationRequest*>(
               &_CreateOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CreateOrganizationRequest& a, CreateOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationRequest* New() const final {
    return new CreateOrganizationRequest();
  }

  CreateOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateOrganizationRequest";
  }
  protected:
  explicit CreateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kImageFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 2 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string user_id = 3 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListOrganizationRequest) */ {
 public:
  inline ListOrganizationRequest() : ListOrganizationRequest(nullptr) {}
  ~ListOrganizationRequest() override;
  explicit constexpr ListOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrganizationRequest(const ListOrganizationRequest& from);
  ListOrganizationRequest(ListOrganizationRequest&& from) noexcept
    : ListOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline ListOrganizationRequest& operator=(const ListOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrganizationRequest& operator=(ListOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const ListOrganizationRequest*>(
               &_ListOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ListOrganizationRequest& a, ListOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrganizationRequest* New() const final {
    return new ListOrganizationRequest();
  }

  ListOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListOrganizationRequest";
  }
  protected:
  explicit ListOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneOrganizationRequest) */ {
 public:
  inline GetOneOrganizationRequest() : GetOneOrganizationRequest(nullptr) {}
  ~GetOneOrganizationRequest() override;
  explicit constexpr GetOneOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneOrganizationRequest(const GetOneOrganizationRequest& from);
  GetOneOrganizationRequest(GetOneOrganizationRequest&& from) noexcept
    : GetOneOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline GetOneOrganizationRequest& operator=(const GetOneOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneOrganizationRequest& operator=(GetOneOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneOrganizationRequest*>(
               &_GetOneOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetOneOrganizationRequest& a, GetOneOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneOrganizationRequest* New() const final {
    return new GetOneOrganizationRequest();
  }

  GetOneOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneOrganizationRequest";
  }
  protected:
  explicit GetOneOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateOrganizationRequest) */ {
 public:
  inline UpdateOrganizationRequest() : UpdateOrganizationRequest(nullptr) {}
  ~UpdateOrganizationRequest() override;
  explicit constexpr UpdateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrganizationRequest(const UpdateOrganizationRequest& from);
  UpdateOrganizationRequest(UpdateOrganizationRequest&& from) noexcept
    : UpdateOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrganizationRequest& operator=(const UpdateOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrganizationRequest& operator=(UpdateOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrganizationRequest*>(
               &_UpdateOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(UpdateOrganizationRequest& a, UpdateOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOrganizationRequest* New() const final {
    return new UpdateOrganizationRequest();
  }

  UpdateOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateOrganizationRequest";
  }
  protected:
  explicit UpdateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kImageFieldNumber = 4,
    kOrganizationIdFieldNumber = 1,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 4 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteOrganizationRequest) */ {
 public:
  inline DeleteOrganizationRequest() : DeleteOrganizationRequest(nullptr) {}
  ~DeleteOrganizationRequest() override;
  explicit constexpr DeleteOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteOrganizationRequest(const DeleteOrganizationRequest& from);
  DeleteOrganizationRequest(DeleteOrganizationRequest&& from) noexcept
    : DeleteOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteOrganizationRequest& operator=(const DeleteOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOrganizationRequest& operator=(DeleteOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteOrganizationRequest*>(
               &_DeleteOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(DeleteOrganizationRequest& a, DeleteOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrganizationRequest* New() const final {
    return new DeleteOrganizationRequest();
  }

  DeleteOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteOrganizationRequest";
  }
  protected:
  explicit DeleteOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneOrganizationResponse) */ {
 public:
  inline GetOneOrganizationResponse() : GetOneOrganizationResponse(nullptr) {}
  ~GetOneOrganizationResponse() override;
  explicit constexpr GetOneOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneOrganizationResponse(const GetOneOrganizationResponse& from);
  GetOneOrganizationResponse(GetOneOrganizationResponse&& from) noexcept
    : GetOneOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline GetOneOrganizationResponse& operator=(const GetOneOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneOrganizationResponse& operator=(GetOneOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneOrganizationResponse*>(
               &_GetOneOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetOneOrganizationResponse& a, GetOneOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneOrganizationResponse* New() const final {
    return new GetOneOrganizationResponse();
  }

  GetOneOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneOrganizationResponse";
  }
  protected:
  explicit GetOneOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 4,
    kMenbersFieldNumber = 5,
    kNameFieldNumber = 2,
    kImageFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.ProjectOrganization projects = 4 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::accounts::v1alpha1::ProjectOrganization* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::ProjectOrganization >*
      mutable_projects();
  private:
  const ::accounts::v1alpha1::ProjectOrganization& _internal_projects(int index) const;
  ::accounts::v1alpha1::ProjectOrganization* _internal_add_projects();
  public:
  const ::accounts::v1alpha1::ProjectOrganization& projects(int index) const;
  ::accounts::v1alpha1::ProjectOrganization* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::ProjectOrganization >&
      projects() const;

  // repeated .accounts.v1alpha1.Member menbers = 5 [json_name = "menbers"];
  int menbers_size() const;
  private:
  int _internal_menbers_size() const;
  public:
  void clear_menbers();
  ::accounts::v1alpha1::Member* mutable_menbers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >*
      mutable_menbers();
  private:
  const ::accounts::v1alpha1::Member& _internal_menbers(int index) const;
  ::accounts::v1alpha1::Member* _internal_add_menbers();
  public:
  const ::accounts::v1alpha1::Member& menbers(int index) const;
  ::accounts::v1alpha1::Member* add_menbers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >&
      menbers() const;

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 3 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::ProjectOrganization > projects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member > menbers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class ListOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.ListOrganizationResponse) */ {
 public:
  inline ListOrganizationResponse() : ListOrganizationResponse(nullptr) {}
  ~ListOrganizationResponse() override;
  explicit constexpr ListOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrganizationResponse(const ListOrganizationResponse& from);
  ListOrganizationResponse(ListOrganizationResponse&& from) noexcept
    : ListOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline ListOrganizationResponse& operator=(const ListOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrganizationResponse& operator=(ListOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const ListOrganizationResponse*>(
               &_ListOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ListOrganizationResponse& a, ListOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrganizationResponse* New() const final {
    return new ListOrganizationResponse();
  }

  ListOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.ListOrganizationResponse";
  }
  protected:
  explicit ListOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationsFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.Organization organizations = 1 [json_name = "organizations"];
  int organizations_size() const;
  private:
  int _internal_organizations_size() const;
  public:
  void clear_organizations();
  ::accounts::v1alpha1::Organization* mutable_organizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
      mutable_organizations();
  private:
  const ::accounts::v1alpha1::Organization& _internal_organizations(int index) const;
  ::accounts::v1alpha1::Organization* _internal_add_organizations();
  public:
  const ::accounts::v1alpha1::Organization& organizations(int index) const;
  ::accounts::v1alpha1::Organization* add_organizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
      organizations() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.ListOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization > organizations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.CreateOrganizationResponse) */ {
 public:
  inline CreateOrganizationResponse() : CreateOrganizationResponse(nullptr) {}
  ~CreateOrganizationResponse() override;
  explicit constexpr CreateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrganizationResponse(const CreateOrganizationResponse& from);
  CreateOrganizationResponse(CreateOrganizationResponse&& from) noexcept
    : CreateOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationResponse& operator=(const CreateOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationResponse& operator=(CreateOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationResponse*>(
               &_CreateOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CreateOrganizationResponse& a, CreateOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationResponse* New() const final {
    return new CreateOrganizationResponse();
  }

  CreateOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.CreateOrganizationResponse";
  }
  protected:
  explicit CreateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kRoleIdOrganizationFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string role_id_organization = 2 [json_name = "roleIdOrganization"];
  void clear_role_id_organization();
  const std::string& role_id_organization() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_id_organization(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_id_organization();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_id_organization();
  void set_allocated_role_id_organization(std::string* role_id_organization);
  private:
  const std::string& _internal_role_id_organization() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_id_organization(const std::string& value);
  std::string* _internal_mutable_role_id_organization();
  public:

  // string error = 3 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.CreateOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_id_organization_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.UpdateOrganizationResponse) */ {
 public:
  inline UpdateOrganizationResponse() : UpdateOrganizationResponse(nullptr) {}
  ~UpdateOrganizationResponse() override;
  explicit constexpr UpdateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrganizationResponse(const UpdateOrganizationResponse& from);
  UpdateOrganizationResponse(UpdateOrganizationResponse&& from) noexcept
    : UpdateOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrganizationResponse& operator=(const UpdateOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrganizationResponse& operator=(UpdateOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrganizationResponse*>(
               &_UpdateOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(UpdateOrganizationResponse& a, UpdateOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOrganizationResponse* New() const final {
    return new UpdateOrganizationResponse();
  }

  UpdateOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.UpdateOrganizationResponse";
  }
  protected:
  explicit UpdateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.UpdateOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class DeleteOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.DeleteOrganizationResponse) */ {
 public:
  inline DeleteOrganizationResponse() : DeleteOrganizationResponse(nullptr) {}
  ~DeleteOrganizationResponse() override;
  explicit constexpr DeleteOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteOrganizationResponse(const DeleteOrganizationResponse& from);
  DeleteOrganizationResponse(DeleteOrganizationResponse&& from) noexcept
    : DeleteOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline DeleteOrganizationResponse& operator=(const DeleteOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOrganizationResponse& operator=(DeleteOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteOrganizationResponse*>(
               &_DeleteOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(DeleteOrganizationResponse& a, DeleteOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrganizationResponse* New() const final {
    return new DeleteOrganizationResponse();
  }

  DeleteOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.DeleteOrganizationResponse";
  }
  protected:
  explicit DeleteOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.DeleteOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetListUserDexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetListUserDexRequest) */ {
 public:
  inline GetListUserDexRequest() : GetListUserDexRequest(nullptr) {}
  ~GetListUserDexRequest() override;
  explicit constexpr GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetListUserDexRequest(const GetListUserDexRequest& from);
  GetListUserDexRequest(GetListUserDexRequest&& from) noexcept
    : GetListUserDexRequest() {
    *this = ::std::move(from);
  }

  inline GetListUserDexRequest& operator=(const GetListUserDexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListUserDexRequest& operator=(GetListUserDexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetListUserDexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetListUserDexRequest* internal_default_instance() {
    return reinterpret_cast<const GetListUserDexRequest*>(
               &_GetListUserDexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetListUserDexRequest& a, GetListUserDexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListUserDexRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListUserDexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListUserDexRequest* New() const final {
    return new GetListUserDexRequest();
  }

  GetListUserDexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListUserDexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetListUserDexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetListUserDexRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListUserDexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetListUserDexRequest";
  }
  protected:
  explicit GetListUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetListUserDexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetListUserDexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetListUserDexResponse) */ {
 public:
  inline GetListUserDexResponse() : GetListUserDexResponse(nullptr) {}
  ~GetListUserDexResponse() override;
  explicit constexpr GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetListUserDexResponse(const GetListUserDexResponse& from);
  GetListUserDexResponse(GetListUserDexResponse&& from) noexcept
    : GetListUserDexResponse() {
    *this = ::std::move(from);
  }

  inline GetListUserDexResponse& operator=(const GetListUserDexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListUserDexResponse& operator=(GetListUserDexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetListUserDexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetListUserDexResponse* internal_default_instance() {
    return reinterpret_cast<const GetListUserDexResponse*>(
               &_GetListUserDexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetListUserDexResponse& a, GetListUserDexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListUserDexResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetListUserDexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListUserDexResponse* New() const final {
    return new GetListUserDexResponse();
  }

  GetListUserDexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListUserDexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetListUserDexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetListUserDexResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListUserDexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetListUserDexResponse";
  }
  protected:
  explicit GetListUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersDexFieldNumber = 1,
  };
  // repeated .accounts.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
  int users_dex_size() const;
  private:
  int _internal_users_dex_size() const;
  public:
  void clear_users_dex();
  ::accounts::v1alpha1::UsersDex* mutable_users_dex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UsersDex >*
      mutable_users_dex();
  private:
  const ::accounts::v1alpha1::UsersDex& _internal_users_dex(int index) const;
  ::accounts::v1alpha1::UsersDex* _internal_add_users_dex();
  public:
  const ::accounts::v1alpha1::UsersDex& users_dex(int index) const;
  ::accounts::v1alpha1::UsersDex* add_users_dex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UsersDex >&
      users_dex() const;

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetListUserDexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UsersDex > users_dex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserDexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneUserDexRequest) */ {
 public:
  inline GetOneUserDexRequest() : GetOneUserDexRequest(nullptr) {}
  ~GetOneUserDexRequest() override;
  explicit constexpr GetOneUserDexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserDexRequest(const GetOneUserDexRequest& from);
  GetOneUserDexRequest(GetOneUserDexRequest&& from) noexcept
    : GetOneUserDexRequest() {
    *this = ::std::move(from);
  }

  inline GetOneUserDexRequest& operator=(const GetOneUserDexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserDexRequest& operator=(GetOneUserDexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserDexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserDexRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneUserDexRequest*>(
               &_GetOneUserDexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetOneUserDexRequest& a, GetOneUserDexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserDexRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserDexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserDexRequest* New() const final {
    return new GetOneUserDexRequest();
  }

  GetOneUserDexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserDexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserDexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserDexRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserDexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneUserDexRequest";
  }
  protected:
  explicit GetOneUserDexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .accounts.v1alpha1.CreateUserRequest user = 2 [json_name = "user"];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::accounts::v1alpha1::CreateUserRequest& user() const;
  PROTOBUF_MUST_USE_RESULT ::accounts::v1alpha1::CreateUserRequest* release_user();
  ::accounts::v1alpha1::CreateUserRequest* mutable_user();
  void set_allocated_user(::accounts::v1alpha1::CreateUserRequest* user);
  private:
  const ::accounts::v1alpha1::CreateUserRequest& _internal_user() const;
  ::accounts::v1alpha1::CreateUserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::accounts::v1alpha1::CreateUserRequest* user);
  ::accounts::v1alpha1::CreateUserRequest* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneUserDexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::accounts::v1alpha1::CreateUserRequest* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// -------------------------------------------------------------------

class GetOneUserDexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accounts.v1alpha1.GetOneUserDexResponse) */ {
 public:
  inline GetOneUserDexResponse() : GetOneUserDexResponse(nullptr) {}
  ~GetOneUserDexResponse() override;
  explicit constexpr GetOneUserDexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneUserDexResponse(const GetOneUserDexResponse& from);
  GetOneUserDexResponse(GetOneUserDexResponse&& from) noexcept
    : GetOneUserDexResponse() {
    *this = ::std::move(from);
  }

  inline GetOneUserDexResponse& operator=(const GetOneUserDexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneUserDexResponse& operator=(GetOneUserDexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneUserDexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneUserDexResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneUserDexResponse*>(
               &_GetOneUserDexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetOneUserDexResponse& a, GetOneUserDexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneUserDexResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneUserDexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneUserDexResponse* New() const final {
    return new GetOneUserDexResponse();
  }

  GetOneUserDexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneUserDexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneUserDexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneUserDexResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneUserDexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accounts.v1alpha1.GetOneUserDexResponse";
  }
  protected:
  explicit GetOneUserDexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 9,
    kPermissionsFieldNumber = 10,
    kOrganizationsFieldNumber = 12,
    kUserIdFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kEmailFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
    kMsgFieldNumber = 13,
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 6,
    kIsSuperUserFieldNumber = 11,
  };
  // repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::accounts::v1alpha1::Rol* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
      mutable_roles();
  private:
  const ::accounts::v1alpha1::Rol& _internal_roles(int index) const;
  ::accounts::v1alpha1::Rol* _internal_add_roles();
  public:
  const ::accounts::v1alpha1::Rol& roles(int index) const;
  ::accounts::v1alpha1::Rol* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
      roles() const;

  // repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::accounts::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::accounts::v1alpha1::Permission& _internal_permissions(int index) const;
  ::accounts::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::accounts::v1alpha1::Permission& permissions(int index) const;
  ::accounts::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
      permissions() const;

  // repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
  int organizations_size() const;
  private:
  int _internal_organizations_size() const;
  public:
  void clear_organizations();
  ::accounts::v1alpha1::Organization* mutable_organizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
      mutable_organizations();
  private:
  const ::accounts::v1alpha1::Organization& _internal_organizations(int index) const;
  ::accounts::v1alpha1::Organization* _internal_add_organizations();
  public:
  const ::accounts::v1alpha1::Organization& organizations(int index) const;
  ::accounts::v1alpha1::Organization* add_organizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
      organizations() const;

  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string first_name = 3 [json_name = "firstName"];
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4 [json_name = "lastName"];
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 5 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string created_at = 7 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 8 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // string msg = 13 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint32 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_active = 6 [json_name = "isActive"];
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool is_super_user = 11 [json_name = "isSuperUser"];
  void clear_is_super_user();
  bool is_super_user() const;
  void set_is_super_user(bool value);
  private:
  bool _internal_is_super_user() const;
  void _internal_set_is_super_user(bool value);
  public:

  // @@protoc_insertion_point(class_scope:accounts.v1alpha1.GetOneUserDexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol > roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization > organizations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_active_;
  bool is_super_user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_accounts_2fv1alpha1_2faccounts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckUserRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void CheckUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.organization_id)
  return _internal_organization_id();
}
inline void CheckUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void CheckUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.organization_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void CheckUserRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.project_id)
  return _internal_project_id();
}
inline void CheckUserRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void CheckUserRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.project_id)
}

// uint32 get_organization_from_project = 3 [json_name = "getOrganizationFromProject"];
inline void CheckUserRequest::clear_get_organization_from_project() {
  get_organization_from_project_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_get_organization_from_project() const {
  return get_organization_from_project_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::get_organization_from_project() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.get_organization_from_project)
  return _internal_get_organization_from_project();
}
inline void CheckUserRequest::_internal_set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  get_organization_from_project_ = value;
}
inline void CheckUserRequest::set_get_organization_from_project(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_get_organization_from_project(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.get_organization_from_project)
}

// string permission = 4 [json_name = "permission"];
inline void CheckUserRequest::clear_permission() {
  permission_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::permission() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.permission)
  return _internal_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_permission(ArgT0&& arg0, ArgT... args) {
 
 permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.permission)
}
inline std::string* CheckUserRequest::mutable_permission() {
  std::string* _s = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CheckUserRequest.permission)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_permission() const {
  return permission_.Get();
}
inline void CheckUserRequest::_internal_set_permission(const std::string& value) {
  
  permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_permission() {
  
  return permission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_permission() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CheckUserRequest.permission)
  return permission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_permission(std::string* permission) {
  if (permission != nullptr) {
    
  } else {
    
  }
  permission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CheckUserRequest.permission)
}

// string user_id_dex = 5 [json_name = "userIdDex"];
inline void CheckUserRequest::clear_user_id_dex() {
  user_id_dex_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::user_id_dex() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.user_id_dex)
  return _internal_user_id_dex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_user_id_dex(ArgT0&& arg0, ArgT... args) {
 
 user_id_dex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.user_id_dex)
}
inline std::string* CheckUserRequest::mutable_user_id_dex() {
  std::string* _s = _internal_mutable_user_id_dex();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CheckUserRequest.user_id_dex)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_user_id_dex() const {
  return user_id_dex_.Get();
}
inline void CheckUserRequest::_internal_set_user_id_dex(const std::string& value) {
  
  user_id_dex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_user_id_dex() {
  
  return user_id_dex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_user_id_dex() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CheckUserRequest.user_id_dex)
  return user_id_dex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_user_id_dex(std::string* user_id_dex) {
  if (user_id_dex != nullptr) {
    
  } else {
    
  }
  user_id_dex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id_dex,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CheckUserRequest.user_id_dex)
}

// string user_id_admin = 6 [json_name = "userIdAdmin"];
inline void CheckUserRequest::clear_user_id_admin() {
  user_id_admin_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::user_id_admin() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.user_id_admin)
  return _internal_user_id_admin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_user_id_admin(ArgT0&& arg0, ArgT... args) {
 
 user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.user_id_admin)
}
inline std::string* CheckUserRequest::mutable_user_id_admin() {
  std::string* _s = _internal_mutable_user_id_admin();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CheckUserRequest.user_id_admin)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_user_id_admin() const {
  return user_id_admin_.Get();
}
inline void CheckUserRequest::_internal_set_user_id_admin(const std::string& value) {
  
  user_id_admin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_user_id_admin() {
  
  return user_id_admin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_user_id_admin() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CheckUserRequest.user_id_admin)
  return user_id_admin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_user_id_admin(std::string* user_id_admin) {
  if (user_id_admin != nullptr) {
    
  } else {
    
  }
  user_id_admin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id_admin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CheckUserRequest.user_id_admin)
}

// uint32 user_id = 7 [json_name = "userId"];
inline void CheckUserRequest::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.user_id)
  return _internal_user_id();
}
inline void CheckUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void CheckUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.user_id)
}

// string type_permission = 9 [json_name = "typePermission"];
inline void CheckUserRequest::clear_type_permission() {
  type_permission_.ClearToEmpty();
}
inline const std::string& CheckUserRequest::type_permission() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.type_permission)
  return _internal_type_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserRequest::set_type_permission(ArgT0&& arg0, ArgT... args) {
 
 type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.type_permission)
}
inline std::string* CheckUserRequest::mutable_type_permission() {
  std::string* _s = _internal_mutable_type_permission();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CheckUserRequest.type_permission)
  return _s;
}
inline const std::string& CheckUserRequest::_internal_type_permission() const {
  return type_permission_.Get();
}
inline void CheckUserRequest::_internal_set_type_permission(const std::string& value) {
  
  type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::_internal_mutable_type_permission() {
  
  return type_permission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserRequest::release_type_permission() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CheckUserRequest.type_permission)
  return type_permission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserRequest::set_allocated_type_permission(std::string* type_permission) {
  if (type_permission != nullptr) {
    
  } else {
    
  }
  type_permission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_permission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CheckUserRequest.type_permission)
}

// repeated uint32 roles_ids = 10 [json_name = "rolesIds"];
inline int CheckUserRequest::_internal_roles_ids_size() const {
  return roles_ids_.size();
}
inline int CheckUserRequest::roles_ids_size() const {
  return _internal_roles_ids_size();
}
inline void CheckUserRequest::clear_roles_ids() {
  roles_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::_internal_roles_ids(int index) const {
  return roles_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckUserRequest::roles_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserRequest.roles_ids)
  return _internal_roles_ids(index);
}
inline void CheckUserRequest::set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserRequest.roles_ids)
}
inline void CheckUserRequest::_internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Add(value);
}
inline void CheckUserRequest::add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_roles_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.CheckUserRequest.roles_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CheckUserRequest::_internal_roles_ids() const {
  return roles_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CheckUserRequest::roles_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.CheckUserRequest.roles_ids)
  return _internal_roles_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CheckUserRequest::_internal_mutable_roles_ids() {
  return &roles_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CheckUserRequest::mutable_roles_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.CheckUserRequest.roles_ids)
  return _internal_mutable_roles_ids();
}

// -------------------------------------------------------------------

// CheckUserResponse

// bool is_exists = 1 [json_name = "isExists"];
inline void CheckUserResponse::clear_is_exists() {
  is_exists_ = false;
}
inline bool CheckUserResponse::_internal_is_exists() const {
  return is_exists_;
}
inline bool CheckUserResponse::is_exists() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserResponse.is_exists)
  return _internal_is_exists();
}
inline void CheckUserResponse::_internal_set_is_exists(bool value) {
  
  is_exists_ = value;
}
inline void CheckUserResponse::set_is_exists(bool value) {
  _internal_set_is_exists(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserResponse.is_exists)
}

// string error = 2 [json_name = "error"];
inline void CheckUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CheckUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CheckUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CheckUserResponse.error)
}
inline std::string* CheckUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CheckUserResponse.error)
  return _s;
}
inline const std::string& CheckUserResponse::_internal_error() const {
  return error_.Get();
}
inline void CheckUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CheckUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CheckUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CheckUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CheckUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CheckUserResponse.error)
}

// -------------------------------------------------------------------

// UsersDex

// string user_id = 1 [json_name = "userId"];
inline void UsersDex::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UsersDex::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UsersDex.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UsersDex.user_id)
}
inline std::string* UsersDex::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UsersDex.user_id)
  return _s;
}
inline const std::string& UsersDex::_internal_user_id() const {
  return user_id_.Get();
}
inline void UsersDex::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UsersDex.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UsersDex.user_id)
}

// string provider = 2 [json_name = "provider"];
inline void UsersDex::clear_provider() {
  provider_.ClearToEmpty();
}
inline const std::string& UsersDex::provider() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UsersDex.provider)
  return _internal_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersDex::set_provider(ArgT0&& arg0, ArgT... args) {
 
 provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UsersDex.provider)
}
inline std::string* UsersDex::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UsersDex.provider)
  return _s;
}
inline const std::string& UsersDex::_internal_provider() const {
  return provider_.Get();
}
inline void UsersDex::_internal_set_provider(const std::string& value) {
  
  provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersDex::_internal_mutable_provider() {
  
  return provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersDex::release_provider() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UsersDex.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersDex::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UsersDex.provider)
}

// -------------------------------------------------------------------

// CreateUserResponse

// string msg = 1 [json_name = "msg"];
inline void CreateUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserResponse.msg)
}
inline std::string* CreateUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateUserResponse.msg)
  return _s;
}
inline const std::string& CreateUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateUserResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserResponse.error)
}
inline std::string* CreateUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateUserResponse.error)
  return _s;
}
inline const std::string& CreateUserResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateUserResponse.error)
}

// -------------------------------------------------------------------

// UpdateUserResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateUserResponse.msg)
}
inline std::string* UpdateUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateUserResponse.msg)
  return _s;
}
inline const std::string& UpdateUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateUserResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateUserResponse.error)
}
inline std::string* UpdateUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateUserResponse.error)
  return _s;
}
inline const std::string& UpdateUserResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateUserResponse.error)
}

// -------------------------------------------------------------------

// DeleteUserResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteUserResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteUserResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteUserResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteUserResponse.msg)
}
inline std::string* DeleteUserResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteUserResponse.msg)
  return _s;
}
inline const std::string& DeleteUserResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteUserResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteUserResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUserResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteUserResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteUserResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteUserResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteUserResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteUserResponse.error)
}
inline std::string* DeleteUserResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteUserResponse.error)
  return _s;
}
inline const std::string& DeleteUserResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteUserResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUserResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteUserResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUserResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteUserResponse.error)
}

// -------------------------------------------------------------------

// ListUserRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void ListUserRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListUserRequest.organization_id)
  return _internal_organization_id();
}
inline void ListUserRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListUserRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListUserRequest.organization_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void ListUserRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListUserRequest.project_id)
  return _internal_project_id();
}
inline void ListUserRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListUserRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListUserRequest.project_id)
}

// -------------------------------------------------------------------

// CreateUserRequest

// string user_id = 1 [json_name = "userId"];
inline void CreateUserRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.user_id)
}
inline std::string* CreateUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateUserRequest.user_id)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void CreateUserRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateUserRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateUserRequest.user_id)
}

// string first_name = 2 [json_name = "firstName"];
inline void CreateUserRequest::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.first_name)
}
inline std::string* CreateUserRequest::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateUserRequest.first_name)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_first_name() const {
  return first_name_.Get();
}
inline void CreateUserRequest::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateUserRequest.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateUserRequest.first_name)
}

// string last_name = 3 [json_name = "lastName"];
inline void CreateUserRequest::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.last_name)
}
inline std::string* CreateUserRequest::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateUserRequest.last_name)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_last_name() const {
  return last_name_.Get();
}
inline void CreateUserRequest::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateUserRequest.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateUserRequest.last_name)
}

// string email = 4 [json_name = "email"];
inline void CreateUserRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& CreateUserRequest::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.email)
}
inline std::string* CreateUserRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateUserRequest.email)
  return _s;
}
inline const std::string& CreateUserRequest::_internal_email() const {
  return email_.Get();
}
inline void CreateUserRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateUserRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateUserRequest.email)
}

// bool is_active = 5 [json_name = "isActive"];
inline void CreateUserRequest::clear_is_active() {
  is_active_ = false;
}
inline bool CreateUserRequest::_internal_is_active() const {
  return is_active_;
}
inline bool CreateUserRequest::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.is_active)
  return _internal_is_active();
}
inline void CreateUserRequest::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void CreateUserRequest::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.is_active)
}

// repeated uint32 roles_ids = 6 [json_name = "rolesIds"];
inline int CreateUserRequest::_internal_roles_ids_size() const {
  return roles_ids_.size();
}
inline int CreateUserRequest::roles_ids_size() const {
  return _internal_roles_ids_size();
}
inline void CreateUserRequest::clear_roles_ids() {
  roles_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_roles_ids(int index) const {
  return roles_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::roles_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.roles_ids)
  return _internal_roles_ids(index);
}
inline void CreateUserRequest::set_roles_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.roles_ids)
}
inline void CreateUserRequest::_internal_add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  roles_ids_.Add(value);
}
inline void CreateUserRequest::add_roles_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_roles_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.CreateUserRequest.roles_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::_internal_roles_ids() const {
  return roles_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::roles_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.CreateUserRequest.roles_ids)
  return _internal_roles_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::_internal_mutable_roles_ids() {
  return &roles_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::mutable_roles_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.CreateUserRequest.roles_ids)
  return _internal_mutable_roles_ids();
}

// repeated uint32 permissions_ids = 7 [json_name = "permissionsIds"];
inline int CreateUserRequest::_internal_permissions_ids_size() const {
  return permissions_ids_.size();
}
inline int CreateUserRequest::permissions_ids_size() const {
  return _internal_permissions_ids_size();
}
inline void CreateUserRequest::clear_permissions_ids() {
  permissions_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_permissions_ids(int index) const {
  return permissions_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::permissions_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.permissions_ids)
  return _internal_permissions_ids(index);
}
inline void CreateUserRequest::set_permissions_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permissions_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.permissions_ids)
}
inline void CreateUserRequest::_internal_add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permissions_ids_.Add(value);
}
inline void CreateUserRequest::add_permissions_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_permissions_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.CreateUserRequest.permissions_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::_internal_permissions_ids() const {
  return permissions_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::permissions_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.CreateUserRequest.permissions_ids)
  return _internal_permissions_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::_internal_mutable_permissions_ids() {
  return &permissions_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::mutable_permissions_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.CreateUserRequest.permissions_ids)
  return _internal_mutable_permissions_ids();
}

// repeated uint32 organizations_ids = 8 [json_name = "organizationsIds"];
inline int CreateUserRequest::_internal_organizations_ids_size() const {
  return organizations_ids_.size();
}
inline int CreateUserRequest::organizations_ids_size() const {
  return _internal_organizations_ids_size();
}
inline void CreateUserRequest::clear_organizations_ids() {
  organizations_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::_internal_organizations_ids(int index) const {
  return organizations_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateUserRequest::organizations_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateUserRequest.organizations_ids)
  return _internal_organizations_ids(index);
}
inline void CreateUserRequest::set_organizations_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  organizations_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateUserRequest.organizations_ids)
}
inline void CreateUserRequest::_internal_add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  organizations_ids_.Add(value);
}
inline void CreateUserRequest::add_organizations_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_organizations_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.CreateUserRequest.organizations_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::_internal_organizations_ids() const {
  return organizations_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateUserRequest::organizations_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.CreateUserRequest.organizations_ids)
  return _internal_organizations_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::_internal_mutable_organizations_ids() {
  return &organizations_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateUserRequest::mutable_organizations_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.CreateUserRequest.organizations_ids)
  return _internal_mutable_organizations_ids();
}

// -------------------------------------------------------------------

// UpdateUserRequest

// uint32 auth_id = 1 [json_name = "authId"];
inline void UpdateUserRequest::clear_auth_id() {
  auth_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::_internal_auth_id() const {
  return auth_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateUserRequest::auth_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateUserRequest.auth_id)
  return _internal_auth_id();
}
inline void UpdateUserRequest::_internal_set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  auth_id_ = value;
}
inline void UpdateUserRequest::set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateUserRequest.auth_id)
}

// .accounts.v1alpha1.CreateUserRequest auth = 2 [json_name = "auth"];
inline bool UpdateUserRequest::_internal_has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline bool UpdateUserRequest::has_auth() const {
  return _internal_has_auth();
}
inline void UpdateUserRequest::clear_auth() {
  if (GetArenaForAllocation() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
inline const ::accounts::v1alpha1::CreateUserRequest& UpdateUserRequest::_internal_auth() const {
  const ::accounts::v1alpha1::CreateUserRequest* p = auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::CreateUserRequest&>(
      ::accounts::v1alpha1::_CreateUserRequest_default_instance_);
}
inline const ::accounts::v1alpha1::CreateUserRequest& UpdateUserRequest::auth() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateUserRequest.auth)
  return _internal_auth();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_auth(
    ::accounts::v1alpha1::CreateUserRequest* auth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_);
  }
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.UpdateUserRequest.auth)
}
inline ::accounts::v1alpha1::CreateUserRequest* UpdateUserRequest::release_auth() {
  
  ::accounts::v1alpha1::CreateUserRequest* temp = auth_;
  auth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::CreateUserRequest* UpdateUserRequest::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateUserRequest.auth)
  
  ::accounts::v1alpha1::CreateUserRequest* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::CreateUserRequest* UpdateUserRequest::_internal_mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::CreateUserRequest>(GetArenaForAllocation());
    auth_ = p;
  }
  return auth_;
}
inline ::accounts::v1alpha1::CreateUserRequest* UpdateUserRequest::mutable_auth() {
  ::accounts::v1alpha1::CreateUserRequest* _msg = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateUserRequest.auth)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_auth(::accounts::v1alpha1::CreateUserRequest* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete auth_;
  }
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::CreateUserRequest>::GetOwningArena(auth);
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateUserRequest.auth)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// uint32 auth_id = 1 [json_name = "authId"];
inline void DeleteUserRequest::clear_auth_id() {
  auth_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRequest::_internal_auth_id() const {
  return auth_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRequest::auth_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteUserRequest.auth_id)
  return _internal_auth_id();
}
inline void DeleteUserRequest::_internal_set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  auth_id_ = value;
}
inline void DeleteUserRequest::set_auth_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteUserRequest.auth_id)
}

// -------------------------------------------------------------------

// UserList

// uint32 id = 1 [json_name = "id"];
inline void UserList::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserList::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserList::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.id)
  return _internal_id();
}
inline void UserList::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void UserList::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.id)
}

// string first_name = 2 [json_name = "firstName"];
inline void UserList::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& UserList::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.first_name)
}
inline std::string* UserList::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.first_name)
  return _s;
}
inline const std::string& UserList::_internal_first_name() const {
  return first_name_.Get();
}
inline void UserList::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.first_name)
}

// string last_name = 3 [json_name = "lastName"];
inline void UserList::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& UserList::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.last_name)
}
inline std::string* UserList::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.last_name)
  return _s;
}
inline const std::string& UserList::_internal_last_name() const {
  return last_name_.Get();
}
inline void UserList::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.last_name)
}

// string email = 4 [json_name = "email"];
inline void UserList::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserList::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.email)
}
inline std::string* UserList::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.email)
  return _s;
}
inline const std::string& UserList::_internal_email() const {
  return email_.Get();
}
inline void UserList::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.email)
}

// string user_id = 5 [json_name = "userId"];
inline void UserList::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UserList::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserList::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.user_id)
}
inline std::string* UserList::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UserList.user_id)
  return _s;
}
inline const std::string& UserList::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserList::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserList::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserList::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UserList.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserList::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UserList.user_id)
}

// bool is_active = 6 [json_name = "isActive"];
inline void UserList::clear_is_active() {
  is_active_ = false;
}
inline bool UserList::_internal_is_active() const {
  return is_active_;
}
inline bool UserList::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.is_active)
  return _internal_is_active();
}
inline void UserList::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void UserList::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.is_active)
}

// bool is_super_user = 7 [json_name = "isSuperUser"];
inline void UserList::clear_is_super_user() {
  is_super_user_ = false;
}
inline bool UserList::_internal_is_super_user() const {
  return is_super_user_;
}
inline bool UserList::is_super_user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UserList.is_super_user)
  return _internal_is_super_user();
}
inline void UserList::_internal_set_is_super_user(bool value) {
  
  is_super_user_ = value;
}
inline void UserList::set_is_super_user(bool value) {
  _internal_set_is_super_user(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UserList.is_super_user)
}

// -------------------------------------------------------------------

// GetOneUserRequest

// uint32 id = 1 [json_name = "id"];
inline void GetOneUserRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserRequest::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserRequest.id)
  return _internal_id();
}
inline void GetOneUserRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneUserRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserRequest.id)
}

// -------------------------------------------------------------------

// GetOneUserResponse

// uint32 id = 1 [json_name = "id"];
inline void GetOneUserResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.id)
  return _internal_id();
}
inline void GetOneUserResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneUserResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.id)
}

// string user_id = 2 [json_name = "userId"];
inline void GetOneUserResponse::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.user_id)
}
inline std::string* GetOneUserResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.user_id)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetOneUserResponse::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserResponse.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserResponse.user_id)
}

// string first_name = 3 [json_name = "firstName"];
inline void GetOneUserResponse::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.first_name)
}
inline std::string* GetOneUserResponse::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.first_name)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_first_name() const {
  return first_name_.Get();
}
inline void GetOneUserResponse::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserResponse.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserResponse.first_name)
}

// string last_name = 4 [json_name = "lastName"];
inline void GetOneUserResponse::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.last_name)
}
inline std::string* GetOneUserResponse::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.last_name)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_last_name() const {
  return last_name_.Get();
}
inline void GetOneUserResponse::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserResponse.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserResponse.last_name)
}

// string email = 5 [json_name = "email"];
inline void GetOneUserResponse::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.email)
}
inline std::string* GetOneUserResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.email)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_email() const {
  return email_.Get();
}
inline void GetOneUserResponse::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserResponse.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserResponse.email)
}

// bool is_active = 6 [json_name = "isActive"];
inline void GetOneUserResponse::clear_is_active() {
  is_active_ = false;
}
inline bool GetOneUserResponse::_internal_is_active() const {
  return is_active_;
}
inline bool GetOneUserResponse::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.is_active)
  return _internal_is_active();
}
inline void GetOneUserResponse::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void GetOneUserResponse::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.is_active)
}

// string created_at = 7 [json_name = "createdAt"];
inline void GetOneUserResponse::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::created_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.created_at)
}
inline std::string* GetOneUserResponse::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.created_at)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_created_at() const {
  return created_at_.Get();
}
inline void GetOneUserResponse::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_created_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserResponse.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserResponse.created_at)
}

// string updated_at = 8 [json_name = "updatedAt"];
inline void GetOneUserResponse::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& GetOneUserResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserResponse::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.updated_at)
}
inline std::string* GetOneUserResponse::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.updated_at)
  return _s;
}
inline const std::string& GetOneUserResponse::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void GetOneUserResponse::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserResponse::release_updated_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserResponse.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserResponse::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserResponse.updated_at)
}

// repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
inline int GetOneUserResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int GetOneUserResponse::roles_size() const {
  return _internal_roles_size();
}
inline void GetOneUserResponse::clear_roles() {
  roles_.Clear();
}
inline ::accounts::v1alpha1::Rol* GetOneUserResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
GetOneUserResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneUserResponse.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Rol& GetOneUserResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Rol& GetOneUserResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Rol* GetOneUserResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Rol* GetOneUserResponse::add_roles() {
  ::accounts::v1alpha1::Rol* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneUserResponse.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
GetOneUserResponse::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneUserResponse.roles)
  return roles_;
}

// repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
inline int GetOneUserResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int GetOneUserResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline void GetOneUserResponse::clear_permissions() {
  permissions_.Clear();
}
inline ::accounts::v1alpha1::Permission* GetOneUserResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
GetOneUserResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneUserResponse.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& GetOneUserResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& GetOneUserResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* GetOneUserResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* GetOneUserResponse::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneUserResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
GetOneUserResponse::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneUserResponse.permissions)
  return permissions_;
}

// bool is_super_user = 11 [json_name = "isSuperUser"];
inline void GetOneUserResponse::clear_is_super_user() {
  is_super_user_ = false;
}
inline bool GetOneUserResponse::_internal_is_super_user() const {
  return is_super_user_;
}
inline bool GetOneUserResponse::is_super_user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.is_super_user)
  return _internal_is_super_user();
}
inline void GetOneUserResponse::_internal_set_is_super_user(bool value) {
  
  is_super_user_ = value;
}
inline void GetOneUserResponse::set_is_super_user(bool value) {
  _internal_set_is_super_user(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserResponse.is_super_user)
}

// repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
inline int GetOneUserResponse::_internal_organizations_size() const {
  return organizations_.size();
}
inline int GetOneUserResponse::organizations_size() const {
  return _internal_organizations_size();
}
inline void GetOneUserResponse::clear_organizations() {
  organizations_.Clear();
}
inline ::accounts::v1alpha1::Organization* GetOneUserResponse::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserResponse.organizations)
  return organizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
GetOneUserResponse::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneUserResponse.organizations)
  return &organizations_;
}
inline const ::accounts::v1alpha1::Organization& GetOneUserResponse::_internal_organizations(int index) const {
  return organizations_.Get(index);
}
inline const ::accounts::v1alpha1::Organization& GetOneUserResponse::organizations(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserResponse.organizations)
  return _internal_organizations(index);
}
inline ::accounts::v1alpha1::Organization* GetOneUserResponse::_internal_add_organizations() {
  return organizations_.Add();
}
inline ::accounts::v1alpha1::Organization* GetOneUserResponse::add_organizations() {
  ::accounts::v1alpha1::Organization* _add = _internal_add_organizations();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneUserResponse.organizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
GetOneUserResponse::organizations() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneUserResponse.organizations)
  return organizations_;
}

// -------------------------------------------------------------------

// ListUserResponse

// repeated .accounts.v1alpha1.UserList users = 1 [json_name = "users"];
inline int ListUserResponse::_internal_users_size() const {
  return users_.size();
}
inline int ListUserResponse::users_size() const {
  return _internal_users_size();
}
inline void ListUserResponse::clear_users() {
  users_.Clear();
}
inline ::accounts::v1alpha1::UserList* ListUserResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListUserResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
ListUserResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.ListUserResponse.users)
  return &users_;
}
inline const ::accounts::v1alpha1::UserList& ListUserResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::accounts::v1alpha1::UserList& ListUserResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListUserResponse.users)
  return _internal_users(index);
}
inline ::accounts::v1alpha1::UserList* ListUserResponse::_internal_add_users() {
  return users_.Add();
}
inline ::accounts::v1alpha1::UserList* ListUserResponse::add_users() {
  ::accounts::v1alpha1::UserList* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.ListUserResponse.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
ListUserResponse::users() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.ListUserResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// ListUserPaginationRequest

// int32 offset = 1 [json_name = "offset"];
inline void ListUserPaginationRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::offset() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListUserPaginationRequest.offset)
  return _internal_offset();
}
inline void ListUserPaginationRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void ListUserPaginationRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListUserPaginationRequest.offset)
}

// int32 limit = 2 [json_name = "limit"];
inline void ListUserPaginationRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUserPaginationRequest::limit() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListUserPaginationRequest.limit)
  return _internal_limit();
}
inline void ListUserPaginationRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void ListUserPaginationRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListUserPaginationRequest.limit)
}

// -------------------------------------------------------------------

// ListUserPaginationResponse

// int64 count = 1 [json_name = "count"];
inline void ListUserPaginationResponse::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListUserPaginationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListUserPaginationResponse::count() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListUserPaginationResponse.count)
  return _internal_count();
}
inline void ListUserPaginationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ListUserPaginationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListUserPaginationResponse.count)
}

// repeated .accounts.v1alpha1.UserList users = 2 [json_name = "users"];
inline int ListUserPaginationResponse::_internal_users_size() const {
  return users_.size();
}
inline int ListUserPaginationResponse::users_size() const {
  return _internal_users_size();
}
inline void ListUserPaginationResponse::clear_users() {
  users_.Clear();
}
inline ::accounts::v1alpha1::UserList* ListUserPaginationResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListUserPaginationResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >*
ListUserPaginationResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.ListUserPaginationResponse.users)
  return &users_;
}
inline const ::accounts::v1alpha1::UserList& ListUserPaginationResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::accounts::v1alpha1::UserList& ListUserPaginationResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListUserPaginationResponse.users)
  return _internal_users(index);
}
inline ::accounts::v1alpha1::UserList* ListUserPaginationResponse::_internal_add_users() {
  return users_.Add();
}
inline ::accounts::v1alpha1::UserList* ListUserPaginationResponse::add_users() {
  ::accounts::v1alpha1::UserList* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.ListUserPaginationResponse.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UserList >&
ListUserPaginationResponse::users() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.ListUserPaginationResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// Rol

// uint32 id = 1 [json_name = "id"];
inline void Rol::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rol::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rol::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Rol.id)
  return _internal_id();
}
inline void Rol::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Rol::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Rol.id)
}

// string name = 2 [json_name = "name"];
inline void Rol::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Rol::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Rol.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Rol::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Rol.name)
}
inline std::string* Rol::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Rol.name)
  return _s;
}
inline const std::string& Rol::_internal_name() const {
  return name_.Get();
}
inline void Rol::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Rol::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Rol::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Rol.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Rol::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Rol.name)
}

// uint32 project_id = 3 [json_name = "projectId"];
inline void Rol::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rol::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rol::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Rol.project_id)
  return _internal_project_id();
}
inline void Rol::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Rol::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Rol.project_id)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void Rol::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rol::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rol::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Rol.organization_id)
  return _internal_organization_id();
}
inline void Rol::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Rol::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Rol.organization_id)
}

// repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
inline int Rol::_internal_permissions_size() const {
  return permissions_.size();
}
inline int Rol::permissions_size() const {
  return _internal_permissions_size();
}
inline void Rol::clear_permissions() {
  permissions_.Clear();
}
inline ::accounts::v1alpha1::Permission* Rol::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Rol.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
Rol::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.Rol.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& Rol::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& Rol::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Rol.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* Rol::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* Rol::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.Rol.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
Rol::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.Rol.permissions)
  return permissions_;
}

// -------------------------------------------------------------------

// CreateRoleRequest

// string name = 1 [json_name = "name"];
inline void CreateRoleRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleRequest.name)
}
inline std::string* CreateRoleRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateRoleRequest.name)
  return _s;
}
inline const std::string& CreateRoleRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateRoleRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateRoleRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateRoleRequest.name)
}

// string description = 2 [json_name = "description"];
inline void CreateRoleRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreateRoleRequest::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleRequest.description)
}
inline std::string* CreateRoleRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateRoleRequest.description)
  return _s;
}
inline const std::string& CreateRoleRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateRoleRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateRoleRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateRoleRequest.description)
}

// uint32 project_id = 3 [json_name = "projectId"];
inline void CreateRoleRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleRequest.project_id)
  return _internal_project_id();
}
inline void CreateRoleRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void CreateRoleRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleRequest.project_id)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void CreateRoleRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleRequest.organization_id)
  return _internal_organization_id();
}
inline void CreateRoleRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void CreateRoleRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleRequest.organization_id)
}

// string type_permission = 5 [json_name = "typePermission"];
inline void CreateRoleRequest::clear_type_permission() {
  type_permission_.ClearToEmpty();
}
inline const std::string& CreateRoleRequest::type_permission() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleRequest.type_permission)
  return _internal_type_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleRequest::set_type_permission(ArgT0&& arg0, ArgT... args) {
 
 type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleRequest.type_permission)
}
inline std::string* CreateRoleRequest::mutable_type_permission() {
  std::string* _s = _internal_mutable_type_permission();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateRoleRequest.type_permission)
  return _s;
}
inline const std::string& CreateRoleRequest::_internal_type_permission() const {
  return type_permission_.Get();
}
inline void CreateRoleRequest::_internal_set_type_permission(const std::string& value) {
  
  type_permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::_internal_mutable_type_permission() {
  
  return type_permission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleRequest::release_type_permission() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateRoleRequest.type_permission)
  return type_permission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleRequest::set_allocated_type_permission(std::string* type_permission) {
  if (type_permission != nullptr) {
    
  } else {
    
  }
  type_permission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_permission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateRoleRequest.type_permission)
}

// repeated uint32 permission_ids = 6 [json_name = "permissionIds"];
inline int CreateRoleRequest::_internal_permission_ids_size() const {
  return permission_ids_.size();
}
inline int CreateRoleRequest::permission_ids_size() const {
  return _internal_permission_ids_size();
}
inline void CreateRoleRequest::clear_permission_ids() {
  permission_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::_internal_permission_ids(int index) const {
  return permission_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleRequest::permission_ids(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleRequest.permission_ids)
  return _internal_permission_ids(index);
}
inline void CreateRoleRequest::set_permission_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permission_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleRequest.permission_ids)
}
inline void CreateRoleRequest::_internal_add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  permission_ids_.Add(value);
}
inline void CreateRoleRequest::add_permission_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_permission_ids(value);
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.CreateRoleRequest.permission_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateRoleRequest::_internal_permission_ids() const {
  return permission_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CreateRoleRequest::permission_ids() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.CreateRoleRequest.permission_ids)
  return _internal_permission_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateRoleRequest::_internal_mutable_permission_ids() {
  return &permission_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CreateRoleRequest::mutable_permission_ids() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.CreateRoleRequest.permission_ids)
  return _internal_mutable_permission_ids();
}

// -------------------------------------------------------------------

// UpdateRoleRequest

// uint32 rol_id = 1 [json_name = "rolId"];
inline void UpdateRoleRequest::clear_rol_id() {
  rol_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateRoleRequest::_internal_rol_id() const {
  return rol_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateRoleRequest::rol_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateRoleRequest.rol_id)
  return _internal_rol_id();
}
inline void UpdateRoleRequest::_internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rol_id_ = value;
}
inline void UpdateRoleRequest::set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rol_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateRoleRequest.rol_id)
}

// .accounts.v1alpha1.CreateRoleRequest rol = 2 [json_name = "rol"];
inline bool UpdateRoleRequest::_internal_has_rol() const {
  return this != internal_default_instance() && rol_ != nullptr;
}
inline bool UpdateRoleRequest::has_rol() const {
  return _internal_has_rol();
}
inline void UpdateRoleRequest::clear_rol() {
  if (GetArenaForAllocation() == nullptr && rol_ != nullptr) {
    delete rol_;
  }
  rol_ = nullptr;
}
inline const ::accounts::v1alpha1::CreateRoleRequest& UpdateRoleRequest::_internal_rol() const {
  const ::accounts::v1alpha1::CreateRoleRequest* p = rol_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::CreateRoleRequest&>(
      ::accounts::v1alpha1::_CreateRoleRequest_default_instance_);
}
inline const ::accounts::v1alpha1::CreateRoleRequest& UpdateRoleRequest::rol() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateRoleRequest.rol)
  return _internal_rol();
}
inline void UpdateRoleRequest::unsafe_arena_set_allocated_rol(
    ::accounts::v1alpha1::CreateRoleRequest* rol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rol_);
  }
  rol_ = rol;
  if (rol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.UpdateRoleRequest.rol)
}
inline ::accounts::v1alpha1::CreateRoleRequest* UpdateRoleRequest::release_rol() {
  
  ::accounts::v1alpha1::CreateRoleRequest* temp = rol_;
  rol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::CreateRoleRequest* UpdateRoleRequest::unsafe_arena_release_rol() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateRoleRequest.rol)
  
  ::accounts::v1alpha1::CreateRoleRequest* temp = rol_;
  rol_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::CreateRoleRequest* UpdateRoleRequest::_internal_mutable_rol() {
  
  if (rol_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::CreateRoleRequest>(GetArenaForAllocation());
    rol_ = p;
  }
  return rol_;
}
inline ::accounts::v1alpha1::CreateRoleRequest* UpdateRoleRequest::mutable_rol() {
  ::accounts::v1alpha1::CreateRoleRequest* _msg = _internal_mutable_rol();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateRoleRequest.rol)
  return _msg;
}
inline void UpdateRoleRequest::set_allocated_rol(::accounts::v1alpha1::CreateRoleRequest* rol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rol_;
  }
  if (rol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::CreateRoleRequest>::GetOwningArena(rol);
    if (message_arena != submessage_arena) {
      rol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rol, submessage_arena);
    }
    
  } else {
    
  }
  rol_ = rol;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateRoleRequest.rol)
}

// -------------------------------------------------------------------

// GetOneRoleRequest

// uint32 rol_id = 1 [json_name = "rolId"];
inline void GetOneRoleRequest::clear_rol_id() {
  rol_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleRequest::_internal_rol_id() const {
  return rol_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleRequest::rol_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneRoleRequest.rol_id)
  return _internal_rol_id();
}
inline void GetOneRoleRequest::_internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rol_id_ = value;
}
inline void GetOneRoleRequest::set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rol_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneRoleRequest.rol_id)
}

// -------------------------------------------------------------------

// GetOneRoleResponse

// uint32 id = 1 [json_name = "id"];
inline void GetOneRoleResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneRoleResponse.id)
  return _internal_id();
}
inline void GetOneRoleResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneRoleResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneRoleResponse.id)
}

// string name = 2 [json_name = "name"];
inline void GetOneRoleResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOneRoleResponse::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneRoleResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneRoleResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneRoleResponse.name)
}
inline std::string* GetOneRoleResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneRoleResponse.name)
  return _s;
}
inline const std::string& GetOneRoleResponse::_internal_name() const {
  return name_.Get();
}
inline void GetOneRoleResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneRoleResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneRoleResponse::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneRoleResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneRoleResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneRoleResponse.name)
}

// uint32 organization_id = 3 [json_name = "organizationId"];
inline void GetOneRoleResponse::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneRoleResponse.organization_id)
  return _internal_organization_id();
}
inline void GetOneRoleResponse::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void GetOneRoleResponse::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneRoleResponse.organization_id)
}

// uint32 project_id = 4 [json_name = "projectId"];
inline void GetOneRoleResponse::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneRoleResponse::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneRoleResponse.project_id)
  return _internal_project_id();
}
inline void GetOneRoleResponse::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void GetOneRoleResponse::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneRoleResponse.project_id)
}

// repeated .accounts.v1alpha1.Permission permissions = 5 [json_name = "permissions"];
inline int GetOneRoleResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int GetOneRoleResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline void GetOneRoleResponse::clear_permissions() {
  permissions_.Clear();
}
inline ::accounts::v1alpha1::Permission* GetOneRoleResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneRoleResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
GetOneRoleResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneRoleResponse.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& GetOneRoleResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& GetOneRoleResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneRoleResponse.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* GetOneRoleResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* GetOneRoleResponse::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneRoleResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
GetOneRoleResponse::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneRoleResponse.permissions)
  return permissions_;
}

// -------------------------------------------------------------------

// DeleteRoleRequest

// uint32 rol_id = 1 [json_name = "rolId"];
inline void DeleteRoleRequest::clear_rol_id() {
  rol_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRoleRequest::_internal_rol_id() const {
  return rol_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRoleRequest::rol_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteRoleRequest.rol_id)
  return _internal_rol_id();
}
inline void DeleteRoleRequest::_internal_set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rol_id_ = value;
}
inline void DeleteRoleRequest::set_rol_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rol_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteRoleRequest.rol_id)
}

// -------------------------------------------------------------------

// ListRolesRequest

// uint32 project_id = 1 [json_name = "projectId"];
inline void ListRolesRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListRolesRequest.project_id)
  return _internal_project_id();
}
inline void ListRolesRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListRolesRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListRolesRequest.project_id)
}

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void ListRolesRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListRolesRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListRolesRequest.organization_id)
  return _internal_organization_id();
}
inline void ListRolesRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListRolesRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListRolesRequest.organization_id)
}

// -------------------------------------------------------------------

// ListRolesResponse

// repeated .accounts.v1alpha1.Rol roles = 1 [json_name = "roles"];
inline int ListRolesResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int ListRolesResponse::roles_size() const {
  return _internal_roles_size();
}
inline void ListRolesResponse::clear_roles() {
  roles_.Clear();
}
inline ::accounts::v1alpha1::Rol* ListRolesResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListRolesResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
ListRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.ListRolesResponse.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Rol& ListRolesResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Rol& ListRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListRolesResponse.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Rol* ListRolesResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Rol* ListRolesResponse::add_roles() {
  ::accounts::v1alpha1::Rol* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.ListRolesResponse.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
ListRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.ListRolesResponse.roles)
  return roles_;
}

// -------------------------------------------------------------------

// CreateRoleResponse

// string msg = 1 [json_name = "msg"];
inline void CreateRoleResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateRoleResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleResponse.msg)
}
inline std::string* CreateRoleResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateRoleResponse.msg)
  return _s;
}
inline const std::string& CreateRoleResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateRoleResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateRoleResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateRoleResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateRoleResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateRoleResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateRoleResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateRoleResponse.error)
}
inline std::string* CreateRoleResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateRoleResponse.error)
  return _s;
}
inline const std::string& CreateRoleResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateRoleResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateRoleResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateRoleResponse.error)
}

// -------------------------------------------------------------------

// UpdateRoleResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateRoleResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateRoleResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateRoleResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRoleResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateRoleResponse.msg)
}
inline std::string* UpdateRoleResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateRoleResponse.msg)
  return _s;
}
inline const std::string& UpdateRoleResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateRoleResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateRoleResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRoleResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateRoleResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateRoleResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateRoleResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateRoleResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRoleResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateRoleResponse.error)
}
inline std::string* UpdateRoleResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateRoleResponse.error)
  return _s;
}
inline const std::string& UpdateRoleResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateRoleResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRoleResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateRoleResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRoleResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateRoleResponse.error)
}

// -------------------------------------------------------------------

// DeleteRoleResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteRoleResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteRoleResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteRoleResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRoleResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteRoleResponse.msg)
}
inline std::string* DeleteRoleResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteRoleResponse.msg)
  return _s;
}
inline const std::string& DeleteRoleResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteRoleResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteRoleResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRoleResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteRoleResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteRoleResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteRoleResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteRoleResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRoleResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteRoleResponse.error)
}
inline std::string* DeleteRoleResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteRoleResponse.error)
  return _s;
}
inline const std::string& DeleteRoleResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteRoleResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRoleResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteRoleResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRoleResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteRoleResponse.error)
}

// -------------------------------------------------------------------

// Project

// int32 id = 1 [json_name = "id"];
inline void Project::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.id)
  return _internal_id();
}
inline void Project::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Project::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.id)
}

// string name = 2 [json_name = "name"];
inline void Project::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.name)
}
inline std::string* Project::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.name)
  return _s;
}
inline const std::string& Project::_internal_name() const {
  return name_.Get();
}
inline void Project::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.name)
}

// string image = 3 [json_name = "image"];
inline void Project::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& Project::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.image)
}
inline std::string* Project::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.image)
  return _s;
}
inline const std::string& Project::_internal_image() const {
  return image_.Get();
}
inline void Project::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.image)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void Project::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Project::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Project::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.organization_id)
  return _internal_organization_id();
}
inline void Project::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Project::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.organization_id)
}

// string description = 5 [json_name = "description"];
inline void Project::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Project::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.description)
}
inline std::string* Project::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.description)
  return _s;
}
inline const std::string& Project::_internal_description() const {
  return description_.Get();
}
inline void Project::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.description)
}

// string created_at = 6 [json_name = "createdAt"];
inline void Project::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Project::created_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.created_at)
}
inline std::string* Project::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.created_at)
  return _s;
}
inline const std::string& Project::_internal_created_at() const {
  return created_at_.Get();
}
inline void Project::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_created_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.created_at)
}

// string updated_at = 7 [json_name = "updatedAt"];
inline void Project::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Project::updated_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Project.updated_at)
}
inline std::string* Project::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.updated_at)
  return _s;
}
inline const std::string& Project::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Project::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_updated_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Project.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Project.updated_at)
}

// repeated .accounts.v1alpha1.Rol roles = 8 [json_name = "roles"];
inline int Project::_internal_roles_size() const {
  return roles_.size();
}
inline int Project::roles_size() const {
  return _internal_roles_size();
}
inline void Project::clear_roles() {
  roles_.Clear();
}
inline ::accounts::v1alpha1::Rol* Project::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Project.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
Project::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.Project.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Rol& Project::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Rol& Project::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Project.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Rol* Project::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Rol* Project::add_roles() {
  ::accounts::v1alpha1::Rol* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.Project.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
Project::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.Project.roles)
  return roles_;
}

// -------------------------------------------------------------------

// CreateProjectRequest

// string name = 1 [json_name = "name"];
inline void CreateProjectRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateProjectRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateProjectRequest.name)
}
inline std::string* CreateProjectRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateProjectRequest.name)
  return _s;
}
inline const std::string& CreateProjectRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateProjectRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateProjectRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProjectRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateProjectRequest.name)
}

// string description = 2 [json_name = "description"];
inline void CreateProjectRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreateProjectRequest::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateProjectRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateProjectRequest.description)
}
inline std::string* CreateProjectRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateProjectRequest.description)
  return _s;
}
inline const std::string& CreateProjectRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateProjectRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateProjectRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProjectRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateProjectRequest.description)
}

// string image = 3 [json_name = "image"];
inline void CreateProjectRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& CreateProjectRequest::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateProjectRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateProjectRequest.image)
}
inline std::string* CreateProjectRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateProjectRequest.image)
  return _s;
}
inline const std::string& CreateProjectRequest::_internal_image() const {
  return image_.Get();
}
inline void CreateProjectRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateProjectRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProjectRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateProjectRequest.image)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void CreateProjectRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateProjectRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateProjectRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateProjectRequest.organization_id)
  return _internal_organization_id();
}
inline void CreateProjectRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void CreateProjectRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateProjectRequest.organization_id)
}

// string user_id = 5 [json_name = "userId"];
inline void CreateProjectRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& CreateProjectRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateProjectRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateProjectRequest.user_id)
}
inline std::string* CreateProjectRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateProjectRequest.user_id)
  return _s;
}
inline const std::string& CreateProjectRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void CreateProjectRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateProjectRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProjectRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateProjectRequest.user_id)
}

// -------------------------------------------------------------------

// GetOneProjectRequest

// int32 id = 1 [json_name = "id"];
inline void GetOneProjectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOneProjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOneProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectRequest.id)
  return _internal_id();
}
inline void GetOneProjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GetOneProjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectRequest.id)
}

// -------------------------------------------------------------------

// DeleteProjectRequest

// int32 id = 1 [json_name = "id"];
inline void DeleteProjectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteProjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteProjectRequest.id)
  return _internal_id();
}
inline void DeleteProjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeleteProjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteProjectRequest.id)
}

// -------------------------------------------------------------------

// ListProjectRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void ListProjectRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListProjectRequest.organization_id)
  return _internal_organization_id();
}
inline void ListProjectRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListProjectRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListProjectRequest.organization_id)
}

// -------------------------------------------------------------------

// UpdateProjectRequest

// int32 id = 1 [json_name = "id"];
inline void UpdateProjectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateProjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateProjectRequest.id)
  return _internal_id();
}
inline void UpdateProjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdateProjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateProjectRequest.id)
}

// .accounts.v1alpha1.CreateProjectRequest project = 2 [json_name = "project"];
inline bool UpdateProjectRequest::_internal_has_project() const {
  return this != internal_default_instance() && project_ != nullptr;
}
inline bool UpdateProjectRequest::has_project() const {
  return _internal_has_project();
}
inline void UpdateProjectRequest::clear_project() {
  if (GetArenaForAllocation() == nullptr && project_ != nullptr) {
    delete project_;
  }
  project_ = nullptr;
}
inline const ::accounts::v1alpha1::CreateProjectRequest& UpdateProjectRequest::_internal_project() const {
  const ::accounts::v1alpha1::CreateProjectRequest* p = project_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::CreateProjectRequest&>(
      ::accounts::v1alpha1::_CreateProjectRequest_default_instance_);
}
inline const ::accounts::v1alpha1::CreateProjectRequest& UpdateProjectRequest::project() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateProjectRequest.project)
  return _internal_project();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_project(
    ::accounts::v1alpha1::CreateProjectRequest* project) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_);
  }
  project_ = project;
  if (project) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.UpdateProjectRequest.project)
}
inline ::accounts::v1alpha1::CreateProjectRequest* UpdateProjectRequest::release_project() {
  
  ::accounts::v1alpha1::CreateProjectRequest* temp = project_;
  project_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::CreateProjectRequest* UpdateProjectRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateProjectRequest.project)
  
  ::accounts::v1alpha1::CreateProjectRequest* temp = project_;
  project_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::CreateProjectRequest* UpdateProjectRequest::_internal_mutable_project() {
  
  if (project_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::CreateProjectRequest>(GetArenaForAllocation());
    project_ = p;
  }
  return project_;
}
inline ::accounts::v1alpha1::CreateProjectRequest* UpdateProjectRequest::mutable_project() {
  ::accounts::v1alpha1::CreateProjectRequest* _msg = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateProjectRequest.project)
  return _msg;
}
inline void UpdateProjectRequest::set_allocated_project(::accounts::v1alpha1::CreateProjectRequest* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete project_;
  }
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::CreateProjectRequest>::GetOwningArena(project);
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    
  } else {
    
  }
  project_ = project;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateProjectRequest.project)
}

// -------------------------------------------------------------------

// CreateProjectResponse

// string msg = 1 [json_name = "msg"];
inline void CreateProjectResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateProjectResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateProjectResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateProjectResponse.msg)
}
inline std::string* CreateProjectResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateProjectResponse.msg)
  return _s;
}
inline const std::string& CreateProjectResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateProjectResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProjectResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProjectResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateProjectResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProjectResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateProjectResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateProjectResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateProjectResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateProjectResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateProjectResponse.error)
}
inline std::string* CreateProjectResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateProjectResponse.error)
  return _s;
}
inline const std::string& CreateProjectResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateProjectResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProjectResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProjectResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateProjectResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProjectResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateProjectResponse.error)
}

// -------------------------------------------------------------------

// UpdateProjectResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateProjectResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateProjectResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateProjectResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProjectResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateProjectResponse.msg)
}
inline std::string* UpdateProjectResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateProjectResponse.msg)
  return _s;
}
inline const std::string& UpdateProjectResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateProjectResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateProjectResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateProjectResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateProjectResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateProjectResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateProjectResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateProjectResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateProjectResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateProjectResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProjectResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateProjectResponse.error)
}
inline std::string* UpdateProjectResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateProjectResponse.error)
  return _s;
}
inline const std::string& UpdateProjectResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateProjectResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateProjectResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateProjectResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateProjectResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateProjectResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateProjectResponse.error)
}

// -------------------------------------------------------------------

// DeleteProjectResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteProjectResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteProjectResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteProjectResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProjectResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteProjectResponse.msg)
}
inline std::string* DeleteProjectResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteProjectResponse.msg)
  return _s;
}
inline const std::string& DeleteProjectResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteProjectResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteProjectResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteProjectResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteProjectResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteProjectResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteProjectResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteProjectResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteProjectResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteProjectResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProjectResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteProjectResponse.error)
}
inline std::string* DeleteProjectResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteProjectResponse.error)
  return _s;
}
inline const std::string& DeleteProjectResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteProjectResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteProjectResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteProjectResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteProjectResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteProjectResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteProjectResponse.error)
}

// -------------------------------------------------------------------

// GetOneProjectResponse

// int32 id = 1 [json_name = "id"];
inline void GetOneProjectResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOneProjectResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOneProjectResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.id)
  return _internal_id();
}
inline void GetOneProjectResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GetOneProjectResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectResponse.id)
}

// string name = 2 [json_name = "name"];
inline void GetOneProjectResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOneProjectResponse::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneProjectResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectResponse.name)
}
inline std::string* GetOneProjectResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneProjectResponse.name)
  return _s;
}
inline const std::string& GetOneProjectResponse::_internal_name() const {
  return name_.Get();
}
inline void GetOneProjectResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneProjectResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneProjectResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneProjectResponse.name)
}

// string image = 3 [json_name = "image"];
inline void GetOneProjectResponse::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& GetOneProjectResponse::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneProjectResponse::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectResponse.image)
}
inline std::string* GetOneProjectResponse::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneProjectResponse.image)
  return _s;
}
inline const std::string& GetOneProjectResponse::_internal_image() const {
  return image_.Get();
}
inline void GetOneProjectResponse::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneProjectResponse.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneProjectResponse::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneProjectResponse.image)
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void GetOneProjectResponse::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneProjectResponse::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneProjectResponse::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.organization_id)
  return _internal_organization_id();
}
inline void GetOneProjectResponse::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void GetOneProjectResponse::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectResponse.organization_id)
}

// string description = 5 [json_name = "description"];
inline void GetOneProjectResponse::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& GetOneProjectResponse::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneProjectResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectResponse.description)
}
inline std::string* GetOneProjectResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneProjectResponse.description)
  return _s;
}
inline const std::string& GetOneProjectResponse::_internal_description() const {
  return description_.Get();
}
inline void GetOneProjectResponse::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneProjectResponse.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneProjectResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneProjectResponse.description)
}

// string created_at = 6 [json_name = "createdAt"];
inline void GetOneProjectResponse::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& GetOneProjectResponse::created_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneProjectResponse::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectResponse.created_at)
}
inline std::string* GetOneProjectResponse::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneProjectResponse.created_at)
  return _s;
}
inline const std::string& GetOneProjectResponse::_internal_created_at() const {
  return created_at_.Get();
}
inline void GetOneProjectResponse::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::release_created_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneProjectResponse.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneProjectResponse::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneProjectResponse.created_at)
}

// string updated_at = 7 [json_name = "updatedAt"];
inline void GetOneProjectResponse::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& GetOneProjectResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneProjectResponse::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneProjectResponse.updated_at)
}
inline std::string* GetOneProjectResponse::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneProjectResponse.updated_at)
  return _s;
}
inline const std::string& GetOneProjectResponse::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void GetOneProjectResponse::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneProjectResponse::release_updated_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneProjectResponse.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneProjectResponse::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneProjectResponse.updated_at)
}

// repeated .accounts.v1alpha1.Member members = 8 [json_name = "members"];
inline int GetOneProjectResponse::_internal_members_size() const {
  return members_.size();
}
inline int GetOneProjectResponse::members_size() const {
  return _internal_members_size();
}
inline void GetOneProjectResponse::clear_members() {
  members_.Clear();
}
inline ::accounts::v1alpha1::Member* GetOneProjectResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneProjectResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >*
GetOneProjectResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneProjectResponse.members)
  return &members_;
}
inline const ::accounts::v1alpha1::Member& GetOneProjectResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::accounts::v1alpha1::Member& GetOneProjectResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneProjectResponse.members)
  return _internal_members(index);
}
inline ::accounts::v1alpha1::Member* GetOneProjectResponse::_internal_add_members() {
  return members_.Add();
}
inline ::accounts::v1alpha1::Member* GetOneProjectResponse::add_members() {
  ::accounts::v1alpha1::Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneProjectResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >&
GetOneProjectResponse::members() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneProjectResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// ListProjectResponse

// repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
inline int ListProjectResponse::_internal_projects_size() const {
  return projects_.size();
}
inline int ListProjectResponse::projects_size() const {
  return _internal_projects_size();
}
inline void ListProjectResponse::clear_projects() {
  projects_.Clear();
}
inline ::accounts::v1alpha1::Project* ListProjectResponse::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListProjectResponse.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
ListProjectResponse::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.ListProjectResponse.projects)
  return &projects_;
}
inline const ::accounts::v1alpha1::Project& ListProjectResponse::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::accounts::v1alpha1::Project& ListProjectResponse::projects(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListProjectResponse.projects)
  return _internal_projects(index);
}
inline ::accounts::v1alpha1::Project* ListProjectResponse::_internal_add_projects() {
  return projects_.Add();
}
inline ::accounts::v1alpha1::Project* ListProjectResponse::add_projects() {
  ::accounts::v1alpha1::Project* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.ListProjectResponse.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
ListProjectResponse::projects() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.ListProjectResponse.projects)
  return projects_;
}

// -------------------------------------------------------------------

// ListProjectPaginationRequest

// int32 offset = 1 [json_name = "offset"];
inline void ListProjectPaginationRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProjectPaginationRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProjectPaginationRequest::offset() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListProjectPaginationRequest.offset)
  return _internal_offset();
}
inline void ListProjectPaginationRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void ListProjectPaginationRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListProjectPaginationRequest.offset)
}

// int32 limit = 2 [json_name = "limit"];
inline void ListProjectPaginationRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProjectPaginationRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProjectPaginationRequest::limit() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListProjectPaginationRequest.limit)
  return _internal_limit();
}
inline void ListProjectPaginationRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void ListProjectPaginationRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListProjectPaginationRequest.limit)
}

// -------------------------------------------------------------------

// ListProjectPaginationResponse

// repeated .accounts.v1alpha1.Project projects = 1 [json_name = "projects"];
inline int ListProjectPaginationResponse::_internal_projects_size() const {
  return projects_.size();
}
inline int ListProjectPaginationResponse::projects_size() const {
  return _internal_projects_size();
}
inline void ListProjectPaginationResponse::clear_projects() {
  projects_.Clear();
}
inline ::accounts::v1alpha1::Project* ListProjectPaginationResponse::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListProjectPaginationResponse.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >*
ListProjectPaginationResponse::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.ListProjectPaginationResponse.projects)
  return &projects_;
}
inline const ::accounts::v1alpha1::Project& ListProjectPaginationResponse::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::accounts::v1alpha1::Project& ListProjectPaginationResponse::projects(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListProjectPaginationResponse.projects)
  return _internal_projects(index);
}
inline ::accounts::v1alpha1::Project* ListProjectPaginationResponse::_internal_add_projects() {
  return projects_.Add();
}
inline ::accounts::v1alpha1::Project* ListProjectPaginationResponse::add_projects() {
  ::accounts::v1alpha1::Project* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.ListProjectPaginationResponse.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Project >&
ListProjectPaginationResponse::projects() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.ListProjectPaginationResponse.projects)
  return projects_;
}

// int64 count = 2 [json_name = "count"];
inline void ListProjectPaginationResponse::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListProjectPaginationResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListProjectPaginationResponse::count() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListProjectPaginationResponse.count)
  return _internal_count();
}
inline void ListProjectPaginationResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ListProjectPaginationResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListProjectPaginationResponse.count)
}

// -------------------------------------------------------------------

// Permission

// uint32 id = 1 [json_name = "id"];
inline void Permission::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Permission::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Permission::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.id)
  return _internal_id();
}
inline void Permission::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Permission::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.id)
}

// string name = 2 [json_name = "name"];
inline void Permission::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Permission::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Permission::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.name)
}
inline std::string* Permission::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Permission.name)
  return _s;
}
inline const std::string& Permission::_internal_name() const {
  return name_.Get();
}
inline void Permission::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Permission::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Permission.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Permission::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Permission.name)
}

// string type = 3 [json_name = "type"];
inline void Permission::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Permission::type() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Permission.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Permission::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Permission.type)
}
inline std::string* Permission::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Permission.type)
  return _s;
}
inline const std::string& Permission::_internal_type() const {
  return type_.Get();
}
inline void Permission::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Permission::release_type() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Permission.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Permission::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Permission.type)
}

// -------------------------------------------------------------------

// ListPermissionResponse

// repeated .accounts.v1alpha1.Permission permissions = 1 [json_name = "permissions"];
inline int ListPermissionResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int ListPermissionResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline void ListPermissionResponse::clear_permissions() {
  permissions_.Clear();
}
inline ::accounts::v1alpha1::Permission* ListPermissionResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListPermissionResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
ListPermissionResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.ListPermissionResponse.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& ListPermissionResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& ListPermissionResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListPermissionResponse.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* ListPermissionResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* ListPermissionResponse::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.ListPermissionResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
ListPermissionResponse::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.ListPermissionResponse.permissions)
  return permissions_;
}

// -------------------------------------------------------------------

// AssignPermissionRequest

// uint32 user_id = 1 [json_name = "userId"];
inline void AssignPermissionRequest::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignPermissionRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignPermissionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.AssignPermissionRequest.user_id)
  return _internal_user_id();
}
inline void AssignPermissionRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void AssignPermissionRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.AssignPermissionRequest.user_id)
}

// uint32 permission_id = 2 [json_name = "permissionId"];
inline void AssignPermissionRequest::clear_permission_id() {
  permission_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignPermissionRequest::_internal_permission_id() const {
  return permission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignPermissionRequest::permission_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.AssignPermissionRequest.permission_id)
  return _internal_permission_id();
}
inline void AssignPermissionRequest::_internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_id_ = value;
}
inline void AssignPermissionRequest::set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.AssignPermissionRequest.permission_id)
}

// -------------------------------------------------------------------

// ListPermissionRequest

// string type = 1 [json_name = "type"];
inline void ListPermissionRequest::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ListPermissionRequest::type() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListPermissionRequest.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPermissionRequest::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ListPermissionRequest.type)
}
inline std::string* ListPermissionRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListPermissionRequest.type)
  return _s;
}
inline const std::string& ListPermissionRequest::_internal_type() const {
  return type_.Get();
}
inline void ListPermissionRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListPermissionRequest::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListPermissionRequest::release_type() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.ListPermissionRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListPermissionRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.ListPermissionRequest.type)
}

// -------------------------------------------------------------------

// CreatePermissionRequest

// string name = 1 [json_name = "name"];
inline void CreatePermissionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreatePermissionRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreatePermissionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePermissionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreatePermissionRequest.name)
}
inline std::string* CreatePermissionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreatePermissionRequest.name)
  return _s;
}
inline const std::string& CreatePermissionRequest::_internal_name() const {
  return name_.Get();
}
inline void CreatePermissionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreatePermissionRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreatePermissionRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreatePermissionRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreatePermissionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreatePermissionRequest.name)
}

// string type = 2 [json_name = "type"];
inline void CreatePermissionRequest::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& CreatePermissionRequest::type() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreatePermissionRequest.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePermissionRequest::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreatePermissionRequest.type)
}
inline std::string* CreatePermissionRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreatePermissionRequest.type)
  return _s;
}
inline const std::string& CreatePermissionRequest::_internal_type() const {
  return type_.Get();
}
inline void CreatePermissionRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreatePermissionRequest::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreatePermissionRequest::release_type() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreatePermissionRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreatePermissionRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreatePermissionRequest.type)
}

// -------------------------------------------------------------------

// UpdatePermissionRequest

// uint32 permission_id = 1 [json_name = "permissionId"];
inline void UpdatePermissionRequest::clear_permission_id() {
  permission_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdatePermissionRequest::_internal_permission_id() const {
  return permission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdatePermissionRequest::permission_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdatePermissionRequest.permission_id)
  return _internal_permission_id();
}
inline void UpdatePermissionRequest::_internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_id_ = value;
}
inline void UpdatePermissionRequest::set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdatePermissionRequest.permission_id)
}

// string name = 2 [json_name = "name"];
inline void UpdatePermissionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdatePermissionRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdatePermissionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePermissionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdatePermissionRequest.name)
}
inline std::string* UpdatePermissionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdatePermissionRequest.name)
  return _s;
}
inline const std::string& UpdatePermissionRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdatePermissionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdatePermissionRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdatePermissionRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdatePermissionRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdatePermissionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdatePermissionRequest.name)
}

// string type = 3 [json_name = "type"];
inline void UpdatePermissionRequest::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& UpdatePermissionRequest::type() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdatePermissionRequest.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePermissionRequest::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdatePermissionRequest.type)
}
inline std::string* UpdatePermissionRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdatePermissionRequest.type)
  return _s;
}
inline const std::string& UpdatePermissionRequest::_internal_type() const {
  return type_.Get();
}
inline void UpdatePermissionRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdatePermissionRequest::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdatePermissionRequest::release_type() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdatePermissionRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdatePermissionRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdatePermissionRequest.type)
}

// -------------------------------------------------------------------

// GetOnePermissionRequest

// uint32 permission_id = 1 [json_name = "permissionId"];
inline void GetOnePermissionRequest::clear_permission_id() {
  permission_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOnePermissionRequest::_internal_permission_id() const {
  return permission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOnePermissionRequest::permission_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOnePermissionRequest.permission_id)
  return _internal_permission_id();
}
inline void GetOnePermissionRequest::_internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_id_ = value;
}
inline void GetOnePermissionRequest::set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOnePermissionRequest.permission_id)
}

// -------------------------------------------------------------------

// GetOnePermissionResponse

// uint32 id = 1 [json_name = "id"];
inline void GetOnePermissionResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOnePermissionResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOnePermissionResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOnePermissionResponse.id)
  return _internal_id();
}
inline void GetOnePermissionResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOnePermissionResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOnePermissionResponse.id)
}

// string name = 2 [json_name = "name"];
inline void GetOnePermissionResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOnePermissionResponse::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOnePermissionResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOnePermissionResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOnePermissionResponse.name)
}
inline std::string* GetOnePermissionResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOnePermissionResponse.name)
  return _s;
}
inline const std::string& GetOnePermissionResponse::_internal_name() const {
  return name_.Get();
}
inline void GetOnePermissionResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOnePermissionResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOnePermissionResponse::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOnePermissionResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOnePermissionResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOnePermissionResponse.name)
}

// string type = 3 [json_name = "type"];
inline void GetOnePermissionResponse::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& GetOnePermissionResponse::type() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOnePermissionResponse.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOnePermissionResponse::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOnePermissionResponse.type)
}
inline std::string* GetOnePermissionResponse::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOnePermissionResponse.type)
  return _s;
}
inline const std::string& GetOnePermissionResponse::_internal_type() const {
  return type_.Get();
}
inline void GetOnePermissionResponse::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOnePermissionResponse::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOnePermissionResponse::release_type() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOnePermissionResponse.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOnePermissionResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOnePermissionResponse.type)
}

// -------------------------------------------------------------------

// DeletePermissionRequest

// uint32 permission_id = 1 [json_name = "permissionId"];
inline void DeletePermissionRequest::clear_permission_id() {
  permission_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeletePermissionRequest::_internal_permission_id() const {
  return permission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeletePermissionRequest::permission_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeletePermissionRequest.permission_id)
  return _internal_permission_id();
}
inline void DeletePermissionRequest::_internal_set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_id_ = value;
}
inline void DeletePermissionRequest::set_permission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeletePermissionRequest.permission_id)
}

// -------------------------------------------------------------------

// UpdatePermissionResponse

// string msg = 1 [json_name = "msg"];
inline void UpdatePermissionResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdatePermissionResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdatePermissionResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePermissionResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdatePermissionResponse.msg)
}
inline std::string* UpdatePermissionResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdatePermissionResponse.msg)
  return _s;
}
inline const std::string& UpdatePermissionResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdatePermissionResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdatePermissionResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdatePermissionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdatePermissionResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdatePermissionResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdatePermissionResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdatePermissionResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdatePermissionResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdatePermissionResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePermissionResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdatePermissionResponse.error)
}
inline std::string* UpdatePermissionResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdatePermissionResponse.error)
  return _s;
}
inline const std::string& UpdatePermissionResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdatePermissionResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdatePermissionResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdatePermissionResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdatePermissionResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdatePermissionResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdatePermissionResponse.error)
}

// -------------------------------------------------------------------

// DeletePermissionResponse

// string msg = 1 [json_name = "msg"];
inline void DeletePermissionResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeletePermissionResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeletePermissionResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePermissionResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeletePermissionResponse.msg)
}
inline std::string* DeletePermissionResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeletePermissionResponse.msg)
  return _s;
}
inline const std::string& DeletePermissionResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeletePermissionResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeletePermissionResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeletePermissionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeletePermissionResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeletePermissionResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeletePermissionResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeletePermissionResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeletePermissionResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeletePermissionResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePermissionResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeletePermissionResponse.error)
}
inline std::string* DeletePermissionResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeletePermissionResponse.error)
  return _s;
}
inline const std::string& DeletePermissionResponse::_internal_error() const {
  return error_.Get();
}
inline void DeletePermissionResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeletePermissionResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeletePermissionResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeletePermissionResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeletePermissionResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeletePermissionResponse.error)
}

// -------------------------------------------------------------------

// CreatePermissionResponse

// string msg = 1 [json_name = "msg"];
inline void CreatePermissionResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreatePermissionResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreatePermissionResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePermissionResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreatePermissionResponse.msg)
}
inline std::string* CreatePermissionResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreatePermissionResponse.msg)
  return _s;
}
inline const std::string& CreatePermissionResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreatePermissionResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreatePermissionResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreatePermissionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreatePermissionResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreatePermissionResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreatePermissionResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreatePermissionResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreatePermissionResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreatePermissionResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePermissionResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreatePermissionResponse.error)
}
inline std::string* CreatePermissionResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreatePermissionResponse.error)
  return _s;
}
inline const std::string& CreatePermissionResponse::_internal_error() const {
  return error_.Get();
}
inline void CreatePermissionResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreatePermissionResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreatePermissionResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreatePermissionResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreatePermissionResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreatePermissionResponse.error)
}

// -------------------------------------------------------------------

// Member

// uint32 id = 1 [json_name = "id"];
inline void Member::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Member::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Member::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Member.id)
  return _internal_id();
}
inline void Member::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Member::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Member.id)
}

// string user_id = 2 [json_name = "userId"];
inline void Member::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& Member::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Member.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Member::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Member.user_id)
}
inline std::string* Member::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Member.user_id)
  return _s;
}
inline const std::string& Member::_internal_user_id() const {
  return user_id_.Get();
}
inline void Member::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Member::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Member::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Member.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Member::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Member.user_id)
}

// string first_name = 3 [json_name = "firstName"];
inline void Member::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& Member::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Member.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Member::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Member.first_name)
}
inline std::string* Member::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Member.first_name)
  return _s;
}
inline const std::string& Member::_internal_first_name() const {
  return first_name_.Get();
}
inline void Member::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Member::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Member::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Member.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Member::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Member.first_name)
}

// string last_name = 4 [json_name = "lastName"];
inline void Member::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& Member::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Member.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Member::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Member.last_name)
}
inline std::string* Member::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Member.last_name)
  return _s;
}
inline const std::string& Member::_internal_last_name() const {
  return last_name_.Get();
}
inline void Member::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Member::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Member::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Member.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Member::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Member.last_name)
}

// bool is_active = 5 [json_name = "isActive"];
inline void Member::clear_is_active() {
  is_active_ = false;
}
inline bool Member::_internal_is_active() const {
  return is_active_;
}
inline bool Member::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Member.is_active)
  return _internal_is_active();
}
inline void Member::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void Member::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Member.is_active)
}

// -------------------------------------------------------------------

// ProjectOrganization

// int32 id = 1 [json_name = "id"];
inline void ProjectOrganization::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectOrganization::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectOrganization::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ProjectOrganization.id)
  return _internal_id();
}
inline void ProjectOrganization::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ProjectOrganization::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ProjectOrganization.id)
}

// string name = 2 [json_name = "name"];
inline void ProjectOrganization::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProjectOrganization::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ProjectOrganization.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectOrganization::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ProjectOrganization.name)
}
inline std::string* ProjectOrganization::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ProjectOrganization.name)
  return _s;
}
inline const std::string& ProjectOrganization::_internal_name() const {
  return name_.Get();
}
inline void ProjectOrganization::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectOrganization::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectOrganization::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.ProjectOrganization.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectOrganization::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.ProjectOrganization.name)
}

// string image = 3 [json_name = "image"];
inline void ProjectOrganization::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& ProjectOrganization::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ProjectOrganization.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectOrganization::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ProjectOrganization.image)
}
inline std::string* ProjectOrganization::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ProjectOrganization.image)
  return _s;
}
inline const std::string& ProjectOrganization::_internal_image() const {
  return image_.Get();
}
inline void ProjectOrganization::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectOrganization::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectOrganization::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.ProjectOrganization.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectOrganization::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.ProjectOrganization.image)
}

// string description = 4 [json_name = "description"];
inline void ProjectOrganization::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ProjectOrganization::description() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ProjectOrganization.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectOrganization::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.ProjectOrganization.description)
}
inline std::string* ProjectOrganization::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ProjectOrganization.description)
  return _s;
}
inline const std::string& ProjectOrganization::_internal_description() const {
  return description_.Get();
}
inline void ProjectOrganization::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectOrganization::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectOrganization::release_description() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.ProjectOrganization.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectOrganization::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.ProjectOrganization.description)
}

// -------------------------------------------------------------------

// Organization

// uint32 id = 1 [json_name = "id"];
inline void Organization::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Organization::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Organization::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.id)
  return _internal_id();
}
inline void Organization::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Organization::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.id)
}

// string name = 2 [json_name = "name"];
inline void Organization::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Organization::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.name)
}
inline std::string* Organization::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.name)
  return _s;
}
inline const std::string& Organization::_internal_name() const {
  return name_.Get();
}
inline void Organization::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Organization.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Organization.name)
}

// string image = 3 [json_name = "image"];
inline void Organization::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& Organization::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.Organization.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.Organization.image)
}
inline std::string* Organization::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.Organization.image)
  return _s;
}
inline const std::string& Organization::_internal_image() const {
  return image_.Get();
}
inline void Organization::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.Organization.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.Organization.image)
}

// -------------------------------------------------------------------

// CreateOrganizationRequest

// string name = 1 [json_name = "name"];
inline void CreateOrganizationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateOrganizationRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateOrganizationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateOrganizationRequest.name)
}
inline std::string* CreateOrganizationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateOrganizationRequest.name)
  return _s;
}
inline const std::string& CreateOrganizationRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateOrganizationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateOrganizationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateOrganizationRequest.name)
}

// string image = 2 [json_name = "image"];
inline void CreateOrganizationRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& CreateOrganizationRequest::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateOrganizationRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateOrganizationRequest.image)
}
inline std::string* CreateOrganizationRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateOrganizationRequest.image)
  return _s;
}
inline const std::string& CreateOrganizationRequest::_internal_image() const {
  return image_.Get();
}
inline void CreateOrganizationRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateOrganizationRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateOrganizationRequest.image)
}

// string user_id = 3 [json_name = "userId"];
inline void CreateOrganizationRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& CreateOrganizationRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateOrganizationRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateOrganizationRequest.user_id)
}
inline std::string* CreateOrganizationRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateOrganizationRequest.user_id)
  return _s;
}
inline const std::string& CreateOrganizationRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void CreateOrganizationRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateOrganizationRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateOrganizationRequest.user_id)
}

// -------------------------------------------------------------------

// ListOrganizationRequest

// -------------------------------------------------------------------

// GetOneOrganizationRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void GetOneOrganizationRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneOrganizationRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneOrganizationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneOrganizationRequest.organization_id)
  return _internal_organization_id();
}
inline void GetOneOrganizationRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void GetOneOrganizationRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneOrganizationRequest.organization_id)
}

// -------------------------------------------------------------------

// UpdateOrganizationRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void UpdateOrganizationRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateOrganizationRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateOrganizationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateOrganizationRequest.organization_id)
  return _internal_organization_id();
}
inline void UpdateOrganizationRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void UpdateOrganizationRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateOrganizationRequest.organization_id)
}

// string name = 2 [json_name = "name"];
inline void UpdateOrganizationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateOrganizationRequest::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateOrganizationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateOrganizationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateOrganizationRequest.name)
}
inline std::string* UpdateOrganizationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateOrganizationRequest.name)
  return _s;
}
inline const std::string& UpdateOrganizationRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateOrganizationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationRequest::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateOrganizationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateOrganizationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateOrganizationRequest.name)
}

// string image = 4 [json_name = "image"];
inline void UpdateOrganizationRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& UpdateOrganizationRequest::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateOrganizationRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateOrganizationRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateOrganizationRequest.image)
}
inline std::string* UpdateOrganizationRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateOrganizationRequest.image)
  return _s;
}
inline const std::string& UpdateOrganizationRequest::_internal_image() const {
  return image_.Get();
}
inline void UpdateOrganizationRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationRequest::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationRequest::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateOrganizationRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateOrganizationRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateOrganizationRequest.image)
}

// -------------------------------------------------------------------

// DeleteOrganizationRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void DeleteOrganizationRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteOrganizationRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteOrganizationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteOrganizationRequest.organization_id)
  return _internal_organization_id();
}
inline void DeleteOrganizationRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void DeleteOrganizationRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteOrganizationRequest.organization_id)
}

// -------------------------------------------------------------------

// GetOneOrganizationResponse

// uint32 id = 1 [json_name = "id"];
inline void GetOneOrganizationResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneOrganizationResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneOrganizationResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneOrganizationResponse.id)
  return _internal_id();
}
inline void GetOneOrganizationResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneOrganizationResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneOrganizationResponse.id)
}

// string name = 2 [json_name = "name"];
inline void GetOneOrganizationResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOneOrganizationResponse::name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneOrganizationResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneOrganizationResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneOrganizationResponse.name)
}
inline std::string* GetOneOrganizationResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneOrganizationResponse.name)
  return _s;
}
inline const std::string& GetOneOrganizationResponse::_internal_name() const {
  return name_.Get();
}
inline void GetOneOrganizationResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneOrganizationResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneOrganizationResponse::release_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneOrganizationResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneOrganizationResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneOrganizationResponse.name)
}

// string image = 3 [json_name = "image"];
inline void GetOneOrganizationResponse::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& GetOneOrganizationResponse::image() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneOrganizationResponse.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneOrganizationResponse::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneOrganizationResponse.image)
}
inline std::string* GetOneOrganizationResponse::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneOrganizationResponse.image)
  return _s;
}
inline const std::string& GetOneOrganizationResponse::_internal_image() const {
  return image_.Get();
}
inline void GetOneOrganizationResponse::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneOrganizationResponse::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneOrganizationResponse::release_image() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneOrganizationResponse.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneOrganizationResponse::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneOrganizationResponse.image)
}

// repeated .accounts.v1alpha1.ProjectOrganization projects = 4 [json_name = "projects"];
inline int GetOneOrganizationResponse::_internal_projects_size() const {
  return projects_.size();
}
inline int GetOneOrganizationResponse::projects_size() const {
  return _internal_projects_size();
}
inline void GetOneOrganizationResponse::clear_projects() {
  projects_.Clear();
}
inline ::accounts::v1alpha1::ProjectOrganization* GetOneOrganizationResponse::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneOrganizationResponse.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::ProjectOrganization >*
GetOneOrganizationResponse::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneOrganizationResponse.projects)
  return &projects_;
}
inline const ::accounts::v1alpha1::ProjectOrganization& GetOneOrganizationResponse::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::accounts::v1alpha1::ProjectOrganization& GetOneOrganizationResponse::projects(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneOrganizationResponse.projects)
  return _internal_projects(index);
}
inline ::accounts::v1alpha1::ProjectOrganization* GetOneOrganizationResponse::_internal_add_projects() {
  return projects_.Add();
}
inline ::accounts::v1alpha1::ProjectOrganization* GetOneOrganizationResponse::add_projects() {
  ::accounts::v1alpha1::ProjectOrganization* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneOrganizationResponse.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::ProjectOrganization >&
GetOneOrganizationResponse::projects() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneOrganizationResponse.projects)
  return projects_;
}

// repeated .accounts.v1alpha1.Member menbers = 5 [json_name = "menbers"];
inline int GetOneOrganizationResponse::_internal_menbers_size() const {
  return menbers_.size();
}
inline int GetOneOrganizationResponse::menbers_size() const {
  return _internal_menbers_size();
}
inline void GetOneOrganizationResponse::clear_menbers() {
  menbers_.Clear();
}
inline ::accounts::v1alpha1::Member* GetOneOrganizationResponse::mutable_menbers(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneOrganizationResponse.menbers)
  return menbers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >*
GetOneOrganizationResponse::mutable_menbers() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneOrganizationResponse.menbers)
  return &menbers_;
}
inline const ::accounts::v1alpha1::Member& GetOneOrganizationResponse::_internal_menbers(int index) const {
  return menbers_.Get(index);
}
inline const ::accounts::v1alpha1::Member& GetOneOrganizationResponse::menbers(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneOrganizationResponse.menbers)
  return _internal_menbers(index);
}
inline ::accounts::v1alpha1::Member* GetOneOrganizationResponse::_internal_add_menbers() {
  return menbers_.Add();
}
inline ::accounts::v1alpha1::Member* GetOneOrganizationResponse::add_menbers() {
  ::accounts::v1alpha1::Member* _add = _internal_add_menbers();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneOrganizationResponse.menbers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Member >&
GetOneOrganizationResponse::menbers() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneOrganizationResponse.menbers)
  return menbers_;
}

// -------------------------------------------------------------------

// ListOrganizationResponse

// repeated .accounts.v1alpha1.Organization organizations = 1 [json_name = "organizations"];
inline int ListOrganizationResponse::_internal_organizations_size() const {
  return organizations_.size();
}
inline int ListOrganizationResponse::organizations_size() const {
  return _internal_organizations_size();
}
inline void ListOrganizationResponse::clear_organizations() {
  organizations_.Clear();
}
inline ::accounts::v1alpha1::Organization* ListOrganizationResponse::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.ListOrganizationResponse.organizations)
  return organizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
ListOrganizationResponse::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.ListOrganizationResponse.organizations)
  return &organizations_;
}
inline const ::accounts::v1alpha1::Organization& ListOrganizationResponse::_internal_organizations(int index) const {
  return organizations_.Get(index);
}
inline const ::accounts::v1alpha1::Organization& ListOrganizationResponse::organizations(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.ListOrganizationResponse.organizations)
  return _internal_organizations(index);
}
inline ::accounts::v1alpha1::Organization* ListOrganizationResponse::_internal_add_organizations() {
  return organizations_.Add();
}
inline ::accounts::v1alpha1::Organization* ListOrganizationResponse::add_organizations() {
  ::accounts::v1alpha1::Organization* _add = _internal_add_organizations();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.ListOrganizationResponse.organizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
ListOrganizationResponse::organizations() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.ListOrganizationResponse.organizations)
  return organizations_;
}

// -------------------------------------------------------------------

// CreateOrganizationResponse

// string msg = 1 [json_name = "msg"];
inline void CreateOrganizationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateOrganizationResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateOrganizationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateOrganizationResponse.msg)
}
inline std::string* CreateOrganizationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateOrganizationResponse.msg)
  return _s;
}
inline const std::string& CreateOrganizationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateOrganizationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateOrganizationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateOrganizationResponse.msg)
}

// string role_id_organization = 2 [json_name = "roleIdOrganization"];
inline void CreateOrganizationResponse::clear_role_id_organization() {
  role_id_organization_.ClearToEmpty();
}
inline const std::string& CreateOrganizationResponse::role_id_organization() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateOrganizationResponse.role_id_organization)
  return _internal_role_id_organization();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationResponse::set_role_id_organization(ArgT0&& arg0, ArgT... args) {
 
 role_id_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateOrganizationResponse.role_id_organization)
}
inline std::string* CreateOrganizationResponse::mutable_role_id_organization() {
  std::string* _s = _internal_mutable_role_id_organization();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateOrganizationResponse.role_id_organization)
  return _s;
}
inline const std::string& CreateOrganizationResponse::_internal_role_id_organization() const {
  return role_id_organization_.Get();
}
inline void CreateOrganizationResponse::_internal_set_role_id_organization(const std::string& value) {
  
  role_id_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::_internal_mutable_role_id_organization() {
  
  return role_id_organization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::release_role_id_organization() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateOrganizationResponse.role_id_organization)
  return role_id_organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationResponse::set_allocated_role_id_organization(std::string* role_id_organization) {
  if (role_id_organization != nullptr) {
    
  } else {
    
  }
  role_id_organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_id_organization,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateOrganizationResponse.role_id_organization)
}

// string error = 3 [json_name = "error"];
inline void CreateOrganizationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateOrganizationResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.CreateOrganizationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.CreateOrganizationResponse.error)
}
inline std::string* CreateOrganizationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.CreateOrganizationResponse.error)
  return _s;
}
inline const std::string& CreateOrganizationResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateOrganizationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.CreateOrganizationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.CreateOrganizationResponse.error)
}

// -------------------------------------------------------------------

// UpdateOrganizationResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateOrganizationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateOrganizationResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateOrganizationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateOrganizationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateOrganizationResponse.msg)
}
inline std::string* UpdateOrganizationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateOrganizationResponse.msg)
  return _s;
}
inline const std::string& UpdateOrganizationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateOrganizationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateOrganizationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateOrganizationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateOrganizationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateOrganizationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateOrganizationResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.UpdateOrganizationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateOrganizationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.UpdateOrganizationResponse.error)
}
inline std::string* UpdateOrganizationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.UpdateOrganizationResponse.error)
  return _s;
}
inline const std::string& UpdateOrganizationResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateOrganizationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.UpdateOrganizationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateOrganizationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.UpdateOrganizationResponse.error)
}

// -------------------------------------------------------------------

// DeleteOrganizationResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteOrganizationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteOrganizationResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteOrganizationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteOrganizationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteOrganizationResponse.msg)
}
inline std::string* DeleteOrganizationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteOrganizationResponse.msg)
  return _s;
}
inline const std::string& DeleteOrganizationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteOrganizationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteOrganizationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteOrganizationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteOrganizationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteOrganizationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteOrganizationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteOrganizationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteOrganizationResponse::error() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.DeleteOrganizationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteOrganizationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.DeleteOrganizationResponse.error)
}
inline std::string* DeleteOrganizationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.DeleteOrganizationResponse.error)
  return _s;
}
inline const std::string& DeleteOrganizationResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteOrganizationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteOrganizationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteOrganizationResponse::release_error() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.DeleteOrganizationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteOrganizationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.DeleteOrganizationResponse.error)
}

// -------------------------------------------------------------------

// GetListUserDexRequest

// -------------------------------------------------------------------

// GetListUserDexResponse

// repeated .accounts.v1alpha1.UsersDex users_dex = 1 [json_name = "usersDex"];
inline int GetListUserDexResponse::_internal_users_dex_size() const {
  return users_dex_.size();
}
inline int GetListUserDexResponse::users_dex_size() const {
  return _internal_users_dex_size();
}
inline void GetListUserDexResponse::clear_users_dex() {
  users_dex_.Clear();
}
inline ::accounts::v1alpha1::UsersDex* GetListUserDexResponse::mutable_users_dex(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetListUserDexResponse.users_dex)
  return users_dex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UsersDex >*
GetListUserDexResponse::mutable_users_dex() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetListUserDexResponse.users_dex)
  return &users_dex_;
}
inline const ::accounts::v1alpha1::UsersDex& GetListUserDexResponse::_internal_users_dex(int index) const {
  return users_dex_.Get(index);
}
inline const ::accounts::v1alpha1::UsersDex& GetListUserDexResponse::users_dex(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetListUserDexResponse.users_dex)
  return _internal_users_dex(index);
}
inline ::accounts::v1alpha1::UsersDex* GetListUserDexResponse::_internal_add_users_dex() {
  return users_dex_.Add();
}
inline ::accounts::v1alpha1::UsersDex* GetListUserDexResponse::add_users_dex() {
  ::accounts::v1alpha1::UsersDex* _add = _internal_add_users_dex();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetListUserDexResponse.users_dex)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::UsersDex >&
GetListUserDexResponse::users_dex() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetListUserDexResponse.users_dex)
  return users_dex_;
}

// -------------------------------------------------------------------

// GetOneUserDexRequest

// string user_id = 1 [json_name = "userId"];
inline void GetOneUserDexRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& GetOneUserDexRequest::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexRequest.user_id)
}
inline std::string* GetOneUserDexRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexRequest.user_id)
  return _s;
}
inline const std::string& GetOneUserDexRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetOneUserDexRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexRequest.user_id)
}

// .accounts.v1alpha1.CreateUserRequest user = 2 [json_name = "user"];
inline bool GetOneUserDexRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GetOneUserDexRequest::has_user() const {
  return _internal_has_user();
}
inline void GetOneUserDexRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::accounts::v1alpha1::CreateUserRequest& GetOneUserDexRequest::_internal_user() const {
  const ::accounts::v1alpha1::CreateUserRequest* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::accounts::v1alpha1::CreateUserRequest&>(
      ::accounts::v1alpha1::_CreateUserRequest_default_instance_);
}
inline const ::accounts::v1alpha1::CreateUserRequest& GetOneUserDexRequest::user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexRequest.user)
  return _internal_user();
}
inline void GetOneUserDexRequest::unsafe_arena_set_allocated_user(
    ::accounts::v1alpha1::CreateUserRequest* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accounts.v1alpha1.GetOneUserDexRequest.user)
}
inline ::accounts::v1alpha1::CreateUserRequest* GetOneUserDexRequest::release_user() {
  
  ::accounts::v1alpha1::CreateUserRequest* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accounts::v1alpha1::CreateUserRequest* GetOneUserDexRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexRequest.user)
  
  ::accounts::v1alpha1::CreateUserRequest* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::accounts::v1alpha1::CreateUserRequest* GetOneUserDexRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::accounts::v1alpha1::CreateUserRequest>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::accounts::v1alpha1::CreateUserRequest* GetOneUserDexRequest::mutable_user() {
  ::accounts::v1alpha1::CreateUserRequest* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexRequest.user)
  return _msg;
}
inline void GetOneUserDexRequest::set_allocated_user(::accounts::v1alpha1::CreateUserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::accounts::v1alpha1::CreateUserRequest>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexRequest.user)
}

// -------------------------------------------------------------------

// GetOneUserDexResponse

// uint32 id = 1 [json_name = "id"];
inline void GetOneUserDexResponse::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserDexResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOneUserDexResponse::id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.id)
  return _internal_id();
}
inline void GetOneUserDexResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetOneUserDexResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.id)
}

// string user_id = 2 [json_name = "userId"];
inline void GetOneUserDexResponse::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::user_id() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.user_id)
}
inline std::string* GetOneUserDexResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.user_id)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetOneUserDexResponse::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexResponse.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexResponse.user_id)
}

// string first_name = 3 [json_name = "firstName"];
inline void GetOneUserDexResponse::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::first_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.first_name)
}
inline std::string* GetOneUserDexResponse::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.first_name)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_first_name() const {
  return first_name_.Get();
}
inline void GetOneUserDexResponse::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_first_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexResponse.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexResponse.first_name)
}

// string last_name = 4 [json_name = "lastName"];
inline void GetOneUserDexResponse::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::last_name() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.last_name)
}
inline std::string* GetOneUserDexResponse::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.last_name)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_last_name() const {
  return last_name_.Get();
}
inline void GetOneUserDexResponse::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_last_name() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexResponse.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexResponse.last_name)
}

// string email = 5 [json_name = "email"];
inline void GetOneUserDexResponse::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::email() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.email)
}
inline std::string* GetOneUserDexResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.email)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_email() const {
  return email_.Get();
}
inline void GetOneUserDexResponse::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_email() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexResponse.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexResponse.email)
}

// bool is_active = 6 [json_name = "isActive"];
inline void GetOneUserDexResponse::clear_is_active() {
  is_active_ = false;
}
inline bool GetOneUserDexResponse::_internal_is_active() const {
  return is_active_;
}
inline bool GetOneUserDexResponse::is_active() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.is_active)
  return _internal_is_active();
}
inline void GetOneUserDexResponse::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void GetOneUserDexResponse::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.is_active)
}

// string created_at = 7 [json_name = "createdAt"];
inline void GetOneUserDexResponse::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::created_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.created_at)
}
inline std::string* GetOneUserDexResponse::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.created_at)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_created_at() const {
  return created_at_.Get();
}
inline void GetOneUserDexResponse::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_created_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexResponse.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexResponse.created_at)
}

// string updated_at = 8 [json_name = "updatedAt"];
inline void GetOneUserDexResponse::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.updated_at)
}
inline std::string* GetOneUserDexResponse::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.updated_at)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void GetOneUserDexResponse::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_updated_at() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexResponse.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexResponse.updated_at)
}

// repeated .accounts.v1alpha1.Rol roles = 9 [json_name = "roles"];
inline int GetOneUserDexResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int GetOneUserDexResponse::roles_size() const {
  return _internal_roles_size();
}
inline void GetOneUserDexResponse::clear_roles() {
  roles_.Clear();
}
inline ::accounts::v1alpha1::Rol* GetOneUserDexResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >*
GetOneUserDexResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneUserDexResponse.roles)
  return &roles_;
}
inline const ::accounts::v1alpha1::Rol& GetOneUserDexResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::accounts::v1alpha1::Rol& GetOneUserDexResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.roles)
  return _internal_roles(index);
}
inline ::accounts::v1alpha1::Rol* GetOneUserDexResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::accounts::v1alpha1::Rol* GetOneUserDexResponse::add_roles() {
  ::accounts::v1alpha1::Rol* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneUserDexResponse.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Rol >&
GetOneUserDexResponse::roles() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneUserDexResponse.roles)
  return roles_;
}

// repeated .accounts.v1alpha1.Permission permissions = 10 [json_name = "permissions"];
inline int GetOneUserDexResponse::_internal_permissions_size() const {
  return permissions_.size();
}
inline int GetOneUserDexResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline void GetOneUserDexResponse::clear_permissions() {
  permissions_.Clear();
}
inline ::accounts::v1alpha1::Permission* GetOneUserDexResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >*
GetOneUserDexResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneUserDexResponse.permissions)
  return &permissions_;
}
inline const ::accounts::v1alpha1::Permission& GetOneUserDexResponse::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::accounts::v1alpha1::Permission& GetOneUserDexResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.permissions)
  return _internal_permissions(index);
}
inline ::accounts::v1alpha1::Permission* GetOneUserDexResponse::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::accounts::v1alpha1::Permission* GetOneUserDexResponse::add_permissions() {
  ::accounts::v1alpha1::Permission* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneUserDexResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Permission >&
GetOneUserDexResponse::permissions() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneUserDexResponse.permissions)
  return permissions_;
}

// bool is_super_user = 11 [json_name = "isSuperUser"];
inline void GetOneUserDexResponse::clear_is_super_user() {
  is_super_user_ = false;
}
inline bool GetOneUserDexResponse::_internal_is_super_user() const {
  return is_super_user_;
}
inline bool GetOneUserDexResponse::is_super_user() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.is_super_user)
  return _internal_is_super_user();
}
inline void GetOneUserDexResponse::_internal_set_is_super_user(bool value) {
  
  is_super_user_ = value;
}
inline void GetOneUserDexResponse::set_is_super_user(bool value) {
  _internal_set_is_super_user(value);
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.is_super_user)
}

// repeated .accounts.v1alpha1.Organization organizations = 12 [json_name = "organizations"];
inline int GetOneUserDexResponse::_internal_organizations_size() const {
  return organizations_.size();
}
inline int GetOneUserDexResponse::organizations_size() const {
  return _internal_organizations_size();
}
inline void GetOneUserDexResponse::clear_organizations() {
  organizations_.Clear();
}
inline ::accounts::v1alpha1::Organization* GetOneUserDexResponse::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.organizations)
  return organizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >*
GetOneUserDexResponse::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:accounts.v1alpha1.GetOneUserDexResponse.organizations)
  return &organizations_;
}
inline const ::accounts::v1alpha1::Organization& GetOneUserDexResponse::_internal_organizations(int index) const {
  return organizations_.Get(index);
}
inline const ::accounts::v1alpha1::Organization& GetOneUserDexResponse::organizations(int index) const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.organizations)
  return _internal_organizations(index);
}
inline ::accounts::v1alpha1::Organization* GetOneUserDexResponse::_internal_add_organizations() {
  return organizations_.Add();
}
inline ::accounts::v1alpha1::Organization* GetOneUserDexResponse::add_organizations() {
  ::accounts::v1alpha1::Organization* _add = _internal_add_organizations();
  // @@protoc_insertion_point(field_add:accounts.v1alpha1.GetOneUserDexResponse.organizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accounts::v1alpha1::Organization >&
GetOneUserDexResponse::organizations() const {
  // @@protoc_insertion_point(field_list:accounts.v1alpha1.GetOneUserDexResponse.organizations)
  return organizations_;
}

// string msg = 13 [json_name = "msg"];
inline void GetOneUserDexResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& GetOneUserDexResponse::msg() const {
  // @@protoc_insertion_point(field_get:accounts.v1alpha1.GetOneUserDexResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneUserDexResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accounts.v1alpha1.GetOneUserDexResponse.msg)
}
inline std::string* GetOneUserDexResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:accounts.v1alpha1.GetOneUserDexResponse.msg)
  return _s;
}
inline const std::string& GetOneUserDexResponse::_internal_msg() const {
  return msg_.Get();
}
inline void GetOneUserDexResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneUserDexResponse::release_msg() {
  // @@protoc_insertion_point(field_release:accounts.v1alpha1.GetOneUserDexResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneUserDexResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accounts.v1alpha1.GetOneUserDexResponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace accounts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2fv1alpha1_2faccounts_2eproto
