// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/metrics/v1alpha1/metrics_api.proto

#include "performance/metrics/v1alpha1/metrics_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace performance {
namespace metrics {
namespace v1alpha1 {
constexpr Range::Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : date_from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timezone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RangeDefaultTypeInternal {
  constexpr RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDefaultTypeInternal _Range_default_instance_;
constexpr GetMetricsRequest::GetMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : containers_()
  , application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr)
  , interval_(0)

  , page_(0)
  , size_(0){}
struct GetMetricsRequestDefaultTypeInternal {
  constexpr GetMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMetricsRequestDefaultTypeInternal() {}
  union {
    GetMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
constexpr GetMetricsResponse::GetMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memory_()
  , cpu_(){}
struct GetMetricsResponseDefaultTypeInternal {
  constexpr GetMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMetricsResponseDefaultTypeInternal() {}
  union {
    GetMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMetricsResponseDefaultTypeInternal _GetMetricsResponse_default_instance_;
constexpr GetTektonMetricsRequest::GetTektonMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_pipeline_run_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr)
  , page_(0)
  , size_(0){}
struct GetTektonMetricsRequestDefaultTypeInternal {
  constexpr GetTektonMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTektonMetricsRequestDefaultTypeInternal() {}
  union {
    GetTektonMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTektonMetricsRequestDefaultTypeInternal _GetTektonMetricsRequest_default_instance_;
constexpr GetTektonMetricsResponse::GetTektonMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct GetTektonMetricsResponseDefaultTypeInternal {
  constexpr GetTektonMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTektonMetricsResponseDefaultTypeInternal() {}
  union {
    GetTektonMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTektonMetricsResponseDefaultTypeInternal _GetTektonMetricsResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::Range, date_from_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::Range, date_to_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::Range, timezone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, containers_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, interval_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, range_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, size_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, environment_id_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsRequest, runtime_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsResponse, memory_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetMetricsResponse, cpu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetTektonMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetTektonMetricsRequest, name_pipeline_run_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetTektonMetricsRequest, range_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetTektonMetricsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetTektonMetricsRequest, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetTektonMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::GetTektonMetricsResponse, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::performance::metrics::v1alpha1::Range)},
  { 8, -1, sizeof(::performance::metrics::v1alpha1::GetMetricsRequest)},
  { 23, -1, sizeof(::performance::metrics::v1alpha1::GetMetricsResponse)},
  { 30, -1, sizeof(::performance::metrics::v1alpha1::GetTektonMetricsRequest)},
  { 39, -1, sizeof(::performance::metrics::v1alpha1::GetTektonMetricsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_GetMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_GetMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_GetTektonMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_GetTektonMetricsResponse_default_instance_),
};

const char descriptor_table_protodef_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.performance/metrics/v1alpha1/metrics_a"
  "pi.proto\022\034performance.metrics.v1alpha1\032*"
  "performance/metrics/v1alpha1/metrics.pro"
  "to\"Y\n\005Range\022\033\n\tdate_from\030\001 \001(\tR\010dateFrom"
  "\022\027\n\007date_to\030\002 \001(\tR\006dateTo\022\032\n\010timezone\030\003 "
  "\001(\tR\010timezone\"\226\003\n\021GetMetricsRequest\022\036\n\nc"
  "ontainers\030\002 \003(\tR\ncontainers\022I\n\010interval\030"
  "\003 \001(\0162-.performance.metrics.v1alpha1.Met"
  "ricsIntervalR\010interval\0229\n\005range\030\004 \001(\0132#."
  "performance.metrics.v1alpha1.RangeR\005rang"
  "e\022\022\n\004page\030\005 \001(\005R\004page\022\022\n\004size\030\006 \001(\005R\004siz"
  "e\022%\n\016application_id\030\007 \001(\tR\rapplicationId"
  "\022%\n\016environment_id\030\010 \001(\tR\renvironmentId\022"
  "\'\n\017organization_id\030\t \001(\tR\016organizationId"
  "\022\035\n\nproject_id\030\n \001(\tR\tprojectId\022\035\n\nrunti"
  "me_id\030\013 \001(\tR\truntimeId\"\222\001\n\022GetMetricsRes"
  "ponse\022@\n\006memory\030\001 \003(\0132(.performance.metr"
  "ics.v1alpha1.MetricItemR\006memory\022:\n\003cpu\030\002"
  " \003(\0132(.performance.metrics.v1alpha1.Metr"
  "icItemR\003cpu\"\250\001\n\027GetTektonMetricsRequest\022"
  "*\n\021name_pipeline_run\030\001 \001(\tR\017namePipeline"
  "Run\0229\n\005range\030\002 \001(\0132#.performance.metrics"
  ".v1alpha1.RangeR\005range\022\022\n\004page\030\003 \001(\005R\004pa"
  "ge\022\022\n\004size\030\004 \001(\005R\004size\"d\n\030GetTektonMetri"
  "csResponse\022H\n\007results\030\001 \003(\0132..performanc"
  "e.metrics.v1alpha1.TektonMetricItemR\007res"
  "ults*\251\002\n\017MetricsInterval\022 \n\034METRICS_INTE"
  "RVAL_UNSPECIFIED\020\000\022\035\n\031METRICS_INTERVAL_1"
  "_MUNITE\020\001\022\036\n\032METRICS_INTERVAL_5_MUNITES\020"
  "\002\022\037\n\033METRICS_INTERVAL_15_MUNITES\020\003\022\037\n\033ME"
  "TRICS_INTERVAL_30_MUNITES\020\004\022\033\n\027METRICS_I"
  "NTERVAL_1_HOUR\020\005\022\035\n\031METRICS_INTERVAL_12_"
  "HOURS\020\006\022\032\n\026METRICS_INTERVAL_1_DAY\020\007\022\033\n\027M"
  "ETRICS_INTERVAL_1_WEEK\020\0102\214\002\n\021MetricsAPIS"
  "ervice\022q\n\nGetMetrics\022/.performance.metri"
  "cs.v1alpha1.GetMetricsRequest\0320.performa"
  "nce.metrics.v1alpha1.GetMetricsResponse\""
  "\000\022\203\001\n\020GetTektonMetrics\0225.performance.met"
  "rics.v1alpha1.GetTektonMetricsRequest\0326."
  "performance.metrics.v1alpha1.GetTektonMe"
  "tricsResponse\"\000B\260\001\n&io.cuemby.performanc"
  "e.metrics.v1alpha1B\017MetricsApiProtoP\001Z/g"
  "ithub.com/performance-grpc-sdk/metricsv1"
  "alpha1\242\002\003PFX\252\002\034Performance.Metrics.V1Alp"
  "ha1\312\002\034Performance\\Metrics\\V1Alpha1b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_deps[1] = {
  &::descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto = {
  false, false, 1802, descriptor_table_protodef_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto, "performance/metrics/v1alpha1/metrics_api.proto", 
  &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_once, descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto::offsets,
  file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto, file_level_enum_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto, file_level_service_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_getter() {
  return &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto(&descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto);
namespace performance {
namespace metrics {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricsInterval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto);
  return file_level_enum_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[0];
}
bool MetricsInterval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Range::_Internal {
 public:
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_from().empty()) {
    date_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_from(), 
      GetArenaForAllocation());
  }
  date_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_to().empty()) {
    date_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_to(), 
      GetArenaForAllocation());
  }
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timezone().empty()) {
    timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timezone(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.Range)
}

inline void Range::SharedCtor() {
date_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  date_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_from_.ClearToEmpty();
  date_to_.ClearToEmpty();
  timezone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string date_from = 1 [json_name = "dateFrom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.Range.date_from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_to = 2 [json_name = "dateTo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.Range.date_to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timezone = 3 [json_name = "timezone"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.Range.timezone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date_from = 1 [json_name = "dateFrom"];
  if (!this->_internal_date_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_from().data(), static_cast<int>(this->_internal_date_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.Range.date_from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date_from(), target);
  }

  // string date_to = 2 [json_name = "dateTo"];
  if (!this->_internal_date_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_to().data(), static_cast<int>(this->_internal_date_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.Range.date_to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date_to(), target);
  }

  // string timezone = 3 [json_name = "timezone"];
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.Range.timezone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timezone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date_from = 1 [json_name = "dateFrom"];
  if (!this->_internal_date_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_from());
  }

  // string date_to = 2 [json_name = "dateTo"];
  if (!this->_internal_date_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_to());
  }

  // string timezone = 3 [json_name = "timezone"];
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Range::GetClassData() const { return &_class_data_; }

void Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Range *>(to)->MergeFrom(
      static_cast<const Range &>(from));
}


void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_date_from().empty()) {
    _internal_set_date_from(from._internal_date_from());
  }
  if (!from._internal_date_to().empty()) {
    _internal_set_date_to(from._internal_date_to());
  }
  if (!from._internal_timezone().empty()) {
    _internal_set_timezone(from._internal_timezone());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_from_, GetArenaForAllocation(),
      &other->date_from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_to_, GetArenaForAllocation(),
      &other->date_to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timezone_, GetArenaForAllocation(),
      &other->timezone_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[0]);
}

// ===================================================================

class GetMetricsRequest::_Internal {
 public:
  static const ::performance::metrics::v1alpha1::Range& range(const GetMetricsRequest* msg);
};

const ::performance::metrics::v1alpha1::Range&
GetMetricsRequest::_Internal::range(const GetMetricsRequest* msg) {
  return *msg->range_;
}
GetMetricsRequest::GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  containers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.GetMetricsRequest)
}
GetMetricsRequest::GetMetricsRequest(const GetMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_id().empty()) {
    environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_id().empty()) {
    runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    range_ = new ::performance::metrics::v1alpha1::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.GetMetricsRequest)
}

inline void GetMetricsRequest::SharedCtor() {
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&range_)) + sizeof(size_));
}

GetMetricsRequest::~GetMetricsRequest() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.GetMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void GetMetricsRequest::ArenaDtor(void* object) {
  GetMetricsRequest* _this = reinterpret_cast< GetMetricsRequest* >(object);
  (void)_this;
}
void GetMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.GetMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  application_id_.ClearToEmpty();
  environment_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  runtime_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string containers = 2 [json_name = "containers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_containers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.GetMetricsRequest.containers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .performance.metrics.v1alpha1.MetricsInterval interval = 3 [json_name = "interval"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::performance::metrics::v1alpha1::MetricsInterval>(val));
        } else goto handle_unusual;
        continue;
      // .performance.metrics.v1alpha1.Range range = 4 [json_name = "range"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page = 5 [json_name = "page"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 6 [json_name = "size"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 7 [json_name = "applicationId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.GetMetricsRequest.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_id = 8 [json_name = "environmentId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_environment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.GetMetricsRequest.environment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 9 [json_name = "organizationId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.GetMetricsRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 10 [json_name = "projectId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.GetMetricsRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_id = 11 [json_name = "runtimeId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_runtime_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.GetMetricsRequest.runtime_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.GetMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string containers = 2 [json_name = "containers"];
  for (int i = 0, n = this->_internal_containers_size(); i < n; i++) {
    const auto& s = this->_internal_containers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.GetMetricsRequest.containers");
    target = stream->WriteString(2, s, target);
  }

  // .performance.metrics.v1alpha1.MetricsInterval interval = 3 [json_name = "interval"];
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_interval(), target);
  }

  // .performance.metrics.v1alpha1.Range range = 4 [json_name = "range"];
  if (this->_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::range(this), target, stream);
  }

  // int32 page = 5 [json_name = "page"];
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_page(), target);
  }

  // int32 size = 6 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_size(), target);
  }

  // string application_id = 7 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.GetMetricsRequest.application_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_application_id(), target);
  }

  // string environment_id = 8 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_id().data(), static_cast<int>(this->_internal_environment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.GetMetricsRequest.environment_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_environment_id(), target);
  }

  // string organization_id = 9 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.GetMetricsRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_organization_id(), target);
  }

  // string project_id = 10 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.GetMetricsRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_project_id(), target);
  }

  // string runtime_id = 11 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_id().data(), static_cast<int>(this->_internal_runtime_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.GetMetricsRequest.runtime_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_runtime_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.GetMetricsRequest)
  return target;
}

size_t GetMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.GetMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string containers = 2 [json_name = "containers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(containers_.size());
  for (int i = 0, n = containers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      containers_.Get(i));
  }

  // string application_id = 7 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string environment_id = 8 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_id());
  }

  // string organization_id = 9 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string project_id = 10 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string runtime_id = 11 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_id());
  }

  // .performance.metrics.v1alpha1.Range range = 4 [json_name = "range"];
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // .performance.metrics.v1alpha1.MetricsInterval interval = 3 [json_name = "interval"];
  if (this->_internal_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  // int32 page = 5 [json_name = "page"];
  if (this->_internal_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  // int32 size = 6 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMetricsRequest::GetClassData() const { return &_class_data_; }

void GetMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetMetricsRequest *>(to)->MergeFrom(
      static_cast<const GetMetricsRequest &>(from));
}


void GetMetricsRequest::MergeFrom(const GetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.GetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_environment_id().empty()) {
    _internal_set_environment_id(from._internal_environment_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_runtime_id().empty()) {
    _internal_set_runtime_id(from._internal_runtime_id());
  }
  if (from._internal_has_range()) {
    _internal_mutable_range()->::performance::metrics::v1alpha1::Range::MergeFrom(from._internal_range());
  }
  if (from._internal_interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMetricsRequest::CopyFrom(const GetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.GetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsRequest::IsInitialized() const {
  return true;
}

void GetMetricsRequest::InternalSwap(GetMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, GetArenaForAllocation(),
      &other->application_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_id_, GetArenaForAllocation(),
      &other->environment_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_id_, GetArenaForAllocation(),
      &other->runtime_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMetricsRequest, size_)
      + sizeof(GetMetricsRequest::size_)
      - PROTOBUF_FIELD_OFFSET(GetMetricsRequest, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[1]);
}

// ===================================================================

class GetMetricsResponse::_Internal {
 public:
};

void GetMetricsResponse::clear_memory() {
  memory_.Clear();
}
void GetMetricsResponse::clear_cpu() {
  cpu_.Clear();
}
GetMetricsResponse::GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  memory_(arena),
  cpu_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.GetMetricsResponse)
}
GetMetricsResponse::GetMetricsResponse(const GetMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      memory_(from.memory_),
      cpu_(from.cpu_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.GetMetricsResponse)
}

inline void GetMetricsResponse::SharedCtor() {
}

GetMetricsResponse::~GetMetricsResponse() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.GetMetricsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMetricsResponse::ArenaDtor(void* object) {
  GetMetricsResponse* _this = reinterpret_cast< GetMetricsResponse* >(object);
  (void)_this;
}
void GetMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.GetMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memory_.Clear();
  cpu_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .performance.metrics.v1alpha1.MetricItem memory = 1 [json_name = "memory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .performance.metrics.v1alpha1.MetricItem cpu = 2 [json_name = "cpu"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.GetMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .performance.metrics.v1alpha1.MetricItem memory = 1 [json_name = "memory"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_memory(i), target, stream);
  }

  // repeated .performance.metrics.v1alpha1.MetricItem cpu = 2 [json_name = "cpu"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cpu_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cpu(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.GetMetricsResponse)
  return target;
}

size_t GetMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.GetMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .performance.metrics.v1alpha1.MetricItem memory = 1 [json_name = "memory"];
  total_size += 1UL * this->_internal_memory_size();
  for (const auto& msg : this->memory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .performance.metrics.v1alpha1.MetricItem cpu = 2 [json_name = "cpu"];
  total_size += 1UL * this->_internal_cpu_size();
  for (const auto& msg : this->cpu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMetricsResponse::GetClassData() const { return &_class_data_; }

void GetMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetMetricsResponse *>(to)->MergeFrom(
      static_cast<const GetMetricsResponse &>(from));
}


void GetMetricsResponse::MergeFrom(const GetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.GetMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memory_.MergeFrom(from.memory_);
  cpu_.MergeFrom(from.cpu_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMetricsResponse::CopyFrom(const GetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.GetMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsResponse::IsInitialized() const {
  return true;
}

void GetMetricsResponse::InternalSwap(GetMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  memory_.InternalSwap(&other->memory_);
  cpu_.InternalSwap(&other->cpu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[2]);
}

// ===================================================================

class GetTektonMetricsRequest::_Internal {
 public:
  static const ::performance::metrics::v1alpha1::Range& range(const GetTektonMetricsRequest* msg);
};

const ::performance::metrics::v1alpha1::Range&
GetTektonMetricsRequest::_Internal::range(const GetTektonMetricsRequest* msg) {
  return *msg->range_;
}
GetTektonMetricsRequest::GetTektonMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.GetTektonMetricsRequest)
}
GetTektonMetricsRequest::GetTektonMetricsRequest(const GetTektonMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_pipeline_run_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_pipeline_run().empty()) {
    name_pipeline_run_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_pipeline_run(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    range_ = new ::performance::metrics::v1alpha1::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&page_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.GetTektonMetricsRequest)
}

inline void GetTektonMetricsRequest::SharedCtor() {
name_pipeline_run_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&range_)) + sizeof(size_));
}

GetTektonMetricsRequest::~GetTektonMetricsRequest() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.GetTektonMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTektonMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_pipeline_run_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void GetTektonMetricsRequest::ArenaDtor(void* object) {
  GetTektonMetricsRequest* _this = reinterpret_cast< GetTektonMetricsRequest* >(object);
  (void)_this;
}
void GetTektonMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTektonMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTektonMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.GetTektonMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_pipeline_run_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&page_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTektonMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name_pipeline_run = 1 [json_name = "namePipelineRun"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_pipeline_run();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.GetTektonMetricsRequest.name_pipeline_run"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .performance.metrics.v1alpha1.Range range = 2 [json_name = "range"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page = 3 [json_name = "page"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 4 [json_name = "size"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTektonMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.GetTektonMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_pipeline_run = 1 [json_name = "namePipelineRun"];
  if (!this->_internal_name_pipeline_run().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_pipeline_run().data(), static_cast<int>(this->_internal_name_pipeline_run().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.GetTektonMetricsRequest.name_pipeline_run");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_pipeline_run(), target);
  }

  // .performance.metrics.v1alpha1.Range range = 2 [json_name = "range"];
  if (this->_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // int32 page = 3 [json_name = "page"];
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_page(), target);
  }

  // int32 size = 4 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.GetTektonMetricsRequest)
  return target;
}

size_t GetTektonMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.GetTektonMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_pipeline_run = 1 [json_name = "namePipelineRun"];
  if (!this->_internal_name_pipeline_run().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_pipeline_run());
  }

  // .performance.metrics.v1alpha1.Range range = 2 [json_name = "range"];
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // int32 page = 3 [json_name = "page"];
  if (this->_internal_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  // int32 size = 4 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTektonMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTektonMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTektonMetricsRequest::GetClassData() const { return &_class_data_; }

void GetTektonMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTektonMetricsRequest *>(to)->MergeFrom(
      static_cast<const GetTektonMetricsRequest &>(from));
}


void GetTektonMetricsRequest::MergeFrom(const GetTektonMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.GetTektonMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name_pipeline_run().empty()) {
    _internal_set_name_pipeline_run(from._internal_name_pipeline_run());
  }
  if (from._internal_has_range()) {
    _internal_mutable_range()->::performance::metrics::v1alpha1::Range::MergeFrom(from._internal_range());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTektonMetricsRequest::CopyFrom(const GetTektonMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.GetTektonMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTektonMetricsRequest::IsInitialized() const {
  return true;
}

void GetTektonMetricsRequest::InternalSwap(GetTektonMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_pipeline_run_, GetArenaForAllocation(),
      &other->name_pipeline_run_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTektonMetricsRequest, size_)
      + sizeof(GetTektonMetricsRequest::size_)
      - PROTOBUF_FIELD_OFFSET(GetTektonMetricsRequest, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTektonMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[3]);
}

// ===================================================================

class GetTektonMetricsResponse::_Internal {
 public:
};

void GetTektonMetricsResponse::clear_results() {
  results_.Clear();
}
GetTektonMetricsResponse::GetTektonMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.GetTektonMetricsResponse)
}
GetTektonMetricsResponse::GetTektonMetricsResponse(const GetTektonMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.GetTektonMetricsResponse)
}

inline void GetTektonMetricsResponse::SharedCtor() {
}

GetTektonMetricsResponse::~GetTektonMetricsResponse() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.GetTektonMetricsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTektonMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTektonMetricsResponse::ArenaDtor(void* object) {
  GetTektonMetricsResponse* _this = reinterpret_cast< GetTektonMetricsResponse* >(object);
  (void)_this;
}
void GetTektonMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTektonMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTektonMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.GetTektonMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTektonMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .performance.metrics.v1alpha1.TektonMetricItem results = 1 [json_name = "results"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTektonMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.GetTektonMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .performance.metrics.v1alpha1.TektonMetricItem results = 1 [json_name = "results"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.GetTektonMetricsResponse)
  return target;
}

size_t GetTektonMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.GetTektonMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .performance.metrics.v1alpha1.TektonMetricItem results = 1 [json_name = "results"];
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTektonMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTektonMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTektonMetricsResponse::GetClassData() const { return &_class_data_; }

void GetTektonMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTektonMetricsResponse *>(to)->MergeFrom(
      static_cast<const GetTektonMetricsResponse &>(from));
}


void GetTektonMetricsResponse::MergeFrom(const GetTektonMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.GetTektonMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTektonMetricsResponse::CopyFrom(const GetTektonMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.GetTektonMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTektonMetricsResponse::IsInitialized() const {
  return true;
}

void GetTektonMetricsResponse::InternalSwap(GetTektonMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTektonMetricsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::Range* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::GetMetricsRequest* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::GetMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::GetMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::GetMetricsResponse* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::GetMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::GetMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::GetTektonMetricsRequest* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::GetTektonMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::GetTektonMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::GetTektonMetricsResponse* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::GetTektonMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::GetTektonMetricsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
