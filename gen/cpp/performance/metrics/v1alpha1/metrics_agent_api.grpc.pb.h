// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: performance/metrics/v1alpha1/metrics_agent_api.proto
#ifndef GRPC_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto__INCLUDED
#define GRPC_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto__INCLUDED

#include "performance/metrics/v1alpha1/metrics_agent_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace performance {
namespace metrics {
namespace v1alpha1 {

class MetricsAgentAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "performance.metrics.v1alpha1.MetricsAgentAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>> SaveMetrics(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>>(SaveMetricsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>> AsyncSaveMetrics(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>>(AsyncSaveMetricsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>> PrepareAsyncSaveMetrics(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>>(PrepareAsyncSaveMetricsRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* SaveMetricsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* AsyncSaveMetricsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* PrepareAsyncSaveMetricsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>> SaveMetrics(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>>(SaveMetricsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>> AsyncSaveMetrics(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>>(AsyncSaveMetricsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>> PrepareAsyncSaveMetrics(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>>(PrepareAsyncSaveMetricsRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* SaveMetricsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* AsyncSaveMetricsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* PrepareAsyncSaveMetricsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SaveMetrics_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SaveMetrics(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsResponse, ::performance::metrics::v1alpha1::SaveMetricsRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveMetrics() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SaveMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveMetrics(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsResponse, ::performance::metrics::v1alpha1::SaveMetricsRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveMetrics(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsResponse, ::performance::metrics::v1alpha1::SaveMetricsRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SaveMetrics<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SaveMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveMetrics() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SaveMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveMetrics(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsResponse, ::performance::metrics::v1alpha1::SaveMetricsRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SaveMetrics() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SaveMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveMetrics(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsResponse, ::performance::metrics::v1alpha1::SaveMetricsRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveMetrics(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance


#endif  // GRPC_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto__INCLUDED
