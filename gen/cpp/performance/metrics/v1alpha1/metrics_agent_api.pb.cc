// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/metrics/v1alpha1/metrics_agent_api.proto

#include "performance/metrics/v1alpha1/metrics_agent_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace performance {
namespace metrics {
namespace v1alpha1 {
constexpr SaveMetricsRequest_MetaEntry_DoNotUse::SaveMetricsRequest_MetaEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SaveMetricsRequest_MetaEntry_DoNotUseDefaultTypeInternal {
  constexpr SaveMetricsRequest_MetaEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveMetricsRequest_MetaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SaveMetricsRequest_MetaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveMetricsRequest_MetaEntry_DoNotUseDefaultTypeInternal _SaveMetricsRequest_MetaEntry_DoNotUse_default_instance_;
constexpr SaveMetricsRequest::SaveMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metrics_()
  , cluster_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SaveMetricsRequestDefaultTypeInternal {
  constexpr SaveMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveMetricsRequestDefaultTypeInternal() {}
  union {
    SaveMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveMetricsRequestDefaultTypeInternal _SaveMetricsRequest_default_instance_;
constexpr SaveMetricsResponse::SaveMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct SaveMetricsResponseDefaultTypeInternal {
  constexpr SaveMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveMetricsResponseDefaultTypeInternal() {}
  union {
    SaveMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveMetricsResponseDefaultTypeInternal _SaveMetricsResponse_default_instance_;
constexpr PodMetric_AnnotationsEntry_DoNotUse::PodMetric_AnnotationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PodMetric_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  constexpr PodMetric_AnnotationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PodMetric_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PodMetric_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PodMetric_AnnotationsEntry_DoNotUseDefaultTypeInternal _PodMetric_AnnotationsEntry_DoNotUse_default_instance_;
constexpr PodMetric_LabelsEntry_DoNotUse::PodMetric_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PodMetric_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr PodMetric_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PodMetric_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PodMetric_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PodMetric_LabelsEntry_DoNotUseDefaultTypeInternal _PodMetric_LabelsEntry_DoNotUse_default_instance_;
constexpr PodMetric::PodMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volumes_()
  , annotations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_kubernetes_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_kind_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_api_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , container_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cluster_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , internal_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kubernetes_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , restart_count_(0)
  , is_controlled_(false)
  , is_ready_(false)
  , usage_cpu_(int64_t{0})
  , usage_memory_(int64_t{0})
  , usage_storage_(int64_t{0})
  , request_cpu_(int64_t{0})
  , request_memory_(int64_t{0})
  , limit_cpu_(int64_t{0})
  , limit_memory_(int64_t{0})
  , allocatable_storage_ephemeral_(int64_t{0})
  , allocatable_storage_(int64_t{0}){}
struct PodMetricDefaultTypeInternal {
  constexpr PodMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PodMetricDefaultTypeInternal() {}
  union {
    PodMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PodMetricDefaultTypeInternal _PodMetric_default_instance_;
}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest, cluster_name_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsRequest, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::SaveMetricsResponse, success_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, namespace__),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, name_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, owner_name_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, owner_kubernetes_uid_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, owner_kind_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, owner_api_version_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, container_name_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, status_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, is_controlled_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, restart_count_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, is_ready_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, cluster_name_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, usage_cpu_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, usage_memory_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, usage_storage_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, request_cpu_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, request_memory_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, limit_cpu_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, limit_memory_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, volumes_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, annotations_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, labels_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, external_ip_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, internal_ip_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, allocatable_storage_ephemeral_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, allocatable_storage_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, node_name_),
  PROTOBUF_FIELD_OFFSET(::performance::metrics::v1alpha1::PodMetric, kubernetes_uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse)},
  { 9, -1, sizeof(::performance::metrics::v1alpha1::SaveMetricsRequest)},
  { 17, -1, sizeof(::performance::metrics::v1alpha1::SaveMetricsResponse)},
  { 23, 30, sizeof(::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse)},
  { 32, 39, sizeof(::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse)},
  { 41, -1, sizeof(::performance::metrics::v1alpha1::PodMetric)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_SaveMetricsRequest_MetaEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_SaveMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_SaveMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_PodMetric_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_PodMetric_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::metrics::v1alpha1::_PodMetric_default_instance_),
};

const char descriptor_table_protodef_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4performance/metrics/v1alpha1/metrics_a"
  "gent_api.proto\022\034performance.metrics.v1al"
  "pha1\032*performance/metrics/v1alpha1/metri"
  "cs.proto\"\203\002\n\022SaveMetricsRequest\022!\n\014clust"
  "er_name\030\001 \001(\tR\013clusterName\022N\n\004meta\030\002 \003(\013"
  "2:.performance.metrics.v1alpha1.SaveMetr"
  "icsRequest.MetaEntryR\004meta\022A\n\007metrics\030\003 "
  "\003(\0132\'.performance.metrics.v1alpha1.PodMe"
  "tricR\007metrics\0327\n\tMetaEntry\022\020\n\003key\030\001 \001(\tR"
  "\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"/\n\023SaveMe"
  "tricsResponse\022\030\n\007success\030\001 \001(\010R\007success\""
  "\306\t\n\tPodMetric\022\034\n\tnamespace\030\001 \001(\tR\tnamesp"
  "ace\022\022\n\004name\030\002 \001(\tR\004name\022\035\n\nowner_name\030\003 "
  "\001(\tR\townerName\0220\n\024owner_kubernetes_uid\030\004"
  " \001(\tR\022ownerKubernetesUid\022\035\n\nowner_kind\030\005"
  " \001(\tR\townerKind\022*\n\021owner_api_version\030\006 \001"
  "(\tR\017ownerApiVersion\022%\n\016container_name\030\007 "
  "\001(\tR\rcontainerName\022\026\n\006status\030\010 \001(\tR\006stat"
  "us\022#\n\ris_controlled\030\t \001(\010R\014isControlled\022"
  "#\n\rrestart_count\030\n \001(\005R\014restartCount\022\031\n\010"
  "is_ready\030\013 \001(\010R\007isReady\022!\n\014cluster_name\030"
  "\014 \001(\tR\013clusterName\022\033\n\tusage_cpu\030\r \001(\003R\010u"
  "sageCpu\022!\n\014usage_memory\030\016 \001(\003R\013usageMemo"
  "ry\022#\n\rusage_storage\030\017 \001(\003R\014usageStorage\022"
  "\037\n\013request_cpu\030\020 \001(\003R\nrequestCpu\022%\n\016requ"
  "est_memory\030\021 \001(\003R\rrequestMemory\022\033\n\tlimit"
  "_cpu\030\022 \001(\003R\010limitCpu\022!\n\014limit_memory\030\023 \001"
  "(\003R\013limitMemory\022\030\n\007volumes\030\024 \003(\tR\007volume"
  "s\022Z\n\013annotations\030\025 \003(\01328.performance.met"
  "rics.v1alpha1.PodMetric.AnnotationsEntry"
  "R\013annotations\022K\n\006labels\030\026 \003(\01323.performa"
  "nce.metrics.v1alpha1.PodMetric.LabelsEnt"
  "ryR\006labels\022\037\n\013external_ip\030\027 \001(\tR\nexterna"
  "lIp\022\037\n\013internal_ip\030\030 \001(\tR\ninternalIp\022B\n\035"
  "allocatable_storage_ephemeral\030\031 \001(\003R\033all"
  "ocatableStorageEphemeral\022/\n\023allocatable_"
  "storage\030\032 \001(\003R\022allocatableStorage\022\033\n\tnod"
  "e_name\030\033 \001(\tR\010nodeName\022%\n\016kubernetes_uid"
  "\030\034 \001(\tR\rkubernetesUid\032>\n\020AnnotationsEntr"
  "y\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005valu"
  "e:\0028\001\0329\n\013LabelsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024"
  "\n\005value\030\002 \001(\tR\005value:\0028\0012\222\001\n\026MetricsAgen"
  "tAPIService\022x\n\013SaveMetrics\0220.performance"
  ".metrics.v1alpha1.SaveMetricsRequest\0321.p"
  "erformance.metrics.v1alpha1.SaveMetricsR"
  "esponse\"\000(\0010\001B\265\001\n&io.cuemby.performance."
  "metrics.v1alpha1B\024MetricsAgentApiProtoP\001"
  "Z/github.com/performance-grpc-sdk/metric"
  "sv1alpha1\242\002\003PFX\252\002\034Performance.Metrics.V1"
  "Alpha1\312\002\034Performance\\Metrics\\V1Alpha1b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_deps[1] = {
  &::descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto = {
  false, false, 2005, descriptor_table_protodef_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto, "performance/metrics/v1alpha1/metrics_agent_api.proto", 
  &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once, descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto::offsets,
  file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto, file_level_enum_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto, file_level_service_descriptors_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_getter() {
  return &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto(&descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto);
namespace performance {
namespace metrics {
namespace v1alpha1 {

// ===================================================================

SaveMetricsRequest_MetaEntry_DoNotUse::SaveMetricsRequest_MetaEntry_DoNotUse() {}
SaveMetricsRequest_MetaEntry_DoNotUse::SaveMetricsRequest_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SaveMetricsRequest_MetaEntry_DoNotUse::MergeFrom(const SaveMetricsRequest_MetaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SaveMetricsRequest_MetaEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[0]);
}

// ===================================================================

class SaveMetricsRequest::_Internal {
 public:
};

SaveMetricsRequest::SaveMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  meta_(arena),
  metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.SaveMetricsRequest)
}
SaveMetricsRequest::SaveMetricsRequest(const SaveMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meta_.MergeFrom(from.meta_);
  cluster_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cluster_name().empty()) {
    cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cluster_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.SaveMetricsRequest)
}

inline void SaveMetricsRequest::SharedCtor() {
cluster_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveMetricsRequest::~SaveMetricsRequest() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.SaveMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cluster_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveMetricsRequest::ArenaDtor(void* object) {
  SaveMetricsRequest* _this = reinterpret_cast< SaveMetricsRequest* >(object);
  (void)_this;
  _this->meta_. ~MapField();
}
inline void SaveMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SaveMetricsRequest::ArenaDtor);
  }
}
void SaveMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.SaveMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_.Clear();
  metrics_.Clear();
  cluster_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cluster_name = 1 [json_name = "clusterName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cluster_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.SaveMetricsRequest.cluster_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> meta = 2 [json_name = "meta"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&meta_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .performance.metrics.v1alpha1.PodMetric metrics = 3 [json_name = "metrics"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.SaveMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_name = 1 [json_name = "clusterName"];
  if (!this->_internal_cluster_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_name().data(), static_cast<int>(this->_internal_cluster_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.SaveMetricsRequest.cluster_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cluster_name(), target);
  }

  // map<string, string> meta = 2 [json_name = "meta"];
  if (!this->_internal_meta().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.metrics.v1alpha1.SaveMetricsRequest.MetaEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.metrics.v1alpha1.SaveMetricsRequest.MetaEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_meta().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_meta().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta().begin();
          it != this->_internal_meta().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SaveMetricsRequest_MetaEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta().begin();
          it != this->_internal_meta().end(); ++it) {
        target = SaveMetricsRequest_MetaEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .performance.metrics.v1alpha1.PodMetric metrics = 3 [json_name = "metrics"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.SaveMetricsRequest)
  return target;
}

size_t SaveMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.SaveMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> meta = 2 [json_name = "meta"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_meta_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_meta().begin();
      it != this->_internal_meta().end(); ++it) {
    total_size += SaveMetricsRequest_MetaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .performance.metrics.v1alpha1.PodMetric metrics = 3 [json_name = "metrics"];
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cluster_name = 1 [json_name = "clusterName"];
  if (!this->_internal_cluster_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cluster_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveMetricsRequest::GetClassData() const { return &_class_data_; }

void SaveMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SaveMetricsRequest *>(to)->MergeFrom(
      static_cast<const SaveMetricsRequest &>(from));
}


void SaveMetricsRequest::MergeFrom(const SaveMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.SaveMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meta_.MergeFrom(from.meta_);
  metrics_.MergeFrom(from.metrics_);
  if (!from._internal_cluster_name().empty()) {
    _internal_set_cluster_name(from._internal_cluster_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveMetricsRequest::CopyFrom(const SaveMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.SaveMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMetricsRequest::IsInitialized() const {
  return true;
}

void SaveMetricsRequest::InternalSwap(SaveMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  meta_.InternalSwap(&other->meta_);
  metrics_.InternalSwap(&other->metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cluster_name_, GetArenaForAllocation(),
      &other->cluster_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[1]);
}

// ===================================================================

class SaveMetricsResponse::_Internal {
 public:
};

SaveMetricsResponse::SaveMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.SaveMetricsResponse)
}
SaveMetricsResponse::SaveMetricsResponse(const SaveMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.SaveMetricsResponse)
}

inline void SaveMetricsResponse::SharedCtor() {
success_ = false;
}

SaveMetricsResponse::~SaveMetricsResponse() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.SaveMetricsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SaveMetricsResponse::ArenaDtor(void* object) {
  SaveMetricsResponse* _this = reinterpret_cast< SaveMetricsResponse* >(object);
  (void)_this;
}
void SaveMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.SaveMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.SaveMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.SaveMetricsResponse)
  return target;
}

size_t SaveMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.SaveMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveMetricsResponse::GetClassData() const { return &_class_data_; }

void SaveMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SaveMetricsResponse *>(to)->MergeFrom(
      static_cast<const SaveMetricsResponse &>(from));
}


void SaveMetricsResponse::MergeFrom(const SaveMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.SaveMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveMetricsResponse::CopyFrom(const SaveMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.SaveMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMetricsResponse::IsInitialized() const {
  return true;
}

void SaveMetricsResponse::InternalSwap(SaveMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveMetricsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[2]);
}

// ===================================================================

PodMetric_AnnotationsEntry_DoNotUse::PodMetric_AnnotationsEntry_DoNotUse() {}
PodMetric_AnnotationsEntry_DoNotUse::PodMetric_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodMetric_AnnotationsEntry_DoNotUse::MergeFrom(const PodMetric_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodMetric_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[3]);
}

// ===================================================================

PodMetric_LabelsEntry_DoNotUse::PodMetric_LabelsEntry_DoNotUse() {}
PodMetric_LabelsEntry_DoNotUse::PodMetric_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PodMetric_LabelsEntry_DoNotUse::MergeFrom(const PodMetric_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PodMetric_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[4]);
}

// ===================================================================

class PodMetric::_Internal {
 public:
};

PodMetric::PodMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  volumes_(arena),
  annotations_(arena),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.metrics.v1alpha1.PodMetric)
}
PodMetric::PodMetric(const PodMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volumes_(from.volumes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_name().empty()) {
    owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_name(), 
      GetArenaForAllocation());
  }
  owner_kubernetes_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_kubernetes_uid().empty()) {
    owner_kubernetes_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_kubernetes_uid(), 
      GetArenaForAllocation());
  }
  owner_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_kind().empty()) {
    owner_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_kind(), 
      GetArenaForAllocation());
  }
  owner_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_api_version().empty()) {
    owner_api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_api_version(), 
      GetArenaForAllocation());
  }
  container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_name().empty()) {
    container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_name(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  cluster_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cluster_name().empty()) {
    cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cluster_name(), 
      GetArenaForAllocation());
  }
  external_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_external_ip().empty()) {
    external_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_ip(), 
      GetArenaForAllocation());
  }
  internal_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_internal_ip().empty()) {
    internal_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_internal_ip(), 
      GetArenaForAllocation());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArenaForAllocation());
  }
  kubernetes_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kubernetes_uid().empty()) {
    kubernetes_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kubernetes_uid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&restart_count_, &from.restart_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&allocatable_storage_) -
    reinterpret_cast<char*>(&restart_count_)) + sizeof(allocatable_storage_));
  // @@protoc_insertion_point(copy_constructor:performance.metrics.v1alpha1.PodMetric)
}

inline void PodMetric::SharedCtor() {
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_kubernetes_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cluster_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
external_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
internal_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kubernetes_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&restart_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allocatable_storage_) -
    reinterpret_cast<char*>(&restart_count_)) + sizeof(allocatable_storage_));
}

PodMetric::~PodMetric() {
  // @@protoc_insertion_point(destructor:performance.metrics.v1alpha1.PodMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PodMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_kubernetes_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_api_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kubernetes_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PodMetric::ArenaDtor(void* object) {
  PodMetric* _this = reinterpret_cast< PodMetric* >(object);
  (void)_this;
  _this->annotations_. ~MapField();
  _this->labels_. ~MapField();
}
inline void PodMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PodMetric::ArenaDtor);
  }
}
void PodMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PodMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.metrics.v1alpha1.PodMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volumes_.Clear();
  annotations_.Clear();
  labels_.Clear();
  namespace__.ClearToEmpty();
  name_.ClearToEmpty();
  owner_name_.ClearToEmpty();
  owner_kubernetes_uid_.ClearToEmpty();
  owner_kind_.ClearToEmpty();
  owner_api_version_.ClearToEmpty();
  container_name_.ClearToEmpty();
  status_.ClearToEmpty();
  cluster_name_.ClearToEmpty();
  external_ip_.ClearToEmpty();
  internal_ip_.ClearToEmpty();
  node_name_.ClearToEmpty();
  kubernetes_uid_.ClearToEmpty();
  ::memset(&restart_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocatable_storage_) -
      reinterpret_cast<char*>(&restart_count_)) + sizeof(allocatable_storage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PodMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string namespace = 1 [json_name = "namespace"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_name = 3 [json_name = "ownerName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.owner_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_kubernetes_uid = 4 [json_name = "ownerKubernetesUid"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_owner_kubernetes_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.owner_kubernetes_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_kind = 5 [json_name = "ownerKind"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_owner_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.owner_kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_api_version = 6 [json_name = "ownerApiVersion"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_owner_api_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.owner_api_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string container_name = 7 [json_name = "containerName"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_container_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.container_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 8 [json_name = "status"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_controlled = 9 [json_name = "isControlled"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_controlled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 restart_count = 10 [json_name = "restartCount"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          restart_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ready = 11 [json_name = "isReady"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cluster_name = 12 [json_name = "clusterName"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_cluster_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.cluster_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 usage_cpu = 13 [json_name = "usageCpu"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          usage_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 usage_memory = 14 [json_name = "usageMemory"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          usage_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 usage_storage = 15 [json_name = "usageStorage"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          usage_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 request_cpu = 16 [json_name = "requestCpu"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          request_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 request_memory = 17 [json_name = "requestMemory"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          request_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit_cpu = 18 [json_name = "limitCpu"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          limit_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit_memory = 19 [json_name = "limitMemory"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          limit_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string volumes = 20 [json_name = "volumes"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_volumes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.volumes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 21 [json_name = "annotations"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 22 [json_name = "labels"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // string external_ip = 23 [json_name = "externalIp"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_external_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.external_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string internal_ip = 24 [json_name = "internalIp"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_internal_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.internal_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allocatable_storage_ephemeral = 25 [json_name = "allocatableStorageEphemeral"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          allocatable_storage_ephemeral_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allocatable_storage = 26 [json_name = "allocatableStorage"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          allocatable_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_name = 27 [json_name = "nodeName"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kubernetes_uid = 28 [json_name = "kubernetesUid"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_kubernetes_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.metrics.v1alpha1.PodMetric.kubernetes_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PodMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.metrics.v1alpha1.PodMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string owner_name = 3 [json_name = "ownerName"];
  if (!this->_internal_owner_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_name().data(), static_cast<int>(this->_internal_owner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.owner_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner_name(), target);
  }

  // string owner_kubernetes_uid = 4 [json_name = "ownerKubernetesUid"];
  if (!this->_internal_owner_kubernetes_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_kubernetes_uid().data(), static_cast<int>(this->_internal_owner_kubernetes_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.owner_kubernetes_uid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_owner_kubernetes_uid(), target);
  }

  // string owner_kind = 5 [json_name = "ownerKind"];
  if (!this->_internal_owner_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_kind().data(), static_cast<int>(this->_internal_owner_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.owner_kind");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_owner_kind(), target);
  }

  // string owner_api_version = 6 [json_name = "ownerApiVersion"];
  if (!this->_internal_owner_api_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_api_version().data(), static_cast<int>(this->_internal_owner_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.owner_api_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_owner_api_version(), target);
  }

  // string container_name = 7 [json_name = "containerName"];
  if (!this->_internal_container_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_name().data(), static_cast<int>(this->_internal_container_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.container_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_container_name(), target);
  }

  // string status = 8 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_status(), target);
  }

  // bool is_controlled = 9 [json_name = "isControlled"];
  if (this->_internal_is_controlled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_controlled(), target);
  }

  // int32 restart_count = 10 [json_name = "restartCount"];
  if (this->_internal_restart_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_restart_count(), target);
  }

  // bool is_ready = 11 [json_name = "isReady"];
  if (this->_internal_is_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_ready(), target);
  }

  // string cluster_name = 12 [json_name = "clusterName"];
  if (!this->_internal_cluster_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_name().data(), static_cast<int>(this->_internal_cluster_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.cluster_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_cluster_name(), target);
  }

  // int64 usage_cpu = 13 [json_name = "usageCpu"];
  if (this->_internal_usage_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_usage_cpu(), target);
  }

  // int64 usage_memory = 14 [json_name = "usageMemory"];
  if (this->_internal_usage_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_usage_memory(), target);
  }

  // int64 usage_storage = 15 [json_name = "usageStorage"];
  if (this->_internal_usage_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_usage_storage(), target);
  }

  // int64 request_cpu = 16 [json_name = "requestCpu"];
  if (this->_internal_request_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_request_cpu(), target);
  }

  // int64 request_memory = 17 [json_name = "requestMemory"];
  if (this->_internal_request_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_request_memory(), target);
  }

  // int64 limit_cpu = 18 [json_name = "limitCpu"];
  if (this->_internal_limit_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_limit_cpu(), target);
  }

  // int64 limit_memory = 19 [json_name = "limitMemory"];
  if (this->_internal_limit_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_limit_memory(), target);
  }

  // repeated string volumes = 20 [json_name = "volumes"];
  for (int i = 0, n = this->_internal_volumes_size(); i < n; i++) {
    const auto& s = this->_internal_volumes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.volumes");
    target = stream->WriteString(20, s, target);
  }

  // map<string, string> annotations = 21 [json_name = "annotations"];
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.metrics.v1alpha1.PodMetric.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.metrics.v1alpha1.PodMetric.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodMetric_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = PodMetric_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> labels = 22 [json_name = "labels"];
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.metrics.v1alpha1.PodMetric.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.metrics.v1alpha1.PodMetric.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PodMetric_LabelsEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = PodMetric_LabelsEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string external_ip = 23 [json_name = "externalIp"];
  if (!this->_internal_external_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_external_ip().data(), static_cast<int>(this->_internal_external_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.external_ip");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_external_ip(), target);
  }

  // string internal_ip = 24 [json_name = "internalIp"];
  if (!this->_internal_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_internal_ip().data(), static_cast<int>(this->_internal_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.internal_ip");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_internal_ip(), target);
  }

  // int64 allocatable_storage_ephemeral = 25 [json_name = "allocatableStorageEphemeral"];
  if (this->_internal_allocatable_storage_ephemeral() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_allocatable_storage_ephemeral(), target);
  }

  // int64 allocatable_storage = 26 [json_name = "allocatableStorage"];
  if (this->_internal_allocatable_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->_internal_allocatable_storage(), target);
  }

  // string node_name = 27 [json_name = "nodeName"];
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.node_name");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_node_name(), target);
  }

  // string kubernetes_uid = 28 [json_name = "kubernetesUid"];
  if (!this->_internal_kubernetes_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kubernetes_uid().data(), static_cast<int>(this->_internal_kubernetes_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.metrics.v1alpha1.PodMetric.kubernetes_uid");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_kubernetes_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.metrics.v1alpha1.PodMetric)
  return target;
}

size_t PodMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.metrics.v1alpha1.PodMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string volumes = 20 [json_name = "volumes"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(volumes_.size());
  for (int i = 0, n = volumes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      volumes_.Get(i));
  }

  // map<string, string> annotations = 21 [json_name = "annotations"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += PodMetric_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> labels = 22 [json_name = "labels"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += PodMetric_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string namespace = 1 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string owner_name = 3 [json_name = "ownerName"];
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_name());
  }

  // string owner_kubernetes_uid = 4 [json_name = "ownerKubernetesUid"];
  if (!this->_internal_owner_kubernetes_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_kubernetes_uid());
  }

  // string owner_kind = 5 [json_name = "ownerKind"];
  if (!this->_internal_owner_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_kind());
  }

  // string owner_api_version = 6 [json_name = "ownerApiVersion"];
  if (!this->_internal_owner_api_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_api_version());
  }

  // string container_name = 7 [json_name = "containerName"];
  if (!this->_internal_container_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_name());
  }

  // string status = 8 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string cluster_name = 12 [json_name = "clusterName"];
  if (!this->_internal_cluster_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cluster_name());
  }

  // string external_ip = 23 [json_name = "externalIp"];
  if (!this->_internal_external_ip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_ip());
  }

  // string internal_ip = 24 [json_name = "internalIp"];
  if (!this->_internal_internal_ip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_internal_ip());
  }

  // string node_name = 27 [json_name = "nodeName"];
  if (!this->_internal_node_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // string kubernetes_uid = 28 [json_name = "kubernetesUid"];
  if (!this->_internal_kubernetes_uid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kubernetes_uid());
  }

  // int32 restart_count = 10 [json_name = "restartCount"];
  if (this->_internal_restart_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_restart_count());
  }

  // bool is_controlled = 9 [json_name = "isControlled"];
  if (this->_internal_is_controlled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_ready = 11 [json_name = "isReady"];
  if (this->_internal_is_ready() != 0) {
    total_size += 1 + 1;
  }

  // int64 usage_cpu = 13 [json_name = "usageCpu"];
  if (this->_internal_usage_cpu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_usage_cpu());
  }

  // int64 usage_memory = 14 [json_name = "usageMemory"];
  if (this->_internal_usage_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_usage_memory());
  }

  // int64 usage_storage = 15 [json_name = "usageStorage"];
  if (this->_internal_usage_storage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_usage_storage());
  }

  // int64 request_cpu = 16 [json_name = "requestCpu"];
  if (this->_internal_request_cpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_request_cpu());
  }

  // int64 request_memory = 17 [json_name = "requestMemory"];
  if (this->_internal_request_memory() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_request_memory());
  }

  // int64 limit_cpu = 18 [json_name = "limitCpu"];
  if (this->_internal_limit_cpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit_cpu());
  }

  // int64 limit_memory = 19 [json_name = "limitMemory"];
  if (this->_internal_limit_memory() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit_memory());
  }

  // int64 allocatable_storage_ephemeral = 25 [json_name = "allocatableStorageEphemeral"];
  if (this->_internal_allocatable_storage_ephemeral() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_allocatable_storage_ephemeral());
  }

  // int64 allocatable_storage = 26 [json_name = "allocatableStorage"];
  if (this->_internal_allocatable_storage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_allocatable_storage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PodMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PodMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PodMetric::GetClassData() const { return &_class_data_; }

void PodMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PodMetric *>(to)->MergeFrom(
      static_cast<const PodMetric &>(from));
}


void PodMetric::MergeFrom(const PodMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.metrics.v1alpha1.PodMetric)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volumes_.MergeFrom(from.volumes_);
  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_owner_name().empty()) {
    _internal_set_owner_name(from._internal_owner_name());
  }
  if (!from._internal_owner_kubernetes_uid().empty()) {
    _internal_set_owner_kubernetes_uid(from._internal_owner_kubernetes_uid());
  }
  if (!from._internal_owner_kind().empty()) {
    _internal_set_owner_kind(from._internal_owner_kind());
  }
  if (!from._internal_owner_api_version().empty()) {
    _internal_set_owner_api_version(from._internal_owner_api_version());
  }
  if (!from._internal_container_name().empty()) {
    _internal_set_container_name(from._internal_container_name());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_cluster_name().empty()) {
    _internal_set_cluster_name(from._internal_cluster_name());
  }
  if (!from._internal_external_ip().empty()) {
    _internal_set_external_ip(from._internal_external_ip());
  }
  if (!from._internal_internal_ip().empty()) {
    _internal_set_internal_ip(from._internal_internal_ip());
  }
  if (!from._internal_node_name().empty()) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_kubernetes_uid().empty()) {
    _internal_set_kubernetes_uid(from._internal_kubernetes_uid());
  }
  if (from._internal_restart_count() != 0) {
    _internal_set_restart_count(from._internal_restart_count());
  }
  if (from._internal_is_controlled() != 0) {
    _internal_set_is_controlled(from._internal_is_controlled());
  }
  if (from._internal_is_ready() != 0) {
    _internal_set_is_ready(from._internal_is_ready());
  }
  if (from._internal_usage_cpu() != 0) {
    _internal_set_usage_cpu(from._internal_usage_cpu());
  }
  if (from._internal_usage_memory() != 0) {
    _internal_set_usage_memory(from._internal_usage_memory());
  }
  if (from._internal_usage_storage() != 0) {
    _internal_set_usage_storage(from._internal_usage_storage());
  }
  if (from._internal_request_cpu() != 0) {
    _internal_set_request_cpu(from._internal_request_cpu());
  }
  if (from._internal_request_memory() != 0) {
    _internal_set_request_memory(from._internal_request_memory());
  }
  if (from._internal_limit_cpu() != 0) {
    _internal_set_limit_cpu(from._internal_limit_cpu());
  }
  if (from._internal_limit_memory() != 0) {
    _internal_set_limit_memory(from._internal_limit_memory());
  }
  if (from._internal_allocatable_storage_ephemeral() != 0) {
    _internal_set_allocatable_storage_ephemeral(from._internal_allocatable_storage_ephemeral());
  }
  if (from._internal_allocatable_storage() != 0) {
    _internal_set_allocatable_storage(from._internal_allocatable_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PodMetric::CopyFrom(const PodMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.metrics.v1alpha1.PodMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodMetric::IsInitialized() const {
  return true;
}

void PodMetric::InternalSwap(PodMetric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  volumes_.InternalSwap(&other->volumes_);
  annotations_.InternalSwap(&other->annotations_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_name_, GetArenaForAllocation(),
      &other->owner_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_kubernetes_uid_, GetArenaForAllocation(),
      &other->owner_kubernetes_uid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_kind_, GetArenaForAllocation(),
      &other->owner_kind_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_api_version_, GetArenaForAllocation(),
      &other->owner_api_version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_name_, GetArenaForAllocation(),
      &other->container_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cluster_name_, GetArenaForAllocation(),
      &other->cluster_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &external_ip_, GetArenaForAllocation(),
      &other->external_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &internal_ip_, GetArenaForAllocation(),
      &other->internal_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_name_, GetArenaForAllocation(),
      &other->node_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kubernetes_uid_, GetArenaForAllocation(),
      &other->kubernetes_uid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PodMetric, allocatable_storage_)
      + sizeof(PodMetric::allocatable_storage_)
      - PROTOBUF_FIELD_OFFSET(PodMetric, restart_count_)>(
          reinterpret_cast<char*>(&restart_count_),
          reinterpret_cast<char*>(&other->restart_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PodMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::SaveMetricsRequest* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::SaveMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::SaveMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::SaveMetricsResponse* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::SaveMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::SaveMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::metrics::v1alpha1::PodMetric* Arena::CreateMaybeMessage< ::performance::metrics::v1alpha1::PodMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::metrics::v1alpha1::PodMetric >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
