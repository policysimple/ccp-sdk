// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/metrics/v1alpha1/metrics_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "performance/metrics/v1alpha1/metrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto;
namespace performance {
namespace metrics {
namespace v1alpha1 {
class GetMetricsRequest;
struct GetMetricsRequestDefaultTypeInternal;
extern GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
class GetMetricsResponse;
struct GetMetricsResponseDefaultTypeInternal;
extern GetMetricsResponseDefaultTypeInternal _GetMetricsResponse_default_instance_;
class GetTektonMetricsRequest;
struct GetTektonMetricsRequestDefaultTypeInternal;
extern GetTektonMetricsRequestDefaultTypeInternal _GetTektonMetricsRequest_default_instance_;
class GetTektonMetricsResponse;
struct GetTektonMetricsResponseDefaultTypeInternal;
extern GetTektonMetricsResponseDefaultTypeInternal _GetTektonMetricsResponse_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> ::performance::metrics::v1alpha1::GetMetricsRequest* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::GetMetricsRequest>(Arena*);
template<> ::performance::metrics::v1alpha1::GetMetricsResponse* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::GetMetricsResponse>(Arena*);
template<> ::performance::metrics::v1alpha1::GetTektonMetricsRequest* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::GetTektonMetricsRequest>(Arena*);
template<> ::performance::metrics::v1alpha1::GetTektonMetricsResponse* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::GetTektonMetricsResponse>(Arena*);
template<> ::performance::metrics::v1alpha1::Range* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::Range>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace performance {
namespace metrics {
namespace v1alpha1 {

enum MetricsInterval : int {
  METRICS_INTERVAL_UNSPECIFIED = 0,
  METRICS_INTERVAL_1_MUNITE = 1,
  METRICS_INTERVAL_5_MUNITES = 2,
  METRICS_INTERVAL_15_MUNITES = 3,
  METRICS_INTERVAL_30_MUNITES = 4,
  METRICS_INTERVAL_1_HOUR = 5,
  METRICS_INTERVAL_12_HOURS = 6,
  METRICS_INTERVAL_1_DAY = 7,
  METRICS_INTERVAL_1_WEEK = 8,
  MetricsInterval_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MetricsInterval_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MetricsInterval_IsValid(int value);
constexpr MetricsInterval MetricsInterval_MIN = METRICS_INTERVAL_UNSPECIFIED;
constexpr MetricsInterval MetricsInterval_MAX = METRICS_INTERVAL_1_WEEK;
constexpr int MetricsInterval_ARRAYSIZE = MetricsInterval_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricsInterval_descriptor();
template<typename T>
inline const std::string& MetricsInterval_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricsInterval>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricsInterval_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricsInterval_descriptor(), enum_t_value);
}
inline bool MetricsInterval_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricsInterval* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricsInterval>(
    MetricsInterval_descriptor(), name, value);
}
// ===================================================================

class Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  explicit constexpr Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return new Range();
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Range& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFromFieldNumber = 1,
    kDateToFieldNumber = 2,
    kTimezoneFieldNumber = 3,
  };
  // string date_from = 1 [json_name = "dateFrom"];
  void clear_date_from();
  const std::string& date_from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_date_from();
  void set_allocated_date_from(std::string* date_from);
  private:
  const std::string& _internal_date_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_from(const std::string& value);
  std::string* _internal_mutable_date_from();
  public:

  // string date_to = 2 [json_name = "dateTo"];
  void clear_date_to();
  const std::string& date_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_date_to();
  void set_allocated_date_to(std::string* date_to);
  private:
  const std::string& _internal_date_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_to(const std::string& value);
  std::string* _internal_mutable_date_to();
  public:

  // string timezone = 3 [json_name = "timezone"];
  void clear_timezone();
  const std::string& timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timezone();
  PROTOBUF_MUST_USE_RESULT std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.GetMetricsRequest) */ {
 public:
  inline GetMetricsRequest() : GetMetricsRequest(nullptr) {}
  ~GetMetricsRequest() override;
  explicit constexpr GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMetricsRequest(const GetMetricsRequest& from);
  GetMetricsRequest(GetMetricsRequest&& from) noexcept
    : GetMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetMetricsRequest& operator=(const GetMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsRequest& operator=(GetMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetricsRequest*>(
               &_GetMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMetricsRequest& a, GetMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsRequest* New() const final {
    return new GetMetricsRequest();
  }

  GetMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.GetMetricsRequest";
  }
  protected:
  explicit GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 2,
    kApplicationIdFieldNumber = 7,
    kEnvironmentIdFieldNumber = 8,
    kOrganizationIdFieldNumber = 9,
    kProjectIdFieldNumber = 10,
    kRuntimeIdFieldNumber = 11,
    kRangeFieldNumber = 4,
    kIntervalFieldNumber = 3,
    kPageFieldNumber = 5,
    kSizeFieldNumber = 6,
  };
  // repeated string containers = 2 [json_name = "containers"];
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  const std::string& containers(int index) const;
  std::string* mutable_containers(int index);
  void set_containers(int index, const std::string& value);
  void set_containers(int index, std::string&& value);
  void set_containers(int index, const char* value);
  void set_containers(int index, const char* value, size_t size);
  std::string* add_containers();
  void add_containers(const std::string& value);
  void add_containers(std::string&& value);
  void add_containers(const char* value);
  void add_containers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& containers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_containers();
  private:
  const std::string& _internal_containers(int index) const;
  std::string* _internal_add_containers();
  public:

  // string application_id = 7 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string environment_id = 8 [json_name = "environmentId"];
  void clear_environment_id();
  const std::string& environment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_id();
  void set_allocated_environment_id(std::string* environment_id);
  private:
  const std::string& _internal_environment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_id(const std::string& value);
  std::string* _internal_mutable_environment_id();
  public:

  // string organization_id = 9 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string project_id = 10 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string runtime_id = 11 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // .performance.metrics.v1alpha1.Range range = 4 [json_name = "range"];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::performance::metrics::v1alpha1::Range& range() const;
  PROTOBUF_MUST_USE_RESULT ::performance::metrics::v1alpha1::Range* release_range();
  ::performance::metrics::v1alpha1::Range* mutable_range();
  void set_allocated_range(::performance::metrics::v1alpha1::Range* range);
  private:
  const ::performance::metrics::v1alpha1::Range& _internal_range() const;
  ::performance::metrics::v1alpha1::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::performance::metrics::v1alpha1::Range* range);
  ::performance::metrics::v1alpha1::Range* unsafe_arena_release_range();

  // .performance.metrics.v1alpha1.MetricsInterval interval = 3 [json_name = "interval"];
  void clear_interval();
  ::performance::metrics::v1alpha1::MetricsInterval interval() const;
  void set_interval(::performance::metrics::v1alpha1::MetricsInterval value);
  private:
  ::performance::metrics::v1alpha1::MetricsInterval _internal_interval() const;
  void _internal_set_interval(::performance::metrics::v1alpha1::MetricsInterval value);
  public:

  // int32 page = 5 [json_name = "page"];
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 6 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.GetMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> containers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  ::performance::metrics::v1alpha1::Range* range_;
  int interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.GetMetricsResponse) */ {
 public:
  inline GetMetricsResponse() : GetMetricsResponse(nullptr) {}
  ~GetMetricsResponse() override;
  explicit constexpr GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMetricsResponse(const GetMetricsResponse& from);
  GetMetricsResponse(GetMetricsResponse&& from) noexcept
    : GetMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetMetricsResponse& operator=(const GetMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsResponse& operator=(GetMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetMetricsResponse*>(
               &_GetMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMetricsResponse& a, GetMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsResponse* New() const final {
    return new GetMetricsResponse();
  }

  GetMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMetricsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.GetMetricsResponse";
  }
  protected:
  explicit GetMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryFieldNumber = 1,
    kCpuFieldNumber = 2,
  };
  // repeated .performance.metrics.v1alpha1.MetricItem memory = 1 [json_name = "memory"];
  int memory_size() const;
  private:
  int _internal_memory_size() const;
  public:
  void clear_memory();
  ::performance::metrics::v1alpha1::MetricItem* mutable_memory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >*
      mutable_memory();
  private:
  const ::performance::metrics::v1alpha1::MetricItem& _internal_memory(int index) const;
  ::performance::metrics::v1alpha1::MetricItem* _internal_add_memory();
  public:
  const ::performance::metrics::v1alpha1::MetricItem& memory(int index) const;
  ::performance::metrics::v1alpha1::MetricItem* add_memory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >&
      memory() const;

  // repeated .performance.metrics.v1alpha1.MetricItem cpu = 2 [json_name = "cpu"];
  int cpu_size() const;
  private:
  int _internal_cpu_size() const;
  public:
  void clear_cpu();
  ::performance::metrics::v1alpha1::MetricItem* mutable_cpu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >*
      mutable_cpu();
  private:
  const ::performance::metrics::v1alpha1::MetricItem& _internal_cpu(int index) const;
  ::performance::metrics::v1alpha1::MetricItem* _internal_add_cpu();
  public:
  const ::performance::metrics::v1alpha1::MetricItem& cpu(int index) const;
  ::performance::metrics::v1alpha1::MetricItem* add_cpu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >&
      cpu() const;

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.GetMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem > memory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem > cpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetTektonMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.GetTektonMetricsRequest) */ {
 public:
  inline GetTektonMetricsRequest() : GetTektonMetricsRequest(nullptr) {}
  ~GetTektonMetricsRequest() override;
  explicit constexpr GetTektonMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTektonMetricsRequest(const GetTektonMetricsRequest& from);
  GetTektonMetricsRequest(GetTektonMetricsRequest&& from) noexcept
    : GetTektonMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetTektonMetricsRequest& operator=(const GetTektonMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTektonMetricsRequest& operator=(GetTektonMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTektonMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTektonMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTektonMetricsRequest*>(
               &_GetTektonMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTektonMetricsRequest& a, GetTektonMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTektonMetricsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTektonMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTektonMetricsRequest* New() const final {
    return new GetTektonMetricsRequest();
  }

  GetTektonMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTektonMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTektonMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTektonMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTektonMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.GetTektonMetricsRequest";
  }
  protected:
  explicit GetTektonMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamePipelineRunFieldNumber = 1,
    kRangeFieldNumber = 2,
    kPageFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // string name_pipeline_run = 1 [json_name = "namePipelineRun"];
  void clear_name_pipeline_run();
  const std::string& name_pipeline_run() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_pipeline_run(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_pipeline_run();
  PROTOBUF_MUST_USE_RESULT std::string* release_name_pipeline_run();
  void set_allocated_name_pipeline_run(std::string* name_pipeline_run);
  private:
  const std::string& _internal_name_pipeline_run() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_pipeline_run(const std::string& value);
  std::string* _internal_mutable_name_pipeline_run();
  public:

  // .performance.metrics.v1alpha1.Range range = 2 [json_name = "range"];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::performance::metrics::v1alpha1::Range& range() const;
  PROTOBUF_MUST_USE_RESULT ::performance::metrics::v1alpha1::Range* release_range();
  ::performance::metrics::v1alpha1::Range* mutable_range();
  void set_allocated_range(::performance::metrics::v1alpha1::Range* range);
  private:
  const ::performance::metrics::v1alpha1::Range& _internal_range() const;
  ::performance::metrics::v1alpha1::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::performance::metrics::v1alpha1::Range* range);
  ::performance::metrics::v1alpha1::Range* unsafe_arena_release_range();

  // int32 page = 3 [json_name = "page"];
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 4 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.GetTektonMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_pipeline_run_;
  ::performance::metrics::v1alpha1::Range* range_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetTektonMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.GetTektonMetricsResponse) */ {
 public:
  inline GetTektonMetricsResponse() : GetTektonMetricsResponse(nullptr) {}
  ~GetTektonMetricsResponse() override;
  explicit constexpr GetTektonMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTektonMetricsResponse(const GetTektonMetricsResponse& from);
  GetTektonMetricsResponse(GetTektonMetricsResponse&& from) noexcept
    : GetTektonMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetTektonMetricsResponse& operator=(const GetTektonMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTektonMetricsResponse& operator=(GetTektonMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTektonMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTektonMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTektonMetricsResponse*>(
               &_GetTektonMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetTektonMetricsResponse& a, GetTektonMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTektonMetricsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTektonMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTektonMetricsResponse* New() const final {
    return new GetTektonMetricsResponse();
  }

  GetTektonMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTektonMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTektonMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTektonMetricsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTektonMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.GetTektonMetricsResponse";
  }
  protected:
  explicit GetTektonMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .performance.metrics.v1alpha1.TektonMetricItem results = 1 [json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::performance::metrics::v1alpha1::TektonMetricItem* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::TektonMetricItem >*
      mutable_results();
  private:
  const ::performance::metrics::v1alpha1::TektonMetricItem& _internal_results(int index) const;
  ::performance::metrics::v1alpha1::TektonMetricItem* _internal_add_results();
  public:
  const ::performance::metrics::v1alpha1::TektonMetricItem& results(int index) const;
  ::performance::metrics::v1alpha1::TektonMetricItem* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::TektonMetricItem >&
      results() const;

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.GetTektonMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::TektonMetricItem > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Range

// string date_from = 1 [json_name = "dateFrom"];
inline void Range::clear_date_from() {
  date_from_.ClearToEmpty();
}
inline const std::string& Range::date_from() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.Range.date_from)
  return _internal_date_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_date_from(ArgT0&& arg0, ArgT... args) {
 
 date_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.Range.date_from)
}
inline std::string* Range::mutable_date_from() {
  std::string* _s = _internal_mutable_date_from();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.Range.date_from)
  return _s;
}
inline const std::string& Range::_internal_date_from() const {
  return date_from_.Get();
}
inline void Range::_internal_set_date_from(const std::string& value) {
  
  date_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_date_from() {
  
  return date_from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Range::release_date_from() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.Range.date_from)
  return date_from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Range::set_allocated_date_from(std::string* date_from) {
  if (date_from != nullptr) {
    
  } else {
    
  }
  date_from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.Range.date_from)
}

// string date_to = 2 [json_name = "dateTo"];
inline void Range::clear_date_to() {
  date_to_.ClearToEmpty();
}
inline const std::string& Range::date_to() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.Range.date_to)
  return _internal_date_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_date_to(ArgT0&& arg0, ArgT... args) {
 
 date_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.Range.date_to)
}
inline std::string* Range::mutable_date_to() {
  std::string* _s = _internal_mutable_date_to();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.Range.date_to)
  return _s;
}
inline const std::string& Range::_internal_date_to() const {
  return date_to_.Get();
}
inline void Range::_internal_set_date_to(const std::string& value) {
  
  date_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_date_to() {
  
  return date_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Range::release_date_to() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.Range.date_to)
  return date_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Range::set_allocated_date_to(std::string* date_to) {
  if (date_to != nullptr) {
    
  } else {
    
  }
  date_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.Range.date_to)
}

// string timezone = 3 [json_name = "timezone"];
inline void Range::clear_timezone() {
  timezone_.ClearToEmpty();
}
inline const std::string& Range::timezone() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.Range.timezone)
  return _internal_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_timezone(ArgT0&& arg0, ArgT... args) {
 
 timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.Range.timezone)
}
inline std::string* Range::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.Range.timezone)
  return _s;
}
inline const std::string& Range::_internal_timezone() const {
  return timezone_.Get();
}
inline void Range::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_timezone() {
  
  return timezone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Range::release_timezone() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.Range.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Range::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.Range.timezone)
}

// -------------------------------------------------------------------

// GetMetricsRequest

// repeated string containers = 2 [json_name = "containers"];
inline int GetMetricsRequest::_internal_containers_size() const {
  return containers_.size();
}
inline int GetMetricsRequest::containers_size() const {
  return _internal_containers_size();
}
inline void GetMetricsRequest::clear_containers() {
  containers_.Clear();
}
inline std::string* GetMetricsRequest::add_containers() {
  std::string* _s = _internal_add_containers();
  // @@protoc_insertion_point(field_add_mutable:performance.metrics.v1alpha1.GetMetricsRequest.containers)
  return _s;
}
inline const std::string& GetMetricsRequest::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const std::string& GetMetricsRequest::containers(int index) const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.containers)
  return _internal_containers(index);
}
inline std::string* GetMetricsRequest::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsRequest.containers)
  return containers_.Mutable(index);
}
inline void GetMetricsRequest::set_containers(int index, const std::string& value) {
  containers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline void GetMetricsRequest::set_containers(int index, std::string&& value) {
  containers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline void GetMetricsRequest::set_containers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline void GetMetricsRequest::set_containers(int index, const char* value, size_t size) {
  containers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline std::string* GetMetricsRequest::_internal_add_containers() {
  return containers_.Add();
}
inline void GetMetricsRequest::add_containers(const std::string& value) {
  containers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline void GetMetricsRequest::add_containers(std::string&& value) {
  containers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline void GetMetricsRequest::add_containers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline void GetMetricsRequest::add_containers(const char* value, size_t size) {
  containers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:performance.metrics.v1alpha1.GetMetricsRequest.containers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMetricsRequest::containers() const {
  // @@protoc_insertion_point(field_list:performance.metrics.v1alpha1.GetMetricsRequest.containers)
  return containers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMetricsRequest::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:performance.metrics.v1alpha1.GetMetricsRequest.containers)
  return &containers_;
}

// .performance.metrics.v1alpha1.MetricsInterval interval = 3 [json_name = "interval"];
inline void GetMetricsRequest::clear_interval() {
  interval_ = 0;
}
inline ::performance::metrics::v1alpha1::MetricsInterval GetMetricsRequest::_internal_interval() const {
  return static_cast< ::performance::metrics::v1alpha1::MetricsInterval >(interval_);
}
inline ::performance::metrics::v1alpha1::MetricsInterval GetMetricsRequest::interval() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.interval)
  return _internal_interval();
}
inline void GetMetricsRequest::_internal_set_interval(::performance::metrics::v1alpha1::MetricsInterval value) {
  
  interval_ = value;
}
inline void GetMetricsRequest::set_interval(::performance::metrics::v1alpha1::MetricsInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.interval)
}

// .performance.metrics.v1alpha1.Range range = 4 [json_name = "range"];
inline bool GetMetricsRequest::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool GetMetricsRequest::has_range() const {
  return _internal_has_range();
}
inline void GetMetricsRequest::clear_range() {
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::performance::metrics::v1alpha1::Range& GetMetricsRequest::_internal_range() const {
  const ::performance::metrics::v1alpha1::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::metrics::v1alpha1::Range&>(
      ::performance::metrics::v1alpha1::_Range_default_instance_);
}
inline const ::performance::metrics::v1alpha1::Range& GetMetricsRequest::range() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.range)
  return _internal_range();
}
inline void GetMetricsRequest::unsafe_arena_set_allocated_range(
    ::performance::metrics::v1alpha1::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.metrics.v1alpha1.GetMetricsRequest.range)
}
inline ::performance::metrics::v1alpha1::Range* GetMetricsRequest::release_range() {
  
  ::performance::metrics::v1alpha1::Range* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::metrics::v1alpha1::Range* GetMetricsRequest::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetMetricsRequest.range)
  
  ::performance::metrics::v1alpha1::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::performance::metrics::v1alpha1::Range* GetMetricsRequest::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::metrics::v1alpha1::Range>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::performance::metrics::v1alpha1::Range* GetMetricsRequest::mutable_range() {
  ::performance::metrics::v1alpha1::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsRequest.range)
  return _msg;
}
inline void GetMetricsRequest::set_allocated_range(::performance::metrics::v1alpha1::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::performance::metrics::v1alpha1::Range>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetMetricsRequest.range)
}

// int32 page = 5 [json_name = "page"];
inline void GetMetricsRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMetricsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMetricsRequest::page() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.page)
  return _internal_page();
}
inline void GetMetricsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void GetMetricsRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.page)
}

// int32 size = 6 [json_name = "size"];
inline void GetMetricsRequest::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMetricsRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMetricsRequest::size() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.size)
  return _internal_size();
}
inline void GetMetricsRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void GetMetricsRequest::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.size)
}

// string application_id = 7 [json_name = "applicationId"];
inline void GetMetricsRequest::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& GetMetricsRequest::application_id() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsRequest::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.application_id)
}
inline std::string* GetMetricsRequest::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsRequest.application_id)
  return _s;
}
inline const std::string& GetMetricsRequest::_internal_application_id() const {
  return application_id_.Get();
}
inline void GetMetricsRequest::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetMetricsRequest.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMetricsRequest::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetMetricsRequest.application_id)
}

// string environment_id = 8 [json_name = "environmentId"];
inline void GetMetricsRequest::clear_environment_id() {
  environment_id_.ClearToEmpty();
}
inline const std::string& GetMetricsRequest::environment_id() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.environment_id)
  return _internal_environment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsRequest::set_environment_id(ArgT0&& arg0, ArgT... args) {
 
 environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.environment_id)
}
inline std::string* GetMetricsRequest::mutable_environment_id() {
  std::string* _s = _internal_mutable_environment_id();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsRequest.environment_id)
  return _s;
}
inline const std::string& GetMetricsRequest::_internal_environment_id() const {
  return environment_id_.Get();
}
inline void GetMetricsRequest::_internal_set_environment_id(const std::string& value) {
  
  environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::_internal_mutable_environment_id() {
  
  return environment_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::release_environment_id() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetMetricsRequest.environment_id)
  return environment_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMetricsRequest::set_allocated_environment_id(std::string* environment_id) {
  if (environment_id != nullptr) {
    
  } else {
    
  }
  environment_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetMetricsRequest.environment_id)
}

// string organization_id = 9 [json_name = "organizationId"];
inline void GetMetricsRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& GetMetricsRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.organization_id)
}
inline std::string* GetMetricsRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsRequest.organization_id)
  return _s;
}
inline const std::string& GetMetricsRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void GetMetricsRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetMetricsRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMetricsRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetMetricsRequest.organization_id)
}

// string project_id = 10 [json_name = "projectId"];
inline void GetMetricsRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& GetMetricsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.project_id)
}
inline std::string* GetMetricsRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsRequest.project_id)
  return _s;
}
inline const std::string& GetMetricsRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void GetMetricsRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetMetricsRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMetricsRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetMetricsRequest.project_id)
}

// string runtime_id = 11 [json_name = "runtimeId"];
inline void GetMetricsRequest::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& GetMetricsRequest::runtime_id() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsRequest.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMetricsRequest::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetMetricsRequest.runtime_id)
}
inline std::string* GetMetricsRequest::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsRequest.runtime_id)
  return _s;
}
inline const std::string& GetMetricsRequest::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void GetMetricsRequest::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMetricsRequest::release_runtime_id() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetMetricsRequest.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMetricsRequest::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetMetricsRequest.runtime_id)
}

// -------------------------------------------------------------------

// GetMetricsResponse

// repeated .performance.metrics.v1alpha1.MetricItem memory = 1 [json_name = "memory"];
inline int GetMetricsResponse::_internal_memory_size() const {
  return memory_.size();
}
inline int GetMetricsResponse::memory_size() const {
  return _internal_memory_size();
}
inline ::performance::metrics::v1alpha1::MetricItem* GetMetricsResponse::mutable_memory(int index) {
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsResponse.memory)
  return memory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >*
GetMetricsResponse::mutable_memory() {
  // @@protoc_insertion_point(field_mutable_list:performance.metrics.v1alpha1.GetMetricsResponse.memory)
  return &memory_;
}
inline const ::performance::metrics::v1alpha1::MetricItem& GetMetricsResponse::_internal_memory(int index) const {
  return memory_.Get(index);
}
inline const ::performance::metrics::v1alpha1::MetricItem& GetMetricsResponse::memory(int index) const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsResponse.memory)
  return _internal_memory(index);
}
inline ::performance::metrics::v1alpha1::MetricItem* GetMetricsResponse::_internal_add_memory() {
  return memory_.Add();
}
inline ::performance::metrics::v1alpha1::MetricItem* GetMetricsResponse::add_memory() {
  ::performance::metrics::v1alpha1::MetricItem* _add = _internal_add_memory();
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.GetMetricsResponse.memory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >&
GetMetricsResponse::memory() const {
  // @@protoc_insertion_point(field_list:performance.metrics.v1alpha1.GetMetricsResponse.memory)
  return memory_;
}

// repeated .performance.metrics.v1alpha1.MetricItem cpu = 2 [json_name = "cpu"];
inline int GetMetricsResponse::_internal_cpu_size() const {
  return cpu_.size();
}
inline int GetMetricsResponse::cpu_size() const {
  return _internal_cpu_size();
}
inline ::performance::metrics::v1alpha1::MetricItem* GetMetricsResponse::mutable_cpu(int index) {
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetMetricsResponse.cpu)
  return cpu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >*
GetMetricsResponse::mutable_cpu() {
  // @@protoc_insertion_point(field_mutable_list:performance.metrics.v1alpha1.GetMetricsResponse.cpu)
  return &cpu_;
}
inline const ::performance::metrics::v1alpha1::MetricItem& GetMetricsResponse::_internal_cpu(int index) const {
  return cpu_.Get(index);
}
inline const ::performance::metrics::v1alpha1::MetricItem& GetMetricsResponse::cpu(int index) const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetMetricsResponse.cpu)
  return _internal_cpu(index);
}
inline ::performance::metrics::v1alpha1::MetricItem* GetMetricsResponse::_internal_add_cpu() {
  return cpu_.Add();
}
inline ::performance::metrics::v1alpha1::MetricItem* GetMetricsResponse::add_cpu() {
  ::performance::metrics::v1alpha1::MetricItem* _add = _internal_add_cpu();
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.GetMetricsResponse.cpu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::MetricItem >&
GetMetricsResponse::cpu() const {
  // @@protoc_insertion_point(field_list:performance.metrics.v1alpha1.GetMetricsResponse.cpu)
  return cpu_;
}

// -------------------------------------------------------------------

// GetTektonMetricsRequest

// string name_pipeline_run = 1 [json_name = "namePipelineRun"];
inline void GetTektonMetricsRequest::clear_name_pipeline_run() {
  name_pipeline_run_.ClearToEmpty();
}
inline const std::string& GetTektonMetricsRequest::name_pipeline_run() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetTektonMetricsRequest.name_pipeline_run)
  return _internal_name_pipeline_run();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTektonMetricsRequest::set_name_pipeline_run(ArgT0&& arg0, ArgT... args) {
 
 name_pipeline_run_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetTektonMetricsRequest.name_pipeline_run)
}
inline std::string* GetTektonMetricsRequest::mutable_name_pipeline_run() {
  std::string* _s = _internal_mutable_name_pipeline_run();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetTektonMetricsRequest.name_pipeline_run)
  return _s;
}
inline const std::string& GetTektonMetricsRequest::_internal_name_pipeline_run() const {
  return name_pipeline_run_.Get();
}
inline void GetTektonMetricsRequest::_internal_set_name_pipeline_run(const std::string& value) {
  
  name_pipeline_run_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetTektonMetricsRequest::_internal_mutable_name_pipeline_run() {
  
  return name_pipeline_run_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetTektonMetricsRequest::release_name_pipeline_run() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetTektonMetricsRequest.name_pipeline_run)
  return name_pipeline_run_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetTektonMetricsRequest::set_allocated_name_pipeline_run(std::string* name_pipeline_run) {
  if (name_pipeline_run != nullptr) {
    
  } else {
    
  }
  name_pipeline_run_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_pipeline_run,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetTektonMetricsRequest.name_pipeline_run)
}

// .performance.metrics.v1alpha1.Range range = 2 [json_name = "range"];
inline bool GetTektonMetricsRequest::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool GetTektonMetricsRequest::has_range() const {
  return _internal_has_range();
}
inline void GetTektonMetricsRequest::clear_range() {
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::performance::metrics::v1alpha1::Range& GetTektonMetricsRequest::_internal_range() const {
  const ::performance::metrics::v1alpha1::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::metrics::v1alpha1::Range&>(
      ::performance::metrics::v1alpha1::_Range_default_instance_);
}
inline const ::performance::metrics::v1alpha1::Range& GetTektonMetricsRequest::range() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetTektonMetricsRequest.range)
  return _internal_range();
}
inline void GetTektonMetricsRequest::unsafe_arena_set_allocated_range(
    ::performance::metrics::v1alpha1::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.metrics.v1alpha1.GetTektonMetricsRequest.range)
}
inline ::performance::metrics::v1alpha1::Range* GetTektonMetricsRequest::release_range() {
  
  ::performance::metrics::v1alpha1::Range* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::metrics::v1alpha1::Range* GetTektonMetricsRequest::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.GetTektonMetricsRequest.range)
  
  ::performance::metrics::v1alpha1::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::performance::metrics::v1alpha1::Range* GetTektonMetricsRequest::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::metrics::v1alpha1::Range>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::performance::metrics::v1alpha1::Range* GetTektonMetricsRequest::mutable_range() {
  ::performance::metrics::v1alpha1::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetTektonMetricsRequest.range)
  return _msg;
}
inline void GetTektonMetricsRequest::set_allocated_range(::performance::metrics::v1alpha1::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::performance::metrics::v1alpha1::Range>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.GetTektonMetricsRequest.range)
}

// int32 page = 3 [json_name = "page"];
inline void GetTektonMetricsRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTektonMetricsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTektonMetricsRequest::page() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetTektonMetricsRequest.page)
  return _internal_page();
}
inline void GetTektonMetricsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void GetTektonMetricsRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetTektonMetricsRequest.page)
}

// int32 size = 4 [json_name = "size"];
inline void GetTektonMetricsRequest::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTektonMetricsRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTektonMetricsRequest::size() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetTektonMetricsRequest.size)
  return _internal_size();
}
inline void GetTektonMetricsRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void GetTektonMetricsRequest::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.GetTektonMetricsRequest.size)
}

// -------------------------------------------------------------------

// GetTektonMetricsResponse

// repeated .performance.metrics.v1alpha1.TektonMetricItem results = 1 [json_name = "results"];
inline int GetTektonMetricsResponse::_internal_results_size() const {
  return results_.size();
}
inline int GetTektonMetricsResponse::results_size() const {
  return _internal_results_size();
}
inline ::performance::metrics::v1alpha1::TektonMetricItem* GetTektonMetricsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.GetTektonMetricsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::TektonMetricItem >*
GetTektonMetricsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:performance.metrics.v1alpha1.GetTektonMetricsResponse.results)
  return &results_;
}
inline const ::performance::metrics::v1alpha1::TektonMetricItem& GetTektonMetricsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::performance::metrics::v1alpha1::TektonMetricItem& GetTektonMetricsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.GetTektonMetricsResponse.results)
  return _internal_results(index);
}
inline ::performance::metrics::v1alpha1::TektonMetricItem* GetTektonMetricsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::performance::metrics::v1alpha1::TektonMetricItem* GetTektonMetricsResponse::add_results() {
  ::performance::metrics::v1alpha1::TektonMetricItem* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.GetTektonMetricsResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::TektonMetricItem >&
GetTektonMetricsResponse::results() const {
  // @@protoc_insertion_point(field_list:performance.metrics.v1alpha1.GetTektonMetricsResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::performance::metrics::v1alpha1::MetricsInterval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::performance::metrics::v1alpha1::MetricsInterval>() {
  return ::performance::metrics::v1alpha1::MetricsInterval_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_5fapi_2eproto
