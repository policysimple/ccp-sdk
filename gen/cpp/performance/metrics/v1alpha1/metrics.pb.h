// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/metrics/v1alpha1/metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto;
namespace performance {
namespace metrics {
namespace v1alpha1 {
class MetricItem;
struct MetricItemDefaultTypeInternal;
extern MetricItemDefaultTypeInternal _MetricItem_default_instance_;
}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> ::performance::metrics::v1alpha1::MetricItem* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::MetricItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace performance {
namespace metrics {
namespace v1alpha1 {

// ===================================================================

class MetricItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.MetricItem) */ {
 public:
  inline MetricItem() : MetricItem(nullptr) {}
  ~MetricItem() override;
  explicit constexpr MetricItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricItem(const MetricItem& from);
  MetricItem(MetricItem&& from) noexcept
    : MetricItem() {
    *this = ::std::move(from);
  }

  inline MetricItem& operator=(const MetricItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricItem& operator=(MetricItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricItem* internal_default_instance() {
    return reinterpret_cast<const MetricItem*>(
               &_MetricItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetricItem& a, MetricItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricItem* New() const final {
    return new MetricItem();
  }

  MetricItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetricItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.MetricItem";
  }
  protected:
  explicit MetricItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kContainerFieldNumber = 2,
    kResourceFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string date = 1 [json_name = "date"];
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_MUST_USE_RESULT std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string container = 2 [json_name = "container"];
  void clear_container();
  const std::string& container() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container();
  PROTOBUF_MUST_USE_RESULT std::string* release_container();
  void set_allocated_container(std::string* container);
  private:
  const std::string& _internal_container() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container(const std::string& value);
  std::string* _internal_mutable_container();
  public:

  // string resource = 3 [json_name = "resource"];
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // double value = 4 [json_name = "value"];
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.MetricItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricItem

// string date = 1 [json_name = "date"];
inline void MetricItem::clear_date() {
  date_.ClearToEmpty();
}
inline const std::string& MetricItem::date() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.MetricItem.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricItem::set_date(ArgT0&& arg0, ArgT... args) {
 
 date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.MetricItem.date)
}
inline std::string* MetricItem::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.MetricItem.date)
  return _s;
}
inline const std::string& MetricItem::_internal_date() const {
  return date_.Get();
}
inline void MetricItem::_internal_set_date(const std::string& value) {
  
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricItem::_internal_mutable_date() {
  
  return date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricItem::release_date() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.MetricItem.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricItem::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.MetricItem.date)
}

// string container = 2 [json_name = "container"];
inline void MetricItem::clear_container() {
  container_.ClearToEmpty();
}
inline const std::string& MetricItem::container() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.MetricItem.container)
  return _internal_container();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricItem::set_container(ArgT0&& arg0, ArgT... args) {
 
 container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.MetricItem.container)
}
inline std::string* MetricItem::mutable_container() {
  std::string* _s = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.MetricItem.container)
  return _s;
}
inline const std::string& MetricItem::_internal_container() const {
  return container_.Get();
}
inline void MetricItem::_internal_set_container(const std::string& value) {
  
  container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricItem::_internal_mutable_container() {
  
  return container_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricItem::release_container() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.MetricItem.container)
  return container_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricItem::set_allocated_container(std::string* container) {
  if (container != nullptr) {
    
  } else {
    
  }
  container_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.MetricItem.container)
}

// string resource = 3 [json_name = "resource"];
inline void MetricItem::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& MetricItem::resource() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.MetricItem.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricItem::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.MetricItem.resource)
}
inline std::string* MetricItem::mutable_resource() {
  std::string* _s = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.MetricItem.resource)
  return _s;
}
inline const std::string& MetricItem::_internal_resource() const {
  return resource_.Get();
}
inline void MetricItem::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricItem::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricItem::release_resource() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.MetricItem.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricItem::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.MetricItem.resource)
}

// double value = 4 [json_name = "value"];
inline void MetricItem::clear_value() {
  value_ = 0;
}
inline double MetricItem::_internal_value() const {
  return value_;
}
inline double MetricItem::value() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.MetricItem.value)
  return _internal_value();
}
inline void MetricItem::_internal_set_value(double value) {
  
  value_ = value;
}
inline void MetricItem::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.MetricItem.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_2eproto
