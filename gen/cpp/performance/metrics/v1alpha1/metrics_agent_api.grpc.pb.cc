// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: performance/metrics/v1alpha1/metrics_agent_api.proto

#include "performance/metrics/v1alpha1/metrics_agent_api.pb.h"
#include "performance/metrics/v1alpha1/metrics_agent_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace performance {
namespace metrics {
namespace v1alpha1 {

static const char* MetricsAgentAPIService_method_names[] = {
  "/performance.metrics.v1alpha1.MetricsAgentAPIService/SaveMetrics",
};

std::unique_ptr< MetricsAgentAPIService::Stub> MetricsAgentAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetricsAgentAPIService::Stub> stub(new MetricsAgentAPIService::Stub(channel));
  return stub;
}

MetricsAgentAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SaveMetrics_(MetricsAgentAPIService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* MetricsAgentAPIService::Stub::SaveMetricsRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>::Create(channel_.get(), rpcmethod_SaveMetrics_, context);
}

::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* MetricsAgentAPIService::Stub::AsyncSaveMetricsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>::Create(channel_.get(), cq, rpcmethod_SaveMetrics_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>* MetricsAgentAPIService::Stub::PrepareAsyncSaveMetricsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>::Create(channel_.get(), cq, rpcmethod_SaveMetrics_, context, false, nullptr);
}

MetricsAgentAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsAgentAPIService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< MetricsAgentAPIService::Service, ::performance::metrics::v1alpha1::SaveMetricsRequest, ::performance::metrics::v1alpha1::SaveMetricsResponse>(
          std::mem_fn(&MetricsAgentAPIService::Service::SaveMetrics), this)));
}

MetricsAgentAPIService::Service::~Service() {
}

::grpc::Status MetricsAgentAPIService::Service::SaveMetrics(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::performance::metrics::v1alpha1::SaveMetricsResponse, ::performance::metrics::v1alpha1::SaveMetricsRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace performance
}  // namespace metrics
}  // namespace v1alpha1

