// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/metrics/v1alpha1/metrics_agent_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "performance/metrics/v1alpha1/metrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto;
namespace performance {
namespace metrics {
namespace v1alpha1 {
class PodMetric;
struct PodMetricDefaultTypeInternal;
extern PodMetricDefaultTypeInternal _PodMetric_default_instance_;
class PodMetric_AnnotationsEntry_DoNotUse;
struct PodMetric_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern PodMetric_AnnotationsEntry_DoNotUseDefaultTypeInternal _PodMetric_AnnotationsEntry_DoNotUse_default_instance_;
class PodMetric_LabelsEntry_DoNotUse;
struct PodMetric_LabelsEntry_DoNotUseDefaultTypeInternal;
extern PodMetric_LabelsEntry_DoNotUseDefaultTypeInternal _PodMetric_LabelsEntry_DoNotUse_default_instance_;
class SaveMetricsRequest;
struct SaveMetricsRequestDefaultTypeInternal;
extern SaveMetricsRequestDefaultTypeInternal _SaveMetricsRequest_default_instance_;
class SaveMetricsRequest_MetaEntry_DoNotUse;
struct SaveMetricsRequest_MetaEntry_DoNotUseDefaultTypeInternal;
extern SaveMetricsRequest_MetaEntry_DoNotUseDefaultTypeInternal _SaveMetricsRequest_MetaEntry_DoNotUse_default_instance_;
class SaveMetricsResponse;
struct SaveMetricsResponseDefaultTypeInternal;
extern SaveMetricsResponseDefaultTypeInternal _SaveMetricsResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> ::performance::metrics::v1alpha1::PodMetric* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::PodMetric>(Arena*);
template<> ::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::PodMetric_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::PodMetric_LabelsEntry_DoNotUse>(Arena*);
template<> ::performance::metrics::v1alpha1::SaveMetricsRequest* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::SaveMetricsRequest>(Arena*);
template<> ::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::SaveMetricsRequest_MetaEntry_DoNotUse>(Arena*);
template<> ::performance::metrics::v1alpha1::SaveMetricsResponse* Arena::CreateMaybeMessage<::performance::metrics::v1alpha1::SaveMetricsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace performance {
namespace metrics {
namespace v1alpha1 {

// ===================================================================

class SaveMetricsRequest_MetaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SaveMetricsRequest_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SaveMetricsRequest_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SaveMetricsRequest_MetaEntry_DoNotUse();
  explicit constexpr SaveMetricsRequest_MetaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SaveMetricsRequest_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SaveMetricsRequest_MetaEntry_DoNotUse& other);
  static const SaveMetricsRequest_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SaveMetricsRequest_MetaEntry_DoNotUse*>(&_SaveMetricsRequest_MetaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.metrics.v1alpha1.SaveMetricsRequest.MetaEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.metrics.v1alpha1.SaveMetricsRequest.MetaEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SaveMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.SaveMetricsRequest) */ {
 public:
  inline SaveMetricsRequest() : SaveMetricsRequest(nullptr) {}
  ~SaveMetricsRequest() override;
  explicit constexpr SaveMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveMetricsRequest(const SaveMetricsRequest& from);
  SaveMetricsRequest(SaveMetricsRequest&& from) noexcept
    : SaveMetricsRequest() {
    *this = ::std::move(from);
  }

  inline SaveMetricsRequest& operator=(const SaveMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveMetricsRequest& operator=(SaveMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const SaveMetricsRequest*>(
               &_SaveMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SaveMetricsRequest& a, SaveMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveMetricsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveMetricsRequest* New() const final {
    return new SaveMetricsRequest();
  }

  SaveMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaveMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.SaveMetricsRequest";
  }
  protected:
  explicit SaveMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 2,
    kMetricsFieldNumber = 3,
    kClusterNameFieldNumber = 1,
  };
  // map<string, string> meta = 2 [json_name = "meta"];
  int meta_size() const;
  private:
  int _internal_meta_size() const;
  public:
  void clear_meta();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_meta();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_meta();

  // repeated .performance.metrics.v1alpha1.PodMetric metrics = 3 [json_name = "metrics"];
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::performance::metrics::v1alpha1::PodMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::PodMetric >*
      mutable_metrics();
  private:
  const ::performance::metrics::v1alpha1::PodMetric& _internal_metrics(int index) const;
  ::performance::metrics::v1alpha1::PodMetric* _internal_add_metrics();
  public:
  const ::performance::metrics::v1alpha1::PodMetric& metrics(int index) const;
  ::performance::metrics::v1alpha1::PodMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::PodMetric >&
      metrics() const;

  // string cluster_name = 1 [json_name = "clusterName"];
  void clear_cluster_name();
  const std::string& cluster_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_cluster_name();
  void set_allocated_cluster_name(std::string* cluster_name);
  private:
  const std::string& _internal_cluster_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_name(const std::string& value);
  std::string* _internal_mutable_cluster_name();
  public:

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.SaveMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SaveMetricsRequest_MetaEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::PodMetric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SaveMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.SaveMetricsResponse) */ {
 public:
  inline SaveMetricsResponse() : SaveMetricsResponse(nullptr) {}
  ~SaveMetricsResponse() override;
  explicit constexpr SaveMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveMetricsResponse(const SaveMetricsResponse& from);
  SaveMetricsResponse(SaveMetricsResponse&& from) noexcept
    : SaveMetricsResponse() {
    *this = ::std::move(from);
  }

  inline SaveMetricsResponse& operator=(const SaveMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveMetricsResponse& operator=(SaveMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const SaveMetricsResponse*>(
               &_SaveMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SaveMetricsResponse& a, SaveMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveMetricsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveMetricsResponse* New() const final {
    return new SaveMetricsResponse();
  }

  SaveMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaveMetricsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.SaveMetricsResponse";
  }
  protected:
  explicit SaveMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.SaveMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto;
};
// -------------------------------------------------------------------

class PodMetric_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodMetric_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodMetric_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PodMetric_AnnotationsEntry_DoNotUse();
  explicit constexpr PodMetric_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PodMetric_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodMetric_AnnotationsEntry_DoNotUse& other);
  static const PodMetric_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodMetric_AnnotationsEntry_DoNotUse*>(&_PodMetric_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.metrics.v1alpha1.PodMetric.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.metrics.v1alpha1.PodMetric.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PodMetric_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodMetric_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PodMetric_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PodMetric_LabelsEntry_DoNotUse();
  explicit constexpr PodMetric_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PodMetric_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PodMetric_LabelsEntry_DoNotUse& other);
  static const PodMetric_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PodMetric_LabelsEntry_DoNotUse*>(&_PodMetric_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.metrics.v1alpha1.PodMetric.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.metrics.v1alpha1.PodMetric.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PodMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.metrics.v1alpha1.PodMetric) */ {
 public:
  inline PodMetric() : PodMetric(nullptr) {}
  ~PodMetric() override;
  explicit constexpr PodMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PodMetric(const PodMetric& from);
  PodMetric(PodMetric&& from) noexcept
    : PodMetric() {
    *this = ::std::move(from);
  }

  inline PodMetric& operator=(const PodMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodMetric& operator=(PodMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PodMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const PodMetric* internal_default_instance() {
    return reinterpret_cast<const PodMetric*>(
               &_PodMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PodMetric& a, PodMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(PodMetric* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PodMetric* New() const final {
    return new PodMetric();
  }

  PodMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PodMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PodMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PodMetric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.metrics.v1alpha1.PodMetric";
  }
  protected:
  explicit PodMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVolumesFieldNumber = 20,
    kAnnotationsFieldNumber = 21,
    kLabelsFieldNumber = 22,
    kNamespaceFieldNumber = 1,
    kNameFieldNumber = 2,
    kOwnerNameFieldNumber = 3,
    kOwnerKubernetesUidFieldNumber = 4,
    kOwnerKindFieldNumber = 5,
    kOwnerApiVersionFieldNumber = 6,
    kContainerNameFieldNumber = 7,
    kStatusFieldNumber = 8,
    kClusterNameFieldNumber = 12,
    kExternalIpFieldNumber = 23,
    kInternalIpFieldNumber = 24,
    kNodeNameFieldNumber = 27,
    kKubernetesUidFieldNumber = 28,
    kRestartCountFieldNumber = 10,
    kIsControlledFieldNumber = 9,
    kIsReadyFieldNumber = 11,
    kUsageCpuFieldNumber = 13,
    kUsageMemoryFieldNumber = 14,
    kUsageStorageFieldNumber = 15,
    kRequestCpuFieldNumber = 16,
    kRequestMemoryFieldNumber = 17,
    kLimitCpuFieldNumber = 18,
    kLimitMemoryFieldNumber = 19,
    kAllocatableStorageEphemeralFieldNumber = 25,
    kAllocatableStorageFieldNumber = 26,
  };
  // repeated string volumes = 20 [json_name = "volumes"];
  int volumes_size() const;
  private:
  int _internal_volumes_size() const;
  public:
  void clear_volumes();
  const std::string& volumes(int index) const;
  std::string* mutable_volumes(int index);
  void set_volumes(int index, const std::string& value);
  void set_volumes(int index, std::string&& value);
  void set_volumes(int index, const char* value);
  void set_volumes(int index, const char* value, size_t size);
  std::string* add_volumes();
  void add_volumes(const std::string& value);
  void add_volumes(std::string&& value);
  void add_volumes(const char* value);
  void add_volumes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_volumes();
  private:
  const std::string& _internal_volumes(int index) const;
  std::string* _internal_add_volumes();
  public:

  // map<string, string> annotations = 21 [json_name = "annotations"];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // map<string, string> labels = 22 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string namespace = 1 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string owner_name = 3 [json_name = "ownerName"];
  void clear_owner_name();
  const std::string& owner_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_name();
  void set_allocated_owner_name(std::string* owner_name);
  private:
  const std::string& _internal_owner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_name(const std::string& value);
  std::string* _internal_mutable_owner_name();
  public:

  // string owner_kubernetes_uid = 4 [json_name = "ownerKubernetesUid"];
  void clear_owner_kubernetes_uid();
  const std::string& owner_kubernetes_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_kubernetes_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_kubernetes_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_kubernetes_uid();
  void set_allocated_owner_kubernetes_uid(std::string* owner_kubernetes_uid);
  private:
  const std::string& _internal_owner_kubernetes_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_kubernetes_uid(const std::string& value);
  std::string* _internal_mutable_owner_kubernetes_uid();
  public:

  // string owner_kind = 5 [json_name = "ownerKind"];
  void clear_owner_kind();
  const std::string& owner_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_kind();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_kind();
  void set_allocated_owner_kind(std::string* owner_kind);
  private:
  const std::string& _internal_owner_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_kind(const std::string& value);
  std::string* _internal_mutable_owner_kind();
  public:

  // string owner_api_version = 6 [json_name = "ownerApiVersion"];
  void clear_owner_api_version();
  const std::string& owner_api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_api_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_api_version();
  void set_allocated_owner_api_version(std::string* owner_api_version);
  private:
  const std::string& _internal_owner_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_api_version(const std::string& value);
  std::string* _internal_mutable_owner_api_version();
  public:

  // string container_name = 7 [json_name = "containerName"];
  void clear_container_name();
  const std::string& container_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_name();
  void set_allocated_container_name(std::string* container_name);
  private:
  const std::string& _internal_container_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_name(const std::string& value);
  std::string* _internal_mutable_container_name();
  public:

  // string status = 8 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string cluster_name = 12 [json_name = "clusterName"];
  void clear_cluster_name();
  const std::string& cluster_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_cluster_name();
  void set_allocated_cluster_name(std::string* cluster_name);
  private:
  const std::string& _internal_cluster_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_name(const std::string& value);
  std::string* _internal_mutable_cluster_name();
  public:

  // string external_ip = 23 [json_name = "externalIp"];
  void clear_external_ip();
  const std::string& external_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_external_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_external_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_external_ip();
  void set_allocated_external_ip(std::string* external_ip);
  private:
  const std::string& _internal_external_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_external_ip(const std::string& value);
  std::string* _internal_mutable_external_ip();
  public:

  // string internal_ip = 24 [json_name = "internalIp"];
  void clear_internal_ip();
  const std::string& internal_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_internal_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_internal_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_internal_ip();
  void set_allocated_internal_ip(std::string* internal_ip);
  private:
  const std::string& _internal_internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_ip(const std::string& value);
  std::string* _internal_mutable_internal_ip();
  public:

  // string node_name = 27 [json_name = "nodeName"];
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // string kubernetes_uid = 28 [json_name = "kubernetesUid"];
  void clear_kubernetes_uid();
  const std::string& kubernetes_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kubernetes_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kubernetes_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_kubernetes_uid();
  void set_allocated_kubernetes_uid(std::string* kubernetes_uid);
  private:
  const std::string& _internal_kubernetes_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kubernetes_uid(const std::string& value);
  std::string* _internal_mutable_kubernetes_uid();
  public:

  // int32 restart_count = 10 [json_name = "restartCount"];
  void clear_restart_count();
  ::PROTOBUF_NAMESPACE_ID::int32 restart_count() const;
  void set_restart_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_restart_count() const;
  void _internal_set_restart_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_controlled = 9 [json_name = "isControlled"];
  void clear_is_controlled();
  bool is_controlled() const;
  void set_is_controlled(bool value);
  private:
  bool _internal_is_controlled() const;
  void _internal_set_is_controlled(bool value);
  public:

  // bool is_ready = 11 [json_name = "isReady"];
  void clear_is_ready();
  bool is_ready() const;
  void set_is_ready(bool value);
  private:
  bool _internal_is_ready() const;
  void _internal_set_is_ready(bool value);
  public:

  // int64 usage_cpu = 13 [json_name = "usageCpu"];
  void clear_usage_cpu();
  ::PROTOBUF_NAMESPACE_ID::int64 usage_cpu() const;
  void set_usage_cpu(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_usage_cpu() const;
  void _internal_set_usage_cpu(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 usage_memory = 14 [json_name = "usageMemory"];
  void clear_usage_memory();
  ::PROTOBUF_NAMESPACE_ID::int64 usage_memory() const;
  void set_usage_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_usage_memory() const;
  void _internal_set_usage_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 usage_storage = 15 [json_name = "usageStorage"];
  void clear_usage_storage();
  ::PROTOBUF_NAMESPACE_ID::int64 usage_storage() const;
  void set_usage_storage(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_usage_storage() const;
  void _internal_set_usage_storage(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 request_cpu = 16 [json_name = "requestCpu"];
  void clear_request_cpu();
  ::PROTOBUF_NAMESPACE_ID::int64 request_cpu() const;
  void set_request_cpu(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_cpu() const;
  void _internal_set_request_cpu(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 request_memory = 17 [json_name = "requestMemory"];
  void clear_request_memory();
  ::PROTOBUF_NAMESPACE_ID::int64 request_memory() const;
  void set_request_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_memory() const;
  void _internal_set_request_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit_cpu = 18 [json_name = "limitCpu"];
  void clear_limit_cpu();
  ::PROTOBUF_NAMESPACE_ID::int64 limit_cpu() const;
  void set_limit_cpu(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit_cpu() const;
  void _internal_set_limit_cpu(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit_memory = 19 [json_name = "limitMemory"];
  void clear_limit_memory();
  ::PROTOBUF_NAMESPACE_ID::int64 limit_memory() const;
  void set_limit_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit_memory() const;
  void _internal_set_limit_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 allocatable_storage_ephemeral = 25 [json_name = "allocatableStorageEphemeral"];
  void clear_allocatable_storage_ephemeral();
  ::PROTOBUF_NAMESPACE_ID::int64 allocatable_storage_ephemeral() const;
  void set_allocatable_storage_ephemeral(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_allocatable_storage_ephemeral() const;
  void _internal_set_allocatable_storage_ephemeral(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 allocatable_storage = 26 [json_name = "allocatableStorage"];
  void clear_allocatable_storage();
  ::PROTOBUF_NAMESPACE_ID::int64 allocatable_storage() const;
  void set_allocatable_storage(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_allocatable_storage() const;
  void _internal_set_allocatable_storage(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:performance.metrics.v1alpha1.PodMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> volumes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodMetric_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PodMetric_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_kubernetes_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_api_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kubernetes_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 restart_count_;
  bool is_controlled_;
  bool is_ready_;
  ::PROTOBUF_NAMESPACE_ID::int64 usage_cpu_;
  ::PROTOBUF_NAMESPACE_ID::int64 usage_memory_;
  ::PROTOBUF_NAMESPACE_ID::int64 usage_storage_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_cpu_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_memory_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_cpu_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_memory_;
  ::PROTOBUF_NAMESPACE_ID::int64 allocatable_storage_ephemeral_;
  ::PROTOBUF_NAMESPACE_ID::int64 allocatable_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SaveMetricsRequest

// string cluster_name = 1 [json_name = "clusterName"];
inline void SaveMetricsRequest::clear_cluster_name() {
  cluster_name_.ClearToEmpty();
}
inline const std::string& SaveMetricsRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.SaveMetricsRequest.cluster_name)
  return _internal_cluster_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveMetricsRequest::set_cluster_name(ArgT0&& arg0, ArgT... args) {
 
 cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.SaveMetricsRequest.cluster_name)
}
inline std::string* SaveMetricsRequest::mutable_cluster_name() {
  std::string* _s = _internal_mutable_cluster_name();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.SaveMetricsRequest.cluster_name)
  return _s;
}
inline const std::string& SaveMetricsRequest::_internal_cluster_name() const {
  return cluster_name_.Get();
}
inline void SaveMetricsRequest::_internal_set_cluster_name(const std::string& value) {
  
  cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SaveMetricsRequest::_internal_mutable_cluster_name() {
  
  return cluster_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SaveMetricsRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.SaveMetricsRequest.cluster_name)
  return cluster_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SaveMetricsRequest::set_allocated_cluster_name(std::string* cluster_name) {
  if (cluster_name != nullptr) {
    
  } else {
    
  }
  cluster_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.SaveMetricsRequest.cluster_name)
}

// map<string, string> meta = 2 [json_name = "meta"];
inline int SaveMetricsRequest::_internal_meta_size() const {
  return meta_.size();
}
inline int SaveMetricsRequest::meta_size() const {
  return _internal_meta_size();
}
inline void SaveMetricsRequest::clear_meta() {
  meta_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SaveMetricsRequest::_internal_meta() const {
  return meta_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SaveMetricsRequest::meta() const {
  // @@protoc_insertion_point(field_map:performance.metrics.v1alpha1.SaveMetricsRequest.meta)
  return _internal_meta();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SaveMetricsRequest::_internal_mutable_meta() {
  return meta_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SaveMetricsRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:performance.metrics.v1alpha1.SaveMetricsRequest.meta)
  return _internal_mutable_meta();
}

// repeated .performance.metrics.v1alpha1.PodMetric metrics = 3 [json_name = "metrics"];
inline int SaveMetricsRequest::_internal_metrics_size() const {
  return metrics_.size();
}
inline int SaveMetricsRequest::metrics_size() const {
  return _internal_metrics_size();
}
inline void SaveMetricsRequest::clear_metrics() {
  metrics_.Clear();
}
inline ::performance::metrics::v1alpha1::PodMetric* SaveMetricsRequest::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.SaveMetricsRequest.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::PodMetric >*
SaveMetricsRequest::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:performance.metrics.v1alpha1.SaveMetricsRequest.metrics)
  return &metrics_;
}
inline const ::performance::metrics::v1alpha1::PodMetric& SaveMetricsRequest::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::performance::metrics::v1alpha1::PodMetric& SaveMetricsRequest::metrics(int index) const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.SaveMetricsRequest.metrics)
  return _internal_metrics(index);
}
inline ::performance::metrics::v1alpha1::PodMetric* SaveMetricsRequest::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::performance::metrics::v1alpha1::PodMetric* SaveMetricsRequest::add_metrics() {
  ::performance::metrics::v1alpha1::PodMetric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.SaveMetricsRequest.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::metrics::v1alpha1::PodMetric >&
SaveMetricsRequest::metrics() const {
  // @@protoc_insertion_point(field_list:performance.metrics.v1alpha1.SaveMetricsRequest.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// SaveMetricsResponse

// bool success = 1 [json_name = "success"];
inline void SaveMetricsResponse::clear_success() {
  success_ = false;
}
inline bool SaveMetricsResponse::_internal_success() const {
  return success_;
}
inline bool SaveMetricsResponse::success() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.SaveMetricsResponse.success)
  return _internal_success();
}
inline void SaveMetricsResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SaveMetricsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.SaveMetricsResponse.success)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PodMetric

// string namespace = 1 [json_name = "namespace"];
inline void PodMetric::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& PodMetric::namespace_() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.namespace)
}
inline std::string* PodMetric::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.namespace)
  return _s;
}
inline const std::string& PodMetric::_internal_namespace_() const {
  return namespace__.Get();
}
inline void PodMetric::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_namespace_() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.namespace)
}

// string name = 2 [json_name = "name"];
inline void PodMetric::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PodMetric::name() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.name)
}
inline std::string* PodMetric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.name)
  return _s;
}
inline const std::string& PodMetric::_internal_name() const {
  return name_.Get();
}
inline void PodMetric::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_name() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.name)
}

// string owner_name = 3 [json_name = "ownerName"];
inline void PodMetric::clear_owner_name() {
  owner_name_.ClearToEmpty();
}
inline const std::string& PodMetric::owner_name() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.owner_name)
  return _internal_owner_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_owner_name(ArgT0&& arg0, ArgT... args) {
 
 owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.owner_name)
}
inline std::string* PodMetric::mutable_owner_name() {
  std::string* _s = _internal_mutable_owner_name();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.owner_name)
  return _s;
}
inline const std::string& PodMetric::_internal_owner_name() const {
  return owner_name_.Get();
}
inline void PodMetric::_internal_set_owner_name(const std::string& value) {
  
  owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_owner_name() {
  
  return owner_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_owner_name() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.owner_name)
  return owner_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_owner_name(std::string* owner_name) {
  if (owner_name != nullptr) {
    
  } else {
    
  }
  owner_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.owner_name)
}

// string owner_kubernetes_uid = 4 [json_name = "ownerKubernetesUid"];
inline void PodMetric::clear_owner_kubernetes_uid() {
  owner_kubernetes_uid_.ClearToEmpty();
}
inline const std::string& PodMetric::owner_kubernetes_uid() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.owner_kubernetes_uid)
  return _internal_owner_kubernetes_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_owner_kubernetes_uid(ArgT0&& arg0, ArgT... args) {
 
 owner_kubernetes_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.owner_kubernetes_uid)
}
inline std::string* PodMetric::mutable_owner_kubernetes_uid() {
  std::string* _s = _internal_mutable_owner_kubernetes_uid();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.owner_kubernetes_uid)
  return _s;
}
inline const std::string& PodMetric::_internal_owner_kubernetes_uid() const {
  return owner_kubernetes_uid_.Get();
}
inline void PodMetric::_internal_set_owner_kubernetes_uid(const std::string& value) {
  
  owner_kubernetes_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_owner_kubernetes_uid() {
  
  return owner_kubernetes_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_owner_kubernetes_uid() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.owner_kubernetes_uid)
  return owner_kubernetes_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_owner_kubernetes_uid(std::string* owner_kubernetes_uid) {
  if (owner_kubernetes_uid != nullptr) {
    
  } else {
    
  }
  owner_kubernetes_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_kubernetes_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.owner_kubernetes_uid)
}

// string owner_kind = 5 [json_name = "ownerKind"];
inline void PodMetric::clear_owner_kind() {
  owner_kind_.ClearToEmpty();
}
inline const std::string& PodMetric::owner_kind() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.owner_kind)
  return _internal_owner_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_owner_kind(ArgT0&& arg0, ArgT... args) {
 
 owner_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.owner_kind)
}
inline std::string* PodMetric::mutable_owner_kind() {
  std::string* _s = _internal_mutable_owner_kind();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.owner_kind)
  return _s;
}
inline const std::string& PodMetric::_internal_owner_kind() const {
  return owner_kind_.Get();
}
inline void PodMetric::_internal_set_owner_kind(const std::string& value) {
  
  owner_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_owner_kind() {
  
  return owner_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_owner_kind() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.owner_kind)
  return owner_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_owner_kind(std::string* owner_kind) {
  if (owner_kind != nullptr) {
    
  } else {
    
  }
  owner_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_kind,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.owner_kind)
}

// string owner_api_version = 6 [json_name = "ownerApiVersion"];
inline void PodMetric::clear_owner_api_version() {
  owner_api_version_.ClearToEmpty();
}
inline const std::string& PodMetric::owner_api_version() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.owner_api_version)
  return _internal_owner_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_owner_api_version(ArgT0&& arg0, ArgT... args) {
 
 owner_api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.owner_api_version)
}
inline std::string* PodMetric::mutable_owner_api_version() {
  std::string* _s = _internal_mutable_owner_api_version();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.owner_api_version)
  return _s;
}
inline const std::string& PodMetric::_internal_owner_api_version() const {
  return owner_api_version_.Get();
}
inline void PodMetric::_internal_set_owner_api_version(const std::string& value) {
  
  owner_api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_owner_api_version() {
  
  return owner_api_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_owner_api_version() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.owner_api_version)
  return owner_api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_owner_api_version(std::string* owner_api_version) {
  if (owner_api_version != nullptr) {
    
  } else {
    
  }
  owner_api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_api_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.owner_api_version)
}

// string container_name = 7 [json_name = "containerName"];
inline void PodMetric::clear_container_name() {
  container_name_.ClearToEmpty();
}
inline const std::string& PodMetric::container_name() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.container_name)
  return _internal_container_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_container_name(ArgT0&& arg0, ArgT... args) {
 
 container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.container_name)
}
inline std::string* PodMetric::mutable_container_name() {
  std::string* _s = _internal_mutable_container_name();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.container_name)
  return _s;
}
inline const std::string& PodMetric::_internal_container_name() const {
  return container_name_.Get();
}
inline void PodMetric::_internal_set_container_name(const std::string& value) {
  
  container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_container_name() {
  
  return container_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_container_name() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.container_name)
  return container_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_container_name(std::string* container_name) {
  if (container_name != nullptr) {
    
  } else {
    
  }
  container_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.container_name)
}

// string status = 8 [json_name = "status"];
inline void PodMetric::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& PodMetric::status() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.status)
}
inline std::string* PodMetric::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.status)
  return _s;
}
inline const std::string& PodMetric::_internal_status() const {
  return status_.Get();
}
inline void PodMetric::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_status() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.status)
}

// bool is_controlled = 9 [json_name = "isControlled"];
inline void PodMetric::clear_is_controlled() {
  is_controlled_ = false;
}
inline bool PodMetric::_internal_is_controlled() const {
  return is_controlled_;
}
inline bool PodMetric::is_controlled() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.is_controlled)
  return _internal_is_controlled();
}
inline void PodMetric::_internal_set_is_controlled(bool value) {
  
  is_controlled_ = value;
}
inline void PodMetric::set_is_controlled(bool value) {
  _internal_set_is_controlled(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.is_controlled)
}

// int32 restart_count = 10 [json_name = "restartCount"];
inline void PodMetric::clear_restart_count() {
  restart_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PodMetric::_internal_restart_count() const {
  return restart_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PodMetric::restart_count() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.restart_count)
  return _internal_restart_count();
}
inline void PodMetric::_internal_set_restart_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  restart_count_ = value;
}
inline void PodMetric::set_restart_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_restart_count(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.restart_count)
}

// bool is_ready = 11 [json_name = "isReady"];
inline void PodMetric::clear_is_ready() {
  is_ready_ = false;
}
inline bool PodMetric::_internal_is_ready() const {
  return is_ready_;
}
inline bool PodMetric::is_ready() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.is_ready)
  return _internal_is_ready();
}
inline void PodMetric::_internal_set_is_ready(bool value) {
  
  is_ready_ = value;
}
inline void PodMetric::set_is_ready(bool value) {
  _internal_set_is_ready(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.is_ready)
}

// string cluster_name = 12 [json_name = "clusterName"];
inline void PodMetric::clear_cluster_name() {
  cluster_name_.ClearToEmpty();
}
inline const std::string& PodMetric::cluster_name() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.cluster_name)
  return _internal_cluster_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_cluster_name(ArgT0&& arg0, ArgT... args) {
 
 cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.cluster_name)
}
inline std::string* PodMetric::mutable_cluster_name() {
  std::string* _s = _internal_mutable_cluster_name();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.cluster_name)
  return _s;
}
inline const std::string& PodMetric::_internal_cluster_name() const {
  return cluster_name_.Get();
}
inline void PodMetric::_internal_set_cluster_name(const std::string& value) {
  
  cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_cluster_name() {
  
  return cluster_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_cluster_name() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.cluster_name)
  return cluster_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_cluster_name(std::string* cluster_name) {
  if (cluster_name != nullptr) {
    
  } else {
    
  }
  cluster_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.cluster_name)
}

// int64 usage_cpu = 13 [json_name = "usageCpu"];
inline void PodMetric::clear_usage_cpu() {
  usage_cpu_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_usage_cpu() const {
  return usage_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::usage_cpu() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.usage_cpu)
  return _internal_usage_cpu();
}
inline void PodMetric::_internal_set_usage_cpu(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  usage_cpu_ = value;
}
inline void PodMetric::set_usage_cpu(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_usage_cpu(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.usage_cpu)
}

// int64 usage_memory = 14 [json_name = "usageMemory"];
inline void PodMetric::clear_usage_memory() {
  usage_memory_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_usage_memory() const {
  return usage_memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::usage_memory() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.usage_memory)
  return _internal_usage_memory();
}
inline void PodMetric::_internal_set_usage_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  usage_memory_ = value;
}
inline void PodMetric::set_usage_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_usage_memory(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.usage_memory)
}

// int64 usage_storage = 15 [json_name = "usageStorage"];
inline void PodMetric::clear_usage_storage() {
  usage_storage_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_usage_storage() const {
  return usage_storage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::usage_storage() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.usage_storage)
  return _internal_usage_storage();
}
inline void PodMetric::_internal_set_usage_storage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  usage_storage_ = value;
}
inline void PodMetric::set_usage_storage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_usage_storage(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.usage_storage)
}

// int64 request_cpu = 16 [json_name = "requestCpu"];
inline void PodMetric::clear_request_cpu() {
  request_cpu_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_request_cpu() const {
  return request_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::request_cpu() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.request_cpu)
  return _internal_request_cpu();
}
inline void PodMetric::_internal_set_request_cpu(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_cpu_ = value;
}
inline void PodMetric::set_request_cpu(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_cpu(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.request_cpu)
}

// int64 request_memory = 17 [json_name = "requestMemory"];
inline void PodMetric::clear_request_memory() {
  request_memory_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_request_memory() const {
  return request_memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::request_memory() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.request_memory)
  return _internal_request_memory();
}
inline void PodMetric::_internal_set_request_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_memory_ = value;
}
inline void PodMetric::set_request_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_memory(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.request_memory)
}

// int64 limit_cpu = 18 [json_name = "limitCpu"];
inline void PodMetric::clear_limit_cpu() {
  limit_cpu_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_limit_cpu() const {
  return limit_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::limit_cpu() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.limit_cpu)
  return _internal_limit_cpu();
}
inline void PodMetric::_internal_set_limit_cpu(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_cpu_ = value;
}
inline void PodMetric::set_limit_cpu(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit_cpu(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.limit_cpu)
}

// int64 limit_memory = 19 [json_name = "limitMemory"];
inline void PodMetric::clear_limit_memory() {
  limit_memory_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_limit_memory() const {
  return limit_memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::limit_memory() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.limit_memory)
  return _internal_limit_memory();
}
inline void PodMetric::_internal_set_limit_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_memory_ = value;
}
inline void PodMetric::set_limit_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit_memory(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.limit_memory)
}

// repeated string volumes = 20 [json_name = "volumes"];
inline int PodMetric::_internal_volumes_size() const {
  return volumes_.size();
}
inline int PodMetric::volumes_size() const {
  return _internal_volumes_size();
}
inline void PodMetric::clear_volumes() {
  volumes_.Clear();
}
inline std::string* PodMetric::add_volumes() {
  std::string* _s = _internal_add_volumes();
  // @@protoc_insertion_point(field_add_mutable:performance.metrics.v1alpha1.PodMetric.volumes)
  return _s;
}
inline const std::string& PodMetric::_internal_volumes(int index) const {
  return volumes_.Get(index);
}
inline const std::string& PodMetric::volumes(int index) const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.volumes)
  return _internal_volumes(index);
}
inline std::string* PodMetric::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.volumes)
  return volumes_.Mutable(index);
}
inline void PodMetric::set_volumes(int index, const std::string& value) {
  volumes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline void PodMetric::set_volumes(int index, std::string&& value) {
  volumes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline void PodMetric::set_volumes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  volumes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline void PodMetric::set_volumes(int index, const char* value, size_t size) {
  volumes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline std::string* PodMetric::_internal_add_volumes() {
  return volumes_.Add();
}
inline void PodMetric::add_volumes(const std::string& value) {
  volumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline void PodMetric::add_volumes(std::string&& value) {
  volumes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline void PodMetric::add_volumes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  volumes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline void PodMetric::add_volumes(const char* value, size_t size) {
  volumes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:performance.metrics.v1alpha1.PodMetric.volumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PodMetric::volumes() const {
  // @@protoc_insertion_point(field_list:performance.metrics.v1alpha1.PodMetric.volumes)
  return volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PodMetric::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:performance.metrics.v1alpha1.PodMetric.volumes)
  return &volumes_;
}

// map<string, string> annotations = 21 [json_name = "annotations"];
inline int PodMetric::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PodMetric::annotations_size() const {
  return _internal_annotations_size();
}
inline void PodMetric::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodMetric::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodMetric::annotations() const {
  // @@protoc_insertion_point(field_map:performance.metrics.v1alpha1.PodMetric.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodMetric::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodMetric::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:performance.metrics.v1alpha1.PodMetric.annotations)
  return _internal_mutable_annotations();
}

// map<string, string> labels = 22 [json_name = "labels"];
inline int PodMetric::_internal_labels_size() const {
  return labels_.size();
}
inline int PodMetric::labels_size() const {
  return _internal_labels_size();
}
inline void PodMetric::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodMetric::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PodMetric::labels() const {
  // @@protoc_insertion_point(field_map:performance.metrics.v1alpha1.PodMetric.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodMetric::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PodMetric::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:performance.metrics.v1alpha1.PodMetric.labels)
  return _internal_mutable_labels();
}

// string external_ip = 23 [json_name = "externalIp"];
inline void PodMetric::clear_external_ip() {
  external_ip_.ClearToEmpty();
}
inline const std::string& PodMetric::external_ip() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.external_ip)
  return _internal_external_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_external_ip(ArgT0&& arg0, ArgT... args) {
 
 external_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.external_ip)
}
inline std::string* PodMetric::mutable_external_ip() {
  std::string* _s = _internal_mutable_external_ip();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.external_ip)
  return _s;
}
inline const std::string& PodMetric::_internal_external_ip() const {
  return external_ip_.Get();
}
inline void PodMetric::_internal_set_external_ip(const std::string& value) {
  
  external_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_external_ip() {
  
  return external_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_external_ip() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.external_ip)
  return external_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_external_ip(std::string* external_ip) {
  if (external_ip != nullptr) {
    
  } else {
    
  }
  external_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.external_ip)
}

// string internal_ip = 24 [json_name = "internalIp"];
inline void PodMetric::clear_internal_ip() {
  internal_ip_.ClearToEmpty();
}
inline const std::string& PodMetric::internal_ip() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.internal_ip)
  return _internal_internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_internal_ip(ArgT0&& arg0, ArgT... args) {
 
 internal_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.internal_ip)
}
inline std::string* PodMetric::mutable_internal_ip() {
  std::string* _s = _internal_mutable_internal_ip();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.internal_ip)
  return _s;
}
inline const std::string& PodMetric::_internal_internal_ip() const {
  return internal_ip_.Get();
}
inline void PodMetric::_internal_set_internal_ip(const std::string& value) {
  
  internal_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_internal_ip() {
  
  return internal_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_internal_ip() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.internal_ip)
  return internal_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_internal_ip(std::string* internal_ip) {
  if (internal_ip != nullptr) {
    
  } else {
    
  }
  internal_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), internal_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.internal_ip)
}

// int64 allocatable_storage_ephemeral = 25 [json_name = "allocatableStorageEphemeral"];
inline void PodMetric::clear_allocatable_storage_ephemeral() {
  allocatable_storage_ephemeral_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_allocatable_storage_ephemeral() const {
  return allocatable_storage_ephemeral_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::allocatable_storage_ephemeral() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.allocatable_storage_ephemeral)
  return _internal_allocatable_storage_ephemeral();
}
inline void PodMetric::_internal_set_allocatable_storage_ephemeral(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allocatable_storage_ephemeral_ = value;
}
inline void PodMetric::set_allocatable_storage_ephemeral(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_allocatable_storage_ephemeral(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.allocatable_storage_ephemeral)
}

// int64 allocatable_storage = 26 [json_name = "allocatableStorage"];
inline void PodMetric::clear_allocatable_storage() {
  allocatable_storage_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::_internal_allocatable_storage() const {
  return allocatable_storage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PodMetric::allocatable_storage() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.allocatable_storage)
  return _internal_allocatable_storage();
}
inline void PodMetric::_internal_set_allocatable_storage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allocatable_storage_ = value;
}
inline void PodMetric::set_allocatable_storage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_allocatable_storage(value);
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.allocatable_storage)
}

// string node_name = 27 [json_name = "nodeName"];
inline void PodMetric::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& PodMetric::node_name() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_node_name(ArgT0&& arg0, ArgT... args) {
 
 node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.node_name)
}
inline std::string* PodMetric::mutable_node_name() {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.node_name)
  return _s;
}
inline const std::string& PodMetric::_internal_node_name() const {
  return node_name_.Get();
}
inline void PodMetric::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_node_name() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.node_name)
}

// string kubernetes_uid = 28 [json_name = "kubernetesUid"];
inline void PodMetric::clear_kubernetes_uid() {
  kubernetes_uid_.ClearToEmpty();
}
inline const std::string& PodMetric::kubernetes_uid() const {
  // @@protoc_insertion_point(field_get:performance.metrics.v1alpha1.PodMetric.kubernetes_uid)
  return _internal_kubernetes_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodMetric::set_kubernetes_uid(ArgT0&& arg0, ArgT... args) {
 
 kubernetes_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.metrics.v1alpha1.PodMetric.kubernetes_uid)
}
inline std::string* PodMetric::mutable_kubernetes_uid() {
  std::string* _s = _internal_mutable_kubernetes_uid();
  // @@protoc_insertion_point(field_mutable:performance.metrics.v1alpha1.PodMetric.kubernetes_uid)
  return _s;
}
inline const std::string& PodMetric::_internal_kubernetes_uid() const {
  return kubernetes_uid_.Get();
}
inline void PodMetric::_internal_set_kubernetes_uid(const std::string& value) {
  
  kubernetes_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodMetric::_internal_mutable_kubernetes_uid() {
  
  return kubernetes_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodMetric::release_kubernetes_uid() {
  // @@protoc_insertion_point(field_release:performance.metrics.v1alpha1.PodMetric.kubernetes_uid)
  return kubernetes_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodMetric::set_allocated_kubernetes_uid(std::string* kubernetes_uid) {
  if (kubernetes_uid != nullptr) {
    
  } else {
    
  }
  kubernetes_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kubernetes_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.metrics.v1alpha1.PodMetric.kubernetes_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace metrics
}  // namespace performance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_2fmetrics_2fv1alpha1_2fmetrics_5fagent_5fapi_2eproto
