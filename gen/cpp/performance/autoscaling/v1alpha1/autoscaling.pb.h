// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/autoscaling/v1alpha1/autoscaling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto;
namespace performance {
namespace autoscaling {
namespace v1alpha1 {
class AutoScalingSpecTarget;
struct AutoScalingSpecTargetDefaultTypeInternal;
extern AutoScalingSpecTargetDefaultTypeInternal _AutoScalingSpecTarget_default_instance_;
class Autoscaling;
struct AutoscalingDefaultTypeInternal;
extern AutoscalingDefaultTypeInternal _Autoscaling_default_instance_;
class AutoscalingSpec;
struct AutoscalingSpecDefaultTypeInternal;
extern AutoscalingSpecDefaultTypeInternal _AutoscalingSpec_default_instance_;
class AutoscalingSpecRule;
struct AutoscalingSpecRuleDefaultTypeInternal;
extern AutoscalingSpecRuleDefaultTypeInternal _AutoscalingSpecRule_default_instance_;
class AutoscalingSpecRule_MetadataEntry_DoNotUse;
struct AutoscalingSpecRule_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AutoscalingSpecRule_MetadataEntry_DoNotUseDefaultTypeInternal _AutoscalingSpecRule_MetadataEntry_DoNotUse_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_AnnotationsEntry_DoNotUse;
struct Metadata_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern Metadata_AnnotationsEntry_DoNotUseDefaultTypeInternal _Metadata_AnnotationsEntry_DoNotUse_default_instance_;
class Metadata_LabelsEntry_DoNotUse;
struct Metadata_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Metadata_LabelsEntry_DoNotUseDefaultTypeInternal _Metadata_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v1alpha1
}  // namespace autoscaling
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::AutoScalingSpecTarget>(Arena*);
template<> ::performance::autoscaling::v1alpha1::Autoscaling* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::Autoscaling>(Arena*);
template<> ::performance::autoscaling::v1alpha1::AutoscalingSpec* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::AutoscalingSpec>(Arena*);
template<> ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::AutoscalingSpecRule>(Arena*);
template<> ::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse>(Arena*);
template<> ::performance::autoscaling::v1alpha1::Metadata* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata>(Arena*);
template<> ::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace performance {
namespace autoscaling {
namespace v1alpha1 {

// ===================================================================

class Metadata_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Metadata_LabelsEntry_DoNotUse();
  explicit constexpr Metadata_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Metadata_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Metadata_LabelsEntry_DoNotUse& other);
  static const Metadata_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_LabelsEntry_DoNotUse*>(&_Metadata_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.autoscaling.v1alpha1.Metadata.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.autoscaling.v1alpha1.Metadata.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Metadata_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Metadata_AnnotationsEntry_DoNotUse();
  explicit constexpr Metadata_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Metadata_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Metadata_AnnotationsEntry_DoNotUse& other);
  static const Metadata_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_AnnotationsEntry_DoNotUse*>(&_Metadata_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.autoscaling.v1alpha1.Metadata.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.autoscaling.v1alpha1.Metadata.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return new Metadata();
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kAnnotationsFieldNumber = 4,
    kNameFieldNumber = 1,
    kNamespaceFieldNumber = 2,
  };
  // map<string, string> labels = 3 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 4 [json_name = "annotations"];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string namespace = 2 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Metadata_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Metadata_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto;
};
// -------------------------------------------------------------------

class AutoScalingSpecTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.AutoScalingSpecTarget) */ {
 public:
  inline AutoScalingSpecTarget() : AutoScalingSpecTarget(nullptr) {}
  ~AutoScalingSpecTarget() override;
  explicit constexpr AutoScalingSpecTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoScalingSpecTarget(const AutoScalingSpecTarget& from);
  AutoScalingSpecTarget(AutoScalingSpecTarget&& from) noexcept
    : AutoScalingSpecTarget() {
    *this = ::std::move(from);
  }

  inline AutoScalingSpecTarget& operator=(const AutoScalingSpecTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoScalingSpecTarget& operator=(AutoScalingSpecTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoScalingSpecTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoScalingSpecTarget* internal_default_instance() {
    return reinterpret_cast<const AutoScalingSpecTarget*>(
               &_AutoScalingSpecTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AutoScalingSpecTarget& a, AutoScalingSpecTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoScalingSpecTarget* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoScalingSpecTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoScalingSpecTarget* New() const final {
    return new AutoScalingSpecTarget();
  }

  AutoScalingSpecTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoScalingSpecTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoScalingSpecTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutoScalingSpecTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoScalingSpecTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.AutoScalingSpecTarget";
  }
  protected:
  explicit AutoScalingSpecTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiVersionFieldNumber = 1,
    kKindFieldNumber = 2,
    kNameFieldNumber = 3,
    kContainerFieldNumber = 4,
  };
  // string api_version = 1 [json_name = "apiVersion"];
  void clear_api_version();
  const std::string& api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // string kind = 2 [json_name = "kind"];
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_MUST_USE_RESULT std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // string name = 3 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string container = 4 [json_name = "container"];
  void clear_container();
  const std::string& container() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container();
  PROTOBUF_MUST_USE_RESULT std::string* release_container();
  void set_allocated_container(std::string* container);
  private:
  const std::string& _internal_container() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container(const std::string& value);
  std::string* _internal_mutable_container();
  public:

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto;
};
// -------------------------------------------------------------------

class AutoscalingSpecRule_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AutoscalingSpecRule_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AutoscalingSpecRule_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AutoscalingSpecRule_MetadataEntry_DoNotUse();
  explicit constexpr AutoscalingSpecRule_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AutoscalingSpecRule_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AutoscalingSpecRule_MetadataEntry_DoNotUse& other);
  static const AutoscalingSpecRule_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AutoscalingSpecRule_MetadataEntry_DoNotUse*>(&_AutoscalingSpecRule_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.autoscaling.v1alpha1.AutoscalingSpecRule.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.autoscaling.v1alpha1.AutoscalingSpecRule.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AutoscalingSpecRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.AutoscalingSpecRule) */ {
 public:
  inline AutoscalingSpecRule() : AutoscalingSpecRule(nullptr) {}
  ~AutoscalingSpecRule() override;
  explicit constexpr AutoscalingSpecRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoscalingSpecRule(const AutoscalingSpecRule& from);
  AutoscalingSpecRule(AutoscalingSpecRule&& from) noexcept
    : AutoscalingSpecRule() {
    *this = ::std::move(from);
  }

  inline AutoscalingSpecRule& operator=(const AutoscalingSpecRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoscalingSpecRule& operator=(AutoscalingSpecRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoscalingSpecRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoscalingSpecRule* internal_default_instance() {
    return reinterpret_cast<const AutoscalingSpecRule*>(
               &_AutoscalingSpecRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutoscalingSpecRule& a, AutoscalingSpecRule& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoscalingSpecRule* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoscalingSpecRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoscalingSpecRule* New() const final {
    return new AutoscalingSpecRule();
  }

  AutoscalingSpecRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoscalingSpecRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoscalingSpecRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutoscalingSpecRule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoscalingSpecRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.AutoscalingSpecRule";
  }
  protected:
  explicit AutoscalingSpecRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kMetricFieldNumber = 1,
    kValueFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // map<string, string> metadata = 4 [json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string metric = 1 [json_name = "metric"];
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_MUST_USE_RESULT std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string type = 3 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AutoscalingSpecRule_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto;
};
// -------------------------------------------------------------------

class AutoscalingSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.AutoscalingSpec) */ {
 public:
  inline AutoscalingSpec() : AutoscalingSpec(nullptr) {}
  ~AutoscalingSpec() override;
  explicit constexpr AutoscalingSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoscalingSpec(const AutoscalingSpec& from);
  AutoscalingSpec(AutoscalingSpec&& from) noexcept
    : AutoscalingSpec() {
    *this = ::std::move(from);
  }

  inline AutoscalingSpec& operator=(const AutoscalingSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoscalingSpec& operator=(AutoscalingSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoscalingSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoscalingSpec* internal_default_instance() {
    return reinterpret_cast<const AutoscalingSpec*>(
               &_AutoscalingSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AutoscalingSpec& a, AutoscalingSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoscalingSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoscalingSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoscalingSpec* New() const final {
    return new AutoscalingSpec();
  }

  AutoscalingSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoscalingSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoscalingSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutoscalingSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoscalingSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.AutoscalingSpec";
  }
  protected:
  explicit AutoscalingSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 6,
    kTargetRefFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
    kPollingIntervalFieldNumber = 4,
    kCooldownPeriodFieldNumber = 5,
  };
  // repeated .performance.autoscaling.v1alpha1.AutoscalingSpecRule rules = 6 [json_name = "rules"];
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule >*
      mutable_rules();
  private:
  const ::performance::autoscaling::v1alpha1::AutoscalingSpecRule& _internal_rules(int index) const;
  ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* _internal_add_rules();
  public:
  const ::performance::autoscaling::v1alpha1::AutoscalingSpecRule& rules(int index) const;
  ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule >&
      rules() const;

  // .performance.autoscaling.v1alpha1.AutoScalingSpecTarget target_ref = 1 [json_name = "targetRef"];
  bool has_target_ref() const;
  private:
  bool _internal_has_target_ref() const;
  public:
  void clear_target_ref();
  const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget& target_ref() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* release_target_ref();
  ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* mutable_target_ref();
  void set_allocated_target_ref(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* target_ref);
  private:
  const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget& _internal_target_ref() const;
  ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* _internal_mutable_target_ref();
  public:
  void unsafe_arena_set_allocated_target_ref(
      ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* target_ref);
  ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* unsafe_arena_release_target_ref();

  // int32 min = 2 [json_name = "min"];
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max = 3 [json_name = "max"];
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 polling_interval = 4 [json_name = "pollingInterval"];
  void clear_polling_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 polling_interval() const;
  void set_polling_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_polling_interval() const;
  void _internal_set_polling_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cooldown_period = 5 [json_name = "cooldownPeriod"];
  void clear_cooldown_period();
  ::PROTOBUF_NAMESPACE_ID::int32 cooldown_period() const;
  void set_cooldown_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cooldown_period() const;
  void _internal_set_cooldown_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.AutoscalingSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule > rules_;
  ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* target_ref_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  ::PROTOBUF_NAMESPACE_ID::int32 polling_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 cooldown_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto;
};
// -------------------------------------------------------------------

class Autoscaling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.Autoscaling) */ {
 public:
  inline Autoscaling() : Autoscaling(nullptr) {}
  ~Autoscaling() override;
  explicit constexpr Autoscaling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Autoscaling(const Autoscaling& from);
  Autoscaling(Autoscaling&& from) noexcept
    : Autoscaling() {
    *this = ::std::move(from);
  }

  inline Autoscaling& operator=(const Autoscaling& from) {
    CopyFrom(from);
    return *this;
  }
  inline Autoscaling& operator=(Autoscaling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Autoscaling& default_instance() {
    return *internal_default_instance();
  }
  static inline const Autoscaling* internal_default_instance() {
    return reinterpret_cast<const Autoscaling*>(
               &_Autoscaling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Autoscaling& a, Autoscaling& b) {
    a.Swap(&b);
  }
  inline void Swap(Autoscaling* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Autoscaling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Autoscaling* New() const final {
    return new Autoscaling();
  }

  Autoscaling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Autoscaling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Autoscaling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Autoscaling& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Autoscaling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.Autoscaling";
  }
  protected:
  explicit Autoscaling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kSpecFieldNumber = 2,
  };
  // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::performance::autoscaling::v1alpha1::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Metadata* release_metadata();
  ::performance::autoscaling::v1alpha1::Metadata* mutable_metadata();
  void set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata);
  private:
  const ::performance::autoscaling::v1alpha1::Metadata& _internal_metadata() const;
  ::performance::autoscaling::v1alpha1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::performance::autoscaling::v1alpha1::Metadata* metadata);
  ::performance::autoscaling::v1alpha1::Metadata* unsafe_arena_release_metadata();

  // .performance.autoscaling.v1alpha1.AutoscalingSpec spec = 2 [json_name = "spec"];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::performance::autoscaling::v1alpha1::AutoscalingSpec& spec() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::AutoscalingSpec* release_spec();
  ::performance::autoscaling::v1alpha1::AutoscalingSpec* mutable_spec();
  void set_allocated_spec(::performance::autoscaling::v1alpha1::AutoscalingSpec* spec);
  private:
  const ::performance::autoscaling::v1alpha1::AutoscalingSpec& _internal_spec() const;
  ::performance::autoscaling::v1alpha1::AutoscalingSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::performance::autoscaling::v1alpha1::AutoscalingSpec* spec);
  ::performance::autoscaling::v1alpha1::AutoscalingSpec* unsafe_arena_release_spec();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.Autoscaling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::performance::autoscaling::v1alpha1::Metadata* metadata_;
  ::performance::autoscaling::v1alpha1::AutoscalingSpec* spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metadata

// string name = 1 [json_name = "name"];
inline void Metadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Metadata::name() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.Metadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.Metadata.name)
}
inline std::string* Metadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.Metadata.name)
  return _s;
}
inline const std::string& Metadata::_internal_name() const {
  return name_.Get();
}
inline void Metadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_name() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.Metadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.Metadata.name)
}

// string namespace = 2 [json_name = "namespace"];
inline void Metadata::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& Metadata::namespace_() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.Metadata.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.Metadata.namespace)
}
inline std::string* Metadata::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.Metadata.namespace)
  return _s;
}
inline const std::string& Metadata::_internal_namespace_() const {
  return namespace__.Get();
}
inline void Metadata::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_namespace_() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.Metadata.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.Metadata.namespace)
}

// map<string, string> labels = 3 [json_name = "labels"];
inline int Metadata::_internal_labels_size() const {
  return labels_.size();
}
inline int Metadata::labels_size() const {
  return _internal_labels_size();
}
inline void Metadata::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metadata::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metadata::labels() const {
  // @@protoc_insertion_point(field_map:performance.autoscaling.v1alpha1.Metadata.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metadata::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metadata::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:performance.autoscaling.v1alpha1.Metadata.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 4 [json_name = "annotations"];
inline int Metadata::_internal_annotations_size() const {
  return annotations_.size();
}
inline int Metadata::annotations_size() const {
  return _internal_annotations_size();
}
inline void Metadata::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metadata::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metadata::annotations() const {
  // @@protoc_insertion_point(field_map:performance.autoscaling.v1alpha1.Metadata.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metadata::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metadata::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:performance.autoscaling.v1alpha1.Metadata.annotations)
  return _internal_mutable_annotations();
}

// -------------------------------------------------------------------

// AutoScalingSpecTarget

// string api_version = 1 [json_name = "apiVersion"];
inline void AutoScalingSpecTarget::clear_api_version() {
  api_version_.ClearToEmpty();
}
inline const std::string& AutoScalingSpecTarget::api_version() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.api_version)
  return _internal_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoScalingSpecTarget::set_api_version(ArgT0&& arg0, ArgT... args) {
 
 api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.api_version)
}
inline std::string* AutoScalingSpecTarget::mutable_api_version() {
  std::string* _s = _internal_mutable_api_version();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.api_version)
  return _s;
}
inline const std::string& AutoScalingSpecTarget::_internal_api_version() const {
  return api_version_.Get();
}
inline void AutoScalingSpecTarget::_internal_set_api_version(const std::string& value) {
  
  api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::_internal_mutable_api_version() {
  
  return api_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::release_api_version() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.api_version)
  return api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutoScalingSpecTarget::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.api_version)
}

// string kind = 2 [json_name = "kind"];
inline void AutoScalingSpecTarget::clear_kind() {
  kind_.ClearToEmpty();
}
inline const std::string& AutoScalingSpecTarget::kind() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoScalingSpecTarget::set_kind(ArgT0&& arg0, ArgT... args) {
 
 kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.kind)
}
inline std::string* AutoScalingSpecTarget::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.kind)
  return _s;
}
inline const std::string& AutoScalingSpecTarget::_internal_kind() const {
  return kind_.Get();
}
inline void AutoScalingSpecTarget::_internal_set_kind(const std::string& value) {
  
  kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::_internal_mutable_kind() {
  
  return kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::release_kind() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.kind)
  return kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutoScalingSpecTarget::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kind,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.kind)
}

// string name = 3 [json_name = "name"];
inline void AutoScalingSpecTarget::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AutoScalingSpecTarget::name() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoScalingSpecTarget::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.name)
}
inline std::string* AutoScalingSpecTarget::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.name)
  return _s;
}
inline const std::string& AutoScalingSpecTarget::_internal_name() const {
  return name_.Get();
}
inline void AutoScalingSpecTarget::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::release_name() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutoScalingSpecTarget::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.name)
}

// string container = 4 [json_name = "container"];
inline void AutoScalingSpecTarget::clear_container() {
  container_.ClearToEmpty();
}
inline const std::string& AutoScalingSpecTarget::container() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.container)
  return _internal_container();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoScalingSpecTarget::set_container(ArgT0&& arg0, ArgT... args) {
 
 container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.container)
}
inline std::string* AutoScalingSpecTarget::mutable_container() {
  std::string* _s = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.container)
  return _s;
}
inline const std::string& AutoScalingSpecTarget::_internal_container() const {
  return container_.Get();
}
inline void AutoScalingSpecTarget::_internal_set_container(const std::string& value) {
  
  container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::_internal_mutable_container() {
  
  return container_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutoScalingSpecTarget::release_container() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.container)
  return container_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutoScalingSpecTarget::set_allocated_container(std::string* container) {
  if (container != nullptr) {
    
  } else {
    
  }
  container_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoScalingSpecTarget.container)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AutoscalingSpecRule

// string metric = 1 [json_name = "metric"];
inline void AutoscalingSpecRule::clear_metric() {
  metric_.ClearToEmpty();
}
inline const std::string& AutoscalingSpecRule::metric() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpecRule.metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoscalingSpecRule::set_metric(ArgT0&& arg0, ArgT... args) {
 
 metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoscalingSpecRule.metric)
}
inline std::string* AutoscalingSpecRule::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoscalingSpecRule.metric)
  return _s;
}
inline const std::string& AutoscalingSpecRule::_internal_metric() const {
  return metric_.Get();
}
inline void AutoscalingSpecRule::_internal_set_metric(const std::string& value) {
  
  metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutoscalingSpecRule::_internal_mutable_metric() {
  
  return metric_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutoscalingSpecRule::release_metric() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoscalingSpecRule.metric)
  return metric_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutoscalingSpecRule::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoscalingSpecRule.metric)
}

// string value = 2 [json_name = "value"];
inline void AutoscalingSpecRule::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AutoscalingSpecRule::value() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpecRule.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoscalingSpecRule::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoscalingSpecRule.value)
}
inline std::string* AutoscalingSpecRule::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoscalingSpecRule.value)
  return _s;
}
inline const std::string& AutoscalingSpecRule::_internal_value() const {
  return value_.Get();
}
inline void AutoscalingSpecRule::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutoscalingSpecRule::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutoscalingSpecRule::release_value() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoscalingSpecRule.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutoscalingSpecRule::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoscalingSpecRule.value)
}

// string type = 3 [json_name = "type"];
inline void AutoscalingSpecRule::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& AutoscalingSpecRule::type() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpecRule.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoscalingSpecRule::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoscalingSpecRule.type)
}
inline std::string* AutoscalingSpecRule::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoscalingSpecRule.type)
  return _s;
}
inline const std::string& AutoscalingSpecRule::_internal_type() const {
  return type_.Get();
}
inline void AutoscalingSpecRule::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutoscalingSpecRule::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutoscalingSpecRule::release_type() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoscalingSpecRule.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutoscalingSpecRule::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoscalingSpecRule.type)
}

// map<string, string> metadata = 4 [json_name = "metadata"];
inline int AutoscalingSpecRule::_internal_metadata_size() const {
  return metadata_.size();
}
inline int AutoscalingSpecRule::metadata_size() const {
  return _internal_metadata_size();
}
inline void AutoscalingSpecRule::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AutoscalingSpecRule::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AutoscalingSpecRule::metadata() const {
  // @@protoc_insertion_point(field_map:performance.autoscaling.v1alpha1.AutoscalingSpecRule.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AutoscalingSpecRule::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AutoscalingSpecRule::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:performance.autoscaling.v1alpha1.AutoscalingSpecRule.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// AutoscalingSpec

// .performance.autoscaling.v1alpha1.AutoScalingSpecTarget target_ref = 1 [json_name = "targetRef"];
inline bool AutoscalingSpec::_internal_has_target_ref() const {
  return this != internal_default_instance() && target_ref_ != nullptr;
}
inline bool AutoscalingSpec::has_target_ref() const {
  return _internal_has_target_ref();
}
inline void AutoscalingSpec::clear_target_ref() {
  if (GetArenaForAllocation() == nullptr && target_ref_ != nullptr) {
    delete target_ref_;
  }
  target_ref_ = nullptr;
}
inline const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget& AutoscalingSpec::_internal_target_ref() const {
  const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* p = target_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget&>(
      ::performance::autoscaling::v1alpha1::_AutoScalingSpecTarget_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget& AutoscalingSpec::target_ref() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpec.target_ref)
  return _internal_target_ref();
}
inline void AutoscalingSpec::unsafe_arena_set_allocated_target_ref(
    ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* target_ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_ref_);
  }
  target_ref_ = target_ref;
  if (target_ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.AutoscalingSpec.target_ref)
}
inline ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* AutoscalingSpec::release_target_ref() {
  
  ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* temp = target_ref_;
  target_ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* AutoscalingSpec::unsafe_arena_release_target_ref() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.AutoscalingSpec.target_ref)
  
  ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* temp = target_ref_;
  target_ref_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* AutoscalingSpec::_internal_mutable_target_ref() {
  
  if (target_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::AutoScalingSpecTarget>(GetArenaForAllocation());
    target_ref_ = p;
  }
  return target_ref_;
}
inline ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* AutoscalingSpec::mutable_target_ref() {
  ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* _msg = _internal_mutable_target_ref();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoscalingSpec.target_ref)
  return _msg;
}
inline void AutoscalingSpec::set_allocated_target_ref(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* target_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_ref_;
  }
  if (target_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::performance::autoscaling::v1alpha1::AutoScalingSpecTarget>::GetOwningArena(target_ref);
    if (message_arena != submessage_arena) {
      target_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_ref, submessage_arena);
    }
    
  } else {
    
  }
  target_ref_ = target_ref;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.AutoscalingSpec.target_ref)
}

// int32 min = 2 [json_name = "min"];
inline void AutoscalingSpec::clear_min() {
  min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::min() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpec.min)
  return _internal_min();
}
inline void AutoscalingSpec::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_ = value;
}
inline void AutoscalingSpec::set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoscalingSpec.min)
}

// int32 max = 3 [json_name = "max"];
inline void AutoscalingSpec::clear_max() {
  max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::max() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpec.max)
  return _internal_max();
}
inline void AutoscalingSpec::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_ = value;
}
inline void AutoscalingSpec::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoscalingSpec.max)
}

// int32 polling_interval = 4 [json_name = "pollingInterval"];
inline void AutoscalingSpec::clear_polling_interval() {
  polling_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::_internal_polling_interval() const {
  return polling_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::polling_interval() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpec.polling_interval)
  return _internal_polling_interval();
}
inline void AutoscalingSpec::_internal_set_polling_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  polling_interval_ = value;
}
inline void AutoscalingSpec::set_polling_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_polling_interval(value);
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoscalingSpec.polling_interval)
}

// int32 cooldown_period = 5 [json_name = "cooldownPeriod"];
inline void AutoscalingSpec::clear_cooldown_period() {
  cooldown_period_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::_internal_cooldown_period() const {
  return cooldown_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoscalingSpec::cooldown_period() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpec.cooldown_period)
  return _internal_cooldown_period();
}
inline void AutoscalingSpec::_internal_set_cooldown_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cooldown_period_ = value;
}
inline void AutoscalingSpec::set_cooldown_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cooldown_period(value);
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.AutoscalingSpec.cooldown_period)
}

// repeated .performance.autoscaling.v1alpha1.AutoscalingSpecRule rules = 6 [json_name = "rules"];
inline int AutoscalingSpec::_internal_rules_size() const {
  return rules_.size();
}
inline int AutoscalingSpec::rules_size() const {
  return _internal_rules_size();
}
inline void AutoscalingSpec::clear_rules() {
  rules_.Clear();
}
inline ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* AutoscalingSpec::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.AutoscalingSpec.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule >*
AutoscalingSpec::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:performance.autoscaling.v1alpha1.AutoscalingSpec.rules)
  return &rules_;
}
inline const ::performance::autoscaling::v1alpha1::AutoscalingSpecRule& AutoscalingSpec::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::performance::autoscaling::v1alpha1::AutoscalingSpecRule& AutoscalingSpec::rules(int index) const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.AutoscalingSpec.rules)
  return _internal_rules(index);
}
inline ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* AutoscalingSpec::_internal_add_rules() {
  return rules_.Add();
}
inline ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* AutoscalingSpec::add_rules() {
  ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:performance.autoscaling.v1alpha1.AutoscalingSpec.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule >&
AutoscalingSpec::rules() const {
  // @@protoc_insertion_point(field_list:performance.autoscaling.v1alpha1.AutoscalingSpec.rules)
  return rules_;
}

// -------------------------------------------------------------------

// Autoscaling

// .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
inline bool Autoscaling::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Autoscaling::has_metadata() const {
  return _internal_has_metadata();
}
inline void Autoscaling::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::performance::autoscaling::v1alpha1::Metadata& Autoscaling::_internal_metadata() const {
  const ::performance::autoscaling::v1alpha1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Metadata&>(
      ::performance::autoscaling::v1alpha1::_Metadata_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Metadata& Autoscaling::metadata() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.Autoscaling.metadata)
  return _internal_metadata();
}
inline void Autoscaling::unsafe_arena_set_allocated_metadata(
    ::performance::autoscaling::v1alpha1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.Autoscaling.metadata)
}
inline ::performance::autoscaling::v1alpha1::Metadata* Autoscaling::release_metadata() {
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* Autoscaling::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.Autoscaling.metadata)
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* Autoscaling::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::performance::autoscaling::v1alpha1::Metadata* Autoscaling::mutable_metadata() {
  ::performance::autoscaling::v1alpha1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.Autoscaling.metadata)
  return _msg;
}
inline void Autoscaling::set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::performance::autoscaling::v1alpha1::Metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.Autoscaling.metadata)
}

// .performance.autoscaling.v1alpha1.AutoscalingSpec spec = 2 [json_name = "spec"];
inline bool Autoscaling::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Autoscaling::has_spec() const {
  return _internal_has_spec();
}
inline void Autoscaling::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::performance::autoscaling::v1alpha1::AutoscalingSpec& Autoscaling::_internal_spec() const {
  const ::performance::autoscaling::v1alpha1::AutoscalingSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::AutoscalingSpec&>(
      ::performance::autoscaling::v1alpha1::_AutoscalingSpec_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::AutoscalingSpec& Autoscaling::spec() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.Autoscaling.spec)
  return _internal_spec();
}
inline void Autoscaling::unsafe_arena_set_allocated_spec(
    ::performance::autoscaling::v1alpha1::AutoscalingSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.Autoscaling.spec)
}
inline ::performance::autoscaling::v1alpha1::AutoscalingSpec* Autoscaling::release_spec() {
  
  ::performance::autoscaling::v1alpha1::AutoscalingSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::AutoscalingSpec* Autoscaling::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.Autoscaling.spec)
  
  ::performance::autoscaling::v1alpha1::AutoscalingSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::AutoscalingSpec* Autoscaling::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::AutoscalingSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::performance::autoscaling::v1alpha1::AutoscalingSpec* Autoscaling::mutable_spec() {
  ::performance::autoscaling::v1alpha1::AutoscalingSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.Autoscaling.spec)
  return _msg;
}
inline void Autoscaling::set_allocated_spec(::performance::autoscaling::v1alpha1::AutoscalingSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::performance::autoscaling::v1alpha1::AutoscalingSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.Autoscaling.spec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace autoscaling
}  // namespace performance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto
