// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/autoscaling/v1alpha1/autoscaling_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "performance/autoscaling/v1alpha1/autoscaling.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
namespace performance {
namespace autoscaling {
namespace v1alpha1 {
class CreateAutoscalingRequest;
struct CreateAutoscalingRequestDefaultTypeInternal;
extern CreateAutoscalingRequestDefaultTypeInternal _CreateAutoscalingRequest_default_instance_;
class CreateAutoscalingResponse;
struct CreateAutoscalingResponseDefaultTypeInternal;
extern CreateAutoscalingResponseDefaultTypeInternal _CreateAutoscalingResponse_default_instance_;
class DeleteAutoscalingRequest;
struct DeleteAutoscalingRequestDefaultTypeInternal;
extern DeleteAutoscalingRequestDefaultTypeInternal _DeleteAutoscalingRequest_default_instance_;
class DeleteAutoscalingResponse;
struct DeleteAutoscalingResponseDefaultTypeInternal;
extern DeleteAutoscalingResponseDefaultTypeInternal _DeleteAutoscalingResponse_default_instance_;
class GetAutoscalingRequest;
struct GetAutoscalingRequestDefaultTypeInternal;
extern GetAutoscalingRequestDefaultTypeInternal _GetAutoscalingRequest_default_instance_;
class GetAutoscalingResponse;
struct GetAutoscalingResponseDefaultTypeInternal;
extern GetAutoscalingResponseDefaultTypeInternal _GetAutoscalingResponse_default_instance_;
class ListAutoscalingRequest;
struct ListAutoscalingRequestDefaultTypeInternal;
extern ListAutoscalingRequestDefaultTypeInternal _ListAutoscalingRequest_default_instance_;
class ListAutoscalingResponse;
struct ListAutoscalingResponseDefaultTypeInternal;
extern ListAutoscalingResponseDefaultTypeInternal _ListAutoscalingResponse_default_instance_;
class UpdateAutoscalingRequest;
struct UpdateAutoscalingRequestDefaultTypeInternal;
extern UpdateAutoscalingRequestDefaultTypeInternal _UpdateAutoscalingRequest_default_instance_;
class UpdateAutoscalingResponse;
struct UpdateAutoscalingResponseDefaultTypeInternal;
extern UpdateAutoscalingResponseDefaultTypeInternal _UpdateAutoscalingResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace autoscaling
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> ::performance::autoscaling::v1alpha1::CreateAutoscalingRequest* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::CreateAutoscalingRequest>(Arena*);
template<> ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::CreateAutoscalingResponse>(Arena*);
template<> ::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest>(Arena*);
template<> ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse>(Arena*);
template<> ::performance::autoscaling::v1alpha1::GetAutoscalingRequest* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::GetAutoscalingRequest>(Arena*);
template<> ::performance::autoscaling::v1alpha1::GetAutoscalingResponse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::GetAutoscalingResponse>(Arena*);
template<> ::performance::autoscaling::v1alpha1::ListAutoscalingRequest* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::ListAutoscalingRequest>(Arena*);
template<> ::performance::autoscaling::v1alpha1::ListAutoscalingResponse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::ListAutoscalingResponse>(Arena*);
template<> ::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest>(Arena*);
template<> ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse* Arena::CreateMaybeMessage<::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace performance {
namespace autoscaling {
namespace v1alpha1 {

// ===================================================================

class CreateAutoscalingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.CreateAutoscalingRequest) */ {
 public:
  inline CreateAutoscalingRequest() : CreateAutoscalingRequest(nullptr) {}
  ~CreateAutoscalingRequest() override;
  explicit constexpr CreateAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAutoscalingRequest(const CreateAutoscalingRequest& from);
  CreateAutoscalingRequest(CreateAutoscalingRequest&& from) noexcept
    : CreateAutoscalingRequest() {
    *this = ::std::move(from);
  }

  inline CreateAutoscalingRequest& operator=(const CreateAutoscalingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAutoscalingRequest& operator=(CreateAutoscalingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAutoscalingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAutoscalingRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAutoscalingRequest*>(
               &_CreateAutoscalingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAutoscalingRequest& a, CreateAutoscalingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAutoscalingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAutoscalingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAutoscalingRequest* New() const final {
    return new CreateAutoscalingRequest();
  }

  CreateAutoscalingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAutoscalingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAutoscalingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAutoscalingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAutoscalingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.CreateAutoscalingRequest";
  }
  protected:
  explicit CreateAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoscalingFieldNumber = 1,
  };
  // .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
  bool has_autoscaling() const;
  private:
  bool _internal_has_autoscaling() const;
  public:
  void clear_autoscaling();
  const ::performance::autoscaling::v1alpha1::Autoscaling& autoscaling() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Autoscaling* release_autoscaling();
  ::performance::autoscaling::v1alpha1::Autoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  private:
  const ::performance::autoscaling::v1alpha1::Autoscaling& _internal_autoscaling() const;
  ::performance::autoscaling::v1alpha1::Autoscaling* _internal_mutable_autoscaling();
  public:
  void unsafe_arena_set_allocated_autoscaling(
      ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  ::performance::autoscaling::v1alpha1::Autoscaling* unsafe_arena_release_autoscaling();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.CreateAutoscalingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateAutoscalingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.CreateAutoscalingResponse) */ {
 public:
  inline CreateAutoscalingResponse() : CreateAutoscalingResponse(nullptr) {}
  ~CreateAutoscalingResponse() override;
  explicit constexpr CreateAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAutoscalingResponse(const CreateAutoscalingResponse& from);
  CreateAutoscalingResponse(CreateAutoscalingResponse&& from) noexcept
    : CreateAutoscalingResponse() {
    *this = ::std::move(from);
  }

  inline CreateAutoscalingResponse& operator=(const CreateAutoscalingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAutoscalingResponse& operator=(CreateAutoscalingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAutoscalingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAutoscalingResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAutoscalingResponse*>(
               &_CreateAutoscalingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAutoscalingResponse& a, CreateAutoscalingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAutoscalingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAutoscalingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAutoscalingResponse* New() const final {
    return new CreateAutoscalingResponse();
  }

  CreateAutoscalingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAutoscalingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAutoscalingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAutoscalingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAutoscalingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.CreateAutoscalingResponse";
  }
  protected:
  explicit CreateAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kAutoscalingFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
  bool has_autoscaling() const;
  private:
  bool _internal_has_autoscaling() const;
  public:
  void clear_autoscaling();
  const ::performance::autoscaling::v1alpha1::Autoscaling& autoscaling() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Autoscaling* release_autoscaling();
  ::performance::autoscaling::v1alpha1::Autoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  private:
  const ::performance::autoscaling::v1alpha1::Autoscaling& _internal_autoscaling() const;
  ::performance::autoscaling::v1alpha1::Autoscaling* _internal_mutable_autoscaling();
  public:
  void unsafe_arena_set_allocated_autoscaling(
      ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  ::performance::autoscaling::v1alpha1::Autoscaling* unsafe_arena_release_autoscaling();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.CreateAutoscalingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateAutoscalingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.UpdateAutoscalingRequest) */ {
 public:
  inline UpdateAutoscalingRequest() : UpdateAutoscalingRequest(nullptr) {}
  ~UpdateAutoscalingRequest() override;
  explicit constexpr UpdateAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAutoscalingRequest(const UpdateAutoscalingRequest& from);
  UpdateAutoscalingRequest(UpdateAutoscalingRequest&& from) noexcept
    : UpdateAutoscalingRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAutoscalingRequest& operator=(const UpdateAutoscalingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAutoscalingRequest& operator=(UpdateAutoscalingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAutoscalingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAutoscalingRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAutoscalingRequest*>(
               &_UpdateAutoscalingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateAutoscalingRequest& a, UpdateAutoscalingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAutoscalingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAutoscalingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAutoscalingRequest* New() const final {
    return new UpdateAutoscalingRequest();
  }

  UpdateAutoscalingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAutoscalingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAutoscalingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateAutoscalingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAutoscalingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.UpdateAutoscalingRequest";
  }
  protected:
  explicit UpdateAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoscalingFieldNumber = 1,
  };
  // .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
  bool has_autoscaling() const;
  private:
  bool _internal_has_autoscaling() const;
  public:
  void clear_autoscaling();
  const ::performance::autoscaling::v1alpha1::Autoscaling& autoscaling() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Autoscaling* release_autoscaling();
  ::performance::autoscaling::v1alpha1::Autoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  private:
  const ::performance::autoscaling::v1alpha1::Autoscaling& _internal_autoscaling() const;
  ::performance::autoscaling::v1alpha1::Autoscaling* _internal_mutable_autoscaling();
  public:
  void unsafe_arena_set_allocated_autoscaling(
      ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  ::performance::autoscaling::v1alpha1::Autoscaling* unsafe_arena_release_autoscaling();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.UpdateAutoscalingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateAutoscalingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse) */ {
 public:
  inline UpdateAutoscalingResponse() : UpdateAutoscalingResponse(nullptr) {}
  ~UpdateAutoscalingResponse() override;
  explicit constexpr UpdateAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAutoscalingResponse(const UpdateAutoscalingResponse& from);
  UpdateAutoscalingResponse(UpdateAutoscalingResponse&& from) noexcept
    : UpdateAutoscalingResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAutoscalingResponse& operator=(const UpdateAutoscalingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAutoscalingResponse& operator=(UpdateAutoscalingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAutoscalingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAutoscalingResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAutoscalingResponse*>(
               &_UpdateAutoscalingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateAutoscalingResponse& a, UpdateAutoscalingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAutoscalingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAutoscalingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAutoscalingResponse* New() const final {
    return new UpdateAutoscalingResponse();
  }

  UpdateAutoscalingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAutoscalingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAutoscalingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateAutoscalingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAutoscalingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.UpdateAutoscalingResponse";
  }
  protected:
  explicit UpdateAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kAutoscalingFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
  bool has_autoscaling() const;
  private:
  bool _internal_has_autoscaling() const;
  public:
  void clear_autoscaling();
  const ::performance::autoscaling::v1alpha1::Autoscaling& autoscaling() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Autoscaling* release_autoscaling();
  ::performance::autoscaling::v1alpha1::Autoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  private:
  const ::performance::autoscaling::v1alpha1::Autoscaling& _internal_autoscaling() const;
  ::performance::autoscaling::v1alpha1::Autoscaling* _internal_mutable_autoscaling();
  public:
  void unsafe_arena_set_allocated_autoscaling(
      ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  ::performance::autoscaling::v1alpha1::Autoscaling* unsafe_arena_release_autoscaling();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteAutoscalingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.DeleteAutoscalingRequest) */ {
 public:
  inline DeleteAutoscalingRequest() : DeleteAutoscalingRequest(nullptr) {}
  ~DeleteAutoscalingRequest() override;
  explicit constexpr DeleteAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAutoscalingRequest(const DeleteAutoscalingRequest& from);
  DeleteAutoscalingRequest(DeleteAutoscalingRequest&& from) noexcept
    : DeleteAutoscalingRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAutoscalingRequest& operator=(const DeleteAutoscalingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAutoscalingRequest& operator=(DeleteAutoscalingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAutoscalingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAutoscalingRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAutoscalingRequest*>(
               &_DeleteAutoscalingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteAutoscalingRequest& a, DeleteAutoscalingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAutoscalingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAutoscalingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAutoscalingRequest* New() const final {
    return new DeleteAutoscalingRequest();
  }

  DeleteAutoscalingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAutoscalingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAutoscalingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAutoscalingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAutoscalingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.DeleteAutoscalingRequest";
  }
  protected:
  explicit DeleteAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::performance::autoscaling::v1alpha1::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Metadata* release_metadata();
  ::performance::autoscaling::v1alpha1::Metadata* mutable_metadata();
  void set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata);
  private:
  const ::performance::autoscaling::v1alpha1::Metadata& _internal_metadata() const;
  ::performance::autoscaling::v1alpha1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::performance::autoscaling::v1alpha1::Metadata* metadata);
  ::performance::autoscaling::v1alpha1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.DeleteAutoscalingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::performance::autoscaling::v1alpha1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteAutoscalingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse) */ {
 public:
  inline DeleteAutoscalingResponse() : DeleteAutoscalingResponse(nullptr) {}
  ~DeleteAutoscalingResponse() override;
  explicit constexpr DeleteAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAutoscalingResponse(const DeleteAutoscalingResponse& from);
  DeleteAutoscalingResponse(DeleteAutoscalingResponse&& from) noexcept
    : DeleteAutoscalingResponse() {
    *this = ::std::move(from);
  }

  inline DeleteAutoscalingResponse& operator=(const DeleteAutoscalingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAutoscalingResponse& operator=(DeleteAutoscalingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAutoscalingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAutoscalingResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteAutoscalingResponse*>(
               &_DeleteAutoscalingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteAutoscalingResponse& a, DeleteAutoscalingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAutoscalingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAutoscalingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAutoscalingResponse* New() const final {
    return new DeleteAutoscalingResponse();
  }

  DeleteAutoscalingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAutoscalingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAutoscalingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAutoscalingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAutoscalingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.DeleteAutoscalingResponse";
  }
  protected:
  explicit DeleteAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kMetadataFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::performance::autoscaling::v1alpha1::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Metadata* release_metadata();
  ::performance::autoscaling::v1alpha1::Metadata* mutable_metadata();
  void set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata);
  private:
  const ::performance::autoscaling::v1alpha1::Metadata& _internal_metadata() const;
  ::performance::autoscaling::v1alpha1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::performance::autoscaling::v1alpha1::Metadata* metadata);
  ::performance::autoscaling::v1alpha1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::performance::autoscaling::v1alpha1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetAutoscalingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.GetAutoscalingRequest) */ {
 public:
  inline GetAutoscalingRequest() : GetAutoscalingRequest(nullptr) {}
  ~GetAutoscalingRequest() override;
  explicit constexpr GetAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAutoscalingRequest(const GetAutoscalingRequest& from);
  GetAutoscalingRequest(GetAutoscalingRequest&& from) noexcept
    : GetAutoscalingRequest() {
    *this = ::std::move(from);
  }

  inline GetAutoscalingRequest& operator=(const GetAutoscalingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAutoscalingRequest& operator=(GetAutoscalingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAutoscalingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAutoscalingRequest* internal_default_instance() {
    return reinterpret_cast<const GetAutoscalingRequest*>(
               &_GetAutoscalingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAutoscalingRequest& a, GetAutoscalingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAutoscalingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAutoscalingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAutoscalingRequest* New() const final {
    return new GetAutoscalingRequest();
  }

  GetAutoscalingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAutoscalingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAutoscalingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAutoscalingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAutoscalingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.GetAutoscalingRequest";
  }
  protected:
  explicit GetAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::performance::autoscaling::v1alpha1::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Metadata* release_metadata();
  ::performance::autoscaling::v1alpha1::Metadata* mutable_metadata();
  void set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata);
  private:
  const ::performance::autoscaling::v1alpha1::Metadata& _internal_metadata() const;
  ::performance::autoscaling::v1alpha1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::performance::autoscaling::v1alpha1::Metadata* metadata);
  ::performance::autoscaling::v1alpha1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.GetAutoscalingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::performance::autoscaling::v1alpha1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetAutoscalingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.GetAutoscalingResponse) */ {
 public:
  inline GetAutoscalingResponse() : GetAutoscalingResponse(nullptr) {}
  ~GetAutoscalingResponse() override;
  explicit constexpr GetAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAutoscalingResponse(const GetAutoscalingResponse& from);
  GetAutoscalingResponse(GetAutoscalingResponse&& from) noexcept
    : GetAutoscalingResponse() {
    *this = ::std::move(from);
  }

  inline GetAutoscalingResponse& operator=(const GetAutoscalingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAutoscalingResponse& operator=(GetAutoscalingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAutoscalingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAutoscalingResponse* internal_default_instance() {
    return reinterpret_cast<const GetAutoscalingResponse*>(
               &_GetAutoscalingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetAutoscalingResponse& a, GetAutoscalingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAutoscalingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAutoscalingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAutoscalingResponse* New() const final {
    return new GetAutoscalingResponse();
  }

  GetAutoscalingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAutoscalingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAutoscalingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAutoscalingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAutoscalingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.GetAutoscalingResponse";
  }
  protected:
  explicit GetAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kAutoscalingFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
  bool has_autoscaling() const;
  private:
  bool _internal_has_autoscaling() const;
  public:
  void clear_autoscaling();
  const ::performance::autoscaling::v1alpha1::Autoscaling& autoscaling() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Autoscaling* release_autoscaling();
  ::performance::autoscaling::v1alpha1::Autoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  private:
  const ::performance::autoscaling::v1alpha1::Autoscaling& _internal_autoscaling() const;
  ::performance::autoscaling::v1alpha1::Autoscaling* _internal_mutable_autoscaling();
  public:
  void unsafe_arena_set_allocated_autoscaling(
      ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling);
  ::performance::autoscaling::v1alpha1::Autoscaling* unsafe_arena_release_autoscaling();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.GetAutoscalingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListAutoscalingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.ListAutoscalingRequest) */ {
 public:
  inline ListAutoscalingRequest() : ListAutoscalingRequest(nullptr) {}
  ~ListAutoscalingRequest() override;
  explicit constexpr ListAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAutoscalingRequest(const ListAutoscalingRequest& from);
  ListAutoscalingRequest(ListAutoscalingRequest&& from) noexcept
    : ListAutoscalingRequest() {
    *this = ::std::move(from);
  }

  inline ListAutoscalingRequest& operator=(const ListAutoscalingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAutoscalingRequest& operator=(ListAutoscalingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAutoscalingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAutoscalingRequest* internal_default_instance() {
    return reinterpret_cast<const ListAutoscalingRequest*>(
               &_ListAutoscalingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListAutoscalingRequest& a, ListAutoscalingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAutoscalingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAutoscalingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAutoscalingRequest* New() const final {
    return new ListAutoscalingRequest();
  }

  ListAutoscalingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAutoscalingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAutoscalingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAutoscalingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAutoscalingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.ListAutoscalingRequest";
  }
  protected:
  explicit ListAutoscalingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::performance::autoscaling::v1alpha1::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::performance::autoscaling::v1alpha1::Metadata* release_metadata();
  ::performance::autoscaling::v1alpha1::Metadata* mutable_metadata();
  void set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata);
  private:
  const ::performance::autoscaling::v1alpha1::Metadata& _internal_metadata() const;
  ::performance::autoscaling::v1alpha1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::performance::autoscaling::v1alpha1::Metadata* metadata);
  ::performance::autoscaling::v1alpha1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.ListAutoscalingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::performance::autoscaling::v1alpha1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListAutoscalingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.autoscaling.v1alpha1.ListAutoscalingResponse) */ {
 public:
  inline ListAutoscalingResponse() : ListAutoscalingResponse(nullptr) {}
  ~ListAutoscalingResponse() override;
  explicit constexpr ListAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAutoscalingResponse(const ListAutoscalingResponse& from);
  ListAutoscalingResponse(ListAutoscalingResponse&& from) noexcept
    : ListAutoscalingResponse() {
    *this = ::std::move(from);
  }

  inline ListAutoscalingResponse& operator=(const ListAutoscalingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAutoscalingResponse& operator=(ListAutoscalingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAutoscalingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAutoscalingResponse* internal_default_instance() {
    return reinterpret_cast<const ListAutoscalingResponse*>(
               &_ListAutoscalingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListAutoscalingResponse& a, ListAutoscalingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAutoscalingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAutoscalingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAutoscalingResponse* New() const final {
    return new ListAutoscalingResponse();
  }

  ListAutoscalingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAutoscalingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAutoscalingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAutoscalingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAutoscalingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.autoscaling.v1alpha1.ListAutoscalingResponse";
  }
  protected:
  explicit ListAutoscalingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoscalingsFieldNumber = 1,
  };
  // repeated .performance.autoscaling.v1alpha1.Autoscaling autoscalings = 1 [json_name = "autoscalings"];
  int autoscalings_size() const;
  private:
  int _internal_autoscalings_size() const;
  public:
  void clear_autoscalings();
  ::performance::autoscaling::v1alpha1::Autoscaling* mutable_autoscalings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::Autoscaling >*
      mutable_autoscalings();
  private:
  const ::performance::autoscaling::v1alpha1::Autoscaling& _internal_autoscalings(int index) const;
  ::performance::autoscaling::v1alpha1::Autoscaling* _internal_add_autoscalings();
  public:
  const ::performance::autoscaling::v1alpha1::Autoscaling& autoscalings(int index) const;
  ::performance::autoscaling::v1alpha1::Autoscaling* add_autoscalings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::Autoscaling >&
      autoscalings() const;

  // @@protoc_insertion_point(class_scope:performance.autoscaling.v1alpha1.ListAutoscalingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::Autoscaling > autoscalings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAutoscalingRequest

// .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
inline bool CreateAutoscalingRequest::_internal_has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline bool CreateAutoscalingRequest::has_autoscaling() const {
  return _internal_has_autoscaling();
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& CreateAutoscalingRequest::_internal_autoscaling() const {
  const ::performance::autoscaling::v1alpha1::Autoscaling* p = autoscaling_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Autoscaling&>(
      ::performance::autoscaling::v1alpha1::_Autoscaling_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& CreateAutoscalingRequest::autoscaling() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.CreateAutoscalingRequest.autoscaling)
  return _internal_autoscaling();
}
inline void CreateAutoscalingRequest::unsafe_arena_set_allocated_autoscaling(
    ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  autoscaling_ = autoscaling;
  if (autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.CreateAutoscalingRequest.autoscaling)
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingRequest::release_autoscaling() {
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingRequest::unsafe_arena_release_autoscaling() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.CreateAutoscalingRequest.autoscaling)
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingRequest::_internal_mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Autoscaling>(GetArenaForAllocation());
    autoscaling_ = p;
  }
  return autoscaling_;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingRequest::mutable_autoscaling() {
  ::performance::autoscaling::v1alpha1::Autoscaling* _msg = _internal_mutable_autoscaling();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.CreateAutoscalingRequest.autoscaling)
  return _msg;
}
inline void CreateAutoscalingRequest::set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  if (autoscaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling));
    if (message_arena != submessage_arena) {
      autoscaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.CreateAutoscalingRequest.autoscaling)
}

// -------------------------------------------------------------------

// CreateAutoscalingResponse

// .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
inline bool CreateAutoscalingResponse::_internal_has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline bool CreateAutoscalingResponse::has_autoscaling() const {
  return _internal_has_autoscaling();
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& CreateAutoscalingResponse::_internal_autoscaling() const {
  const ::performance::autoscaling::v1alpha1::Autoscaling* p = autoscaling_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Autoscaling&>(
      ::performance::autoscaling::v1alpha1::_Autoscaling_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& CreateAutoscalingResponse::autoscaling() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.autoscaling)
  return _internal_autoscaling();
}
inline void CreateAutoscalingResponse::unsafe_arena_set_allocated_autoscaling(
    ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  autoscaling_ = autoscaling;
  if (autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.autoscaling)
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingResponse::release_autoscaling() {
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingResponse::unsafe_arena_release_autoscaling() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.autoscaling)
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingResponse::_internal_mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Autoscaling>(GetArenaForAllocation());
    autoscaling_ = p;
  }
  return autoscaling_;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* CreateAutoscalingResponse::mutable_autoscaling() {
  ::performance::autoscaling::v1alpha1::Autoscaling* _msg = _internal_mutable_autoscaling();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.autoscaling)
  return _msg;
}
inline void CreateAutoscalingResponse::set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  if (autoscaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling));
    if (message_arena != submessage_arena) {
      autoscaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.autoscaling)
}

// string status = 2 [json_name = "status"];
inline void CreateAutoscalingResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateAutoscalingResponse::status() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAutoscalingResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.status)
}
inline std::string* CreateAutoscalingResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.status)
  return _s;
}
inline const std::string& CreateAutoscalingResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateAutoscalingResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAutoscalingResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAutoscalingResponse::release_status() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAutoscalingResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.CreateAutoscalingResponse.status)
}

// -------------------------------------------------------------------

// UpdateAutoscalingRequest

// .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
inline bool UpdateAutoscalingRequest::_internal_has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline bool UpdateAutoscalingRequest::has_autoscaling() const {
  return _internal_has_autoscaling();
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& UpdateAutoscalingRequest::_internal_autoscaling() const {
  const ::performance::autoscaling::v1alpha1::Autoscaling* p = autoscaling_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Autoscaling&>(
      ::performance::autoscaling::v1alpha1::_Autoscaling_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& UpdateAutoscalingRequest::autoscaling() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.UpdateAutoscalingRequest.autoscaling)
  return _internal_autoscaling();
}
inline void UpdateAutoscalingRequest::unsafe_arena_set_allocated_autoscaling(
    ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  autoscaling_ = autoscaling;
  if (autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.UpdateAutoscalingRequest.autoscaling)
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingRequest::release_autoscaling() {
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingRequest::unsafe_arena_release_autoscaling() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.UpdateAutoscalingRequest.autoscaling)
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingRequest::_internal_mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Autoscaling>(GetArenaForAllocation());
    autoscaling_ = p;
  }
  return autoscaling_;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingRequest::mutable_autoscaling() {
  ::performance::autoscaling::v1alpha1::Autoscaling* _msg = _internal_mutable_autoscaling();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.UpdateAutoscalingRequest.autoscaling)
  return _msg;
}
inline void UpdateAutoscalingRequest::set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  if (autoscaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling));
    if (message_arena != submessage_arena) {
      autoscaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.UpdateAutoscalingRequest.autoscaling)
}

// -------------------------------------------------------------------

// UpdateAutoscalingResponse

// .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
inline bool UpdateAutoscalingResponse::_internal_has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline bool UpdateAutoscalingResponse::has_autoscaling() const {
  return _internal_has_autoscaling();
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& UpdateAutoscalingResponse::_internal_autoscaling() const {
  const ::performance::autoscaling::v1alpha1::Autoscaling* p = autoscaling_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Autoscaling&>(
      ::performance::autoscaling::v1alpha1::_Autoscaling_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& UpdateAutoscalingResponse::autoscaling() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.autoscaling)
  return _internal_autoscaling();
}
inline void UpdateAutoscalingResponse::unsafe_arena_set_allocated_autoscaling(
    ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  autoscaling_ = autoscaling;
  if (autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.autoscaling)
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingResponse::release_autoscaling() {
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingResponse::unsafe_arena_release_autoscaling() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.autoscaling)
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingResponse::_internal_mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Autoscaling>(GetArenaForAllocation());
    autoscaling_ = p;
  }
  return autoscaling_;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* UpdateAutoscalingResponse::mutable_autoscaling() {
  ::performance::autoscaling::v1alpha1::Autoscaling* _msg = _internal_mutable_autoscaling();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.autoscaling)
  return _msg;
}
inline void UpdateAutoscalingResponse::set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  if (autoscaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling));
    if (message_arena != submessage_arena) {
      autoscaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.autoscaling)
}

// string status = 2 [json_name = "status"];
inline void UpdateAutoscalingResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateAutoscalingResponse::status() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateAutoscalingResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.status)
}
inline std::string* UpdateAutoscalingResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.status)
  return _s;
}
inline const std::string& UpdateAutoscalingResponse::_internal_status() const {
  return status_.Get();
}
inline void UpdateAutoscalingResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateAutoscalingResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateAutoscalingResponse::release_status() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateAutoscalingResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.UpdateAutoscalingResponse.status)
}

// -------------------------------------------------------------------

// DeleteAutoscalingRequest

// .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
inline bool DeleteAutoscalingRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool DeleteAutoscalingRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::performance::autoscaling::v1alpha1::Metadata& DeleteAutoscalingRequest::_internal_metadata() const {
  const ::performance::autoscaling::v1alpha1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Metadata&>(
      ::performance::autoscaling::v1alpha1::_Metadata_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Metadata& DeleteAutoscalingRequest::metadata() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.DeleteAutoscalingRequest.metadata)
  return _internal_metadata();
}
inline void DeleteAutoscalingRequest::unsafe_arena_set_allocated_metadata(
    ::performance::autoscaling::v1alpha1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.DeleteAutoscalingRequest.metadata)
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingRequest::release_metadata() {
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.DeleteAutoscalingRequest.metadata)
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingRequest::mutable_metadata() {
  ::performance::autoscaling::v1alpha1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.DeleteAutoscalingRequest.metadata)
  return _msg;
}
inline void DeleteAutoscalingRequest::set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.DeleteAutoscalingRequest.metadata)
}

// -------------------------------------------------------------------

// DeleteAutoscalingResponse

// .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
inline bool DeleteAutoscalingResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool DeleteAutoscalingResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::performance::autoscaling::v1alpha1::Metadata& DeleteAutoscalingResponse::_internal_metadata() const {
  const ::performance::autoscaling::v1alpha1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Metadata&>(
      ::performance::autoscaling::v1alpha1::_Metadata_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Metadata& DeleteAutoscalingResponse::metadata() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.metadata)
  return _internal_metadata();
}
inline void DeleteAutoscalingResponse::unsafe_arena_set_allocated_metadata(
    ::performance::autoscaling::v1alpha1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.metadata)
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingResponse::release_metadata() {
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.metadata)
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::performance::autoscaling::v1alpha1::Metadata* DeleteAutoscalingResponse::mutable_metadata() {
  ::performance::autoscaling::v1alpha1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.metadata)
  return _msg;
}
inline void DeleteAutoscalingResponse::set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.metadata)
}

// string status = 2 [json_name = "status"];
inline void DeleteAutoscalingResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& DeleteAutoscalingResponse::status() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAutoscalingResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.status)
}
inline std::string* DeleteAutoscalingResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.status)
  return _s;
}
inline const std::string& DeleteAutoscalingResponse::_internal_status() const {
  return status_.Get();
}
inline void DeleteAutoscalingResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteAutoscalingResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteAutoscalingResponse::release_status() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteAutoscalingResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.DeleteAutoscalingResponse.status)
}

// -------------------------------------------------------------------

// GetAutoscalingRequest

// .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
inline bool GetAutoscalingRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetAutoscalingRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::performance::autoscaling::v1alpha1::Metadata& GetAutoscalingRequest::_internal_metadata() const {
  const ::performance::autoscaling::v1alpha1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Metadata&>(
      ::performance::autoscaling::v1alpha1::_Metadata_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Metadata& GetAutoscalingRequest::metadata() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.GetAutoscalingRequest.metadata)
  return _internal_metadata();
}
inline void GetAutoscalingRequest::unsafe_arena_set_allocated_metadata(
    ::performance::autoscaling::v1alpha1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.GetAutoscalingRequest.metadata)
}
inline ::performance::autoscaling::v1alpha1::Metadata* GetAutoscalingRequest::release_metadata() {
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* GetAutoscalingRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.GetAutoscalingRequest.metadata)
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* GetAutoscalingRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::performance::autoscaling::v1alpha1::Metadata* GetAutoscalingRequest::mutable_metadata() {
  ::performance::autoscaling::v1alpha1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.GetAutoscalingRequest.metadata)
  return _msg;
}
inline void GetAutoscalingRequest::set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.GetAutoscalingRequest.metadata)
}

// -------------------------------------------------------------------

// GetAutoscalingResponse

// .performance.autoscaling.v1alpha1.Autoscaling autoscaling = 1 [json_name = "autoscaling"];
inline bool GetAutoscalingResponse::_internal_has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline bool GetAutoscalingResponse::has_autoscaling() const {
  return _internal_has_autoscaling();
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& GetAutoscalingResponse::_internal_autoscaling() const {
  const ::performance::autoscaling::v1alpha1::Autoscaling* p = autoscaling_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Autoscaling&>(
      ::performance::autoscaling::v1alpha1::_Autoscaling_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& GetAutoscalingResponse::autoscaling() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.GetAutoscalingResponse.autoscaling)
  return _internal_autoscaling();
}
inline void GetAutoscalingResponse::unsafe_arena_set_allocated_autoscaling(
    ::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  autoscaling_ = autoscaling;
  if (autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.GetAutoscalingResponse.autoscaling)
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* GetAutoscalingResponse::release_autoscaling() {
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* GetAutoscalingResponse::unsafe_arena_release_autoscaling() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.GetAutoscalingResponse.autoscaling)
  
  ::performance::autoscaling::v1alpha1::Autoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* GetAutoscalingResponse::_internal_mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Autoscaling>(GetArenaForAllocation());
    autoscaling_ = p;
  }
  return autoscaling_;
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* GetAutoscalingResponse::mutable_autoscaling() {
  ::performance::autoscaling::v1alpha1::Autoscaling* _msg = _internal_mutable_autoscaling();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.GetAutoscalingResponse.autoscaling)
  return _msg;
}
inline void GetAutoscalingResponse::set_allocated_autoscaling(::performance::autoscaling::v1alpha1::Autoscaling* autoscaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling_);
  }
  if (autoscaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoscaling));
    if (message_arena != submessage_arena) {
      autoscaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.GetAutoscalingResponse.autoscaling)
}

// string status = 2 [json_name = "status"];
inline void GetAutoscalingResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetAutoscalingResponse::status() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.GetAutoscalingResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAutoscalingResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.autoscaling.v1alpha1.GetAutoscalingResponse.status)
}
inline std::string* GetAutoscalingResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.GetAutoscalingResponse.status)
  return _s;
}
inline const std::string& GetAutoscalingResponse::_internal_status() const {
  return status_.Get();
}
inline void GetAutoscalingResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAutoscalingResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAutoscalingResponse::release_status() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.GetAutoscalingResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAutoscalingResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.GetAutoscalingResponse.status)
}

// -------------------------------------------------------------------

// ListAutoscalingRequest

// .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
inline bool ListAutoscalingRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ListAutoscalingRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::performance::autoscaling::v1alpha1::Metadata& ListAutoscalingRequest::_internal_metadata() const {
  const ::performance::autoscaling::v1alpha1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::autoscaling::v1alpha1::Metadata&>(
      ::performance::autoscaling::v1alpha1::_Metadata_default_instance_);
}
inline const ::performance::autoscaling::v1alpha1::Metadata& ListAutoscalingRequest::metadata() const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.ListAutoscalingRequest.metadata)
  return _internal_metadata();
}
inline void ListAutoscalingRequest::unsafe_arena_set_allocated_metadata(
    ::performance::autoscaling::v1alpha1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.autoscaling.v1alpha1.ListAutoscalingRequest.metadata)
}
inline ::performance::autoscaling::v1alpha1::Metadata* ListAutoscalingRequest::release_metadata() {
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* ListAutoscalingRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:performance.autoscaling.v1alpha1.ListAutoscalingRequest.metadata)
  
  ::performance::autoscaling::v1alpha1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::performance::autoscaling::v1alpha1::Metadata* ListAutoscalingRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::autoscaling::v1alpha1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::performance::autoscaling::v1alpha1::Metadata* ListAutoscalingRequest::mutable_metadata() {
  ::performance::autoscaling::v1alpha1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.ListAutoscalingRequest.metadata)
  return _msg;
}
inline void ListAutoscalingRequest::set_allocated_metadata(::performance::autoscaling::v1alpha1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:performance.autoscaling.v1alpha1.ListAutoscalingRequest.metadata)
}

// -------------------------------------------------------------------

// ListAutoscalingResponse

// repeated .performance.autoscaling.v1alpha1.Autoscaling autoscalings = 1 [json_name = "autoscalings"];
inline int ListAutoscalingResponse::_internal_autoscalings_size() const {
  return autoscalings_.size();
}
inline int ListAutoscalingResponse::autoscalings_size() const {
  return _internal_autoscalings_size();
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* ListAutoscalingResponse::mutable_autoscalings(int index) {
  // @@protoc_insertion_point(field_mutable:performance.autoscaling.v1alpha1.ListAutoscalingResponse.autoscalings)
  return autoscalings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::Autoscaling >*
ListAutoscalingResponse::mutable_autoscalings() {
  // @@protoc_insertion_point(field_mutable_list:performance.autoscaling.v1alpha1.ListAutoscalingResponse.autoscalings)
  return &autoscalings_;
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& ListAutoscalingResponse::_internal_autoscalings(int index) const {
  return autoscalings_.Get(index);
}
inline const ::performance::autoscaling::v1alpha1::Autoscaling& ListAutoscalingResponse::autoscalings(int index) const {
  // @@protoc_insertion_point(field_get:performance.autoscaling.v1alpha1.ListAutoscalingResponse.autoscalings)
  return _internal_autoscalings(index);
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* ListAutoscalingResponse::_internal_add_autoscalings() {
  return autoscalings_.Add();
}
inline ::performance::autoscaling::v1alpha1::Autoscaling* ListAutoscalingResponse::add_autoscalings() {
  ::performance::autoscaling::v1alpha1::Autoscaling* _add = _internal_add_autoscalings();
  // @@protoc_insertion_point(field_add:performance.autoscaling.v1alpha1.ListAutoscalingResponse.autoscalings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::autoscaling::v1alpha1::Autoscaling >&
ListAutoscalingResponse::autoscalings() const {
  // @@protoc_insertion_point(field_list:performance.autoscaling.v1alpha1.ListAutoscalingResponse.autoscalings)
  return autoscalings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace autoscaling
}  // namespace performance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_2fautoscaling_2fv1alpha1_2fautoscaling_5fapi_2eproto
