// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: performance/autoscaling/v1alpha1/autoscaling_api.proto

#include "performance/autoscaling/v1alpha1/autoscaling_api.pb.h"
#include "performance/autoscaling/v1alpha1/autoscaling_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace performance {
namespace autoscaling {
namespace v1alpha1 {

static const char* AutoscalingAPIService_method_names[] = {
  "/performance.autoscaling.v1alpha1.AutoscalingAPIService/CreateAutoscaling",
  "/performance.autoscaling.v1alpha1.AutoscalingAPIService/UpdateAutoscaling",
  "/performance.autoscaling.v1alpha1.AutoscalingAPIService/DeleteAutoscaling",
  "/performance.autoscaling.v1alpha1.AutoscalingAPIService/GetAutoscaling",
  "/performance.autoscaling.v1alpha1.AutoscalingAPIService/ListAutoscaling",
};

std::unique_ptr< AutoscalingAPIService::Stub> AutoscalingAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AutoscalingAPIService::Stub> stub(new AutoscalingAPIService::Stub(channel));
  return stub;
}

AutoscalingAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateAutoscaling_(AutoscalingAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAutoscaling_(AutoscalingAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAutoscaling_(AutoscalingAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAutoscaling_(AutoscalingAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAutoscaling_(AutoscalingAPIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AutoscalingAPIService::Stub::CreateAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::CreateAutoscalingRequest& request, ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAutoscaling_, context, request, response);
}

void AutoscalingAPIService::Stub::experimental_async::CreateAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::CreateAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAutoscaling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse>* AutoscalingAPIService::Stub::AsyncCreateAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::CreateAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_CreateAutoscaling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse>* AutoscalingAPIService::Stub::PrepareAsyncCreateAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::CreateAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_CreateAutoscaling_, context, request, false);
}

::grpc::Status AutoscalingAPIService::Stub::UpdateAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest& request, ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateAutoscaling_, context, request, response);
}

void AutoscalingAPIService::Stub::experimental_async::UpdateAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateAutoscaling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse>* AutoscalingAPIService::Stub::AsyncUpdateAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_UpdateAutoscaling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse>* AutoscalingAPIService::Stub::PrepareAsyncUpdateAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_UpdateAutoscaling_, context, request, false);
}

::grpc::Status AutoscalingAPIService::Stub::DeleteAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest& request, ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAutoscaling_, context, request, response);
}

void AutoscalingAPIService::Stub::experimental_async::DeleteAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAutoscaling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse>* AutoscalingAPIService::Stub::AsyncDeleteAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAutoscaling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse>* AutoscalingAPIService::Stub::PrepareAsyncDeleteAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAutoscaling_, context, request, false);
}

::grpc::Status AutoscalingAPIService::Stub::GetAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::GetAutoscalingRequest& request, ::performance::autoscaling::v1alpha1::GetAutoscalingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAutoscaling_, context, request, response);
}

void AutoscalingAPIService::Stub::experimental_async::GetAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::GetAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::GetAutoscalingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAutoscaling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::GetAutoscalingResponse>* AutoscalingAPIService::Stub::AsyncGetAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::GetAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::GetAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_GetAutoscaling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::GetAutoscalingResponse>* AutoscalingAPIService::Stub::PrepareAsyncGetAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::GetAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::GetAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_GetAutoscaling_, context, request, false);
}

::grpc::Status AutoscalingAPIService::Stub::ListAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::ListAutoscalingRequest& request, ::performance::autoscaling::v1alpha1::ListAutoscalingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAutoscaling_, context, request, response);
}

void AutoscalingAPIService::Stub::experimental_async::ListAutoscaling(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::ListAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::ListAutoscalingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAutoscaling_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::ListAutoscalingResponse>* AutoscalingAPIService::Stub::AsyncListAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::ListAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::ListAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_ListAutoscaling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::performance::autoscaling::v1alpha1::ListAutoscalingResponse>* AutoscalingAPIService::Stub::PrepareAsyncListAutoscalingRaw(::grpc::ClientContext* context, const ::performance::autoscaling::v1alpha1::ListAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::autoscaling::v1alpha1::ListAutoscalingResponse>::Create(channel_.get(), cq, rpcmethod_ListAutoscaling_, context, request, false);
}

AutoscalingAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoscalingAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoscalingAPIService::Service, ::performance::autoscaling::v1alpha1::CreateAutoscalingRequest, ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse>(
          std::mem_fn(&AutoscalingAPIService::Service::CreateAutoscaling), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoscalingAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoscalingAPIService::Service, ::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest, ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse>(
          std::mem_fn(&AutoscalingAPIService::Service::UpdateAutoscaling), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoscalingAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoscalingAPIService::Service, ::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest, ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse>(
          std::mem_fn(&AutoscalingAPIService::Service::DeleteAutoscaling), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoscalingAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoscalingAPIService::Service, ::performance::autoscaling::v1alpha1::GetAutoscalingRequest, ::performance::autoscaling::v1alpha1::GetAutoscalingResponse>(
          std::mem_fn(&AutoscalingAPIService::Service::GetAutoscaling), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoscalingAPIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoscalingAPIService::Service, ::performance::autoscaling::v1alpha1::ListAutoscalingRequest, ::performance::autoscaling::v1alpha1::ListAutoscalingResponse>(
          std::mem_fn(&AutoscalingAPIService::Service::ListAutoscaling), this)));
}

AutoscalingAPIService::Service::~Service() {
}

::grpc::Status AutoscalingAPIService::Service::CreateAutoscaling(::grpc::ServerContext* context, const ::performance::autoscaling::v1alpha1::CreateAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::CreateAutoscalingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoscalingAPIService::Service::UpdateAutoscaling(::grpc::ServerContext* context, const ::performance::autoscaling::v1alpha1::UpdateAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::UpdateAutoscalingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoscalingAPIService::Service::DeleteAutoscaling(::grpc::ServerContext* context, const ::performance::autoscaling::v1alpha1::DeleteAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::DeleteAutoscalingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoscalingAPIService::Service::GetAutoscaling(::grpc::ServerContext* context, const ::performance::autoscaling::v1alpha1::GetAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::GetAutoscalingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoscalingAPIService::Service::ListAutoscaling(::grpc::ServerContext* context, const ::performance::autoscaling::v1alpha1::ListAutoscalingRequest* request, ::performance::autoscaling::v1alpha1::ListAutoscalingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace performance
}  // namespace autoscaling
}  // namespace v1alpha1

