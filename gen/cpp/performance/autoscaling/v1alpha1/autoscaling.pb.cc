// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/autoscaling/v1alpha1/autoscaling.proto

#include "performance/autoscaling/v1alpha1/autoscaling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace performance {
namespace autoscaling {
namespace v1alpha1 {
constexpr Metadata_LabelsEntry_DoNotUse::Metadata_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Metadata_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr Metadata_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Metadata_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Metadata_LabelsEntry_DoNotUseDefaultTypeInternal _Metadata_LabelsEntry_DoNotUse_default_instance_;
constexpr Metadata_AnnotationsEntry_DoNotUse::Metadata_AnnotationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Metadata_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  constexpr Metadata_AnnotationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Metadata_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Metadata_AnnotationsEntry_DoNotUseDefaultTypeInternal _Metadata_AnnotationsEntry_DoNotUse_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , annotations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
constexpr AutoScalingSpecTarget::AutoScalingSpecTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : api_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kind_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , container_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AutoScalingSpecTargetDefaultTypeInternal {
  constexpr AutoScalingSpecTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoScalingSpecTargetDefaultTypeInternal() {}
  union {
    AutoScalingSpecTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoScalingSpecTargetDefaultTypeInternal _AutoScalingSpecTarget_default_instance_;
constexpr AutoscalingSpecRule_MetadataEntry_DoNotUse::AutoscalingSpecRule_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AutoscalingSpecRule_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr AutoscalingSpecRule_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoscalingSpecRule_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AutoscalingSpecRule_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoscalingSpecRule_MetadataEntry_DoNotUseDefaultTypeInternal _AutoscalingSpecRule_MetadataEntry_DoNotUse_default_instance_;
constexpr AutoscalingSpecRule::AutoscalingSpecRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metric_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AutoscalingSpecRuleDefaultTypeInternal {
  constexpr AutoscalingSpecRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoscalingSpecRuleDefaultTypeInternal() {}
  union {
    AutoscalingSpecRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoscalingSpecRuleDefaultTypeInternal _AutoscalingSpecRule_default_instance_;
constexpr AutoscalingSpec::AutoscalingSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_()
  , target_ref_(nullptr)
  , min_(0)
  , max_(0)
  , polling_interval_(0)
  , cooldown_period_(0){}
struct AutoscalingSpecDefaultTypeInternal {
  constexpr AutoscalingSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoscalingSpecDefaultTypeInternal() {}
  union {
    AutoscalingSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoscalingSpecDefaultTypeInternal _AutoscalingSpec_default_instance_;
constexpr Autoscaling::Autoscaling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr){}
struct AutoscalingDefaultTypeInternal {
  constexpr AutoscalingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoscalingDefaultTypeInternal() {}
  union {
    Autoscaling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoscalingDefaultTypeInternal _Autoscaling_default_instance_;
}  // namespace v1alpha1
}  // namespace autoscaling
}  // namespace performance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata, name_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata, namespace__),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata, labels_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Metadata, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget, api_version_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget, kind_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget, name_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget, container_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule, metric_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule, value_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule, type_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpecRule, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpec, target_ref_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpec, min_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpec, max_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpec, polling_interval_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpec, cooldown_period_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::AutoscalingSpec, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Autoscaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Autoscaling, metadata_),
  PROTOBUF_FIELD_OFFSET(::performance::autoscaling::v1alpha1::Autoscaling, spec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse)},
  { 9, 16, sizeof(::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse)},
  { 18, -1, sizeof(::performance::autoscaling::v1alpha1::Metadata)},
  { 27, -1, sizeof(::performance::autoscaling::v1alpha1::AutoScalingSpecTarget)},
  { 36, 43, sizeof(::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse)},
  { 45, -1, sizeof(::performance::autoscaling::v1alpha1::AutoscalingSpecRule)},
  { 54, -1, sizeof(::performance::autoscaling::v1alpha1::AutoscalingSpec)},
  { 65, -1, sizeof(::performance::autoscaling::v1alpha1::Autoscaling)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_Metadata_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_Metadata_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_AutoScalingSpecTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_AutoscalingSpecRule_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_AutoscalingSpecRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_AutoscalingSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::autoscaling::v1alpha1::_Autoscaling_default_instance_),
};

const char descriptor_table_protodef_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2performance/autoscaling/v1alpha1/autos"
  "caling.proto\022 performance.autoscaling.v1"
  "alpha1\"\346\002\n\010Metadata\022\022\n\004name\030\001 \001(\tR\004name\022"
  "\034\n\tnamespace\030\002 \001(\tR\tnamespace\022N\n\006labels\030"
  "\003 \003(\01326.performance.autoscaling.v1alpha1"
  ".Metadata.LabelsEntryR\006labels\022]\n\013annotat"
  "ions\030\004 \003(\0132;.performance.autoscaling.v1a"
  "lpha1.Metadata.AnnotationsEntryR\013annotat"
  "ions\0329\n\013LabelsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n"
  "\005value\030\002 \001(\tR\005value:\0028\001\032>\n\020AnnotationsEn"
  "try\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005va"
  "lue:\0028\001\"~\n\025AutoScalingSpecTarget\022\037\n\013api_"
  "version\030\001 \001(\tR\napiVersion\022\022\n\004kind\030\002 \001(\tR"
  "\004kind\022\022\n\004name\030\003 \001(\tR\004name\022\034\n\tcontainer\030\004"
  " \001(\tR\tcontainer\"\365\001\n\023AutoscalingSpecRule\022"
  "\026\n\006metric\030\001 \001(\tR\006metric\022\024\n\005value\030\002 \001(\tR\005"
  "value\022\022\n\004type\030\003 \001(\tR\004type\022_\n\010metadata\030\004 "
  "\003(\0132C.performance.autoscaling.v1alpha1.A"
  "utoscalingSpecRule.MetadataEntryR\010metada"
  "ta\032;\n\rMetadataEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n"
  "\005value\030\002 \001(\tR\005value:\0028\001\"\256\002\n\017AutoscalingS"
  "pec\022V\n\ntarget_ref\030\001 \001(\01327.performance.au"
  "toscaling.v1alpha1.AutoScalingSpecTarget"
  "R\ttargetRef\022\020\n\003min\030\002 \001(\005R\003min\022\020\n\003max\030\003 \001"
  "(\005R\003max\022)\n\020polling_interval\030\004 \001(\005R\017polli"
  "ngInterval\022\'\n\017cooldown_period\030\005 \001(\005R\016coo"
  "ldownPeriod\022K\n\005rules\030\006 \003(\01325.performance"
  ".autoscaling.v1alpha1.AutoscalingSpecRul"
  "eR\005rules\"\234\001\n\013Autoscaling\022F\n\010metadata\030\001 \001"
  "(\0132*.performance.autoscaling.v1alpha1.Me"
  "tadataR\010metadata\022E\n\004spec\030\002 \001(\01321.perform"
  "ance.autoscaling.v1alpha1.AutoscalingSpe"
  "cR\004specB\301\001\n*io.cuemby.performance.autosc"
  "aling.v1alpha1B\020AutoscalingProtoP\001Z3gith"
  "ub.com/performance-grpc-sdk/autoscalingv"
  "1alpha1\242\002\003PFX\252\002 Performance.Autoscaling."
  "V1Alpha1\312\002 Performance\\Autoscaling\\V1Alp"
  "ha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto = {
  false, false, 1491, descriptor_table_protodef_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto, "performance/autoscaling/v1alpha1/autoscaling.proto", 
  &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto::offsets,
  file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto, file_level_enum_descriptors_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto, file_level_service_descriptors_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter() {
  return &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto(&descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto);
namespace performance {
namespace autoscaling {
namespace v1alpha1 {

// ===================================================================

Metadata_LabelsEntry_DoNotUse::Metadata_LabelsEntry_DoNotUse() {}
Metadata_LabelsEntry_DoNotUse::Metadata_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_LabelsEntry_DoNotUse::MergeFrom(const Metadata_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[0]);
}

// ===================================================================

Metadata_AnnotationsEntry_DoNotUse::Metadata_AnnotationsEntry_DoNotUse() {}
Metadata_AnnotationsEntry_DoNotUse::Metadata_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_AnnotationsEntry_DoNotUse::MergeFrom(const Metadata_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[1]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.autoscaling.v1alpha1.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.autoscaling.v1alpha1.Metadata)
}

inline void Metadata::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:performance.autoscaling.v1alpha1.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
  _this->labels_. ~MapField();
  _this->annotations_. ~MapField();
}
inline void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Metadata::ArenaDtor);
  }
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.autoscaling.v1alpha1.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.Metadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 2 [json_name = "namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.Metadata.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 3 [json_name = "labels"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 4 [json_name = "annotations"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.autoscaling.v1alpha1.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.Metadata.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.Metadata.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // map<string, string> labels = 3 [json_name = "labels"];
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.autoscaling.v1alpha1.Metadata.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.autoscaling.v1alpha1.Metadata.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_LabelsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = Metadata_LabelsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 4 [json_name = "annotations"];
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.autoscaling.v1alpha1.Metadata.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.autoscaling.v1alpha1.Metadata.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = Metadata_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.autoscaling.v1alpha1.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.autoscaling.v1alpha1.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 3 [json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Metadata_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 4 [json_name = "annotations"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += Metadata_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.autoscaling.v1alpha1.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.autoscaling.v1alpha1.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  annotations_.InternalSwap(&other->annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[2]);
}

// ===================================================================

class AutoScalingSpecTarget::_Internal {
 public:
};

AutoScalingSpecTarget::AutoScalingSpecTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
}
AutoScalingSpecTarget::AutoScalingSpecTarget(const AutoScalingSpecTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_version().empty()) {
    api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_api_version(), 
      GetArenaForAllocation());
  }
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kind().empty()) {
    kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kind(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  container_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container().empty()) {
    container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
}

inline void AutoScalingSpecTarget::SharedCtor() {
api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
container_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AutoScalingSpecTarget::~AutoScalingSpecTarget() {
  // @@protoc_insertion_point(destructor:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutoScalingSpecTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  api_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutoScalingSpecTarget::ArenaDtor(void* object) {
  AutoScalingSpecTarget* _this = reinterpret_cast< AutoScalingSpecTarget* >(object);
  (void)_this;
}
void AutoScalingSpecTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoScalingSpecTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoScalingSpecTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_version_.ClearToEmpty();
  kind_.ClearToEmpty();
  name_.ClearToEmpty();
  container_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoScalingSpecTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string api_version = 1 [json_name = "apiVersion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_api_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.api_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kind = 2 [json_name = "kind"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string container = 4 [json_name = "container"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_container();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.container"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoScalingSpecTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_version = 1 [json_name = "apiVersion"];
  if (!this->_internal_api_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_version().data(), static_cast<int>(this->_internal_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.api_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_api_version(), target);
  }

  // string kind = 2 [json_name = "kind"];
  if (!this->_internal_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.kind");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kind(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string container = 4 [json_name = "container"];
  if (!this->_internal_container().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container().data(), static_cast<int>(this->_internal_container().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.AutoScalingSpecTarget.container");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_container(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
  return target;
}

size_t AutoScalingSpecTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string api_version = 1 [json_name = "apiVersion"];
  if (!this->_internal_api_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_version());
  }

  // string kind = 2 [json_name = "kind"];
  if (!this->_internal_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string container = 4 [json_name = "container"];
  if (!this->_internal_container().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoScalingSpecTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutoScalingSpecTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoScalingSpecTarget::GetClassData() const { return &_class_data_; }

void AutoScalingSpecTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutoScalingSpecTarget *>(to)->MergeFrom(
      static_cast<const AutoScalingSpecTarget &>(from));
}


void AutoScalingSpecTarget::MergeFrom(const AutoScalingSpecTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_api_version().empty()) {
    _internal_set_api_version(from._internal_api_version());
  }
  if (!from._internal_kind().empty()) {
    _internal_set_kind(from._internal_kind());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_container().empty()) {
    _internal_set_container(from._internal_container());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoScalingSpecTarget::CopyFrom(const AutoScalingSpecTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.autoscaling.v1alpha1.AutoScalingSpecTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoScalingSpecTarget::IsInitialized() const {
  return true;
}

void AutoScalingSpecTarget::InternalSwap(AutoScalingSpecTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &api_version_, GetArenaForAllocation(),
      &other->api_version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kind_, GetArenaForAllocation(),
      &other->kind_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_, GetArenaForAllocation(),
      &other->container_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoScalingSpecTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[3]);
}

// ===================================================================

AutoscalingSpecRule_MetadataEntry_DoNotUse::AutoscalingSpecRule_MetadataEntry_DoNotUse() {}
AutoscalingSpecRule_MetadataEntry_DoNotUse::AutoscalingSpecRule_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AutoscalingSpecRule_MetadataEntry_DoNotUse::MergeFrom(const AutoscalingSpecRule_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AutoscalingSpecRule_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[4]);
}

// ===================================================================

class AutoscalingSpecRule::_Internal {
 public:
};

AutoscalingSpecRule::AutoscalingSpecRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
}
AutoscalingSpecRule::AutoscalingSpecRule(const AutoscalingSpecRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metric().empty()) {
    metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
}

inline void AutoscalingSpecRule::SharedCtor() {
metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AutoscalingSpecRule::~AutoscalingSpecRule() {
  // @@protoc_insertion_point(destructor:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutoscalingSpecRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metric_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutoscalingSpecRule::ArenaDtor(void* object) {
  AutoscalingSpecRule* _this = reinterpret_cast< AutoscalingSpecRule* >(object);
  (void)_this;
  _this->metadata_. ~MapField();
}
inline void AutoscalingSpecRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AutoscalingSpecRule::ArenaDtor);
  }
}
void AutoscalingSpecRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoscalingSpecRule::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  metric_.ClearToEmpty();
  value_.ClearToEmpty();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoscalingSpecRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metric = 1 [json_name = "metric"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_metric();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.AutoscalingSpecRule.metric"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.AutoscalingSpecRule.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.autoscaling.v1alpha1.AutoscalingSpecRule.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 4 [json_name = "metadata"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoscalingSpecRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric = 1 [json_name = "metric"];
  if (!this->_internal_metric().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric().data(), static_cast<int>(this->_internal_metric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.AutoscalingSpecRule.metric");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metric(), target);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.AutoscalingSpecRule.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.autoscaling.v1alpha1.AutoscalingSpecRule.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // map<string, string> metadata = 4 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.autoscaling.v1alpha1.AutoscalingSpecRule.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.autoscaling.v1alpha1.AutoscalingSpecRule.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AutoscalingSpecRule_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = AutoscalingSpecRule_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
  return target;
}

size_t AutoscalingSpecRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 4 [json_name = "metadata"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += AutoscalingSpecRule_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string metric = 1 [json_name = "metric"];
  if (!this->_internal_metric().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric());
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoscalingSpecRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutoscalingSpecRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoscalingSpecRule::GetClassData() const { return &_class_data_; }

void AutoscalingSpecRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutoscalingSpecRule *>(to)->MergeFrom(
      static_cast<const AutoscalingSpecRule &>(from));
}


void AutoscalingSpecRule::MergeFrom(const AutoscalingSpecRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_metric().empty()) {
    _internal_set_metric(from._internal_metric());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoscalingSpecRule::CopyFrom(const AutoscalingSpecRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.autoscaling.v1alpha1.AutoscalingSpecRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoscalingSpecRule::IsInitialized() const {
  return true;
}

void AutoscalingSpecRule::InternalSwap(AutoscalingSpecRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metric_, GetArenaForAllocation(),
      &other->metric_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoscalingSpecRule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[5]);
}

// ===================================================================

class AutoscalingSpec::_Internal {
 public:
  static const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget& target_ref(const AutoscalingSpec* msg);
};

const ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget&
AutoscalingSpec::_Internal::target_ref(const AutoscalingSpec* msg) {
  return *msg->target_ref_;
}
AutoscalingSpec::AutoscalingSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.autoscaling.v1alpha1.AutoscalingSpec)
}
AutoscalingSpec::AutoscalingSpec(const AutoscalingSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_ref()) {
    target_ref_ = new ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget(*from.target_ref_);
  } else {
    target_ref_ = nullptr;
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_period_) -
    reinterpret_cast<char*>(&min_)) + sizeof(cooldown_period_));
  // @@protoc_insertion_point(copy_constructor:performance.autoscaling.v1alpha1.AutoscalingSpec)
}

inline void AutoscalingSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_ref_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cooldown_period_) -
    reinterpret_cast<char*>(&target_ref_)) + sizeof(cooldown_period_));
}

AutoscalingSpec::~AutoscalingSpec() {
  // @@protoc_insertion_point(destructor:performance.autoscaling.v1alpha1.AutoscalingSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutoscalingSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_ref_;
}

void AutoscalingSpec::ArenaDtor(void* object) {
  AutoscalingSpec* _this = reinterpret_cast< AutoscalingSpec* >(object);
  (void)_this;
}
void AutoscalingSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoscalingSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoscalingSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.autoscaling.v1alpha1.AutoscalingSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  if (GetArenaForAllocation() == nullptr && target_ref_ != nullptr) {
    delete target_ref_;
  }
  target_ref_ = nullptr;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cooldown_period_) -
      reinterpret_cast<char*>(&min_)) + sizeof(cooldown_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoscalingSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .performance.autoscaling.v1alpha1.AutoScalingSpecTarget target_ref = 1 [json_name = "targetRef"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min = 2 [json_name = "min"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max = 3 [json_name = "max"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 polling_interval = 4 [json_name = "pollingInterval"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          polling_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cooldown_period = 5 [json_name = "cooldownPeriod"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cooldown_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .performance.autoscaling.v1alpha1.AutoscalingSpecRule rules = 6 [json_name = "rules"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoscalingSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.autoscaling.v1alpha1.AutoscalingSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .performance.autoscaling.v1alpha1.AutoScalingSpecTarget target_ref = 1 [json_name = "targetRef"];
  if (this->_internal_has_target_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_ref(this), target, stream);
  }

  // int32 min = 2 [json_name = "min"];
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min(), target);
  }

  // int32 max = 3 [json_name = "max"];
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max(), target);
  }

  // int32 polling_interval = 4 [json_name = "pollingInterval"];
  if (this->_internal_polling_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_polling_interval(), target);
  }

  // int32 cooldown_period = 5 [json_name = "cooldownPeriod"];
  if (this->_internal_cooldown_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cooldown_period(), target);
  }

  // repeated .performance.autoscaling.v1alpha1.AutoscalingSpecRule rules = 6 [json_name = "rules"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.autoscaling.v1alpha1.AutoscalingSpec)
  return target;
}

size_t AutoscalingSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.autoscaling.v1alpha1.AutoscalingSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .performance.autoscaling.v1alpha1.AutoscalingSpecRule rules = 6 [json_name = "rules"];
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .performance.autoscaling.v1alpha1.AutoScalingSpecTarget target_ref = 1 [json_name = "targetRef"];
  if (this->_internal_has_target_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_ref_);
  }

  // int32 min = 2 [json_name = "min"];
  if (this->_internal_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min());
  }

  // int32 max = 3 [json_name = "max"];
  if (this->_internal_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max());
  }

  // int32 polling_interval = 4 [json_name = "pollingInterval"];
  if (this->_internal_polling_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_polling_interval());
  }

  // int32 cooldown_period = 5 [json_name = "cooldownPeriod"];
  if (this->_internal_cooldown_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cooldown_period());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoscalingSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutoscalingSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoscalingSpec::GetClassData() const { return &_class_data_; }

void AutoscalingSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutoscalingSpec *>(to)->MergeFrom(
      static_cast<const AutoscalingSpec &>(from));
}


void AutoscalingSpec::MergeFrom(const AutoscalingSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.autoscaling.v1alpha1.AutoscalingSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from._internal_has_target_ref()) {
    _internal_mutable_target_ref()->::performance::autoscaling::v1alpha1::AutoScalingSpecTarget::MergeFrom(from._internal_target_ref());
  }
  if (from._internal_min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from._internal_polling_interval() != 0) {
    _internal_set_polling_interval(from._internal_polling_interval());
  }
  if (from._internal_cooldown_period() != 0) {
    _internal_set_cooldown_period(from._internal_cooldown_period());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoscalingSpec::CopyFrom(const AutoscalingSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.autoscaling.v1alpha1.AutoscalingSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoscalingSpec::IsInitialized() const {
  return true;
}

void AutoscalingSpec::InternalSwap(AutoscalingSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoscalingSpec, cooldown_period_)
      + sizeof(AutoscalingSpec::cooldown_period_)
      - PROTOBUF_FIELD_OFFSET(AutoscalingSpec, target_ref_)>(
          reinterpret_cast<char*>(&target_ref_),
          reinterpret_cast<char*>(&other->target_ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoscalingSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[6]);
}

// ===================================================================

class Autoscaling::_Internal {
 public:
  static const ::performance::autoscaling::v1alpha1::Metadata& metadata(const Autoscaling* msg);
  static const ::performance::autoscaling::v1alpha1::AutoscalingSpec& spec(const Autoscaling* msg);
};

const ::performance::autoscaling::v1alpha1::Metadata&
Autoscaling::_Internal::metadata(const Autoscaling* msg) {
  return *msg->metadata_;
}
const ::performance::autoscaling::v1alpha1::AutoscalingSpec&
Autoscaling::_Internal::spec(const Autoscaling* msg) {
  return *msg->spec_;
}
Autoscaling::Autoscaling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.autoscaling.v1alpha1.Autoscaling)
}
Autoscaling::Autoscaling(const Autoscaling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::performance::autoscaling::v1alpha1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::performance::autoscaling::v1alpha1::AutoscalingSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:performance.autoscaling.v1alpha1.Autoscaling)
}

inline void Autoscaling::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(spec_));
}

Autoscaling::~Autoscaling() {
  // @@protoc_insertion_point(destructor:performance.autoscaling.v1alpha1.Autoscaling)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Autoscaling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
}

void Autoscaling::ArenaDtor(void* object) {
  Autoscaling* _this = reinterpret_cast< Autoscaling* >(object);
  (void)_this;
}
void Autoscaling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Autoscaling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Autoscaling::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.autoscaling.v1alpha1.Autoscaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Autoscaling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .performance.autoscaling.v1alpha1.AutoscalingSpec spec = 2 [json_name = "spec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Autoscaling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.autoscaling.v1alpha1.Autoscaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // .performance.autoscaling.v1alpha1.AutoscalingSpec spec = 2 [json_name = "spec"];
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.autoscaling.v1alpha1.Autoscaling)
  return target;
}

size_t Autoscaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.autoscaling.v1alpha1.Autoscaling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .performance.autoscaling.v1alpha1.Metadata metadata = 1 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .performance.autoscaling.v1alpha1.AutoscalingSpec spec = 2 [json_name = "spec"];
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Autoscaling::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Autoscaling::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Autoscaling::GetClassData() const { return &_class_data_; }

void Autoscaling::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Autoscaling *>(to)->MergeFrom(
      static_cast<const Autoscaling &>(from));
}


void Autoscaling::MergeFrom(const Autoscaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.autoscaling.v1alpha1.Autoscaling)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::performance::autoscaling::v1alpha1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::performance::autoscaling::v1alpha1::AutoscalingSpec::MergeFrom(from._internal_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Autoscaling::CopyFrom(const Autoscaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.autoscaling.v1alpha1.Autoscaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Autoscaling::IsInitialized() const {
  return true;
}

void Autoscaling::InternalSwap(Autoscaling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Autoscaling, spec_)
      + sizeof(Autoscaling::spec_)
      - PROTOBUF_FIELD_OFFSET(Autoscaling, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Autoscaling::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_getter, &descriptor_table_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto_once,
      file_level_metadata_performance_2fautoscaling_2fv1alpha1_2fautoscaling_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace autoscaling
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::Metadata_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::Metadata_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::Metadata* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::AutoScalingSpecTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::AutoscalingSpecRule* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::AutoscalingSpecRule >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::AutoscalingSpec* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::AutoscalingSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::AutoscalingSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::autoscaling::v1alpha1::Autoscaling* Arena::CreateMaybeMessage< ::performance::autoscaling::v1alpha1::Autoscaling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::autoscaling::v1alpha1::Autoscaling >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
