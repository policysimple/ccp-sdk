// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/logs/v1alpha1/logs_agent_api.proto

#include "performance/logs/v1alpha1/logs_agent_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace performance {
namespace logs {
namespace v1alpha1 {
constexpr SaveLogsRequest_MetaEntry_DoNotUse::SaveLogsRequest_MetaEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SaveLogsRequest_MetaEntry_DoNotUseDefaultTypeInternal {
  constexpr SaveLogsRequest_MetaEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveLogsRequest_MetaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SaveLogsRequest_MetaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveLogsRequest_MetaEntry_DoNotUseDefaultTypeInternal _SaveLogsRequest_MetaEntry_DoNotUse_default_instance_;
constexpr SaveLogsRequest::SaveLogsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , logs_()
  , cluster_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SaveLogsRequestDefaultTypeInternal {
  constexpr SaveLogsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveLogsRequestDefaultTypeInternal() {}
  union {
    SaveLogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveLogsRequestDefaultTypeInternal _SaveLogsRequest_default_instance_;
constexpr SaveLogsResponse::SaveLogsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct SaveLogsResponseDefaultTypeInternal {
  constexpr SaveLogsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveLogsResponseDefaultTypeInternal() {}
  union {
    SaveLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveLogsResponseDefaultTypeInternal _SaveLogsResponse_default_instance_;
constexpr Log::Log(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kubernetes_(nullptr)
  , date_(0){}
struct LogDefaultTypeInternal {
  constexpr LogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogDefaultTypeInternal _Log_default_instance_;
constexpr LogKuebrnetesInfo_LabelsEntry_DoNotUse::LogKuebrnetesInfo_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LogKuebrnetesInfo_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr LogKuebrnetesInfo_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogKuebrnetesInfo_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LogKuebrnetesInfo_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogKuebrnetesInfo_LabelsEntry_DoNotUseDefaultTypeInternal _LogKuebrnetesInfo_LabelsEntry_DoNotUse_default_instance_;
constexpr LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LogKuebrnetesInfo_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  constexpr LogKuebrnetesInfo_AnnotationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogKuebrnetesInfo_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LogKuebrnetesInfo_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogKuebrnetesInfo_AnnotationsEntry_DoNotUseDefaultTypeInternal _LogKuebrnetesInfo_AnnotationsEntry_DoNotUse_default_instance_;
constexpr LogKuebrnetesInfo::LogKuebrnetesInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , annotations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , pod_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pod_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , container_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , docker_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , container_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , container_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_kubernetes_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_kind_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_api_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LogKuebrnetesInfoDefaultTypeInternal {
  constexpr LogKuebrnetesInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogKuebrnetesInfoDefaultTypeInternal() {}
  union {
    LogKuebrnetesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogKuebrnetesInfoDefaultTypeInternal _LogKuebrnetesInfo_default_instance_;
}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest, cluster_name_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsRequest, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::SaveLogsResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Log, date_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Log, log_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Log, kubernetes_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Log, log_id_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, pod_name_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, namespace_name_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, pod_id_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, labels_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, annotations_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, host_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, container_name_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, docker_id_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, container_hash_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, container_image_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, owner_name_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, owner_kubernetes_uid_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, owner_kind_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, owner_api_version_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::LogKuebrnetesInfo, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse)},
  { 9, -1, sizeof(::performance::logs::v1alpha1::SaveLogsRequest)},
  { 17, -1, sizeof(::performance::logs::v1alpha1::SaveLogsResponse)},
  { 23, -1, sizeof(::performance::logs::v1alpha1::Log)},
  { 32, 39, sizeof(::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse)},
  { 41, 48, sizeof(::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse)},
  { 50, -1, sizeof(::performance::logs::v1alpha1::LogKuebrnetesInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_SaveLogsRequest_MetaEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_SaveLogsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_SaveLogsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_LogKuebrnetesInfo_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_LogKuebrnetesInfo_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_LogKuebrnetesInfo_default_instance_),
};

const char descriptor_table_protodef_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.performance/logs/v1alpha1/logs_agent_a"
  "pi.proto\022\031performance.logs.v1alpha1\032$per"
  "formance/logs/v1alpha1/logs.proto\"\353\001\n\017Sa"
  "veLogsRequest\022!\n\014cluster_name\030\001 \001(\tR\013clu"
  "sterName\022H\n\004meta\030\002 \003(\01324.performance.log"
  "s.v1alpha1.SaveLogsRequest.MetaEntryR\004me"
  "ta\0222\n\004logs\030\003 \003(\0132\036.performance.logs.v1al"
  "pha1.LogR\004logs\0327\n\tMetaEntry\022\020\n\003key\030\001 \001(\t"
  "R\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\",\n\020SaveL"
  "ogsResponse\022\030\n\007success\030\001 \001(\010R\007success\"\220\001"
  "\n\003Log\022\022\n\004date\030\001 \001(\001R\004date\022\020\n\003log\030\002 \001(\tR\003"
  "log\022L\n\nkubernetes\030\003 \001(\0132,.performance.lo"
  "gs.v1alpha1.LogKuebrnetesInfoR\nkubernete"
  "s\022\025\n\006log_id\030\004 \001(\tR\005logId\"\366\005\n\021LogKuebrnet"
  "esInfo\022\031\n\010pod_name\030\001 \001(\tR\007podName\022%\n\016nam"
  "espace_name\030\002 \001(\tR\rnamespaceName\022\025\n\006pod_"
  "id\030\003 \001(\tR\005podId\022P\n\006labels\030\004 \003(\01328.perfor"
  "mance.logs.v1alpha1.LogKuebrnetesInfo.La"
  "belsEntryR\006labels\022_\n\013annotations\030\005 \003(\0132="
  ".performance.logs.v1alpha1.LogKuebrnetes"
  "Info.AnnotationsEntryR\013annotations\022\022\n\004ho"
  "st\030\006 \001(\tR\004host\022%\n\016container_name\030\007 \001(\tR\r"
  "containerName\022\033\n\tdocker_id\030\010 \001(\tR\010docker"
  "Id\022%\n\016container_hash\030\n \001(\tR\rcontainerHas"
  "h\022\'\n\017container_image\030\013 \001(\tR\016containerIma"
  "ge\022\035\n\nowner_name\030\014 \001(\tR\townerName\0220\n\024own"
  "er_kubernetes_uid\030\r \001(\tR\022ownerKubernetes"
  "Uid\022\035\n\nowner_kind\030\016 \001(\tR\townerKind\022*\n\021ow"
  "ner_api_version\030\017 \001(\tR\017ownerApiVersion\022\026"
  "\n\006status\030\020 \001(\tR\006status\0329\n\013LabelsEntry\022\020\n"
  "\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028"
  "\001\032>\n\020AnnotationsEntry\022\020\n\003key\030\001 \001(\tR\003key\022"
  "\024\n\005value\030\002 \001(\tR\005value:\0028\0012\200\001\n\023LogsAgentA"
  "PIService\022i\n\010SaveLogs\022*.performance.logs"
  ".v1alpha1.SaveLogsRequest\032+.performance."
  "logs.v1alpha1.SaveLogsResponse\"\000(\0010\001B\246\001\n"
  "#io.cuemby.performance.logs.v1alpha1B\021Lo"
  "gsAgentApiProtoP\001Z,github.com/performanc"
  "e-grpc-sdk/logsv1alpha1\242\002\003PFX\252\002\031Performa"
  "nce.Logs.V1Alpha1\312\002\031Performance\\Logs\\V1A"
  "lpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_deps[1] = {
  &::descriptor_table_performance_2flogs_2fv1alpha1_2flogs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto = {
  false, false, 1613, descriptor_table_protodef_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto, "performance/logs/v1alpha1/logs_agent_api.proto", 
  &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once, descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto::offsets,
  file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto, file_level_enum_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto, file_level_service_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter() {
  return &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto(&descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto);
namespace performance {
namespace logs {
namespace v1alpha1 {

// ===================================================================

SaveLogsRequest_MetaEntry_DoNotUse::SaveLogsRequest_MetaEntry_DoNotUse() {}
SaveLogsRequest_MetaEntry_DoNotUse::SaveLogsRequest_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SaveLogsRequest_MetaEntry_DoNotUse::MergeFrom(const SaveLogsRequest_MetaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SaveLogsRequest_MetaEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[0]);
}

// ===================================================================

class SaveLogsRequest::_Internal {
 public:
};

SaveLogsRequest::SaveLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  meta_(arena),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.logs.v1alpha1.SaveLogsRequest)
}
SaveLogsRequest::SaveLogsRequest(const SaveLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meta_.MergeFrom(from.meta_);
  cluster_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cluster_name().empty()) {
    cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cluster_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.logs.v1alpha1.SaveLogsRequest)
}

inline void SaveLogsRequest::SharedCtor() {
cluster_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveLogsRequest::~SaveLogsRequest() {
  // @@protoc_insertion_point(destructor:performance.logs.v1alpha1.SaveLogsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveLogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cluster_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveLogsRequest::ArenaDtor(void* object) {
  SaveLogsRequest* _this = reinterpret_cast< SaveLogsRequest* >(object);
  (void)_this;
  _this->meta_. ~MapField();
}
inline void SaveLogsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SaveLogsRequest::ArenaDtor);
  }
}
void SaveLogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.logs.v1alpha1.SaveLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_.Clear();
  logs_.Clear();
  cluster_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveLogsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cluster_name = 1 [json_name = "clusterName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cluster_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.SaveLogsRequest.cluster_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> meta = 2 [json_name = "meta"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&meta_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .performance.logs.v1alpha1.Log logs = 3 [json_name = "logs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveLogsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.logs.v1alpha1.SaveLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_name = 1 [json_name = "clusterName"];
  if (!this->_internal_cluster_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_name().data(), static_cast<int>(this->_internal_cluster_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.SaveLogsRequest.cluster_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cluster_name(), target);
  }

  // map<string, string> meta = 2 [json_name = "meta"];
  if (!this->_internal_meta().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.SaveLogsRequest.MetaEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.SaveLogsRequest.MetaEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_meta().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_meta().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta().begin();
          it != this->_internal_meta().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SaveLogsRequest_MetaEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta().begin();
          it != this->_internal_meta().end(); ++it) {
        target = SaveLogsRequest_MetaEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .performance.logs.v1alpha1.Log logs = 3 [json_name = "logs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.logs.v1alpha1.SaveLogsRequest)
  return target;
}

size_t SaveLogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.logs.v1alpha1.SaveLogsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> meta = 2 [json_name = "meta"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_meta_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_meta().begin();
      it != this->_internal_meta().end(); ++it) {
    total_size += SaveLogsRequest_MetaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .performance.logs.v1alpha1.Log logs = 3 [json_name = "logs"];
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cluster_name = 1 [json_name = "clusterName"];
  if (!this->_internal_cluster_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cluster_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveLogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveLogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveLogsRequest::GetClassData() const { return &_class_data_; }

void SaveLogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SaveLogsRequest *>(to)->MergeFrom(
      static_cast<const SaveLogsRequest &>(from));
}


void SaveLogsRequest::MergeFrom(const SaveLogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.logs.v1alpha1.SaveLogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meta_.MergeFrom(from.meta_);
  logs_.MergeFrom(from.logs_);
  if (!from._internal_cluster_name().empty()) {
    _internal_set_cluster_name(from._internal_cluster_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveLogsRequest::CopyFrom(const SaveLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.logs.v1alpha1.SaveLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveLogsRequest::IsInitialized() const {
  return true;
}

void SaveLogsRequest::InternalSwap(SaveLogsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  meta_.InternalSwap(&other->meta_);
  logs_.InternalSwap(&other->logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cluster_name_, GetArenaForAllocation(),
      &other->cluster_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveLogsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[1]);
}

// ===================================================================

class SaveLogsResponse::_Internal {
 public:
};

SaveLogsResponse::SaveLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.logs.v1alpha1.SaveLogsResponse)
}
SaveLogsResponse::SaveLogsResponse(const SaveLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:performance.logs.v1alpha1.SaveLogsResponse)
}

inline void SaveLogsResponse::SharedCtor() {
success_ = false;
}

SaveLogsResponse::~SaveLogsResponse() {
  // @@protoc_insertion_point(destructor:performance.logs.v1alpha1.SaveLogsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaveLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SaveLogsResponse::ArenaDtor(void* object) {
  SaveLogsResponse* _this = reinterpret_cast< SaveLogsResponse* >(object);
  (void)_this;
}
void SaveLogsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveLogsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.logs.v1alpha1.SaveLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveLogsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveLogsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.logs.v1alpha1.SaveLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.logs.v1alpha1.SaveLogsResponse)
  return target;
}

size_t SaveLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.logs.v1alpha1.SaveLogsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveLogsResponse::GetClassData() const { return &_class_data_; }

void SaveLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SaveLogsResponse *>(to)->MergeFrom(
      static_cast<const SaveLogsResponse &>(from));
}


void SaveLogsResponse::MergeFrom(const SaveLogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.logs.v1alpha1.SaveLogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveLogsResponse::CopyFrom(const SaveLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.logs.v1alpha1.SaveLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveLogsResponse::IsInitialized() const {
  return true;
}

void SaveLogsResponse::InternalSwap(SaveLogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveLogsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[2]);
}

// ===================================================================

class Log::_Internal {
 public:
  static const ::performance::logs::v1alpha1::LogKuebrnetesInfo& kubernetes(const Log* msg);
};

const ::performance::logs::v1alpha1::LogKuebrnetesInfo&
Log::_Internal::kubernetes(const Log* msg) {
  return *msg->kubernetes_;
}
Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.logs.v1alpha1.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  log_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_id().empty()) {
    log_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_kubernetes()) {
    kubernetes_ = new ::performance::logs::v1alpha1::LogKuebrnetesInfo(*from.kubernetes_);
  } else {
    kubernetes_ = nullptr;
  }
  date_ = from.date_;
  // @@protoc_insertion_point(copy_constructor:performance.logs.v1alpha1.Log)
}

inline void Log::SharedCtor() {
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
log_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kubernetes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&kubernetes_)) + sizeof(date_));
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:performance.logs.v1alpha1.Log)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kubernetes_;
}

void Log::ArenaDtor(void* object) {
  Log* _this = reinterpret_cast< Log* >(object);
  (void)_this;
}
void Log::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.logs.v1alpha1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmpty();
  log_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && kubernetes_ != nullptr) {
    delete kubernetes_;
  }
  kubernetes_ = nullptr;
  date_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double date = 1 [json_name = "date"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string log = 2 [json_name = "log"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.Log.log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .performance.logs.v1alpha1.LogKuebrnetesInfo kubernetes = 3 [json_name = "kubernetes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kubernetes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_id = 4 [json_name = "logId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_log_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.Log.log_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.logs.v1alpha1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double date = 1 [json_name = "date"];
  if (!(this->_internal_date() <= 0 && this->_internal_date() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_date(), target);
  }

  // string log = 2 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.Log.log");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log(), target);
  }

  // .performance.logs.v1alpha1.LogKuebrnetesInfo kubernetes = 3 [json_name = "kubernetes"];
  if (this->_internal_has_kubernetes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kubernetes(this), target, stream);
  }

  // string log_id = 4 [json_name = "logId"];
  if (!this->_internal_log_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_id().data(), static_cast<int>(this->_internal_log_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.Log.log_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_log_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.logs.v1alpha1.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.logs.v1alpha1.Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log = 2 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string log_id = 4 [json_name = "logId"];
  if (!this->_internal_log_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_id());
  }

  // .performance.logs.v1alpha1.LogKuebrnetesInfo kubernetes = 3 [json_name = "kubernetes"];
  if (this->_internal_has_kubernetes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kubernetes_);
  }

  // double date = 1 [json_name = "date"];
  if (!(this->_internal_date() <= 0 && this->_internal_date() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }

void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Log *>(to)->MergeFrom(
      static_cast<const Log &>(from));
}


void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.logs.v1alpha1.Log)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_log_id().empty()) {
    _internal_set_log_id(from._internal_log_id());
  }
  if (from._internal_has_kubernetes()) {
    _internal_mutable_kubernetes()->::performance::logs::v1alpha1::LogKuebrnetesInfo::MergeFrom(from._internal_kubernetes());
  }
  if (!(from._internal_date() <= 0 && from._internal_date() >= 0)) {
    _internal_set_date(from._internal_date());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.logs.v1alpha1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, GetArenaForAllocation(),
      &other->log_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_id_, GetArenaForAllocation(),
      &other->log_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Log, date_)
      + sizeof(Log::date_)
      - PROTOBUF_FIELD_OFFSET(Log, kubernetes_)>(
          reinterpret_cast<char*>(&kubernetes_),
          reinterpret_cast<char*>(&other->kubernetes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[3]);
}

// ===================================================================

LogKuebrnetesInfo_LabelsEntry_DoNotUse::LogKuebrnetesInfo_LabelsEntry_DoNotUse() {}
LogKuebrnetesInfo_LabelsEntry_DoNotUse::LogKuebrnetesInfo_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogKuebrnetesInfo_LabelsEntry_DoNotUse::MergeFrom(const LogKuebrnetesInfo_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogKuebrnetesInfo_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[4]);
}

// ===================================================================

LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse() {}
LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::MergeFrom(const LogKuebrnetesInfo_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[5]);
}

// ===================================================================

class LogKuebrnetesInfo::_Internal {
 public:
};

LogKuebrnetesInfo::LogKuebrnetesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.logs.v1alpha1.LogKuebrnetesInfo)
}
LogKuebrnetesInfo::LogKuebrnetesInfo(const LogKuebrnetesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  pod_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_name().empty()) {
    pod_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pod_name(), 
      GetArenaForAllocation());
  }
  namespace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_name().empty()) {
    namespace_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_name(), 
      GetArenaForAllocation());
  }
  pod_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_id().empty()) {
    pod_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pod_id(), 
      GetArenaForAllocation());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_name().empty()) {
    container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_name(), 
      GetArenaForAllocation());
  }
  docker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_docker_id().empty()) {
    docker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_docker_id(), 
      GetArenaForAllocation());
  }
  container_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_hash().empty()) {
    container_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_hash(), 
      GetArenaForAllocation());
  }
  container_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container_image().empty()) {
    container_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_image(), 
      GetArenaForAllocation());
  }
  owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_name().empty()) {
    owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_name(), 
      GetArenaForAllocation());
  }
  owner_kubernetes_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_kubernetes_uid().empty()) {
    owner_kubernetes_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_kubernetes_uid(), 
      GetArenaForAllocation());
  }
  owner_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_kind().empty()) {
    owner_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_kind(), 
      GetArenaForAllocation());
  }
  owner_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_api_version().empty()) {
    owner_api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_api_version(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.logs.v1alpha1.LogKuebrnetesInfo)
}

inline void LogKuebrnetesInfo::SharedCtor() {
pod_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pod_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
docker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
container_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
container_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_kubernetes_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogKuebrnetesInfo::~LogKuebrnetesInfo() {
  // @@protoc_insertion_point(destructor:performance.logs.v1alpha1.LogKuebrnetesInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogKuebrnetesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pod_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  docker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_kubernetes_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_api_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogKuebrnetesInfo::ArenaDtor(void* object) {
  LogKuebrnetesInfo* _this = reinterpret_cast< LogKuebrnetesInfo* >(object);
  (void)_this;
  _this->labels_. ~MapField();
  _this->annotations_. ~MapField();
}
inline void LogKuebrnetesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &LogKuebrnetesInfo::ArenaDtor);
  }
}
void LogKuebrnetesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogKuebrnetesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.logs.v1alpha1.LogKuebrnetesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  pod_name_.ClearToEmpty();
  namespace_name_.ClearToEmpty();
  pod_id_.ClearToEmpty();
  host_.ClearToEmpty();
  container_name_.ClearToEmpty();
  docker_id_.ClearToEmpty();
  container_hash_.ClearToEmpty();
  container_image_.ClearToEmpty();
  owner_name_.ClearToEmpty();
  owner_kubernetes_uid_.ClearToEmpty();
  owner_kind_.ClearToEmpty();
  owner_api_version_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogKuebrnetesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pod_name = 1 [json_name = "podName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pod_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.pod_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace_name = 2 [json_name = "namespaceName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.namespace_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pod_id = 3 [json_name = "podId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pod_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.pod_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 4 [json_name = "labels"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 5 [json_name = "annotations"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string host = 6 [json_name = "host"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string container_name = 7 [json_name = "containerName"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_container_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.container_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string docker_id = 8 [json_name = "dockerId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_docker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.docker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string container_hash = 10 [json_name = "containerHash"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_container_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.container_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string container_image = 11 [json_name = "containerImage"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_container_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.container_image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_name = 12 [json_name = "ownerName"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_owner_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_kubernetes_uid = 13 [json_name = "ownerKubernetesUid"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_owner_kubernetes_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_kubernetes_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_kind = 14 [json_name = "ownerKind"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_owner_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_api_version = 15 [json_name = "ownerApiVersion"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_owner_api_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_api_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 16 [json_name = "status"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.LogKuebrnetesInfo.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogKuebrnetesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.logs.v1alpha1.LogKuebrnetesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pod_name = 1 [json_name = "podName"];
  if (!this->_internal_pod_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_name().data(), static_cast<int>(this->_internal_pod_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.pod_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pod_name(), target);
  }

  // string namespace_name = 2 [json_name = "namespaceName"];
  if (!this->_internal_namespace_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_name().data(), static_cast<int>(this->_internal_namespace_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.namespace_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_name(), target);
  }

  // string pod_id = 3 [json_name = "podId"];
  if (!this->_internal_pod_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_id().data(), static_cast<int>(this->_internal_pod_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.pod_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pod_id(), target);
  }

  // map<string, string> labels = 4 [json_name = "labels"];
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.LogKuebrnetesInfo.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.LogKuebrnetesInfo.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LogKuebrnetesInfo_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = LogKuebrnetesInfo_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 5 [json_name = "annotations"];
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.LogKuebrnetesInfo.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.LogKuebrnetesInfo.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string host = 6 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.host");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_host(), target);
  }

  // string container_name = 7 [json_name = "containerName"];
  if (!this->_internal_container_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_name().data(), static_cast<int>(this->_internal_container_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.container_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_container_name(), target);
  }

  // string docker_id = 8 [json_name = "dockerId"];
  if (!this->_internal_docker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_docker_id().data(), static_cast<int>(this->_internal_docker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.docker_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_docker_id(), target);
  }

  // string container_hash = 10 [json_name = "containerHash"];
  if (!this->_internal_container_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_hash().data(), static_cast<int>(this->_internal_container_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.container_hash");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_container_hash(), target);
  }

  // string container_image = 11 [json_name = "containerImage"];
  if (!this->_internal_container_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container_image().data(), static_cast<int>(this->_internal_container_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.container_image");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_container_image(), target);
  }

  // string owner_name = 12 [json_name = "ownerName"];
  if (!this->_internal_owner_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_name().data(), static_cast<int>(this->_internal_owner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_owner_name(), target);
  }

  // string owner_kubernetes_uid = 13 [json_name = "ownerKubernetesUid"];
  if (!this->_internal_owner_kubernetes_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_kubernetes_uid().data(), static_cast<int>(this->_internal_owner_kubernetes_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_kubernetes_uid");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_owner_kubernetes_uid(), target);
  }

  // string owner_kind = 14 [json_name = "ownerKind"];
  if (!this->_internal_owner_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_kind().data(), static_cast<int>(this->_internal_owner_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_kind");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_owner_kind(), target);
  }

  // string owner_api_version = 15 [json_name = "ownerApiVersion"];
  if (!this->_internal_owner_api_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_api_version().data(), static_cast<int>(this->_internal_owner_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.owner_api_version");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_owner_api_version(), target);
  }

  // string status = 16 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.LogKuebrnetesInfo.status");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.logs.v1alpha1.LogKuebrnetesInfo)
  return target;
}

size_t LogKuebrnetesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.logs.v1alpha1.LogKuebrnetesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4 [json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += LogKuebrnetesInfo_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 5 [json_name = "annotations"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += LogKuebrnetesInfo_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string pod_name = 1 [json_name = "podName"];
  if (!this->_internal_pod_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_name());
  }

  // string namespace_name = 2 [json_name = "namespaceName"];
  if (!this->_internal_namespace_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_name());
  }

  // string pod_id = 3 [json_name = "podId"];
  if (!this->_internal_pod_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_id());
  }

  // string host = 6 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string container_name = 7 [json_name = "containerName"];
  if (!this->_internal_container_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_name());
  }

  // string docker_id = 8 [json_name = "dockerId"];
  if (!this->_internal_docker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_docker_id());
  }

  // string container_hash = 10 [json_name = "containerHash"];
  if (!this->_internal_container_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_hash());
  }

  // string container_image = 11 [json_name = "containerImage"];
  if (!this->_internal_container_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_image());
  }

  // string owner_name = 12 [json_name = "ownerName"];
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_name());
  }

  // string owner_kubernetes_uid = 13 [json_name = "ownerKubernetesUid"];
  if (!this->_internal_owner_kubernetes_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_kubernetes_uid());
  }

  // string owner_kind = 14 [json_name = "ownerKind"];
  if (!this->_internal_owner_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_kind());
  }

  // string owner_api_version = 15 [json_name = "ownerApiVersion"];
  if (!this->_internal_owner_api_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_api_version());
  }

  // string status = 16 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogKuebrnetesInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogKuebrnetesInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogKuebrnetesInfo::GetClassData() const { return &_class_data_; }

void LogKuebrnetesInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LogKuebrnetesInfo *>(to)->MergeFrom(
      static_cast<const LogKuebrnetesInfo &>(from));
}


void LogKuebrnetesInfo::MergeFrom(const LogKuebrnetesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.logs.v1alpha1.LogKuebrnetesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (!from._internal_pod_name().empty()) {
    _internal_set_pod_name(from._internal_pod_name());
  }
  if (!from._internal_namespace_name().empty()) {
    _internal_set_namespace_name(from._internal_namespace_name());
  }
  if (!from._internal_pod_id().empty()) {
    _internal_set_pod_id(from._internal_pod_id());
  }
  if (!from._internal_host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (!from._internal_container_name().empty()) {
    _internal_set_container_name(from._internal_container_name());
  }
  if (!from._internal_docker_id().empty()) {
    _internal_set_docker_id(from._internal_docker_id());
  }
  if (!from._internal_container_hash().empty()) {
    _internal_set_container_hash(from._internal_container_hash());
  }
  if (!from._internal_container_image().empty()) {
    _internal_set_container_image(from._internal_container_image());
  }
  if (!from._internal_owner_name().empty()) {
    _internal_set_owner_name(from._internal_owner_name());
  }
  if (!from._internal_owner_kubernetes_uid().empty()) {
    _internal_set_owner_kubernetes_uid(from._internal_owner_kubernetes_uid());
  }
  if (!from._internal_owner_kind().empty()) {
    _internal_set_owner_kind(from._internal_owner_kind());
  }
  if (!from._internal_owner_api_version().empty()) {
    _internal_set_owner_api_version(from._internal_owner_api_version());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogKuebrnetesInfo::CopyFrom(const LogKuebrnetesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.logs.v1alpha1.LogKuebrnetesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogKuebrnetesInfo::IsInitialized() const {
  return true;
}

void LogKuebrnetesInfo::InternalSwap(LogKuebrnetesInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  annotations_.InternalSwap(&other->annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pod_name_, GetArenaForAllocation(),
      &other->pod_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace_name_, GetArenaForAllocation(),
      &other->namespace_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pod_id_, GetArenaForAllocation(),
      &other->pod_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, GetArenaForAllocation(),
      &other->host_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_name_, GetArenaForAllocation(),
      &other->container_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &docker_id_, GetArenaForAllocation(),
      &other->docker_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_hash_, GetArenaForAllocation(),
      &other->container_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &container_image_, GetArenaForAllocation(),
      &other->container_image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_name_, GetArenaForAllocation(),
      &other->owner_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_kubernetes_uid_, GetArenaForAllocation(),
      &other->owner_kubernetes_uid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_kind_, GetArenaForAllocation(),
      &other->owner_kind_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_api_version_, GetArenaForAllocation(),
      &other->owner_api_version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogKuebrnetesInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::SaveLogsRequest* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::SaveLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::SaveLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::SaveLogsResponse* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::SaveLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::SaveLogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::Log* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::LogKuebrnetesInfo* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::LogKuebrnetesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::LogKuebrnetesInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
