// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/logs/v1alpha1/logs_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "performance/logs/v1alpha1/logs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto;
namespace performance {
namespace logs {
namespace v1alpha1 {
class GetLogsRequest;
struct GetLogsRequestDefaultTypeInternal;
extern GetLogsRequestDefaultTypeInternal _GetLogsRequest_default_instance_;
class GetLogsRequest_LabelsEntry_DoNotUse;
struct GetLogsRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern GetLogsRequest_LabelsEntry_DoNotUseDefaultTypeInternal _GetLogsRequest_LabelsEntry_DoNotUse_default_instance_;
class GetLogsResponse;
struct GetLogsResponseDefaultTypeInternal;
extern GetLogsResponseDefaultTypeInternal _GetLogsResponse_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> ::performance::logs::v1alpha1::GetLogsRequest* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::GetLogsRequest>(Arena*);
template<> ::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::performance::logs::v1alpha1::GetLogsResponse* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::GetLogsResponse>(Arena*);
template<> ::performance::logs::v1alpha1::Range* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::Range>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace performance {
namespace logs {
namespace v1alpha1 {

// ===================================================================

class Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.logs.v1alpha1.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  explicit constexpr Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return new Range();
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Range& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.logs.v1alpha1.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFromFieldNumber = 1,
    kDateToFieldNumber = 2,
    kTimezoneFieldNumber = 3,
  };
  // string date_from = 1 [json_name = "dateFrom"];
  void clear_date_from();
  const std::string& date_from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_date_from();
  void set_allocated_date_from(std::string* date_from);
  private:
  const std::string& _internal_date_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_from(const std::string& value);
  std::string* _internal_mutable_date_from();
  public:

  // string date_to = 2 [json_name = "dateTo"];
  void clear_date_to();
  const std::string& date_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_date_to();
  void set_allocated_date_to(std::string* date_to);
  private:
  const std::string& _internal_date_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_to(const std::string& value);
  std::string* _internal_mutable_date_to();
  public:

  // string timezone = 3 [json_name = "timezone"];
  void clear_timezone();
  const std::string& timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timezone();
  PROTOBUF_MUST_USE_RESULT std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // @@protoc_insertion_point(class_scope:performance.logs.v1alpha1.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLogsRequest_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetLogsRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetLogsRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetLogsRequest_LabelsEntry_DoNotUse();
  explicit constexpr GetLogsRequest_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetLogsRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetLogsRequest_LabelsEntry_DoNotUse& other);
  static const GetLogsRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetLogsRequest_LabelsEntry_DoNotUse*>(&_GetLogsRequest_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.GetLogsRequest.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.GetLogsRequest.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class GetLogsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.logs.v1alpha1.GetLogsRequest) */ {
 public:
  inline GetLogsRequest() : GetLogsRequest(nullptr) {}
  ~GetLogsRequest() override;
  explicit constexpr GetLogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogsRequest(const GetLogsRequest& from);
  GetLogsRequest(GetLogsRequest&& from) noexcept
    : GetLogsRequest() {
    *this = ::std::move(from);
  }

  inline GetLogsRequest& operator=(const GetLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogsRequest& operator=(GetLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogsRequest* internal_default_instance() {
    return reinterpret_cast<const GetLogsRequest*>(
               &_GetLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetLogsRequest& a, GetLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogsRequest* New() const final {
    return new GetLogsRequest();
  }

  GetLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLogsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLogsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.logs.v1alpha1.GetLogsRequest";
  }
  protected:
  explicit GetLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kContainersFieldNumber = 2,
    kNextPageIdFieldNumber = 5,
    kRangeFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // map<string, string> labels = 1 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // repeated string containers = 2 [json_name = "containers"];
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  const std::string& containers(int index) const;
  std::string* mutable_containers(int index);
  void set_containers(int index, const std::string& value);
  void set_containers(int index, std::string&& value);
  void set_containers(int index, const char* value);
  void set_containers(int index, const char* value, size_t size);
  std::string* add_containers();
  void add_containers(const std::string& value);
  void add_containers(std::string&& value);
  void add_containers(const char* value);
  void add_containers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& containers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_containers();
  private:
  const std::string& _internal_containers(int index) const;
  std::string* _internal_add_containers();
  public:

  // string next_page_id = 5 [json_name = "nextPageId"];
  void clear_next_page_id();
  const std::string& next_page_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_page_id();
  void set_allocated_next_page_id(std::string* next_page_id);
  private:
  const std::string& _internal_next_page_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_id(const std::string& value);
  std::string* _internal_mutable_next_page_id();
  public:

  // .performance.logs.v1alpha1.Range range = 3 [json_name = "range"];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::performance::logs::v1alpha1::Range& range() const;
  PROTOBUF_MUST_USE_RESULT ::performance::logs::v1alpha1::Range* release_range();
  ::performance::logs::v1alpha1::Range* mutable_range();
  void set_allocated_range(::performance::logs::v1alpha1::Range* range);
  private:
  const ::performance::logs::v1alpha1::Range& _internal_range() const;
  ::performance::logs::v1alpha1::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::performance::logs::v1alpha1::Range* range);
  ::performance::logs::v1alpha1::Range* unsafe_arena_release_range();

  // int32 size = 4 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:performance.logs.v1alpha1.GetLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetLogsRequest_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> containers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_id_;
  ::performance::logs::v1alpha1::Range* range_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLogsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.logs.v1alpha1.GetLogsResponse) */ {
 public:
  inline GetLogsResponse() : GetLogsResponse(nullptr) {}
  ~GetLogsResponse() override;
  explicit constexpr GetLogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogsResponse(const GetLogsResponse& from);
  GetLogsResponse(GetLogsResponse&& from) noexcept
    : GetLogsResponse() {
    *this = ::std::move(from);
  }

  inline GetLogsResponse& operator=(const GetLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogsResponse& operator=(GetLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogsResponse* internal_default_instance() {
    return reinterpret_cast<const GetLogsResponse*>(
               &_GetLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetLogsResponse& a, GetLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogsResponse* New() const final {
    return new GetLogsResponse();
  }

  GetLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLogsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLogsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.logs.v1alpha1.GetLogsResponse";
  }
  protected:
  explicit GetLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
    kNextPageIdFieldNumber = 2,
  };
  // repeated .performance.logs.v1alpha1.LogItem logs = 1 [json_name = "logs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::performance::logs::v1alpha1::LogItem* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::LogItem >*
      mutable_logs();
  private:
  const ::performance::logs::v1alpha1::LogItem& _internal_logs(int index) const;
  ::performance::logs::v1alpha1::LogItem* _internal_add_logs();
  public:
  const ::performance::logs::v1alpha1::LogItem& logs(int index) const;
  ::performance::logs::v1alpha1::LogItem* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::LogItem >&
      logs() const;

  // string next_page_id = 2 [json_name = "nextPageId"];
  void clear_next_page_id();
  const std::string& next_page_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_page_id();
  void set_allocated_next_page_id(std::string* next_page_id);
  private:
  const std::string& _internal_next_page_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_id(const std::string& value);
  std::string* _internal_mutable_next_page_id();
  public:

  // @@protoc_insertion_point(class_scope:performance.logs.v1alpha1.GetLogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::LogItem > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Range

// string date_from = 1 [json_name = "dateFrom"];
inline void Range::clear_date_from() {
  date_from_.ClearToEmpty();
}
inline const std::string& Range::date_from() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.Range.date_from)
  return _internal_date_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_date_from(ArgT0&& arg0, ArgT... args) {
 
 date_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.Range.date_from)
}
inline std::string* Range::mutable_date_from() {
  std::string* _s = _internal_mutable_date_from();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.Range.date_from)
  return _s;
}
inline const std::string& Range::_internal_date_from() const {
  return date_from_.Get();
}
inline void Range::_internal_set_date_from(const std::string& value) {
  
  date_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_date_from() {
  
  return date_from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Range::release_date_from() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.Range.date_from)
  return date_from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Range::set_allocated_date_from(std::string* date_from) {
  if (date_from != nullptr) {
    
  } else {
    
  }
  date_from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.Range.date_from)
}

// string date_to = 2 [json_name = "dateTo"];
inline void Range::clear_date_to() {
  date_to_.ClearToEmpty();
}
inline const std::string& Range::date_to() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.Range.date_to)
  return _internal_date_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_date_to(ArgT0&& arg0, ArgT... args) {
 
 date_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.Range.date_to)
}
inline std::string* Range::mutable_date_to() {
  std::string* _s = _internal_mutable_date_to();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.Range.date_to)
  return _s;
}
inline const std::string& Range::_internal_date_to() const {
  return date_to_.Get();
}
inline void Range::_internal_set_date_to(const std::string& value) {
  
  date_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_date_to() {
  
  return date_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Range::release_date_to() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.Range.date_to)
  return date_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Range::set_allocated_date_to(std::string* date_to) {
  if (date_to != nullptr) {
    
  } else {
    
  }
  date_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.Range.date_to)
}

// string timezone = 3 [json_name = "timezone"];
inline void Range::clear_timezone() {
  timezone_.ClearToEmpty();
}
inline const std::string& Range::timezone() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.Range.timezone)
  return _internal_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_timezone(ArgT0&& arg0, ArgT... args) {
 
 timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.Range.timezone)
}
inline std::string* Range::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.Range.timezone)
  return _s;
}
inline const std::string& Range::_internal_timezone() const {
  return timezone_.Get();
}
inline void Range::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_timezone() {
  
  return timezone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Range::release_timezone() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.Range.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Range::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.Range.timezone)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetLogsRequest

// map<string, string> labels = 1 [json_name = "labels"];
inline int GetLogsRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int GetLogsRequest::labels_size() const {
  return _internal_labels_size();
}
inline void GetLogsRequest::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetLogsRequest::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetLogsRequest::labels() const {
  // @@protoc_insertion_point(field_map:performance.logs.v1alpha1.GetLogsRequest.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetLogsRequest::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetLogsRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:performance.logs.v1alpha1.GetLogsRequest.labels)
  return _internal_mutable_labels();
}

// repeated string containers = 2 [json_name = "containers"];
inline int GetLogsRequest::_internal_containers_size() const {
  return containers_.size();
}
inline int GetLogsRequest::containers_size() const {
  return _internal_containers_size();
}
inline void GetLogsRequest::clear_containers() {
  containers_.Clear();
}
inline std::string* GetLogsRequest::add_containers() {
  std::string* _s = _internal_add_containers();
  // @@protoc_insertion_point(field_add_mutable:performance.logs.v1alpha1.GetLogsRequest.containers)
  return _s;
}
inline const std::string& GetLogsRequest::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const std::string& GetLogsRequest::containers(int index) const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.GetLogsRequest.containers)
  return _internal_containers(index);
}
inline std::string* GetLogsRequest::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.GetLogsRequest.containers)
  return containers_.Mutable(index);
}
inline void GetLogsRequest::set_containers(int index, const std::string& value) {
  containers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline void GetLogsRequest::set_containers(int index, std::string&& value) {
  containers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline void GetLogsRequest::set_containers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline void GetLogsRequest::set_containers(int index, const char* value, size_t size) {
  containers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline std::string* GetLogsRequest::_internal_add_containers() {
  return containers_.Add();
}
inline void GetLogsRequest::add_containers(const std::string& value) {
  containers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline void GetLogsRequest::add_containers(std::string&& value) {
  containers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline void GetLogsRequest::add_containers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline void GetLogsRequest::add_containers(const char* value, size_t size) {
  containers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:performance.logs.v1alpha1.GetLogsRequest.containers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLogsRequest::containers() const {
  // @@protoc_insertion_point(field_list:performance.logs.v1alpha1.GetLogsRequest.containers)
  return containers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLogsRequest::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:performance.logs.v1alpha1.GetLogsRequest.containers)
  return &containers_;
}

// .performance.logs.v1alpha1.Range range = 3 [json_name = "range"];
inline bool GetLogsRequest::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool GetLogsRequest::has_range() const {
  return _internal_has_range();
}
inline void GetLogsRequest::clear_range() {
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::performance::logs::v1alpha1::Range& GetLogsRequest::_internal_range() const {
  const ::performance::logs::v1alpha1::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::logs::v1alpha1::Range&>(
      ::performance::logs::v1alpha1::_Range_default_instance_);
}
inline const ::performance::logs::v1alpha1::Range& GetLogsRequest::range() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.GetLogsRequest.range)
  return _internal_range();
}
inline void GetLogsRequest::unsafe_arena_set_allocated_range(
    ::performance::logs::v1alpha1::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.logs.v1alpha1.GetLogsRequest.range)
}
inline ::performance::logs::v1alpha1::Range* GetLogsRequest::release_range() {
  
  ::performance::logs::v1alpha1::Range* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::logs::v1alpha1::Range* GetLogsRequest::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.GetLogsRequest.range)
  
  ::performance::logs::v1alpha1::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::performance::logs::v1alpha1::Range* GetLogsRequest::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::logs::v1alpha1::Range>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::performance::logs::v1alpha1::Range* GetLogsRequest::mutable_range() {
  ::performance::logs::v1alpha1::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.GetLogsRequest.range)
  return _msg;
}
inline void GetLogsRequest::set_allocated_range(::performance::logs::v1alpha1::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::performance::logs::v1alpha1::Range>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.GetLogsRequest.range)
}

// int32 size = 4 [json_name = "size"];
inline void GetLogsRequest::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogsRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogsRequest::size() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.GetLogsRequest.size)
  return _internal_size();
}
inline void GetLogsRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void GetLogsRequest::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.GetLogsRequest.size)
}

// string next_page_id = 5 [json_name = "nextPageId"];
inline void GetLogsRequest::clear_next_page_id() {
  next_page_id_.ClearToEmpty();
}
inline const std::string& GetLogsRequest::next_page_id() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.GetLogsRequest.next_page_id)
  return _internal_next_page_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLogsRequest::set_next_page_id(ArgT0&& arg0, ArgT... args) {
 
 next_page_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.GetLogsRequest.next_page_id)
}
inline std::string* GetLogsRequest::mutable_next_page_id() {
  std::string* _s = _internal_mutable_next_page_id();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.GetLogsRequest.next_page_id)
  return _s;
}
inline const std::string& GetLogsRequest::_internal_next_page_id() const {
  return next_page_id_.Get();
}
inline void GetLogsRequest::_internal_set_next_page_id(const std::string& value) {
  
  next_page_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetLogsRequest::_internal_mutable_next_page_id() {
  
  return next_page_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetLogsRequest::release_next_page_id() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.GetLogsRequest.next_page_id)
  return next_page_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetLogsRequest::set_allocated_next_page_id(std::string* next_page_id) {
  if (next_page_id != nullptr) {
    
  } else {
    
  }
  next_page_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.GetLogsRequest.next_page_id)
}

// -------------------------------------------------------------------

// GetLogsResponse

// repeated .performance.logs.v1alpha1.LogItem logs = 1 [json_name = "logs"];
inline int GetLogsResponse::_internal_logs_size() const {
  return logs_.size();
}
inline int GetLogsResponse::logs_size() const {
  return _internal_logs_size();
}
inline ::performance::logs::v1alpha1::LogItem* GetLogsResponse::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.GetLogsResponse.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::LogItem >*
GetLogsResponse::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:performance.logs.v1alpha1.GetLogsResponse.logs)
  return &logs_;
}
inline const ::performance::logs::v1alpha1::LogItem& GetLogsResponse::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::performance::logs::v1alpha1::LogItem& GetLogsResponse::logs(int index) const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.GetLogsResponse.logs)
  return _internal_logs(index);
}
inline ::performance::logs::v1alpha1::LogItem* GetLogsResponse::_internal_add_logs() {
  return logs_.Add();
}
inline ::performance::logs::v1alpha1::LogItem* GetLogsResponse::add_logs() {
  ::performance::logs::v1alpha1::LogItem* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:performance.logs.v1alpha1.GetLogsResponse.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::LogItem >&
GetLogsResponse::logs() const {
  // @@protoc_insertion_point(field_list:performance.logs.v1alpha1.GetLogsResponse.logs)
  return logs_;
}

// string next_page_id = 2 [json_name = "nextPageId"];
inline void GetLogsResponse::clear_next_page_id() {
  next_page_id_.ClearToEmpty();
}
inline const std::string& GetLogsResponse::next_page_id() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.GetLogsResponse.next_page_id)
  return _internal_next_page_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLogsResponse::set_next_page_id(ArgT0&& arg0, ArgT... args) {
 
 next_page_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.GetLogsResponse.next_page_id)
}
inline std::string* GetLogsResponse::mutable_next_page_id() {
  std::string* _s = _internal_mutable_next_page_id();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.GetLogsResponse.next_page_id)
  return _s;
}
inline const std::string& GetLogsResponse::_internal_next_page_id() const {
  return next_page_id_.Get();
}
inline void GetLogsResponse::_internal_set_next_page_id(const std::string& value) {
  
  next_page_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetLogsResponse::_internal_mutable_next_page_id() {
  
  return next_page_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetLogsResponse::release_next_page_id() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.GetLogsResponse.next_page_id)
  return next_page_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetLogsResponse::set_allocated_next_page_id(std::string* next_page_id) {
  if (next_page_id != nullptr) {
    
  } else {
    
  }
  next_page_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.GetLogsResponse.next_page_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto
