// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/logs/v1alpha1/logs_agent_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "performance/logs/v1alpha1/logs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto;
namespace performance {
namespace logs {
namespace v1alpha1 {
class Log;
struct LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class LogKuebrnetesInfo;
struct LogKuebrnetesInfoDefaultTypeInternal;
extern LogKuebrnetesInfoDefaultTypeInternal _LogKuebrnetesInfo_default_instance_;
class LogKuebrnetesInfo_AnnotationsEntry_DoNotUse;
struct LogKuebrnetesInfo_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern LogKuebrnetesInfo_AnnotationsEntry_DoNotUseDefaultTypeInternal _LogKuebrnetesInfo_AnnotationsEntry_DoNotUse_default_instance_;
class LogKuebrnetesInfo_LabelsEntry_DoNotUse;
struct LogKuebrnetesInfo_LabelsEntry_DoNotUseDefaultTypeInternal;
extern LogKuebrnetesInfo_LabelsEntry_DoNotUseDefaultTypeInternal _LogKuebrnetesInfo_LabelsEntry_DoNotUse_default_instance_;
class SaveLogsRequest;
struct SaveLogsRequestDefaultTypeInternal;
extern SaveLogsRequestDefaultTypeInternal _SaveLogsRequest_default_instance_;
class SaveLogsRequest_MetaEntry_DoNotUse;
struct SaveLogsRequest_MetaEntry_DoNotUseDefaultTypeInternal;
extern SaveLogsRequest_MetaEntry_DoNotUseDefaultTypeInternal _SaveLogsRequest_MetaEntry_DoNotUse_default_instance_;
class SaveLogsResponse;
struct SaveLogsResponseDefaultTypeInternal;
extern SaveLogsResponseDefaultTypeInternal _SaveLogsResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> ::performance::logs::v1alpha1::Log* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::Log>(Arena*);
template<> ::performance::logs::v1alpha1::LogKuebrnetesInfo* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::LogKuebrnetesInfo>(Arena*);
template<> ::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::LogKuebrnetesInfo_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::LogKuebrnetesInfo_LabelsEntry_DoNotUse>(Arena*);
template<> ::performance::logs::v1alpha1::SaveLogsRequest* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::SaveLogsRequest>(Arena*);
template<> ::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::SaveLogsRequest_MetaEntry_DoNotUse>(Arena*);
template<> ::performance::logs::v1alpha1::SaveLogsResponse* Arena::CreateMaybeMessage<::performance::logs::v1alpha1::SaveLogsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace performance {
namespace logs {
namespace v1alpha1 {

// ===================================================================

class SaveLogsRequest_MetaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SaveLogsRequest_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SaveLogsRequest_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SaveLogsRequest_MetaEntry_DoNotUse();
  explicit constexpr SaveLogsRequest_MetaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SaveLogsRequest_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SaveLogsRequest_MetaEntry_DoNotUse& other);
  static const SaveLogsRequest_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SaveLogsRequest_MetaEntry_DoNotUse*>(&_SaveLogsRequest_MetaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.SaveLogsRequest.MetaEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.SaveLogsRequest.MetaEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SaveLogsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.logs.v1alpha1.SaveLogsRequest) */ {
 public:
  inline SaveLogsRequest() : SaveLogsRequest(nullptr) {}
  ~SaveLogsRequest() override;
  explicit constexpr SaveLogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveLogsRequest(const SaveLogsRequest& from);
  SaveLogsRequest(SaveLogsRequest&& from) noexcept
    : SaveLogsRequest() {
    *this = ::std::move(from);
  }

  inline SaveLogsRequest& operator=(const SaveLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveLogsRequest& operator=(SaveLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveLogsRequest* internal_default_instance() {
    return reinterpret_cast<const SaveLogsRequest*>(
               &_SaveLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SaveLogsRequest& a, SaveLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveLogsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveLogsRequest* New() const final {
    return new SaveLogsRequest();
  }

  SaveLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveLogsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveLogsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaveLogsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveLogsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.logs.v1alpha1.SaveLogsRequest";
  }
  protected:
  explicit SaveLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 2,
    kLogsFieldNumber = 3,
    kClusterNameFieldNumber = 1,
  };
  // map<string, string> meta = 2 [json_name = "meta"];
  int meta_size() const;
  private:
  int _internal_meta_size() const;
  public:
  void clear_meta();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_meta();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_meta();

  // repeated .performance.logs.v1alpha1.Log logs = 3 [json_name = "logs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::performance::logs::v1alpha1::Log* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::Log >*
      mutable_logs();
  private:
  const ::performance::logs::v1alpha1::Log& _internal_logs(int index) const;
  ::performance::logs::v1alpha1::Log* _internal_add_logs();
  public:
  const ::performance::logs::v1alpha1::Log& logs(int index) const;
  ::performance::logs::v1alpha1::Log* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::Log >&
      logs() const;

  // string cluster_name = 1 [json_name = "clusterName"];
  void clear_cluster_name();
  const std::string& cluster_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_cluster_name();
  void set_allocated_cluster_name(std::string* cluster_name);
  private:
  const std::string& _internal_cluster_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_name(const std::string& value);
  std::string* _internal_mutable_cluster_name();
  public:

  // @@protoc_insertion_point(class_scope:performance.logs.v1alpha1.SaveLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SaveLogsRequest_MetaEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> meta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::Log > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SaveLogsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.logs.v1alpha1.SaveLogsResponse) */ {
 public:
  inline SaveLogsResponse() : SaveLogsResponse(nullptr) {}
  ~SaveLogsResponse() override;
  explicit constexpr SaveLogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveLogsResponse(const SaveLogsResponse& from);
  SaveLogsResponse(SaveLogsResponse&& from) noexcept
    : SaveLogsResponse() {
    *this = ::std::move(from);
  }

  inline SaveLogsResponse& operator=(const SaveLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveLogsResponse& operator=(SaveLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveLogsResponse* internal_default_instance() {
    return reinterpret_cast<const SaveLogsResponse*>(
               &_SaveLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SaveLogsResponse& a, SaveLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveLogsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveLogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveLogsResponse* New() const final {
    return new SaveLogsResponse();
  }

  SaveLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveLogsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveLogsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaveLogsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveLogsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.logs.v1alpha1.SaveLogsResponse";
  }
  protected:
  explicit SaveLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:performance.logs.v1alpha1.SaveLogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Log final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.logs.v1alpha1.Log) */ {
 public:
  inline Log() : Log(nullptr) {}
  ~Log() override;
  explicit constexpr Log(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Log* New() const final {
    return new Log();
  }

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Log& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Log& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.logs.v1alpha1.Log";
  }
  protected:
  explicit Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 2,
    kKubernetesFieldNumber = 3,
    kDateFieldNumber = 1,
  };
  // string log = 2 [json_name = "log"];
  void clear_log();
  const std::string& log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log();
  PROTOBUF_MUST_USE_RESULT std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // .performance.logs.v1alpha1.LogKuebrnetesInfo kubernetes = 3 [json_name = "kubernetes"];
  bool has_kubernetes() const;
  private:
  bool _internal_has_kubernetes() const;
  public:
  void clear_kubernetes();
  const ::performance::logs::v1alpha1::LogKuebrnetesInfo& kubernetes() const;
  PROTOBUF_MUST_USE_RESULT ::performance::logs::v1alpha1::LogKuebrnetesInfo* release_kubernetes();
  ::performance::logs::v1alpha1::LogKuebrnetesInfo* mutable_kubernetes();
  void set_allocated_kubernetes(::performance::logs::v1alpha1::LogKuebrnetesInfo* kubernetes);
  private:
  const ::performance::logs::v1alpha1::LogKuebrnetesInfo& _internal_kubernetes() const;
  ::performance::logs::v1alpha1::LogKuebrnetesInfo* _internal_mutable_kubernetes();
  public:
  void unsafe_arena_set_allocated_kubernetes(
      ::performance::logs::v1alpha1::LogKuebrnetesInfo* kubernetes);
  ::performance::logs::v1alpha1::LogKuebrnetesInfo* unsafe_arena_release_kubernetes();

  // double date = 1 [json_name = "date"];
  void clear_date();
  double date() const;
  void set_date(double value);
  private:
  double _internal_date() const;
  void _internal_set_date(double value);
  public:

  // @@protoc_insertion_point(class_scope:performance.logs.v1alpha1.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  ::performance::logs::v1alpha1::LogKuebrnetesInfo* kubernetes_;
  double date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LogKuebrnetesInfo_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogKuebrnetesInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogKuebrnetesInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LogKuebrnetesInfo_LabelsEntry_DoNotUse();
  explicit constexpr LogKuebrnetesInfo_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LogKuebrnetesInfo_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LogKuebrnetesInfo_LabelsEntry_DoNotUse& other);
  static const LogKuebrnetesInfo_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LogKuebrnetesInfo_LabelsEntry_DoNotUse*>(&_LogKuebrnetesInfo_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.LogKuebrnetesInfo.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.LogKuebrnetesInfo.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class LogKuebrnetesInfo_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogKuebrnetesInfo_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogKuebrnetesInfo_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LogKuebrnetesInfo_AnnotationsEntry_DoNotUse();
  explicit constexpr LogKuebrnetesInfo_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LogKuebrnetesInfo_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LogKuebrnetesInfo_AnnotationsEntry_DoNotUse& other);
  static const LogKuebrnetesInfo_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LogKuebrnetesInfo_AnnotationsEntry_DoNotUse*>(&_LogKuebrnetesInfo_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.LogKuebrnetesInfo.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "performance.logs.v1alpha1.LogKuebrnetesInfo.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class LogKuebrnetesInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:performance.logs.v1alpha1.LogKuebrnetesInfo) */ {
 public:
  inline LogKuebrnetesInfo() : LogKuebrnetesInfo(nullptr) {}
  ~LogKuebrnetesInfo() override;
  explicit constexpr LogKuebrnetesInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogKuebrnetesInfo(const LogKuebrnetesInfo& from);
  LogKuebrnetesInfo(LogKuebrnetesInfo&& from) noexcept
    : LogKuebrnetesInfo() {
    *this = ::std::move(from);
  }

  inline LogKuebrnetesInfo& operator=(const LogKuebrnetesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogKuebrnetesInfo& operator=(LogKuebrnetesInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogKuebrnetesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogKuebrnetesInfo* internal_default_instance() {
    return reinterpret_cast<const LogKuebrnetesInfo*>(
               &_LogKuebrnetesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogKuebrnetesInfo& a, LogKuebrnetesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LogKuebrnetesInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogKuebrnetesInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogKuebrnetesInfo* New() const final {
    return new LogKuebrnetesInfo();
  }

  LogKuebrnetesInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogKuebrnetesInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogKuebrnetesInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogKuebrnetesInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogKuebrnetesInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "performance.logs.v1alpha1.LogKuebrnetesInfo";
  }
  protected:
  explicit LogKuebrnetesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kAnnotationsFieldNumber = 5,
    kPodNameFieldNumber = 1,
    kNamespaceNameFieldNumber = 2,
    kPodIdFieldNumber = 3,
    kHostFieldNumber = 6,
    kContainerNameFieldNumber = 7,
    kDockerIdFieldNumber = 8,
    kContainerHashFieldNumber = 10,
    kContainerImageFieldNumber = 11,
  };
  // map<string, string> labels = 4 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> annotations = 5 [json_name = "annotations"];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string pod_name = 1 [json_name = "podName"];
  void clear_pod_name();
  const std::string& pod_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pod_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pod_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_pod_name();
  void set_allocated_pod_name(std::string* pod_name);
  private:
  const std::string& _internal_pod_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pod_name(const std::string& value);
  std::string* _internal_mutable_pod_name();
  public:

  // string namespace_name = 2 [json_name = "namespaceName"];
  void clear_namespace_name();
  const std::string& namespace_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_name();
  void set_allocated_namespace_name(std::string* namespace_name);
  private:
  const std::string& _internal_namespace_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_name(const std::string& value);
  std::string* _internal_mutable_namespace_name();
  public:

  // string pod_id = 3 [json_name = "podId"];
  void clear_pod_id();
  const std::string& pod_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pod_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pod_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_pod_id();
  void set_allocated_pod_id(std::string* pod_id);
  private:
  const std::string& _internal_pod_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pod_id(const std::string& value);
  std::string* _internal_mutable_pod_id();
  public:

  // string host = 6 [json_name = "host"];
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_MUST_USE_RESULT std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string container_name = 7 [json_name = "containerName"];
  void clear_container_name();
  const std::string& container_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_name();
  void set_allocated_container_name(std::string* container_name);
  private:
  const std::string& _internal_container_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_name(const std::string& value);
  std::string* _internal_mutable_container_name();
  public:

  // string docker_id = 8 [json_name = "dockerId"];
  void clear_docker_id();
  const std::string& docker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_docker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_docker_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_docker_id();
  void set_allocated_docker_id(std::string* docker_id);
  private:
  const std::string& _internal_docker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_docker_id(const std::string& value);
  std::string* _internal_mutable_docker_id();
  public:

  // string container_hash = 10 [json_name = "containerHash"];
  void clear_container_hash();
  const std::string& container_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_hash();
  void set_allocated_container_hash(std::string* container_hash);
  private:
  const std::string& _internal_container_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_hash(const std::string& value);
  std::string* _internal_mutable_container_hash();
  public:

  // string container_image = 11 [json_name = "containerImage"];
  void clear_container_image();
  const std::string& container_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_image();
  void set_allocated_container_image(std::string* container_image);
  private:
  const std::string& _internal_container_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_image(const std::string& value);
  std::string* _internal_mutable_container_image();
  public:

  // @@protoc_insertion_point(class_scope:performance.logs.v1alpha1.LogKuebrnetesInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LogKuebrnetesInfo_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LogKuebrnetesInfo_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr docker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SaveLogsRequest

// string cluster_name = 1 [json_name = "clusterName"];
inline void SaveLogsRequest::clear_cluster_name() {
  cluster_name_.ClearToEmpty();
}
inline const std::string& SaveLogsRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.SaveLogsRequest.cluster_name)
  return _internal_cluster_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveLogsRequest::set_cluster_name(ArgT0&& arg0, ArgT... args) {
 
 cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.SaveLogsRequest.cluster_name)
}
inline std::string* SaveLogsRequest::mutable_cluster_name() {
  std::string* _s = _internal_mutable_cluster_name();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.SaveLogsRequest.cluster_name)
  return _s;
}
inline const std::string& SaveLogsRequest::_internal_cluster_name() const {
  return cluster_name_.Get();
}
inline void SaveLogsRequest::_internal_set_cluster_name(const std::string& value) {
  
  cluster_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SaveLogsRequest::_internal_mutable_cluster_name() {
  
  return cluster_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SaveLogsRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.SaveLogsRequest.cluster_name)
  return cluster_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SaveLogsRequest::set_allocated_cluster_name(std::string* cluster_name) {
  if (cluster_name != nullptr) {
    
  } else {
    
  }
  cluster_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.SaveLogsRequest.cluster_name)
}

// map<string, string> meta = 2 [json_name = "meta"];
inline int SaveLogsRequest::_internal_meta_size() const {
  return meta_.size();
}
inline int SaveLogsRequest::meta_size() const {
  return _internal_meta_size();
}
inline void SaveLogsRequest::clear_meta() {
  meta_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SaveLogsRequest::_internal_meta() const {
  return meta_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SaveLogsRequest::meta() const {
  // @@protoc_insertion_point(field_map:performance.logs.v1alpha1.SaveLogsRequest.meta)
  return _internal_meta();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SaveLogsRequest::_internal_mutable_meta() {
  return meta_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SaveLogsRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:performance.logs.v1alpha1.SaveLogsRequest.meta)
  return _internal_mutable_meta();
}

// repeated .performance.logs.v1alpha1.Log logs = 3 [json_name = "logs"];
inline int SaveLogsRequest::_internal_logs_size() const {
  return logs_.size();
}
inline int SaveLogsRequest::logs_size() const {
  return _internal_logs_size();
}
inline void SaveLogsRequest::clear_logs() {
  logs_.Clear();
}
inline ::performance::logs::v1alpha1::Log* SaveLogsRequest::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.SaveLogsRequest.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::Log >*
SaveLogsRequest::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:performance.logs.v1alpha1.SaveLogsRequest.logs)
  return &logs_;
}
inline const ::performance::logs::v1alpha1::Log& SaveLogsRequest::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::performance::logs::v1alpha1::Log& SaveLogsRequest::logs(int index) const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.SaveLogsRequest.logs)
  return _internal_logs(index);
}
inline ::performance::logs::v1alpha1::Log* SaveLogsRequest::_internal_add_logs() {
  return logs_.Add();
}
inline ::performance::logs::v1alpha1::Log* SaveLogsRequest::add_logs() {
  ::performance::logs::v1alpha1::Log* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:performance.logs.v1alpha1.SaveLogsRequest.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::performance::logs::v1alpha1::Log >&
SaveLogsRequest::logs() const {
  // @@protoc_insertion_point(field_list:performance.logs.v1alpha1.SaveLogsRequest.logs)
  return logs_;
}

// -------------------------------------------------------------------

// SaveLogsResponse

// bool success = 1 [json_name = "success"];
inline void SaveLogsResponse::clear_success() {
  success_ = false;
}
inline bool SaveLogsResponse::_internal_success() const {
  return success_;
}
inline bool SaveLogsResponse::success() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.SaveLogsResponse.success)
  return _internal_success();
}
inline void SaveLogsResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SaveLogsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.SaveLogsResponse.success)
}

// -------------------------------------------------------------------

// Log

// double date = 1 [json_name = "date"];
inline void Log::clear_date() {
  date_ = 0;
}
inline double Log::_internal_date() const {
  return date_;
}
inline double Log::date() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.Log.date)
  return _internal_date();
}
inline void Log::_internal_set_date(double value) {
  
  date_ = value;
}
inline void Log::set_date(double value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.Log.date)
}

// string log = 2 [json_name = "log"];
inline void Log::clear_log() {
  log_.ClearToEmpty();
}
inline const std::string& Log::log() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.Log.log)
  return _internal_log();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Log::set_log(ArgT0&& arg0, ArgT... args) {
 
 log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.Log.log)
}
inline std::string* Log::mutable_log() {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.Log.log)
  return _s;
}
inline const std::string& Log::_internal_log() const {
  return log_.Get();
}
inline void Log::_internal_set_log(const std::string& value) {
  
  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Log::_internal_mutable_log() {
  
  return log_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Log::release_log() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.Log.log)
  return log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Log::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.Log.log)
}

// .performance.logs.v1alpha1.LogKuebrnetesInfo kubernetes = 3 [json_name = "kubernetes"];
inline bool Log::_internal_has_kubernetes() const {
  return this != internal_default_instance() && kubernetes_ != nullptr;
}
inline bool Log::has_kubernetes() const {
  return _internal_has_kubernetes();
}
inline void Log::clear_kubernetes() {
  if (GetArenaForAllocation() == nullptr && kubernetes_ != nullptr) {
    delete kubernetes_;
  }
  kubernetes_ = nullptr;
}
inline const ::performance::logs::v1alpha1::LogKuebrnetesInfo& Log::_internal_kubernetes() const {
  const ::performance::logs::v1alpha1::LogKuebrnetesInfo* p = kubernetes_;
  return p != nullptr ? *p : reinterpret_cast<const ::performance::logs::v1alpha1::LogKuebrnetesInfo&>(
      ::performance::logs::v1alpha1::_LogKuebrnetesInfo_default_instance_);
}
inline const ::performance::logs::v1alpha1::LogKuebrnetesInfo& Log::kubernetes() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.Log.kubernetes)
  return _internal_kubernetes();
}
inline void Log::unsafe_arena_set_allocated_kubernetes(
    ::performance::logs::v1alpha1::LogKuebrnetesInfo* kubernetes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kubernetes_);
  }
  kubernetes_ = kubernetes;
  if (kubernetes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:performance.logs.v1alpha1.Log.kubernetes)
}
inline ::performance::logs::v1alpha1::LogKuebrnetesInfo* Log::release_kubernetes() {
  
  ::performance::logs::v1alpha1::LogKuebrnetesInfo* temp = kubernetes_;
  kubernetes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::performance::logs::v1alpha1::LogKuebrnetesInfo* Log::unsafe_arena_release_kubernetes() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.Log.kubernetes)
  
  ::performance::logs::v1alpha1::LogKuebrnetesInfo* temp = kubernetes_;
  kubernetes_ = nullptr;
  return temp;
}
inline ::performance::logs::v1alpha1::LogKuebrnetesInfo* Log::_internal_mutable_kubernetes() {
  
  if (kubernetes_ == nullptr) {
    auto* p = CreateMaybeMessage<::performance::logs::v1alpha1::LogKuebrnetesInfo>(GetArenaForAllocation());
    kubernetes_ = p;
  }
  return kubernetes_;
}
inline ::performance::logs::v1alpha1::LogKuebrnetesInfo* Log::mutable_kubernetes() {
  ::performance::logs::v1alpha1::LogKuebrnetesInfo* _msg = _internal_mutable_kubernetes();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.Log.kubernetes)
  return _msg;
}
inline void Log::set_allocated_kubernetes(::performance::logs::v1alpha1::LogKuebrnetesInfo* kubernetes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete kubernetes_;
  }
  if (kubernetes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::performance::logs::v1alpha1::LogKuebrnetesInfo>::GetOwningArena(kubernetes);
    if (message_arena != submessage_arena) {
      kubernetes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kubernetes, submessage_arena);
    }
    
  } else {
    
  }
  kubernetes_ = kubernetes;
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.Log.kubernetes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LogKuebrnetesInfo

// string pod_name = 1 [json_name = "podName"];
inline void LogKuebrnetesInfo::clear_pod_name() {
  pod_name_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::pod_name() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_name)
  return _internal_pod_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_pod_name(ArgT0&& arg0, ArgT... args) {
 
 pod_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_name)
}
inline std::string* LogKuebrnetesInfo::mutable_pod_name() {
  std::string* _s = _internal_mutable_pod_name();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_name)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_pod_name() const {
  return pod_name_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_pod_name(const std::string& value) {
  
  pod_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_pod_name() {
  
  return pod_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_pod_name() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_name)
  return pod_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_pod_name(std::string* pod_name) {
  if (pod_name != nullptr) {
    
  } else {
    
  }
  pod_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_name)
}

// string namespace_name = 2 [json_name = "namespaceName"];
inline void LogKuebrnetesInfo::clear_namespace_name() {
  namespace_name_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::namespace_name() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.namespace_name)
  return _internal_namespace_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_namespace_name(ArgT0&& arg0, ArgT... args) {
 
 namespace_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.namespace_name)
}
inline std::string* LogKuebrnetesInfo::mutable_namespace_name() {
  std::string* _s = _internal_mutable_namespace_name();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.namespace_name)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_namespace_name() const {
  return namespace_name_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_namespace_name(const std::string& value) {
  
  namespace_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_namespace_name() {
  
  return namespace_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_namespace_name() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.namespace_name)
  return namespace_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_namespace_name(std::string* namespace_name) {
  if (namespace_name != nullptr) {
    
  } else {
    
  }
  namespace_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.namespace_name)
}

// string pod_id = 3 [json_name = "podId"];
inline void LogKuebrnetesInfo::clear_pod_id() {
  pod_id_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::pod_id() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_id)
  return _internal_pod_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_pod_id(ArgT0&& arg0, ArgT... args) {
 
 pod_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_id)
}
inline std::string* LogKuebrnetesInfo::mutable_pod_id() {
  std::string* _s = _internal_mutable_pod_id();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_id)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_pod_id() const {
  return pod_id_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_pod_id(const std::string& value) {
  
  pod_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_pod_id() {
  
  return pod_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_pod_id() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_id)
  return pod_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_pod_id(std::string* pod_id) {
  if (pod_id != nullptr) {
    
  } else {
    
  }
  pod_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.pod_id)
}

// map<string, string> labels = 4 [json_name = "labels"];
inline int LogKuebrnetesInfo::_internal_labels_size() const {
  return labels_.size();
}
inline int LogKuebrnetesInfo::labels_size() const {
  return _internal_labels_size();
}
inline void LogKuebrnetesInfo::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogKuebrnetesInfo::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogKuebrnetesInfo::labels() const {
  // @@protoc_insertion_point(field_map:performance.logs.v1alpha1.LogKuebrnetesInfo.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogKuebrnetesInfo::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogKuebrnetesInfo::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:performance.logs.v1alpha1.LogKuebrnetesInfo.labels)
  return _internal_mutable_labels();
}

// map<string, string> annotations = 5 [json_name = "annotations"];
inline int LogKuebrnetesInfo::_internal_annotations_size() const {
  return annotations_.size();
}
inline int LogKuebrnetesInfo::annotations_size() const {
  return _internal_annotations_size();
}
inline void LogKuebrnetesInfo::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogKuebrnetesInfo::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogKuebrnetesInfo::annotations() const {
  // @@protoc_insertion_point(field_map:performance.logs.v1alpha1.LogKuebrnetesInfo.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogKuebrnetesInfo::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogKuebrnetesInfo::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:performance.logs.v1alpha1.LogKuebrnetesInfo.annotations)
  return _internal_mutable_annotations();
}

// string host = 6 [json_name = "host"];
inline void LogKuebrnetesInfo::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::host() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.host)
}
inline std::string* LogKuebrnetesInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.host)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_host() const {
  return host_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_host() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.host)
}

// string container_name = 7 [json_name = "containerName"];
inline void LogKuebrnetesInfo::clear_container_name() {
  container_name_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::container_name() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.container_name)
  return _internal_container_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_container_name(ArgT0&& arg0, ArgT... args) {
 
 container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.container_name)
}
inline std::string* LogKuebrnetesInfo::mutable_container_name() {
  std::string* _s = _internal_mutable_container_name();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.container_name)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_container_name() const {
  return container_name_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_container_name(const std::string& value) {
  
  container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_container_name() {
  
  return container_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_container_name() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.container_name)
  return container_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_container_name(std::string* container_name) {
  if (container_name != nullptr) {
    
  } else {
    
  }
  container_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.container_name)
}

// string docker_id = 8 [json_name = "dockerId"];
inline void LogKuebrnetesInfo::clear_docker_id() {
  docker_id_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::docker_id() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.docker_id)
  return _internal_docker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_docker_id(ArgT0&& arg0, ArgT... args) {
 
 docker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.docker_id)
}
inline std::string* LogKuebrnetesInfo::mutable_docker_id() {
  std::string* _s = _internal_mutable_docker_id();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.docker_id)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_docker_id() const {
  return docker_id_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_docker_id(const std::string& value) {
  
  docker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_docker_id() {
  
  return docker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_docker_id() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.docker_id)
  return docker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_docker_id(std::string* docker_id) {
  if (docker_id != nullptr) {
    
  } else {
    
  }
  docker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), docker_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.docker_id)
}

// string container_hash = 10 [json_name = "containerHash"];
inline void LogKuebrnetesInfo::clear_container_hash() {
  container_hash_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::container_hash() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.container_hash)
  return _internal_container_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_container_hash(ArgT0&& arg0, ArgT... args) {
 
 container_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.container_hash)
}
inline std::string* LogKuebrnetesInfo::mutable_container_hash() {
  std::string* _s = _internal_mutable_container_hash();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.container_hash)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_container_hash() const {
  return container_hash_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_container_hash(const std::string& value) {
  
  container_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_container_hash() {
  
  return container_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_container_hash() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.container_hash)
  return container_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_container_hash(std::string* container_hash) {
  if (container_hash != nullptr) {
    
  } else {
    
  }
  container_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.container_hash)
}

// string container_image = 11 [json_name = "containerImage"];
inline void LogKuebrnetesInfo::clear_container_image() {
  container_image_.ClearToEmpty();
}
inline const std::string& LogKuebrnetesInfo::container_image() const {
  // @@protoc_insertion_point(field_get:performance.logs.v1alpha1.LogKuebrnetesInfo.container_image)
  return _internal_container_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogKuebrnetesInfo::set_container_image(ArgT0&& arg0, ArgT... args) {
 
 container_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:performance.logs.v1alpha1.LogKuebrnetesInfo.container_image)
}
inline std::string* LogKuebrnetesInfo::mutable_container_image() {
  std::string* _s = _internal_mutable_container_image();
  // @@protoc_insertion_point(field_mutable:performance.logs.v1alpha1.LogKuebrnetesInfo.container_image)
  return _s;
}
inline const std::string& LogKuebrnetesInfo::_internal_container_image() const {
  return container_image_.Get();
}
inline void LogKuebrnetesInfo::_internal_set_container_image(const std::string& value) {
  
  container_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::_internal_mutable_container_image() {
  
  return container_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogKuebrnetesInfo::release_container_image() {
  // @@protoc_insertion_point(field_release:performance.logs.v1alpha1.LogKuebrnetesInfo.container_image)
  return container_image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogKuebrnetesInfo::set_allocated_container_image(std::string* container_image) {
  if (container_image != nullptr) {
    
  } else {
    
  }
  container_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:performance.logs.v1alpha1.LogKuebrnetesInfo.container_image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_2flogs_2fv1alpha1_2flogs_5fagent_5fapi_2eproto
