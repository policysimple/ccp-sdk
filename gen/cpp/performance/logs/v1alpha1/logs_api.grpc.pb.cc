// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: performance/logs/v1alpha1/logs_api.proto

#include "performance/logs/v1alpha1/logs_api.pb.h"
#include "performance/logs/v1alpha1/logs_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace performance {
namespace logs {
namespace v1alpha1 {

static const char* LogsAPIService_method_names[] = {
  "/performance.logs.v1alpha1.LogsAPIService/GetLogs",
};

std::unique_ptr< LogsAPIService::Stub> LogsAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LogsAPIService::Stub> stub(new LogsAPIService::Stub(channel));
  return stub;
}

LogsAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetLogs_(LogsAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LogsAPIService::Stub::GetLogs(::grpc::ClientContext* context, const ::performance::logs::v1alpha1::GetLogsRequest& request, ::performance::logs::v1alpha1::GetLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLogs_, context, request, response);
}

void LogsAPIService::Stub::experimental_async::GetLogs(::grpc::ClientContext* context, const ::performance::logs::v1alpha1::GetLogsRequest* request, ::performance::logs::v1alpha1::GetLogsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLogs_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::performance::logs::v1alpha1::GetLogsResponse>* LogsAPIService::Stub::AsyncGetLogsRaw(::grpc::ClientContext* context, const ::performance::logs::v1alpha1::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::logs::v1alpha1::GetLogsResponse>::Create(channel_.get(), cq, rpcmethod_GetLogs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::performance::logs::v1alpha1::GetLogsResponse>* LogsAPIService::Stub::PrepareAsyncGetLogsRaw(::grpc::ClientContext* context, const ::performance::logs::v1alpha1::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::performance::logs::v1alpha1::GetLogsResponse>::Create(channel_.get(), cq, rpcmethod_GetLogs_, context, request, false);
}

LogsAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogsAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogsAPIService::Service, ::performance::logs::v1alpha1::GetLogsRequest, ::performance::logs::v1alpha1::GetLogsResponse>(
          std::mem_fn(&LogsAPIService::Service::GetLogs), this)));
}

LogsAPIService::Service::~Service() {
}

::grpc::Status LogsAPIService::Service::GetLogs(::grpc::ServerContext* context, const ::performance::logs::v1alpha1::GetLogsRequest* request, ::performance::logs::v1alpha1::GetLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace performance
}  // namespace logs
}  // namespace v1alpha1

