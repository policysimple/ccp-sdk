// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance/logs/v1alpha1/logs_api.proto

#include "performance/logs/v1alpha1/logs_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace performance {
namespace logs {
namespace v1alpha1 {
constexpr Range::Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : date_from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timezone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RangeDefaultTypeInternal {
  constexpr RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDefaultTypeInternal _Range_default_instance_;
constexpr GetLogsRequest_LabelsEntry_DoNotUse::GetLogsRequest_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetLogsRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr GetLogsRequest_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLogsRequest_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetLogsRequest_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLogsRequest_LabelsEntry_DoNotUseDefaultTypeInternal _GetLogsRequest_LabelsEntry_DoNotUse_default_instance_;
constexpr GetLogsRequest::GetLogsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , containers_()
  , next_page_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr)
  , size_(0){}
struct GetLogsRequestDefaultTypeInternal {
  constexpr GetLogsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLogsRequestDefaultTypeInternal() {}
  union {
    GetLogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLogsRequestDefaultTypeInternal _GetLogsRequest_default_instance_;
constexpr GetLogsResponse::GetLogsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_()
  , next_page_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetLogsResponseDefaultTypeInternal {
  constexpr GetLogsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLogsResponseDefaultTypeInternal() {}
  union {
    GetLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLogsResponseDefaultTypeInternal _GetLogsResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Range, date_from_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Range, date_to_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::Range, timezone_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest, containers_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest, range_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest, size_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsRequest, next_page_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsResponse, logs_),
  PROTOBUF_FIELD_OFFSET(::performance::logs::v1alpha1::GetLogsResponse, next_page_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::performance::logs::v1alpha1::Range)},
  { 8, 15, sizeof(::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse)},
  { 17, -1, sizeof(::performance::logs::v1alpha1::GetLogsRequest)},
  { 27, -1, sizeof(::performance::logs::v1alpha1::GetLogsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_GetLogsRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_GetLogsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::performance::logs::v1alpha1::_GetLogsResponse_default_instance_),
};

const char descriptor_table_protodef_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(performance/logs/v1alpha1/logs_api.pro"
  "to\022\031performance.logs.v1alpha1\032$performan"
  "ce/logs/v1alpha1/logs.proto\"Y\n\005Range\022\033\n\t"
  "date_from\030\001 \001(\tR\010dateFrom\022\027\n\007date_to\030\002 \001"
  "(\tR\006dateTo\022\032\n\010timezone\030\003 \001(\tR\010timezone\"\250"
  "\002\n\016GetLogsRequest\022M\n\006labels\030\001 \003(\01325.perf"
  "ormance.logs.v1alpha1.GetLogsRequest.Lab"
  "elsEntryR\006labels\022\036\n\ncontainers\030\002 \003(\tR\nco"
  "ntainers\0226\n\005range\030\003 \001(\0132 .performance.lo"
  "gs.v1alpha1.RangeR\005range\022\022\n\004size\030\004 \001(\005R\004"
  "size\022 \n\014next_page_id\030\005 \001(\tR\nnextPageId\0329"
  "\n\013LabelsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value"
  "\030\002 \001(\tR\005value:\0028\001\"k\n\017GetLogsResponse\0226\n\004"
  "logs\030\001 \003(\0132\".performance.logs.v1alpha1.L"
  "ogItemR\004logs\022 \n\014next_page_id\030\002 \001(\tR\nnext"
  "PageId2t\n\016LogsAPIService\022b\n\007GetLogs\022).pe"
  "rformance.logs.v1alpha1.GetLogsRequest\032*"
  ".performance.logs.v1alpha1.GetLogsRespon"
  "se\"\000B\241\001\n#io.cuemby.performance.logs.v1al"
  "pha1B\014LogsApiProtoP\001Z,github.com/perform"
  "ance-grpc-sdk/logsv1alpha1\242\002\003PFX\252\002\031Perfo"
  "rmance.Logs.V1Alpha1\312\002\031Performance\\Logs\\"
  "V1Alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_deps[1] = {
  &::descriptor_table_performance_2flogs_2fv1alpha1_2flogs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto = {
  false, false, 896, descriptor_table_protodef_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto, "performance/logs/v1alpha1/logs_api.proto", 
  &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_once, descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto::offsets,
  file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto, file_level_enum_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto, file_level_service_descriptors_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_getter() {
  return &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto(&descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto);
namespace performance {
namespace logs {
namespace v1alpha1 {

// ===================================================================

class Range::_Internal {
 public:
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.logs.v1alpha1.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_from().empty()) {
    date_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_from(), 
      GetArenaForAllocation());
  }
  date_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_to().empty()) {
    date_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_to(), 
      GetArenaForAllocation());
  }
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timezone().empty()) {
    timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timezone(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.logs.v1alpha1.Range)
}

inline void Range::SharedCtor() {
date_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:performance.logs.v1alpha1.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  date_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.logs.v1alpha1.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_from_.ClearToEmpty();
  date_to_.ClearToEmpty();
  timezone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string date_from = 1 [json_name = "dateFrom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.Range.date_from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_to = 2 [json_name = "dateTo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.Range.date_to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timezone = 3 [json_name = "timezone"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.Range.timezone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.logs.v1alpha1.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date_from = 1 [json_name = "dateFrom"];
  if (!this->_internal_date_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_from().data(), static_cast<int>(this->_internal_date_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.Range.date_from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date_from(), target);
  }

  // string date_to = 2 [json_name = "dateTo"];
  if (!this->_internal_date_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_to().data(), static_cast<int>(this->_internal_date_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.Range.date_to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date_to(), target);
  }

  // string timezone = 3 [json_name = "timezone"];
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.Range.timezone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timezone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.logs.v1alpha1.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.logs.v1alpha1.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date_from = 1 [json_name = "dateFrom"];
  if (!this->_internal_date_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_from());
  }

  // string date_to = 2 [json_name = "dateTo"];
  if (!this->_internal_date_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_to());
  }

  // string timezone = 3 [json_name = "timezone"];
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Range::GetClassData() const { return &_class_data_; }

void Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Range *>(to)->MergeFrom(
      static_cast<const Range &>(from));
}


void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.logs.v1alpha1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_date_from().empty()) {
    _internal_set_date_from(from._internal_date_from());
  }
  if (!from._internal_date_to().empty()) {
    _internal_set_date_to(from._internal_date_to());
  }
  if (!from._internal_timezone().empty()) {
    _internal_set_timezone(from._internal_timezone());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.logs.v1alpha1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_from_, GetArenaForAllocation(),
      &other->date_from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_to_, GetArenaForAllocation(),
      &other->date_to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timezone_, GetArenaForAllocation(),
      &other->timezone_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto[0]);
}

// ===================================================================

GetLogsRequest_LabelsEntry_DoNotUse::GetLogsRequest_LabelsEntry_DoNotUse() {}
GetLogsRequest_LabelsEntry_DoNotUse::GetLogsRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetLogsRequest_LabelsEntry_DoNotUse::MergeFrom(const GetLogsRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetLogsRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto[1]);
}

// ===================================================================

class GetLogsRequest::_Internal {
 public:
  static const ::performance::logs::v1alpha1::Range& range(const GetLogsRequest* msg);
};

const ::performance::logs::v1alpha1::Range&
GetLogsRequest::_Internal::range(const GetLogsRequest* msg) {
  return *msg->range_;
}
GetLogsRequest::GetLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena),
  containers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.logs.v1alpha1.GetLogsRequest)
}
GetLogsRequest::GetLogsRequest(const GetLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  next_page_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_id().empty()) {
    next_page_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    range_ = new ::performance::logs::v1alpha1::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:performance.logs.v1alpha1.GetLogsRequest)
}

inline void GetLogsRequest::SharedCtor() {
next_page_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&range_)) + sizeof(size_));
}

GetLogsRequest::~GetLogsRequest() {
  // @@protoc_insertion_point(destructor:performance.logs.v1alpha1.GetLogsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void GetLogsRequest::ArenaDtor(void* object) {
  GetLogsRequest* _this = reinterpret_cast< GetLogsRequest* >(object);
  (void)_this;
  _this->labels_. ~MapField();
}
inline void GetLogsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GetLogsRequest::ArenaDtor);
  }
}
void GetLogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.logs.v1alpha1.GetLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  containers_.Clear();
  next_page_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLogsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> labels = 1 [json_name = "labels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string containers = 2 [json_name = "containers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_containers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.GetLogsRequest.containers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .performance.logs.v1alpha1.Range range = 3 [json_name = "range"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 4 [json_name = "size"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_page_id = 5 [json_name = "nextPageId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_next_page_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.GetLogsRequest.next_page_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLogsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.logs.v1alpha1.GetLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1 [json_name = "labels"];
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.GetLogsRequest.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "performance.logs.v1alpha1.GetLogsRequest.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetLogsRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = GetLogsRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string containers = 2 [json_name = "containers"];
  for (int i = 0, n = this->_internal_containers_size(); i < n; i++) {
    const auto& s = this->_internal_containers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.GetLogsRequest.containers");
    target = stream->WriteString(2, s, target);
  }

  // .performance.logs.v1alpha1.Range range = 3 [json_name = "range"];
  if (this->_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range(this), target, stream);
  }

  // int32 size = 4 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  // string next_page_id = 5 [json_name = "nextPageId"];
  if (!this->_internal_next_page_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_id().data(), static_cast<int>(this->_internal_next_page_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.GetLogsRequest.next_page_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_next_page_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.logs.v1alpha1.GetLogsRequest)
  return target;
}

size_t GetLogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.logs.v1alpha1.GetLogsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 1 [json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += GetLogsRequest_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string containers = 2 [json_name = "containers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(containers_.size());
  for (int i = 0, n = containers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      containers_.Get(i));
  }

  // string next_page_id = 5 [json_name = "nextPageId"];
  if (!this->_internal_next_page_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_id());
  }

  // .performance.logs.v1alpha1.Range range = 3 [json_name = "range"];
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // int32 size = 4 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLogsRequest::GetClassData() const { return &_class_data_; }

void GetLogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetLogsRequest *>(to)->MergeFrom(
      static_cast<const GetLogsRequest &>(from));
}


void GetLogsRequest::MergeFrom(const GetLogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.logs.v1alpha1.GetLogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  containers_.MergeFrom(from.containers_);
  if (!from._internal_next_page_id().empty()) {
    _internal_set_next_page_id(from._internal_next_page_id());
  }
  if (from._internal_has_range()) {
    _internal_mutable_range()->::performance::logs::v1alpha1::Range::MergeFrom(from._internal_range());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLogsRequest::CopyFrom(const GetLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.logs.v1alpha1.GetLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogsRequest::IsInitialized() const {
  return true;
}

void GetLogsRequest::InternalSwap(GetLogsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  containers_.InternalSwap(&other->containers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_id_, GetArenaForAllocation(),
      &other->next_page_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLogsRequest, size_)
      + sizeof(GetLogsRequest::size_)
      - PROTOBUF_FIELD_OFFSET(GetLogsRequest, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLogsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto[2]);
}

// ===================================================================

class GetLogsResponse::_Internal {
 public:
};

void GetLogsResponse::clear_logs() {
  logs_.Clear();
}
GetLogsResponse::GetLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:performance.logs.v1alpha1.GetLogsResponse)
}
GetLogsResponse::GetLogsResponse(const GetLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_id().empty()) {
    next_page_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:performance.logs.v1alpha1.GetLogsResponse)
}

inline void GetLogsResponse::SharedCtor() {
next_page_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLogsResponse::~GetLogsResponse() {
  // @@protoc_insertion_point(destructor:performance.logs.v1alpha1.GetLogsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLogsResponse::ArenaDtor(void* object) {
  GetLogsResponse* _this = reinterpret_cast< GetLogsResponse* >(object);
  (void)_this;
}
void GetLogsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLogsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:performance.logs.v1alpha1.GetLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  next_page_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLogsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .performance.logs.v1alpha1.LogItem logs = 1 [json_name = "logs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_id = 2 [json_name = "nextPageId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_page_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "performance.logs.v1alpha1.GetLogsResponse.next_page_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLogsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:performance.logs.v1alpha1.GetLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .performance.logs.v1alpha1.LogItem logs = 1 [json_name = "logs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_logs(i), target, stream);
  }

  // string next_page_id = 2 [json_name = "nextPageId"];
  if (!this->_internal_next_page_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_id().data(), static_cast<int>(this->_internal_next_page_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "performance.logs.v1alpha1.GetLogsResponse.next_page_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:performance.logs.v1alpha1.GetLogsResponse)
  return target;
}

size_t GetLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:performance.logs.v1alpha1.GetLogsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .performance.logs.v1alpha1.LogItem logs = 1 [json_name = "logs"];
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_id = 2 [json_name = "nextPageId"];
  if (!this->_internal_next_page_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLogsResponse::GetClassData() const { return &_class_data_; }

void GetLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetLogsResponse *>(to)->MergeFrom(
      static_cast<const GetLogsResponse &>(from));
}


void GetLogsResponse::MergeFrom(const GetLogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:performance.logs.v1alpha1.GetLogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (!from._internal_next_page_id().empty()) {
    _internal_set_next_page_id(from._internal_next_page_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLogsResponse::CopyFrom(const GetLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:performance.logs.v1alpha1.GetLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogsResponse::IsInitialized() const {
  return true;
}

void GetLogsResponse::InternalSwap(GetLogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_id_, GetArenaForAllocation(),
      &other->next_page_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLogsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_getter, &descriptor_table_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto_once,
      file_level_metadata_performance_2flogs_2fv1alpha1_2flogs_5fapi_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace logs
}  // namespace performance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::Range* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::GetLogsRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::GetLogsRequest* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::GetLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::GetLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::performance::logs::v1alpha1::GetLogsResponse* Arena::CreateMaybeMessage< ::performance::logs::v1alpha1::GetLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::performance::logs::v1alpha1::GetLogsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
