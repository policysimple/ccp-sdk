// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: performance/logs/v1alpha1/logs_agent_api.proto

#include "performance/logs/v1alpha1/logs_agent_api.pb.h"
#include "performance/logs/v1alpha1/logs_agent_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace performance {
namespace logs {
namespace v1alpha1 {

static const char* LogsAgentAPIService_method_names[] = {
  "/performance.logs.v1alpha1.LogsAgentAPIService/SaveLogs",
};

std::unique_ptr< LogsAgentAPIService::Stub> LogsAgentAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LogsAgentAPIService::Stub> stub(new LogsAgentAPIService::Stub(channel));
  return stub;
}

LogsAgentAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SaveLogs_(LogsAgentAPIService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::performance::logs::v1alpha1::SaveLogsRequest, ::performance::logs::v1alpha1::SaveLogsResponse>* LogsAgentAPIService::Stub::SaveLogsRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::performance::logs::v1alpha1::SaveLogsRequest, ::performance::logs::v1alpha1::SaveLogsResponse>::Create(channel_.get(), rpcmethod_SaveLogs_, context);
}

::grpc::ClientAsyncReaderWriter< ::performance::logs::v1alpha1::SaveLogsRequest, ::performance::logs::v1alpha1::SaveLogsResponse>* LogsAgentAPIService::Stub::AsyncSaveLogsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::performance::logs::v1alpha1::SaveLogsRequest, ::performance::logs::v1alpha1::SaveLogsResponse>::Create(channel_.get(), cq, rpcmethod_SaveLogs_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::performance::logs::v1alpha1::SaveLogsRequest, ::performance::logs::v1alpha1::SaveLogsResponse>* LogsAgentAPIService::Stub::PrepareAsyncSaveLogsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::performance::logs::v1alpha1::SaveLogsRequest, ::performance::logs::v1alpha1::SaveLogsResponse>::Create(channel_.get(), cq, rpcmethod_SaveLogs_, context, false, nullptr);
}

LogsAgentAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogsAgentAPIService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< LogsAgentAPIService::Service, ::performance::logs::v1alpha1::SaveLogsRequest, ::performance::logs::v1alpha1::SaveLogsResponse>(
          std::mem_fn(&LogsAgentAPIService::Service::SaveLogs), this)));
}

LogsAgentAPIService::Service::~Service() {
}

::grpc::Status LogsAgentAPIService::Service::SaveLogs(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::performance::logs::v1alpha1::SaveLogsResponse, ::performance::logs::v1alpha1::SaveLogsRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace performance
}  // namespace logs
}  // namespace v1alpha1

