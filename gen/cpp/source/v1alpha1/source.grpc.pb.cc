// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: source/v1alpha1/source.proto

#include "source/v1alpha1/source.pb.h"
#include "source/v1alpha1/source.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace source {
namespace v1alpha1 {

static const char* SourceService_method_names[] = {
  "/source.v1alpha1.SourceService/CreateProvider",
  "/source.v1alpha1.SourceService/ListProviders",
  "/source.v1alpha1.SourceService/GetProvider",
  "/source.v1alpha1.SourceService/UpdateProvider",
  "/source.v1alpha1.SourceService/DeleteProvider",
  "/source.v1alpha1.SourceService/CreateIntegration",
  "/source.v1alpha1.SourceService/ListIntegrations",
  "/source.v1alpha1.SourceService/GetIntegration",
  "/source.v1alpha1.SourceService/UpdateIntegration",
  "/source.v1alpha1.SourceService/DeleteIntegration",
  "/source.v1alpha1.SourceService/ListRepositoriesProvider",
  "/source.v1alpha1.SourceService/GetRepositoryProvider",
  "/source.v1alpha1.SourceService/CreateRepository",
  "/source.v1alpha1.SourceService/ListRepositories",
  "/source.v1alpha1.SourceService/GetRepository",
  "/source.v1alpha1.SourceService/DeleteRepository",
  "/source.v1alpha1.SourceService/UpdateRepository",
};

std::unique_ptr< SourceService::Stub> SourceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SourceService::Stub> stub(new SourceService::Stub(channel));
  return stub;
}

SourceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateProvider_(SourceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProviders_(SourceService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProvider_(SourceService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProvider_(SourceService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProvider_(SourceService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateIntegration_(SourceService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListIntegrations_(SourceService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIntegration_(SourceService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateIntegration_(SourceService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteIntegration_(SourceService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRepositoriesProvider_(SourceService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRepositoryProvider_(SourceService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRepository_(SourceService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRepositories_(SourceService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRepository_(SourceService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRepository_(SourceService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRepository_(SourceService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SourceService::Stub::CreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::source::v1alpha1::CreateProviderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateProvider_, context, request, response);
}

void SourceService::Stub::experimental_async::CreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>* SourceService::Stub::AsyncCreateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::CreateProviderResponse>::Create(channel_.get(), cq, rpcmethod_CreateProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>* SourceService::Stub::PrepareAsyncCreateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::CreateProviderResponse>::Create(channel_.get(), cq, rpcmethod_CreateProvider_, context, request, false);
}

::grpc::Status SourceService::Stub::ListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::source::v1alpha1::ListProvidersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProviders_, context, request, response);
}

void SourceService::Stub::experimental_async::ListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProviders_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>* SourceService::Stub::AsyncListProvidersRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListProvidersResponse>::Create(channel_.get(), cq, rpcmethod_ListProviders_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>* SourceService::Stub::PrepareAsyncListProvidersRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListProvidersResponse>::Create(channel_.get(), cq, rpcmethod_ListProviders_, context, request, false);
}

::grpc::Status SourceService::Stub::GetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::source::v1alpha1::GetProviderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProvider_, context, request, response);
}

void SourceService::Stub::experimental_async::GetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>* SourceService::Stub::AsyncGetProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetProviderResponse>::Create(channel_.get(), cq, rpcmethod_GetProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>* SourceService::Stub::PrepareAsyncGetProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetProviderResponse>::Create(channel_.get(), cq, rpcmethod_GetProvider_, context, request, false);
}

::grpc::Status SourceService::Stub::UpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::source::v1alpha1::UpdateProviderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProvider_, context, request, response);
}

void SourceService::Stub::experimental_async::UpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>* SourceService::Stub::AsyncUpdateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::UpdateProviderResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>* SourceService::Stub::PrepareAsyncUpdateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::UpdateProviderResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProvider_, context, request, false);
}

::grpc::Status SourceService::Stub::DeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::source::v1alpha1::DeleteProviderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProvider_, context, request, response);
}

void SourceService::Stub::experimental_async::DeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>* SourceService::Stub::AsyncDeleteProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::DeleteProviderResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>* SourceService::Stub::PrepareAsyncDeleteProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::DeleteProviderResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProvider_, context, request, false);
}

::grpc::Status SourceService::Stub::CreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::source::v1alpha1::CreateIntegrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateIntegration_, context, request, response);
}

void SourceService::Stub::experimental_async::CreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIntegration_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>* SourceService::Stub::AsyncCreateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::CreateIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_CreateIntegration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>* SourceService::Stub::PrepareAsyncCreateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::CreateIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_CreateIntegration_, context, request, false);
}

::grpc::Status SourceService::Stub::ListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::source::v1alpha1::ListIntegrationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListIntegrations_, context, request, response);
}

void SourceService::Stub::experimental_async::ListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListIntegrations_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>* SourceService::Stub::AsyncListIntegrationsRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListIntegrationsResponse>::Create(channel_.get(), cq, rpcmethod_ListIntegrations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>* SourceService::Stub::PrepareAsyncListIntegrationsRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListIntegrationsResponse>::Create(channel_.get(), cq, rpcmethod_ListIntegrations_, context, request, false);
}

::grpc::Status SourceService::Stub::GetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::source::v1alpha1::GetIntegrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIntegration_, context, request, response);
}

void SourceService::Stub::experimental_async::GetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIntegration_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>* SourceService::Stub::AsyncGetIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_GetIntegration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>* SourceService::Stub::PrepareAsyncGetIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_GetIntegration_, context, request, false);
}

::grpc::Status SourceService::Stub::UpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::source::v1alpha1::UpdateIntegrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateIntegration_, context, request, response);
}

void SourceService::Stub::experimental_async::UpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateIntegration_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>* SourceService::Stub::AsyncUpdateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::UpdateIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateIntegration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>* SourceService::Stub::PrepareAsyncUpdateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::UpdateIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateIntegration_, context, request, false);
}

::grpc::Status SourceService::Stub::DeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::source::v1alpha1::DeleteIntegrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteIntegration_, context, request, response);
}

void SourceService::Stub::experimental_async::DeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteIntegration_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>* SourceService::Stub::AsyncDeleteIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::DeleteIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteIntegration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>* SourceService::Stub::PrepareAsyncDeleteIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::DeleteIntegrationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteIntegration_, context, request, false);
}

::grpc::Status SourceService::Stub::ListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListRepositoriesProvider_, context, request, response);
}

void SourceService::Stub::experimental_async::ListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListRepositoriesProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>* SourceService::Stub::AsyncListRepositoriesProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListRepositoriesProviderResponse>::Create(channel_.get(), cq, rpcmethod_ListRepositoriesProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>* SourceService::Stub::PrepareAsyncListRepositoriesProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListRepositoriesProviderResponse>::Create(channel_.get(), cq, rpcmethod_ListRepositoriesProvider_, context, request, false);
}

::grpc::Status SourceService::Stub::GetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::source::v1alpha1::GetRepositoryProviderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRepositoryProvider_, context, request, response);
}

void SourceService::Stub::experimental_async::GetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRepositoryProvider_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>* SourceService::Stub::AsyncGetRepositoryProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetRepositoryProviderResponse>::Create(channel_.get(), cq, rpcmethod_GetRepositoryProvider_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>* SourceService::Stub::PrepareAsyncGetRepositoryProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetRepositoryProviderResponse>::Create(channel_.get(), cq, rpcmethod_GetRepositoryProvider_, context, request, false);
}

::grpc::Status SourceService::Stub::CreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::source::v1alpha1::CreateRepositoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRepository_, context, request, response);
}

void SourceService::Stub::experimental_async::CreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRepository_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>* SourceService::Stub::AsyncCreateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::CreateRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_CreateRepository_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>* SourceService::Stub::PrepareAsyncCreateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::CreateRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_CreateRepository_, context, request, false);
}

::grpc::Status SourceService::Stub::ListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::source::v1alpha1::ListRepositoriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListRepositories_, context, request, response);
}

void SourceService::Stub::experimental_async::ListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListRepositories_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>* SourceService::Stub::AsyncListRepositoriesRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListRepositoriesResponse>::Create(channel_.get(), cq, rpcmethod_ListRepositories_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>* SourceService::Stub::PrepareAsyncListRepositoriesRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::ListRepositoriesResponse>::Create(channel_.get(), cq, rpcmethod_ListRepositories_, context, request, false);
}

::grpc::Status SourceService::Stub::GetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::source::v1alpha1::GetRepositoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRepository_, context, request, response);
}

void SourceService::Stub::experimental_async::GetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRepository_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>* SourceService::Stub::AsyncGetRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_GetRepository_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>* SourceService::Stub::PrepareAsyncGetRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::GetRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_GetRepository_, context, request, false);
}

::grpc::Status SourceService::Stub::DeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::source::v1alpha1::DeleteRepositoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRepository_, context, request, response);
}

void SourceService::Stub::experimental_async::DeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRepository_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>* SourceService::Stub::AsyncDeleteRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::DeleteRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRepository_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>* SourceService::Stub::PrepareAsyncDeleteRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::DeleteRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRepository_, context, request, false);
}

::grpc::Status SourceService::Stub::UpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::source::v1alpha1::UpdateRepositoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateRepository_, context, request, response);
}

void SourceService::Stub::experimental_async::UpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateRepository_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>* SourceService::Stub::AsyncUpdateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::UpdateRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRepository_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>* SourceService::Stub::PrepareAsyncUpdateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::source::v1alpha1::UpdateRepositoryResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRepository_, context, request, false);
}

SourceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::CreateProviderRequest, ::source::v1alpha1::CreateProviderResponse>(
          std::mem_fn(&SourceService::Service::CreateProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::ListProvidersRequest, ::source::v1alpha1::ListProvidersResponse>(
          std::mem_fn(&SourceService::Service::ListProviders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::GetProviderRequest, ::source::v1alpha1::GetProviderResponse>(
          std::mem_fn(&SourceService::Service::GetProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::UpdateProviderRequest, ::source::v1alpha1::UpdateProviderResponse>(
          std::mem_fn(&SourceService::Service::UpdateProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::DeleteProviderRequest, ::source::v1alpha1::DeleteProviderResponse>(
          std::mem_fn(&SourceService::Service::DeleteProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::CreateIntegrationRequest, ::source::v1alpha1::CreateIntegrationResponse>(
          std::mem_fn(&SourceService::Service::CreateIntegration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::ListIntegrationsRequest, ::source::v1alpha1::ListIntegrationsResponse>(
          std::mem_fn(&SourceService::Service::ListIntegrations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::GetIntegrationRequest, ::source::v1alpha1::GetIntegrationResponse>(
          std::mem_fn(&SourceService::Service::GetIntegration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::UpdateIntegrationRequest, ::source::v1alpha1::UpdateIntegrationResponse>(
          std::mem_fn(&SourceService::Service::UpdateIntegration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::DeleteIntegrationRequest, ::source::v1alpha1::DeleteIntegrationResponse>(
          std::mem_fn(&SourceService::Service::DeleteIntegration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::ListRepositoriesProviderRequest, ::source::v1alpha1::ListRepositoriesProviderResponse>(
          std::mem_fn(&SourceService::Service::ListRepositoriesProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::GetRepositoryProviderRequest, ::source::v1alpha1::GetRepositoryProviderResponse>(
          std::mem_fn(&SourceService::Service::GetRepositoryProvider), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::CreateRepositoryRequest, ::source::v1alpha1::CreateRepositoryResponse>(
          std::mem_fn(&SourceService::Service::CreateRepository), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::ListRepositoriesRequest, ::source::v1alpha1::ListRepositoriesResponse>(
          std::mem_fn(&SourceService::Service::ListRepositories), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::GetRepositoryRequest, ::source::v1alpha1::GetRepositoryResponse>(
          std::mem_fn(&SourceService::Service::GetRepository), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::DeleteRepositoryRequest, ::source::v1alpha1::DeleteRepositoryResponse>(
          std::mem_fn(&SourceService::Service::DeleteRepository), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SourceService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SourceService::Service, ::source::v1alpha1::UpdateRepositoryRequest, ::source::v1alpha1::UpdateRepositoryResponse>(
          std::mem_fn(&SourceService::Service::UpdateRepository), this)));
}

SourceService::Service::~Service() {
}

::grpc::Status SourceService::Service::CreateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::ListProviders(::grpc::ServerContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::GetProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::UpdateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::DeleteProvider(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::CreateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::ListIntegrations(::grpc::ServerContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::GetIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::UpdateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::DeleteIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::ListRepositoriesProvider(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::GetRepositoryProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::CreateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::ListRepositories(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::GetRepository(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::DeleteRepository(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SourceService::Service::UpdateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace source
}  // namespace v1alpha1

