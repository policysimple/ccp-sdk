// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/v1alpha1/source.proto

#include "source/v1alpha1/source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace source {
namespace v1alpha1 {
constexpr AccountProvider::AccountProvider(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountProviderDefaultTypeInternal {
  constexpr AccountProviderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountProviderDefaultTypeInternal() {}
  union {
    AccountProvider _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountProviderDefaultTypeInternal _AccountProvider_default_instance_;
constexpr AccountsProvidersRequest::AccountsProvidersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_(0u){}
struct AccountsProvidersRequestDefaultTypeInternal {
  constexpr AccountsProvidersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountsProvidersRequestDefaultTypeInternal() {}
  union {
    AccountsProvidersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountsProvidersRequestDefaultTypeInternal _AccountsProvidersRequest_default_instance_;
constexpr AccountsProvidersResponse::AccountsProvidersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_()
  , count_(0u)
  , total_pages_(0u){}
struct AccountsProvidersResponseDefaultTypeInternal {
  constexpr AccountsProvidersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountsProvidersResponseDefaultTypeInternal() {}
  union {
    AccountsProvidersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountsProvidersResponseDefaultTypeInternal _AccountsProvidersResponse_default_instance_;
constexpr DeleteIntegrationsByOrganizationRequest::DeleteIntegrationsByOrganizationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteIntegrationsByOrganizationRequestDefaultTypeInternal {
  constexpr DeleteIntegrationsByOrganizationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteIntegrationsByOrganizationRequestDefaultTypeInternal() {}
  union {
    DeleteIntegrationsByOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteIntegrationsByOrganizationRequestDefaultTypeInternal _DeleteIntegrationsByOrganizationRequest_default_instance_;
constexpr DeleteIntegrationsByOrganizationResponse::DeleteIntegrationsByOrganizationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteIntegrationsByOrganizationResponseDefaultTypeInternal {
  constexpr DeleteIntegrationsByOrganizationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteIntegrationsByOrganizationResponseDefaultTypeInternal() {}
  union {
    DeleteIntegrationsByOrganizationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteIntegrationsByOrganizationResponseDefaultTypeInternal _DeleteIntegrationsByOrganizationResponse_default_instance_;
constexpr GetOneProviderByNameRequest::GetOneProviderByNameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetOneProviderByNameRequestDefaultTypeInternal {
  constexpr GetOneProviderByNameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneProviderByNameRequestDefaultTypeInternal() {}
  union {
    GetOneProviderByNameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneProviderByNameRequestDefaultTypeInternal _GetOneProviderByNameRequest_default_instance_;
constexpr GetOneProviderByNameResponse::GetOneProviderByNameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : provider_(nullptr){}
struct GetOneProviderByNameResponseDefaultTypeInternal {
  constexpr GetOneProviderByNameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOneProviderByNameResponseDefaultTypeInternal() {}
  union {
    GetOneProviderByNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOneProviderByNameResponseDefaultTypeInternal _GetOneProviderByNameResponse_default_instance_;
constexpr Branch::Branch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BranchDefaultTypeInternal {
  constexpr BranchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BranchDefaultTypeInternal() {}
  union {
    Branch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BranchDefaultTypeInternal _Branch_default_instance_;
constexpr ListRepositoriesProviderRequest::ListRepositoriesProviderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_(0u){}
struct ListRepositoriesProviderRequestDefaultTypeInternal {
  constexpr ListRepositoriesProviderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRepositoriesProviderRequestDefaultTypeInternal() {}
  union {
    ListRepositoriesProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRepositoriesProviderRequestDefaultTypeInternal _ListRepositoriesProviderRequest_default_instance_;
constexpr ListRepositoriesProviderResponse::ListRepositoriesProviderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repositories_()
  , total_pages_(0u)
  , count_(0u){}
struct ListRepositoriesProviderResponseDefaultTypeInternal {
  constexpr ListRepositoriesProviderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRepositoriesProviderResponseDefaultTypeInternal() {}
  union {
    ListRepositoriesProviderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRepositoriesProviderResponseDefaultTypeInternal _ListRepositoriesProviderResponse_default_instance_;
constexpr GetRepositoryProviderRequest::GetRepositoryProviderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRepositoryProviderRequestDefaultTypeInternal {
  constexpr GetRepositoryProviderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRepositoryProviderRequestDefaultTypeInternal() {}
  union {
    GetRepositoryProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRepositoryProviderRequestDefaultTypeInternal _GetRepositoryProviderRequest_default_instance_;
constexpr GetRepositoryProviderResponse::GetRepositoryProviderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : branchs_(){}
struct GetRepositoryProviderResponseDefaultTypeInternal {
  constexpr GetRepositoryProviderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRepositoryProviderResponseDefaultTypeInternal() {}
  union {
    GetRepositoryProviderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRepositoryProviderResponseDefaultTypeInternal _GetRepositoryProviderResponse_default_instance_;
constexpr DetailRepository::DetailRepository(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : branchs_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fullname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clone_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private__(false)
  , fork_(false){}
struct DetailRepositoryDefaultTypeInternal {
  constexpr DetailRepositoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetailRepositoryDefaultTypeInternal() {}
  union {
    DetailRepository _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetailRepositoryDefaultTypeInternal _DetailRepository_default_instance_;
constexpr ListRepository::ListRepository(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fullname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clone_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private__(false){}
struct ListRepositoryDefaultTypeInternal {
  constexpr ListRepositoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRepositoryDefaultTypeInternal() {}
  union {
    ListRepository _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRepositoryDefaultTypeInternal _ListRepository_default_instance_;
constexpr CreateDetailRepository::CreateDetailRepository(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fullname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clone_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private__(false)
  , fork_(false){}
struct CreateDetailRepositoryDefaultTypeInternal {
  constexpr CreateDetailRepositoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDetailRepositoryDefaultTypeInternal() {}
  union {
    CreateDetailRepository _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDetailRepositoryDefaultTypeInternal _CreateDetailRepository_default_instance_;
constexpr CreateRepositoryRequest::CreateRepositoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repository_(nullptr){}
struct CreateRepositoryRequestDefaultTypeInternal {
  constexpr CreateRepositoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRepositoryRequestDefaultTypeInternal() {}
  union {
    CreateRepositoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRepositoryRequestDefaultTypeInternal _CreateRepositoryRequest_default_instance_;
constexpr CreateRepositoryResponse::CreateRepositoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateRepositoryResponseDefaultTypeInternal {
  constexpr CreateRepositoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRepositoryResponseDefaultTypeInternal() {}
  union {
    CreateRepositoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRepositoryResponseDefaultTypeInternal _CreateRepositoryResponse_default_instance_;
constexpr ListRepositoriesRequest::ListRepositoriesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListRepositoriesRequestDefaultTypeInternal {
  constexpr ListRepositoriesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRepositoriesRequestDefaultTypeInternal() {}
  union {
    ListRepositoriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRepositoriesRequestDefaultTypeInternal _ListRepositoriesRequest_default_instance_;
constexpr ListRepositoriesResponse::ListRepositoriesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repositories_(){}
struct ListRepositoriesResponseDefaultTypeInternal {
  constexpr ListRepositoriesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRepositoriesResponseDefaultTypeInternal() {}
  union {
    ListRepositoriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRepositoriesResponseDefaultTypeInternal _ListRepositoriesResponse_default_instance_;
constexpr GetRepositoryRequest::GetRepositoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repository_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRepositoryRequestDefaultTypeInternal {
  constexpr GetRepositoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRepositoryRequestDefaultTypeInternal() {}
  union {
    GetRepositoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRepositoryRequestDefaultTypeInternal _GetRepositoryRequest_default_instance_;
constexpr GetRepositoryResponse::GetRepositoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repository_(nullptr){}
struct GetRepositoryResponseDefaultTypeInternal {
  constexpr GetRepositoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRepositoryResponseDefaultTypeInternal() {}
  union {
    GetRepositoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRepositoryResponseDefaultTypeInternal _GetRepositoryResponse_default_instance_;
constexpr DeleteRepositoryRequest::DeleteRepositoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repository_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteRepositoryRequestDefaultTypeInternal {
  constexpr DeleteRepositoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRepositoryRequestDefaultTypeInternal() {}
  union {
    DeleteRepositoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRepositoryRequestDefaultTypeInternal _DeleteRepositoryRequest_default_instance_;
constexpr DeleteRepositoryResponse::DeleteRepositoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteRepositoryResponseDefaultTypeInternal {
  constexpr DeleteRepositoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRepositoryResponseDefaultTypeInternal() {}
  union {
    DeleteRepositoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRepositoryResponseDefaultTypeInternal _DeleteRepositoryResponse_default_instance_;
constexpr UpdateRepositoryRequest::UpdateRepositoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repository_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repository_(nullptr){}
struct UpdateRepositoryRequestDefaultTypeInternal {
  constexpr UpdateRepositoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRepositoryRequestDefaultTypeInternal() {}
  union {
    UpdateRepositoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRepositoryRequestDefaultTypeInternal _UpdateRepositoryRequest_default_instance_;
constexpr UpdateRepositoryResponse::UpdateRepositoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateRepositoryResponseDefaultTypeInternal {
  constexpr UpdateRepositoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRepositoryResponseDefaultTypeInternal() {}
  union {
    UpdateRepositoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRepositoryResponseDefaultTypeInternal _UpdateRepositoryResponse_default_instance_;
constexpr Integration_DataEntry_DoNotUse::Integration_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Integration_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr Integration_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Integration_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Integration_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Integration_DataEntry_DoNotUseDefaultTypeInternal _Integration_DataEntry_DoNotUse_default_instance_;
constexpr Integration_MetadataEntry_DoNotUse::Integration_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Integration_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr Integration_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Integration_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Integration_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Integration_MetadataEntry_DoNotUseDefaultTypeInternal _Integration_MetadataEntry_DoNotUse_default_instance_;
constexpr Integration::Integration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_(nullptr)
  , account_(nullptr){}
struct IntegrationDefaultTypeInternal {
  constexpr IntegrationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntegrationDefaultTypeInternal() {}
  union {
    Integration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntegrationDefaultTypeInternal _Integration_default_instance_;
constexpr Repository::Repository(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fullname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clone_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , private__(false)
  , fork_(false){}
struct RepositoryDefaultTypeInternal {
  constexpr RepositoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RepositoryDefaultTypeInternal() {}
  union {
    Repository _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RepositoryDefaultTypeInternal _Repository_default_instance_;
constexpr AccountIntegration::AccountIntegration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountIntegrationDefaultTypeInternal {
  constexpr AccountIntegrationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountIntegrationDefaultTypeInternal() {}
  union {
    AccountIntegration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountIntegrationDefaultTypeInternal _AccountIntegration_default_instance_;
constexpr CreateIntegrationRequest_DataEntry_DoNotUse::CreateIntegrationRequest_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateIntegrationRequest_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateIntegrationRequest_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateIntegrationRequest_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateIntegrationRequest_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateIntegrationRequest_DataEntry_DoNotUseDefaultTypeInternal _CreateIntegrationRequest_DataEntry_DoNotUse_default_instance_;
constexpr CreateIntegrationRequest_MetadataEntry_DoNotUse::CreateIntegrationRequest_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateIntegrationRequest_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateIntegrationRequest_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateIntegrationRequest_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateIntegrationRequest_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateIntegrationRequest_MetadataEntry_DoNotUseDefaultTypeInternal _CreateIntegrationRequest_MetadataEntry_DoNotUse_default_instance_;
constexpr CreateIntegrationRequest::CreateIntegrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_(nullptr){}
struct CreateIntegrationRequestDefaultTypeInternal {
  constexpr CreateIntegrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateIntegrationRequestDefaultTypeInternal() {}
  union {
    CreateIntegrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateIntegrationRequestDefaultTypeInternal _CreateIntegrationRequest_default_instance_;
constexpr CreateIntegrationResponse::CreateIntegrationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateIntegrationResponseDefaultTypeInternal {
  constexpr CreateIntegrationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateIntegrationResponseDefaultTypeInternal() {}
  union {
    CreateIntegrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateIntegrationResponseDefaultTypeInternal _CreateIntegrationResponse_default_instance_;
constexpr ListIntegrationsRequest::ListIntegrationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListIntegrationsRequestDefaultTypeInternal {
  constexpr ListIntegrationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListIntegrationsRequestDefaultTypeInternal() {}
  union {
    ListIntegrationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListIntegrationsRequestDefaultTypeInternal _ListIntegrationsRequest_default_instance_;
constexpr ListIntegrationsResponse::ListIntegrationsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : integrations_()
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListIntegrationsResponseDefaultTypeInternal {
  constexpr ListIntegrationsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListIntegrationsResponseDefaultTypeInternal() {}
  union {
    ListIntegrationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListIntegrationsResponseDefaultTypeInternal _ListIntegrationsResponse_default_instance_;
constexpr GetIntegrationRequest::GetIntegrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetIntegrationRequestDefaultTypeInternal {
  constexpr GetIntegrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetIntegrationRequestDefaultTypeInternal() {}
  union {
    GetIntegrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetIntegrationRequestDefaultTypeInternal _GetIntegrationRequest_default_instance_;
constexpr GetIntegrationResponse::GetIntegrationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : integration_(nullptr){}
struct GetIntegrationResponseDefaultTypeInternal {
  constexpr GetIntegrationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetIntegrationResponseDefaultTypeInternal() {}
  union {
    GetIntegrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetIntegrationResponseDefaultTypeInternal _GetIntegrationResponse_default_instance_;
constexpr UpdateIntegrationRequest::UpdateIntegrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integrations_(nullptr){}
struct UpdateIntegrationRequestDefaultTypeInternal {
  constexpr UpdateIntegrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateIntegrationRequestDefaultTypeInternal() {}
  union {
    UpdateIntegrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateIntegrationRequestDefaultTypeInternal _UpdateIntegrationRequest_default_instance_;
constexpr UpdateIntegrationResponse::UpdateIntegrationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateIntegrationResponseDefaultTypeInternal {
  constexpr UpdateIntegrationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateIntegrationResponseDefaultTypeInternal() {}
  union {
    UpdateIntegrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateIntegrationResponseDefaultTypeInternal _UpdateIntegrationResponse_default_instance_;
constexpr DeleteIntegrationRequest::DeleteIntegrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteIntegrationRequestDefaultTypeInternal {
  constexpr DeleteIntegrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteIntegrationRequestDefaultTypeInternal() {}
  union {
    DeleteIntegrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteIntegrationRequestDefaultTypeInternal _DeleteIntegrationRequest_default_instance_;
constexpr DeleteIntegrationResponse::DeleteIntegrationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteIntegrationResponseDefaultTypeInternal {
  constexpr DeleteIntegrationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteIntegrationResponseDefaultTypeInternal() {}
  union {
    DeleteIntegrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteIntegrationResponseDefaultTypeInternal _DeleteIntegrationResponse_default_instance_;
constexpr Provider_DataEntry_DoNotUse::Provider_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Provider_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr Provider_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Provider_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Provider_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Provider_DataEntry_DoNotUseDefaultTypeInternal _Provider_DataEntry_DoNotUse_default_instance_;
constexpr Provider_MetadataEntry_DoNotUse::Provider_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Provider_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr Provider_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Provider_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Provider_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Provider_MetadataEntry_DoNotUseDefaultTypeInternal _Provider_MetadataEntry_DoNotUse_default_instance_;
constexpr Provider::Provider(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProviderDefaultTypeInternal {
  constexpr ProviderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProviderDefaultTypeInternal() {}
  union {
    Provider _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProviderDefaultTypeInternal _Provider_default_instance_;
constexpr DeleteProviderRequest::DeleteProviderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteProviderRequestDefaultTypeInternal {
  constexpr DeleteProviderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteProviderRequestDefaultTypeInternal() {}
  union {
    DeleteProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteProviderRequestDefaultTypeInternal _DeleteProviderRequest_default_instance_;
constexpr DeleteProviderResponse::DeleteProviderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteProviderResponseDefaultTypeInternal {
  constexpr DeleteProviderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteProviderResponseDefaultTypeInternal() {}
  union {
    DeleteProviderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteProviderResponseDefaultTypeInternal _DeleteProviderResponse_default_instance_;
constexpr UpdateProviderRequest::UpdateProviderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_(nullptr){}
struct UpdateProviderRequestDefaultTypeInternal {
  constexpr UpdateProviderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProviderRequestDefaultTypeInternal() {}
  union {
    UpdateProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProviderRequestDefaultTypeInternal _UpdateProviderRequest_default_instance_;
constexpr UpdateProviderResponse::UpdateProviderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateProviderResponseDefaultTypeInternal {
  constexpr UpdateProviderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProviderResponseDefaultTypeInternal() {}
  union {
    UpdateProviderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProviderResponseDefaultTypeInternal _UpdateProviderResponse_default_instance_;
constexpr GetProviderRequest::GetProviderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetProviderRequestDefaultTypeInternal {
  constexpr GetProviderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProviderRequestDefaultTypeInternal() {}
  union {
    GetProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProviderRequestDefaultTypeInternal _GetProviderRequest_default_instance_;
constexpr GetProviderResponse::GetProviderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : provider_(nullptr){}
struct GetProviderResponseDefaultTypeInternal {
  constexpr GetProviderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProviderResponseDefaultTypeInternal() {}
  union {
    GetProviderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProviderResponseDefaultTypeInternal _GetProviderResponse_default_instance_;
constexpr CreateProviderRequest_DataEntry_DoNotUse::CreateProviderRequest_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateProviderRequest_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateProviderRequest_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProviderRequest_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateProviderRequest_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProviderRequest_DataEntry_DoNotUseDefaultTypeInternal _CreateProviderRequest_DataEntry_DoNotUse_default_instance_;
constexpr CreateProviderRequest_MetadataEntry_DoNotUse::CreateProviderRequest_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateProviderRequest_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateProviderRequest_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProviderRequest_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateProviderRequest_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProviderRequest_MetadataEntry_DoNotUseDefaultTypeInternal _CreateProviderRequest_MetadataEntry_DoNotUse_default_instance_;
constexpr CreateProviderRequest::CreateProviderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateProviderRequestDefaultTypeInternal {
  constexpr CreateProviderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProviderRequestDefaultTypeInternal() {}
  union {
    CreateProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProviderRequestDefaultTypeInternal _CreateProviderRequest_default_instance_;
constexpr CreateProviderResponse::CreateProviderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateProviderResponseDefaultTypeInternal {
  constexpr CreateProviderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProviderResponseDefaultTypeInternal() {}
  union {
    CreateProviderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProviderResponseDefaultTypeInternal _CreateProviderResponse_default_instance_;
constexpr ListProvidersRequest::ListProvidersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListProvidersRequestDefaultTypeInternal {
  constexpr ListProvidersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProvidersRequestDefaultTypeInternal() {}
  union {
    ListProvidersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProvidersRequestDefaultTypeInternal _ListProvidersRequest_default_instance_;
constexpr ListProvidersResponse::ListProvidersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : providers_()
  , total_pages_(0u)
  , count_(0u){}
struct ListProvidersResponseDefaultTypeInternal {
  constexpr ListProvidersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProvidersResponseDefaultTypeInternal() {}
  union {
    ListProvidersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProvidersResponseDefaultTypeInternal _ListProvidersResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace source
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_source_2fv1alpha1_2fsource_2eproto[57];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_source_2fv1alpha1_2fsource_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_source_2fv1alpha1_2fsource_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_source_2fv1alpha1_2fsource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountProvider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountProvider, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountProvider, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountsProvidersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountsProvidersRequest, integration_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountsProvidersRequest, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountsProvidersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountsProvidersResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountsProvidersResponse, count_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountsProvidersResponse, total_pages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationsByOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationsByOrganizationRequest, organization_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationsByOrganizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationsByOrganizationResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetOneProviderByNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetOneProviderByNameRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetOneProviderByNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetOneProviderByNameResponse, provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Branch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Branch, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Branch, sha_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Branch, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesProviderRequest, integration_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesProviderRequest, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesProviderResponse, repositories_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesProviderResponse, total_pages_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesProviderResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryProviderRequest, integration_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryProviderRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryProviderResponse, branchs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, private__),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, fullname_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, description_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, fork_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, clone_url_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, project_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, organization_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, branchs_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DetailRepository, integration_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, private__),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, fullname_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, description_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, clone_url_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, project_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, organization_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepository, integration_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, private__),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, fullname_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, description_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, fork_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, clone_url_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, project_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, organization_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateDetailRepository, integration_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateRepositoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateRepositoryRequest, repository_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateRepositoryRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateRepositoryRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateRepositoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateRepositoryResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListRepositoriesResponse, repositories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryRequest, repository_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetRepositoryResponse, repository_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteRepositoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteRepositoryRequest, repository_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteRepositoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteRepositoryResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateRepositoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateRepositoryRequest, repository_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateRepositoryRequest, repository_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateRepositoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateRepositoryResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_DataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, organization_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, provider_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, data_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, metadata_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, user_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Integration, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, private__),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, fullname_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, description_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, fork_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, clone_url_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Repository, branch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountIntegration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountIntegration, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::AccountIntegration, type_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, data_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, provider_id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, account_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationRequest, organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateIntegrationResponse, integration_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListIntegrationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListIntegrationsRequest, organization_uid_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListIntegrationsRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListIntegrationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListIntegrationsResponse, integrations_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListIntegrationsResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetIntegrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetIntegrationRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetIntegrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetIntegrationResponse, integration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateIntegrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateIntegrationRequest, id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateIntegrationRequest, integrations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateIntegrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateIntegrationResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteIntegrationResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_DataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider, id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider, description_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider, logo_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider, data_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::Provider, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteProviderRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::DeleteProviderResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateProviderRequest, id_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateProviderRequest, provider_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::UpdateProviderResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetProviderRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::GetProviderResponse, provider_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest, name_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest, description_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest, logo_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest, data_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderRequest, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::CreateProviderResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListProvidersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListProvidersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListProvidersResponse, providers_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListProvidersResponse, total_pages_),
  PROTOBUF_FIELD_OFFSET(::source::v1alpha1::ListProvidersResponse, count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::source::v1alpha1::AccountProvider)},
  { 7, -1, sizeof(::source::v1alpha1::AccountsProvidersRequest)},
  { 14, -1, sizeof(::source::v1alpha1::AccountsProvidersResponse)},
  { 22, -1, sizeof(::source::v1alpha1::DeleteIntegrationsByOrganizationRequest)},
  { 28, -1, sizeof(::source::v1alpha1::DeleteIntegrationsByOrganizationResponse)},
  { 34, -1, sizeof(::source::v1alpha1::GetOneProviderByNameRequest)},
  { 40, -1, sizeof(::source::v1alpha1::GetOneProviderByNameResponse)},
  { 46, -1, sizeof(::source::v1alpha1::Branch)},
  { 54, -1, sizeof(::source::v1alpha1::ListRepositoriesProviderRequest)},
  { 61, -1, sizeof(::source::v1alpha1::ListRepositoriesProviderResponse)},
  { 69, -1, sizeof(::source::v1alpha1::GetRepositoryProviderRequest)},
  { 76, -1, sizeof(::source::v1alpha1::GetRepositoryProviderResponse)},
  { 82, -1, sizeof(::source::v1alpha1::DetailRepository)},
  { 98, -1, sizeof(::source::v1alpha1::ListRepository)},
  { 112, -1, sizeof(::source::v1alpha1::CreateDetailRepository)},
  { 126, -1, sizeof(::source::v1alpha1::CreateRepositoryRequest)},
  { 134, -1, sizeof(::source::v1alpha1::CreateRepositoryResponse)},
  { 140, -1, sizeof(::source::v1alpha1::ListRepositoriesRequest)},
  { 147, -1, sizeof(::source::v1alpha1::ListRepositoriesResponse)},
  { 153, -1, sizeof(::source::v1alpha1::GetRepositoryRequest)},
  { 159, -1, sizeof(::source::v1alpha1::GetRepositoryResponse)},
  { 165, -1, sizeof(::source::v1alpha1::DeleteRepositoryRequest)},
  { 171, -1, sizeof(::source::v1alpha1::DeleteRepositoryResponse)},
  { 177, -1, sizeof(::source::v1alpha1::UpdateRepositoryRequest)},
  { 184, -1, sizeof(::source::v1alpha1::UpdateRepositoryResponse)},
  { 190, 197, sizeof(::source::v1alpha1::Integration_DataEntry_DoNotUse)},
  { 199, 206, sizeof(::source::v1alpha1::Integration_MetadataEntry_DoNotUse)},
  { 208, -1, sizeof(::source::v1alpha1::Integration)},
  { 221, -1, sizeof(::source::v1alpha1::Repository)},
  { 233, -1, sizeof(::source::v1alpha1::AccountIntegration)},
  { 240, 247, sizeof(::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse)},
  { 249, 256, sizeof(::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse)},
  { 258, -1, sizeof(::source::v1alpha1::CreateIntegrationRequest)},
  { 270, -1, sizeof(::source::v1alpha1::CreateIntegrationResponse)},
  { 277, -1, sizeof(::source::v1alpha1::ListIntegrationsRequest)},
  { 284, -1, sizeof(::source::v1alpha1::ListIntegrationsResponse)},
  { 291, -1, sizeof(::source::v1alpha1::GetIntegrationRequest)},
  { 297, -1, sizeof(::source::v1alpha1::GetIntegrationResponse)},
  { 303, -1, sizeof(::source::v1alpha1::UpdateIntegrationRequest)},
  { 310, -1, sizeof(::source::v1alpha1::UpdateIntegrationResponse)},
  { 316, -1, sizeof(::source::v1alpha1::DeleteIntegrationRequest)},
  { 322, -1, sizeof(::source::v1alpha1::DeleteIntegrationResponse)},
  { 328, 335, sizeof(::source::v1alpha1::Provider_DataEntry_DoNotUse)},
  { 337, 344, sizeof(::source::v1alpha1::Provider_MetadataEntry_DoNotUse)},
  { 346, -1, sizeof(::source::v1alpha1::Provider)},
  { 357, -1, sizeof(::source::v1alpha1::DeleteProviderRequest)},
  { 363, -1, sizeof(::source::v1alpha1::DeleteProviderResponse)},
  { 369, -1, sizeof(::source::v1alpha1::UpdateProviderRequest)},
  { 376, -1, sizeof(::source::v1alpha1::UpdateProviderResponse)},
  { 382, -1, sizeof(::source::v1alpha1::GetProviderRequest)},
  { 388, -1, sizeof(::source::v1alpha1::GetProviderResponse)},
  { 394, 401, sizeof(::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse)},
  { 403, 410, sizeof(::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse)},
  { 412, -1, sizeof(::source::v1alpha1::CreateProviderRequest)},
  { 422, -1, sizeof(::source::v1alpha1::CreateProviderResponse)},
  { 428, -1, sizeof(::source::v1alpha1::ListProvidersRequest)},
  { 433, -1, sizeof(::source::v1alpha1::ListProvidersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_AccountProvider_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_AccountsProvidersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_AccountsProvidersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteIntegrationsByOrganizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteIntegrationsByOrganizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetOneProviderByNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetOneProviderByNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Branch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListRepositoriesProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListRepositoriesProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetRepositoryProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetRepositoryProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DetailRepository_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListRepository_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateDetailRepository_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateRepositoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateRepositoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListRepositoriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListRepositoriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetRepositoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetRepositoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteRepositoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteRepositoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_UpdateRepositoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_UpdateRepositoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Integration_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Integration_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Integration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Repository_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_AccountIntegration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateIntegrationRequest_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateIntegrationRequest_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateIntegrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateIntegrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListIntegrationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListIntegrationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetIntegrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetIntegrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_UpdateIntegrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_UpdateIntegrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteIntegrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteIntegrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Provider_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Provider_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_Provider_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_DeleteProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_UpdateProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_UpdateProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_GetProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateProviderRequest_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateProviderRequest_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_CreateProviderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListProvidersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::source::v1alpha1::_ListProvidersResponse_default_instance_),
};

const char descriptor_table_protodef_source_2fv1alpha1_2fsource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034source/v1alpha1/source.proto\022\017source.v"
  "1alpha1\"9\n\017AccountProvider\022\022\n\004name\030\001 \001(\t"
  "R\004name\022\022\n\004type\030\002 \001(\tR\004type\"U\n\030AccountsPr"
  "ovidersRequest\022%\n\016integration_id\030\001 \001(\tR\r"
  "integrationId\022\022\n\004page\030\002 \001(\rR\004page\"\220\001\n\031Ac"
  "countsProvidersResponse\022<\n\010accounts\030\001 \003("
  "\0132 .source.v1alpha1.AccountProviderR\010acc"
  "ounts\022\024\n\005count\030\002 \001(\rR\005count\022\037\n\013total_pag"
  "es\030\003 \001(\rR\ntotalPages\"T\n\'DeleteIntegratio"
  "nsByOrganizationRequest\022)\n\020organization_"
  "uid\030\001 \001(\tR\017organizationUid\"<\n(DeleteInte"
  "grationsByOrganizationResponse\022\020\n\003msg\030\001 "
  "\001(\tR\003msg\"1\n\033GetOneProviderByNameRequest\022"
  "\022\n\004name\030\001 \001(\tR\004name\"U\n\034GetOneProviderByN"
  "ameResponse\0225\n\010provider\030\001 \001(\0132\031.source.v"
  "1alpha1.ProviderR\010provider\"@\n\006Branch\022\022\n\004"
  "name\030\001 \001(\tR\004name\022\020\n\003sha\030\002 \001(\tR\003sha\022\020\n\003ur"
  "l\030\003 \001(\tR\003url\"\\\n\037ListRepositoriesProvider"
  "Request\022%\n\016integration_id\030\001 \001(\tR\rintegra"
  "tionId\022\022\n\004page\030\002 \001(\rR\004page\"\232\001\n ListRepos"
  "itoriesProviderResponse\022\?\n\014repositories\030"
  "\001 \003(\0132\033.source.v1alpha1.RepositoryR\014repo"
  "sitories\022\037\n\013total_pages\030\002 \001(\rR\ntotalPage"
  "s\022\024\n\005count\030\003 \001(\rR\005count\"Y\n\034GetRepository"
  "ProviderRequest\022%\n\016integration_id\030\001 \001(\tR"
  "\rintegrationId\022\022\n\004name\030\002 \001(\tR\004name\"R\n\035Ge"
  "tRepositoryProviderResponse\0221\n\007branchs\030\001"
  " \003(\0132\027.source.v1alpha1.BranchR\007branchs\"\310"
  "\002\n\020DetailRepository\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004n"
  "ame\030\002 \001(\tR\004name\022\030\n\007private\030\003 \001(\010R\007privat"
  "e\022\032\n\010fullname\030\004 \001(\tR\010fullname\022 \n\013descrip"
  "tion\030\005 \001(\tR\013description\022\022\n\004fork\030\006 \001(\010R\004f"
  "ork\022\033\n\tclone_url\030\007 \001(\tR\010cloneUrl\022\035\n\nproj"
  "ect_id\030\010 \001(\tR\tprojectId\022\'\n\017organization_"
  "id\030\t \001(\tR\016organizationId\022\030\n\007branchs\030\n \003("
  "\tR\007branchs\022%\n\016integration_id\030\013 \001(\tR\rinte"
  "grationId\"\230\002\n\016ListRepository\022\016\n\002id\030\001 \001(\t"
  "R\002id\022\022\n\004name\030\002 \001(\tR\004name\022\030\n\007private\030\003 \001("
  "\010R\007private\022\032\n\010fullname\030\004 \001(\tR\010fullname\022 "
  "\n\013description\030\005 \001(\tR\013description\022\033\n\tclon"
  "e_url\030\007 \001(\tR\010cloneUrl\022\035\n\nproject_id\030\010 \001("
  "\tR\tprojectId\022\'\n\017organization_id\030\t \001(\tR\016o"
  "rganizationId\022%\n\016integration_id\030\013 \001(\tR\ri"
  "ntegrationId\"\244\002\n\026CreateDetailRepository\022"
  "\022\n\004name\030\001 \001(\tR\004name\022\030\n\007private\030\002 \001(\010R\007pr"
  "ivate\022\032\n\010fullname\030\003 \001(\tR\010fullname\022 \n\013des"
  "cription\030\004 \001(\tR\013description\022\022\n\004fork\030\005 \001("
  "\010R\004fork\022\033\n\tclone_url\030\006 \001(\tR\010cloneUrl\022\035\n\n"
  "project_id\030\007 \001(\tR\tprojectId\022\'\n\017organizat"
  "ion_id\030\010 \001(\tR\016organizationId\022%\n\016integrat"
  "ion_id\030\t \001(\tR\rintegrationId\"\252\001\n\027CreateRe"
  "positoryRequest\022G\n\nrepository\030\001 \001(\0132\'.so"
  "urce.v1alpha1.CreateDetailRepositoryR\nre"
  "pository\022\035\n\nproject_id\030\002 \001(\tR\tprojectId\022"
  "\'\n\017organization_id\030\003 \001(\tR\016organizationId"
  "\",\n\030CreateRepositoryResponse\022\020\n\003msg\030\001 \001("
  "\tR\003msg\"a\n\027ListRepositoriesRequest\022\035\n\npro"
  "ject_id\030\001 \001(\tR\tprojectId\022\'\n\017organization"
  "_id\030\002 \001(\tR\016organizationId\"_\n\030ListReposit"
  "oriesResponse\022C\n\014repositories\030\001 \003(\0132\037.so"
  "urce.v1alpha1.ListRepositoryR\014repositori"
  "es\";\n\024GetRepositoryRequest\022#\n\rrepository"
  "_id\030\001 \001(\tR\014repositoryId\"Z\n\025GetRepository"
  "Response\022A\n\nrepository\030\001 \001(\0132!.source.v1"
  "alpha1.DetailRepositoryR\nrepository\">\n\027D"
  "eleteRepositoryRequest\022#\n\rrepository_id\030"
  "\001 \001(\tR\014repositoryId\",\n\030DeleteRepositoryR"
  "esponse\022\020\n\003msg\030\001 \001(\tR\003msg\"\201\001\n\027UpdateRepo"
  "sitoryRequest\022#\n\rrepository_id\030\001 \001(\tR\014re"
  "positoryId\022A\n\nrepository\030\002 \001(\0132!.source."
  "v1alpha1.DetailRepositoryR\nrepository\",\n"
  "\030UpdateRepositoryResponse\022\020\n\003msg\030\001 \001(\tR\003"
  "msg\"\343\003\n\013Integration\022\016\n\002id\030\001 \001(\tR\002id\022\'\n\017o"
  "rganization_id\030\002 \001(\tR\016organizationId\022\022\n\004"
  "name\030\003 \001(\tR\004name\0225\n\010provider\030\004 \001(\0132\031.sou"
  "rce.v1alpha1.ProviderR\010provider\022:\n\004data\030"
  "\005 \003(\0132&.source.v1alpha1.Integration.Data"
  "EntryR\004data\022F\n\010metadata\030\006 \003(\0132*.source.v"
  "1alpha1.Integration.MetadataEntryR\010metad"
  "ata\022\027\n\007user_id\030\007 \001(\tR\006userId\022=\n\007account\030"
  "\010 \001(\0132#.source.v1alpha1.AccountIntegrati"
  "onR\007account\0327\n\tDataEntry\022\020\n\003key\030\001 \001(\tR\003k"
  "ey\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\032;\n\rMetadata"
  "Entry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005"
  "value:\0028\001\"\301\001\n\nRepository\022\022\n\004name\030\001 \001(\tR\004"
  "name\022\030\n\007private\030\002 \001(\010R\007private\022\032\n\010fullna"
  "me\030\003 \001(\tR\010fullname\022 \n\013description\030\004 \001(\tR"
  "\013description\022\022\n\004fork\030\005 \001(\010R\004fork\022\033\n\tclon"
  "e_url\030\006 \001(\tR\010cloneUrl\022\026\n\006branch\030\007 \001(\tR\006b"
  "ranch\"<\n\022AccountIntegration\022\022\n\004name\030\001 \001("
  "\tR\004name\022\022\n\004type\030\002 \001(\tR\004type\"\344\003\n\030CreateIn"
  "tegrationRequest\022\022\n\004name\030\003 \001(\tR\004name\022G\n\004"
  "data\030\005 \003(\01323.source.v1alpha1.CreateInteg"
  "rationRequest.DataEntryR\004data\022S\n\010metadat"
  "a\030\006 \003(\01327.source.v1alpha1.CreateIntegrat"
  "ionRequest.MetadataEntryR\010metadata\022\027\n\007us"
  "er_id\030\007 \001(\tR\006userId\022\037\n\013provider_id\030\010 \001(\t"
  "R\nproviderId\022=\n\007account\030\t \001(\0132#.source.v"
  "1alpha1.AccountIntegrationR\007account\022\'\n\017o"
  "rganization_id\030\n \001(\tR\016organizationId\0327\n\t"
  "DataEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001"
  "(\tR\005value:\0028\001\032;\n\rMetadataEntry\022\020\n\003key\030\001 "
  "\001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"T\n\031Cr"
  "eateIntegrationResponse\022\020\n\003msg\030\001 \001(\tR\003ms"
  "g\022%\n\016integration_id\030\003 \001(\tR\rintegrationId"
  "\"]\n\027ListIntegrationsRequest\022)\n\020organizat"
  "ion_uid\030\003 \001(\tR\017organizationUid\022\027\n\007user_i"
  "d\030\002 \001(\tR\006userId\"r\n\030ListIntegrationsRespo"
  "nse\022@\n\014integrations\030\001 \003(\0132\034.source.v1alp"
  "ha1.IntegrationR\014integrations\022\024\n\005error\030\002"
  " \001(\tR\005error\"\'\n\025GetIntegrationRequest\022\016\n\002"
  "id\030\001 \001(\tR\002id\"X\n\026GetIntegrationResponse\022>"
  "\n\013integration\030\001 \001(\0132\034.source.v1alpha1.In"
  "tegrationR\013integration\"y\n\030UpdateIntegrat"
  "ionRequest\022\016\n\002id\030\001 \001(\tR\002id\022M\n\014integratio"
  "ns\030\002 \001(\0132).source.v1alpha1.CreateIntegra"
  "tionRequestR\014integrations\"-\n\031UpdateInteg"
  "rationResponse\022\020\n\003msg\030\001 \001(\tR\003msg\"*\n\030Dele"
  "teIntegrationRequest\022\016\n\002id\030\001 \001(\tR\002id\"-\n\031"
  "DeleteIntegrationResponse\022\020\n\003msg\030\001 \001(\tR\003"
  "msg\"\330\002\n\010Provider\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name"
  "\030\002 \001(\tR\004name\022 \n\013description\030\003 \001(\tR\013descr"
  "iption\022\022\n\004logo\030\004 \001(\tR\004logo\0227\n\004data\030\005 \003(\013"
  "2#.source.v1alpha1.Provider.DataEntryR\004d"
  "ata\022C\n\010metadata\030\006 \003(\0132\'.source.v1alpha1."
  "Provider.MetadataEntryR\010metadata\0327\n\tData"
  "Entry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005"
  "value:\0028\001\032;\n\rMetadataEntry\022\020\n\003key\030\001 \001(\tR"
  "\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"\'\n\025Delete"
  "ProviderRequest\022\016\n\002id\030\001 \001(\tR\002id\"*\n\026Delet"
  "eProviderResponse\022\020\n\003msg\030\001 \001(\tR\003msg\"k\n\025U"
  "pdateProviderRequest\022\016\n\002id\030\001 \001(\tR\002id\022B\n\010"
  "provider\030\002 \001(\0132&.source.v1alpha1.CreateP"
  "roviderRequestR\010provider\"*\n\026UpdateProvid"
  "erResponse\022\020\n\003msg\030\001 \001(\tR\003msg\"$\n\022GetProvi"
  "derRequest\022\016\n\002id\030\001 \001(\tR\002id\"L\n\023GetProvide"
  "rResponse\0225\n\010provider\030\001 \001(\0132\031.source.v1a"
  "lpha1.ProviderR\010provider\"\357\002\n\025CreateProvi"
  "derRequest\022\022\n\004name\030\001 \001(\tR\004name\022 \n\013descri"
  "ption\030\002 \001(\tR\013description\022\022\n\004logo\030\003 \001(\tR\004"
  "logo\022D\n\004data\030\005 \003(\01320.source.v1alpha1.Cre"
  "ateProviderRequest.DataEntryR\004data\022P\n\010me"
  "tadata\030\006 \003(\01324.source.v1alpha1.CreatePro"
  "viderRequest.MetadataEntryR\010metadata\0327\n\t"
  "DataEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001"
  "(\tR\005value:\0028\001\032;\n\rMetadataEntry\022\020\n\003key\030\001 "
  "\001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"*\n\026Cr"
  "eateProviderResponse\022\020\n\003msg\030\001 \001(\tR\003msg\"\026"
  "\n\024ListProvidersRequest\"\207\001\n\025ListProviders"
  "Response\0227\n\tproviders\030\001 \003(\0132\031.source.v1a"
  "lpha1.ProviderR\tproviders\022\037\n\013total_pages"
  "\030\002 \001(\rR\ntotalPages\022\024\n\005count\030\003 \001(\rR\005count"
  "2\372\020\n\rSourceService\022a\n\016CreateProvider\022&.s"
  "ource.v1alpha1.CreateProviderRequest\032\'.s"
  "ource.v1alpha1.CreateProviderResponse\022^\n"
  "\rListProviders\022%.source.v1alpha1.ListPro"
  "vidersRequest\032&.source.v1alpha1.ListProv"
  "idersResponse\022X\n\013GetProvider\022#.source.v1"
  "alpha1.GetProviderRequest\032$.source.v1alp"
  "ha1.GetProviderResponse\022s\n\024GetOneProvide"
  "rByName\022,.source.v1alpha1.GetOneProvider"
  "ByNameRequest\032-.source.v1alpha1.GetOnePr"
  "oviderByNameResponse\022a\n\016UpdateProvider\022&"
  ".source.v1alpha1.UpdateProviderRequest\032\'"
  ".source.v1alpha1.UpdateProviderResponse\022"
  "a\n\016DeleteProvider\022&.source.v1alpha1.Dele"
  "teProviderRequest\032\'.source.v1alpha1.Dele"
  "teProviderResponse\022j\n\021AccountsProviders\022"
  ").source.v1alpha1.AccountsProvidersReque"
  "st\032*.source.v1alpha1.AccountsProvidersRe"
  "sponse\022j\n\021CreateIntegration\022).source.v1a"
  "lpha1.CreateIntegrationRequest\032*.source."
  "v1alpha1.CreateIntegrationResponse\022g\n\020Li"
  "stIntegrations\022(.source.v1alpha1.ListInt"
  "egrationsRequest\032).source.v1alpha1.ListI"
  "ntegrationsResponse\022a\n\016GetIntegration\022&."
  "source.v1alpha1.GetIntegrationRequest\032\'."
  "source.v1alpha1.GetIntegrationResponse\022j"
  "\n\021UpdateIntegration\022).source.v1alpha1.Up"
  "dateIntegrationRequest\032*.source.v1alpha1"
  ".UpdateIntegrationResponse\022j\n\021DeleteInte"
  "gration\022).source.v1alpha1.DeleteIntegrat"
  "ionRequest\032*.source.v1alpha1.DeleteInteg"
  "rationResponse\022\227\001\n DeleteIntegrationsByO"
  "rganization\0228.source.v1alpha1.DeleteInte"
  "grationsByOrganizationRequest\0329.source.v"
  "1alpha1.DeleteIntegrationsByOrganization"
  "Response\022\177\n\030ListRepositoriesProvider\0220.s"
  "ource.v1alpha1.ListRepositoriesProviderR"
  "equest\0321.source.v1alpha1.ListRepositorie"
  "sProviderResponse\022v\n\025GetRepositoryProvid"
  "er\022-.source.v1alpha1.GetRepositoryProvid"
  "erRequest\032..source.v1alpha1.GetRepositor"
  "yProviderResponse\022g\n\020CreateRepository\022(."
  "source.v1alpha1.CreateRepositoryRequest\032"
  ").source.v1alpha1.CreateRepositoryRespon"
  "se\022g\n\020ListRepositories\022(.source.v1alpha1"
  ".ListRepositoriesRequest\032).source.v1alph"
  "a1.ListRepositoriesResponse\022^\n\rGetReposi"
  "tory\022%.source.v1alpha1.GetRepositoryRequ"
  "est\032&.source.v1alpha1.GetRepositoryRespo"
  "nse\022g\n\020DeleteRepository\022(.source.v1alpha"
  "1.DeleteRepositoryRequest\032).source.v1alp"
  "ha1.DeleteRepositoryResponse\022g\n\020UpdateRe"
  "pository\022(.source.v1alpha1.UpdateReposit"
  "oryRequest\032).source.v1alpha1.UpdateRepos"
  "itoryResponseB2Z0github.com/cuemby/ccp-s"
  "dk/gen/go/source/v1alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_source_2fv1alpha1_2fsource_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fv1alpha1_2fsource_2eproto = {
  false, false, 8313, descriptor_table_protodef_source_2fv1alpha1_2fsource_2eproto, "source/v1alpha1/source.proto", 
  &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once, nullptr, 0, 57,
  schemas, file_default_instances, TableStruct_source_2fv1alpha1_2fsource_2eproto::offsets,
  file_level_metadata_source_2fv1alpha1_2fsource_2eproto, file_level_enum_descriptors_source_2fv1alpha1_2fsource_2eproto, file_level_service_descriptors_source_2fv1alpha1_2fsource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter() {
  return &descriptor_table_source_2fv1alpha1_2fsource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_source_2fv1alpha1_2fsource_2eproto(&descriptor_table_source_2fv1alpha1_2fsource_2eproto);
namespace source {
namespace v1alpha1 {

// ===================================================================

class AccountProvider::_Internal {
 public:
};

AccountProvider::AccountProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.AccountProvider)
}
AccountProvider::AccountProvider(const AccountProvider& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.AccountProvider)
}

inline void AccountProvider::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountProvider::~AccountProvider() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.AccountProvider)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountProvider::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountProvider::ArenaDtor(void* object) {
  AccountProvider* _this = reinterpret_cast< AccountProvider* >(object);
  (void)_this;
}
void AccountProvider::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountProvider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.AccountProvider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountProvider::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.AccountProvider.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.AccountProvider.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountProvider::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.AccountProvider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.AccountProvider.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.AccountProvider.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.AccountProvider)
  return target;
}

size_t AccountProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.AccountProvider)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountProvider::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountProvider::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountProvider::GetClassData() const { return &_class_data_; }

void AccountProvider::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountProvider *>(to)->MergeFrom(
      static_cast<const AccountProvider &>(from));
}


void AccountProvider::MergeFrom(const AccountProvider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.AccountProvider)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountProvider::CopyFrom(const AccountProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.AccountProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountProvider::IsInitialized() const {
  return true;
}

void AccountProvider::InternalSwap(AccountProvider* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountProvider::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[0]);
}

// ===================================================================

class AccountsProvidersRequest::_Internal {
 public:
};

AccountsProvidersRequest::AccountsProvidersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.AccountsProvidersRequest)
}
AccountsProvidersRequest::AccountsProvidersRequest(const AccountsProvidersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.AccountsProvidersRequest)
}

inline void AccountsProvidersRequest::SharedCtor() {
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
page_ = 0u;
}

AccountsProvidersRequest::~AccountsProvidersRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.AccountsProvidersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountsProvidersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountsProvidersRequest::ArenaDtor(void* object) {
  AccountsProvidersRequest* _this = reinterpret_cast< AccountsProvidersRequest* >(object);
  (void)_this;
}
void AccountsProvidersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountsProvidersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountsProvidersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.AccountsProvidersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  integration_id_.ClearToEmpty();
  page_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountsProvidersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string integration_id = 1 [json_name = "integrationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.AccountsProvidersRequest.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2 [json_name = "page"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountsProvidersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.AccountsProvidersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string integration_id = 1 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.AccountsProvidersRequest.integration_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_integration_id(), target);
  }

  // uint32 page = 2 [json_name = "page"];
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.AccountsProvidersRequest)
  return target;
}

size_t AccountsProvidersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.AccountsProvidersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string integration_id = 1 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  // uint32 page = 2 [json_name = "page"];
  if (this->_internal_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountsProvidersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountsProvidersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountsProvidersRequest::GetClassData() const { return &_class_data_; }

void AccountsProvidersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountsProvidersRequest *>(to)->MergeFrom(
      static_cast<const AccountsProvidersRequest &>(from));
}


void AccountsProvidersRequest::MergeFrom(const AccountsProvidersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.AccountsProvidersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountsProvidersRequest::CopyFrom(const AccountsProvidersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.AccountsProvidersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsProvidersRequest::IsInitialized() const {
  return true;
}

void AccountsProvidersRequest::InternalSwap(AccountsProvidersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountsProvidersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[1]);
}

// ===================================================================

class AccountsProvidersResponse::_Internal {
 public:
};

AccountsProvidersResponse::AccountsProvidersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  accounts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.AccountsProvidersResponse)
}
AccountsProvidersResponse::AccountsProvidersResponse(const AccountsProvidersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_pages_) -
    reinterpret_cast<char*>(&count_)) + sizeof(total_pages_));
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.AccountsProvidersResponse)
}

inline void AccountsProvidersResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_pages_) -
    reinterpret_cast<char*>(&count_)) + sizeof(total_pages_));
}

AccountsProvidersResponse::~AccountsProvidersResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.AccountsProvidersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountsProvidersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountsProvidersResponse::ArenaDtor(void* object) {
  AccountsProvidersResponse* _this = reinterpret_cast< AccountsProvidersResponse* >(object);
  (void)_this;
}
void AccountsProvidersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountsProvidersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountsProvidersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.AccountsProvidersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_pages_) -
      reinterpret_cast<char*>(&count_)) + sizeof(total_pages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountsProvidersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .source.v1alpha1.AccountProvider accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_pages = 3 [json_name = "totalPages"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountsProvidersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.AccountsProvidersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .source.v1alpha1.AccountProvider accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  // uint32 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // uint32 total_pages = 3 [json_name = "totalPages"];
  if (this->_internal_total_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_pages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.AccountsProvidersResponse)
  return target;
}

size_t AccountsProvidersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.AccountsProvidersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .source.v1alpha1.AccountProvider accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 total_pages = 3 [json_name = "totalPages"];
  if (this->_internal_total_pages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_pages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountsProvidersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountsProvidersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountsProvidersResponse::GetClassData() const { return &_class_data_; }

void AccountsProvidersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountsProvidersResponse *>(to)->MergeFrom(
      static_cast<const AccountsProvidersResponse &>(from));
}


void AccountsProvidersResponse::MergeFrom(const AccountsProvidersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.AccountsProvidersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_total_pages() != 0) {
    _internal_set_total_pages(from._internal_total_pages());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountsProvidersResponse::CopyFrom(const AccountsProvidersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.AccountsProvidersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsProvidersResponse::IsInitialized() const {
  return true;
}

void AccountsProvidersResponse::InternalSwap(AccountsProvidersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountsProvidersResponse, total_pages_)
      + sizeof(AccountsProvidersResponse::total_pages_)
      - PROTOBUF_FIELD_OFFSET(AccountsProvidersResponse, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountsProvidersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[2]);
}

// ===================================================================

class DeleteIntegrationsByOrganizationRequest::_Internal {
 public:
};

DeleteIntegrationsByOrganizationRequest::DeleteIntegrationsByOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
}
DeleteIntegrationsByOrganizationRequest::DeleteIntegrationsByOrganizationRequest(const DeleteIntegrationsByOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_uid().empty()) {
    organization_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_uid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
}

inline void DeleteIntegrationsByOrganizationRequest::SharedCtor() {
organization_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteIntegrationsByOrganizationRequest::~DeleteIntegrationsByOrganizationRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteIntegrationsByOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  organization_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteIntegrationsByOrganizationRequest::ArenaDtor(void* object) {
  DeleteIntegrationsByOrganizationRequest* _this = reinterpret_cast< DeleteIntegrationsByOrganizationRequest* >(object);
  (void)_this;
}
void DeleteIntegrationsByOrganizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteIntegrationsByOrganizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteIntegrationsByOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteIntegrationsByOrganizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_uid = 1 [json_name = "organizationUid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_organization_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteIntegrationsByOrganizationRequest.organization_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteIntegrationsByOrganizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_uid = 1 [json_name = "organizationUid"];
  if (!this->_internal_organization_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_uid().data(), static_cast<int>(this->_internal_organization_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteIntegrationsByOrganizationRequest.organization_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
  return target;
}

size_t DeleteIntegrationsByOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_uid = 1 [json_name = "organizationUid"];
  if (!this->_internal_organization_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteIntegrationsByOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteIntegrationsByOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteIntegrationsByOrganizationRequest::GetClassData() const { return &_class_data_; }

void DeleteIntegrationsByOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteIntegrationsByOrganizationRequest *>(to)->MergeFrom(
      static_cast<const DeleteIntegrationsByOrganizationRequest &>(from));
}


void DeleteIntegrationsByOrganizationRequest::MergeFrom(const DeleteIntegrationsByOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_uid().empty()) {
    _internal_set_organization_uid(from._internal_organization_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteIntegrationsByOrganizationRequest::CopyFrom(const DeleteIntegrationsByOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteIntegrationsByOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteIntegrationsByOrganizationRequest::IsInitialized() const {
  return true;
}

void DeleteIntegrationsByOrganizationRequest::InternalSwap(DeleteIntegrationsByOrganizationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_uid_, GetArenaForAllocation(),
      &other->organization_uid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteIntegrationsByOrganizationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[3]);
}

// ===================================================================

class DeleteIntegrationsByOrganizationResponse::_Internal {
 public:
};

DeleteIntegrationsByOrganizationResponse::DeleteIntegrationsByOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
}
DeleteIntegrationsByOrganizationResponse::DeleteIntegrationsByOrganizationResponse(const DeleteIntegrationsByOrganizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
}

inline void DeleteIntegrationsByOrganizationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteIntegrationsByOrganizationResponse::~DeleteIntegrationsByOrganizationResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteIntegrationsByOrganizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteIntegrationsByOrganizationResponse::ArenaDtor(void* object) {
  DeleteIntegrationsByOrganizationResponse* _this = reinterpret_cast< DeleteIntegrationsByOrganizationResponse* >(object);
  (void)_this;
}
void DeleteIntegrationsByOrganizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteIntegrationsByOrganizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteIntegrationsByOrganizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteIntegrationsByOrganizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteIntegrationsByOrganizationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteIntegrationsByOrganizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteIntegrationsByOrganizationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
  return target;
}

size_t DeleteIntegrationsByOrganizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteIntegrationsByOrganizationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteIntegrationsByOrganizationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteIntegrationsByOrganizationResponse::GetClassData() const { return &_class_data_; }

void DeleteIntegrationsByOrganizationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteIntegrationsByOrganizationResponse *>(to)->MergeFrom(
      static_cast<const DeleteIntegrationsByOrganizationResponse &>(from));
}


void DeleteIntegrationsByOrganizationResponse::MergeFrom(const DeleteIntegrationsByOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteIntegrationsByOrganizationResponse::CopyFrom(const DeleteIntegrationsByOrganizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteIntegrationsByOrganizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteIntegrationsByOrganizationResponse::IsInitialized() const {
  return true;
}

void DeleteIntegrationsByOrganizationResponse::InternalSwap(DeleteIntegrationsByOrganizationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteIntegrationsByOrganizationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[4]);
}

// ===================================================================

class GetOneProviderByNameRequest::_Internal {
 public:
};

GetOneProviderByNameRequest::GetOneProviderByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetOneProviderByNameRequest)
}
GetOneProviderByNameRequest::GetOneProviderByNameRequest(const GetOneProviderByNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetOneProviderByNameRequest)
}

inline void GetOneProviderByNameRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetOneProviderByNameRequest::~GetOneProviderByNameRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetOneProviderByNameRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneProviderByNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOneProviderByNameRequest::ArenaDtor(void* object) {
  GetOneProviderByNameRequest* _this = reinterpret_cast< GetOneProviderByNameRequest* >(object);
  (void)_this;
}
void GetOneProviderByNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneProviderByNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneProviderByNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetOneProviderByNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneProviderByNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.GetOneProviderByNameRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneProviderByNameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetOneProviderByNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.GetOneProviderByNameRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetOneProviderByNameRequest)
  return target;
}

size_t GetOneProviderByNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetOneProviderByNameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneProviderByNameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneProviderByNameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneProviderByNameRequest::GetClassData() const { return &_class_data_; }

void GetOneProviderByNameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneProviderByNameRequest *>(to)->MergeFrom(
      static_cast<const GetOneProviderByNameRequest &>(from));
}


void GetOneProviderByNameRequest::MergeFrom(const GetOneProviderByNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetOneProviderByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneProviderByNameRequest::CopyFrom(const GetOneProviderByNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetOneProviderByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneProviderByNameRequest::IsInitialized() const {
  return true;
}

void GetOneProviderByNameRequest::InternalSwap(GetOneProviderByNameRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneProviderByNameRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[5]);
}

// ===================================================================

class GetOneProviderByNameResponse::_Internal {
 public:
  static const ::source::v1alpha1::Provider& provider(const GetOneProviderByNameResponse* msg);
};

const ::source::v1alpha1::Provider&
GetOneProviderByNameResponse::_Internal::provider(const GetOneProviderByNameResponse* msg) {
  return *msg->provider_;
}
GetOneProviderByNameResponse::GetOneProviderByNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetOneProviderByNameResponse)
}
GetOneProviderByNameResponse::GetOneProviderByNameResponse(const GetOneProviderByNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_provider()) {
    provider_ = new ::source::v1alpha1::Provider(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetOneProviderByNameResponse)
}

inline void GetOneProviderByNameResponse::SharedCtor() {
provider_ = nullptr;
}

GetOneProviderByNameResponse::~GetOneProviderByNameResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetOneProviderByNameResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOneProviderByNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete provider_;
}

void GetOneProviderByNameResponse::ArenaDtor(void* object) {
  GetOneProviderByNameResponse* _this = reinterpret_cast< GetOneProviderByNameResponse* >(object);
  (void)_this;
}
void GetOneProviderByNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOneProviderByNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOneProviderByNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetOneProviderByNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOneProviderByNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOneProviderByNameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetOneProviderByNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::provider(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetOneProviderByNameResponse)
  return target;
}

size_t GetOneProviderByNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetOneProviderByNameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOneProviderByNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOneProviderByNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOneProviderByNameResponse::GetClassData() const { return &_class_data_; }

void GetOneProviderByNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOneProviderByNameResponse *>(to)->MergeFrom(
      static_cast<const GetOneProviderByNameResponse &>(from));
}


void GetOneProviderByNameResponse::MergeFrom(const GetOneProviderByNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetOneProviderByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_provider()) {
    _internal_mutable_provider()->::source::v1alpha1::Provider::MergeFrom(from._internal_provider());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOneProviderByNameResponse::CopyFrom(const GetOneProviderByNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetOneProviderByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOneProviderByNameResponse::IsInitialized() const {
  return true;
}

void GetOneProviderByNameResponse::InternalSwap(GetOneProviderByNameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(provider_, other->provider_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOneProviderByNameResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[6]);
}

// ===================================================================

class Branch::_Internal {
 public:
};

Branch::Branch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.Branch)
}
Branch::Branch(const Branch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sha().empty()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.Branch)
}

inline void Branch::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Branch::~Branch() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.Branch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Branch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Branch::ArenaDtor(void* object) {
  Branch* _this = reinterpret_cast< Branch* >(object);
  (void)_this;
}
void Branch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Branch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Branch::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.Branch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  sha_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Branch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Branch.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sha = 2 [json_name = "sha"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Branch.sha"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Branch.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Branch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.Branch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Branch.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string sha = 2 [json_name = "sha"];
  if (!this->_internal_sha().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sha().data(), static_cast<int>(this->_internal_sha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Branch.sha");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sha(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Branch.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.Branch)
  return target;
}

size_t Branch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.Branch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string sha = 2 [json_name = "sha"];
  if (!this->_internal_sha().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sha());
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Branch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Branch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Branch::GetClassData() const { return &_class_data_; }

void Branch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Branch *>(to)->MergeFrom(
      static_cast<const Branch &>(from));
}


void Branch::MergeFrom(const Branch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.Branch)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_sha().empty()) {
    _internal_set_sha(from._internal_sha());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Branch::CopyFrom(const Branch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.Branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Branch::IsInitialized() const {
  return true;
}

void Branch::InternalSwap(Branch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_, GetArenaForAllocation(),
      &other->sha_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Branch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[7]);
}

// ===================================================================

class ListRepositoriesProviderRequest::_Internal {
 public:
};

ListRepositoriesProviderRequest::ListRepositoriesProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListRepositoriesProviderRequest)
}
ListRepositoriesProviderRequest::ListRepositoriesProviderRequest(const ListRepositoriesProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListRepositoriesProviderRequest)
}

inline void ListRepositoriesProviderRequest::SharedCtor() {
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
page_ = 0u;
}

ListRepositoriesProviderRequest::~ListRepositoriesProviderRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListRepositoriesProviderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRepositoriesProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListRepositoriesProviderRequest::ArenaDtor(void* object) {
  ListRepositoriesProviderRequest* _this = reinterpret_cast< ListRepositoriesProviderRequest* >(object);
  (void)_this;
}
void ListRepositoriesProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRepositoriesProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRepositoriesProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListRepositoriesProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  integration_id_.ClearToEmpty();
  page_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRepositoriesProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string integration_id = 1 [json_name = "integrationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepositoriesProviderRequest.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2 [json_name = "page"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRepositoriesProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListRepositoriesProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string integration_id = 1 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepositoriesProviderRequest.integration_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_integration_id(), target);
  }

  // uint32 page = 2 [json_name = "page"];
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListRepositoriesProviderRequest)
  return target;
}

size_t ListRepositoriesProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListRepositoriesProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string integration_id = 1 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  // uint32 page = 2 [json_name = "page"];
  if (this->_internal_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRepositoriesProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRepositoriesProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRepositoriesProviderRequest::GetClassData() const { return &_class_data_; }

void ListRepositoriesProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListRepositoriesProviderRequest *>(to)->MergeFrom(
      static_cast<const ListRepositoriesProviderRequest &>(from));
}


void ListRepositoriesProviderRequest::MergeFrom(const ListRepositoriesProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListRepositoriesProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRepositoriesProviderRequest::CopyFrom(const ListRepositoriesProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListRepositoriesProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRepositoriesProviderRequest::IsInitialized() const {
  return true;
}

void ListRepositoriesProviderRequest::InternalSwap(ListRepositoriesProviderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRepositoriesProviderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[8]);
}

// ===================================================================

class ListRepositoriesProviderResponse::_Internal {
 public:
};

ListRepositoriesProviderResponse::ListRepositoriesProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repositories_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListRepositoriesProviderResponse)
}
ListRepositoriesProviderResponse::ListRepositoriesProviderResponse(const ListRepositoriesProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repositories_(from.repositories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_pages_, &from.total_pages_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&total_pages_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListRepositoriesProviderResponse)
}

inline void ListRepositoriesProviderResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_pages_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&total_pages_)) + sizeof(count_));
}

ListRepositoriesProviderResponse::~ListRepositoriesProviderResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListRepositoriesProviderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRepositoriesProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListRepositoriesProviderResponse::ArenaDtor(void* object) {
  ListRepositoriesProviderResponse* _this = reinterpret_cast< ListRepositoriesProviderResponse* >(object);
  (void)_this;
}
void ListRepositoriesProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRepositoriesProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRepositoriesProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListRepositoriesProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repositories_.Clear();
  ::memset(&total_pages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&total_pages_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRepositoriesProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .source.v1alpha1.Repository repositories = 1 [json_name = "repositories"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repositories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 total_pages = 2 [json_name = "totalPages"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 3 [json_name = "count"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRepositoriesProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListRepositoriesProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Repository repositories = 1 [json_name = "repositories"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repositories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_repositories(i), target, stream);
  }

  // uint32 total_pages = 2 [json_name = "totalPages"];
  if (this->_internal_total_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_pages(), target);
  }

  // uint32 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListRepositoriesProviderResponse)
  return target;
}

size_t ListRepositoriesProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListRepositoriesProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Repository repositories = 1 [json_name = "repositories"];
  total_size += 1UL * this->_internal_repositories_size();
  for (const auto& msg : this->repositories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_pages = 2 [json_name = "totalPages"];
  if (this->_internal_total_pages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_pages());
  }

  // uint32 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRepositoriesProviderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRepositoriesProviderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRepositoriesProviderResponse::GetClassData() const { return &_class_data_; }

void ListRepositoriesProviderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListRepositoriesProviderResponse *>(to)->MergeFrom(
      static_cast<const ListRepositoriesProviderResponse &>(from));
}


void ListRepositoriesProviderResponse::MergeFrom(const ListRepositoriesProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListRepositoriesProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repositories_.MergeFrom(from.repositories_);
  if (from._internal_total_pages() != 0) {
    _internal_set_total_pages(from._internal_total_pages());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRepositoriesProviderResponse::CopyFrom(const ListRepositoriesProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListRepositoriesProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRepositoriesProviderResponse::IsInitialized() const {
  return true;
}

void ListRepositoriesProviderResponse::InternalSwap(ListRepositoriesProviderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repositories_.InternalSwap(&other->repositories_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListRepositoriesProviderResponse, count_)
      + sizeof(ListRepositoriesProviderResponse::count_)
      - PROTOBUF_FIELD_OFFSET(ListRepositoriesProviderResponse, total_pages_)>(
          reinterpret_cast<char*>(&total_pages_),
          reinterpret_cast<char*>(&other->total_pages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRepositoriesProviderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[9]);
}

// ===================================================================

class GetRepositoryProviderRequest::_Internal {
 public:
};

GetRepositoryProviderRequest::GetRepositoryProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetRepositoryProviderRequest)
}
GetRepositoryProviderRequest::GetRepositoryProviderRequest(const GetRepositoryProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetRepositoryProviderRequest)
}

inline void GetRepositoryProviderRequest::SharedCtor() {
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRepositoryProviderRequest::~GetRepositoryProviderRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetRepositoryProviderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRepositoryProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRepositoryProviderRequest::ArenaDtor(void* object) {
  GetRepositoryProviderRequest* _this = reinterpret_cast< GetRepositoryProviderRequest* >(object);
  (void)_this;
}
void GetRepositoryProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRepositoryProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRepositoryProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetRepositoryProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  integration_id_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRepositoryProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string integration_id = 1 [json_name = "integrationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.GetRepositoryProviderRequest.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.GetRepositoryProviderRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRepositoryProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetRepositoryProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string integration_id = 1 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.GetRepositoryProviderRequest.integration_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_integration_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.GetRepositoryProviderRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetRepositoryProviderRequest)
  return target;
}

size_t GetRepositoryProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetRepositoryProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string integration_id = 1 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRepositoryProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRepositoryProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRepositoryProviderRequest::GetClassData() const { return &_class_data_; }

void GetRepositoryProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetRepositoryProviderRequest *>(to)->MergeFrom(
      static_cast<const GetRepositoryProviderRequest &>(from));
}


void GetRepositoryProviderRequest::MergeFrom(const GetRepositoryProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetRepositoryProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRepositoryProviderRequest::CopyFrom(const GetRepositoryProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetRepositoryProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRepositoryProviderRequest::IsInitialized() const {
  return true;
}

void GetRepositoryProviderRequest::InternalSwap(GetRepositoryProviderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRepositoryProviderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[10]);
}

// ===================================================================

class GetRepositoryProviderResponse::_Internal {
 public:
};

GetRepositoryProviderResponse::GetRepositoryProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  branchs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetRepositoryProviderResponse)
}
GetRepositoryProviderResponse::GetRepositoryProviderResponse(const GetRepositoryProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      branchs_(from.branchs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetRepositoryProviderResponse)
}

inline void GetRepositoryProviderResponse::SharedCtor() {
}

GetRepositoryProviderResponse::~GetRepositoryProviderResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetRepositoryProviderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRepositoryProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRepositoryProviderResponse::ArenaDtor(void* object) {
  GetRepositoryProviderResponse* _this = reinterpret_cast< GetRepositoryProviderResponse* >(object);
  (void)_this;
}
void GetRepositoryProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRepositoryProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRepositoryProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetRepositoryProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  branchs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRepositoryProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .source.v1alpha1.Branch branchs = 1 [json_name = "branchs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_branchs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRepositoryProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetRepositoryProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Branch branchs = 1 [json_name = "branchs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_branchs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_branchs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetRepositoryProviderResponse)
  return target;
}

size_t GetRepositoryProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetRepositoryProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Branch branchs = 1 [json_name = "branchs"];
  total_size += 1UL * this->_internal_branchs_size();
  for (const auto& msg : this->branchs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRepositoryProviderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRepositoryProviderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRepositoryProviderResponse::GetClassData() const { return &_class_data_; }

void GetRepositoryProviderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetRepositoryProviderResponse *>(to)->MergeFrom(
      static_cast<const GetRepositoryProviderResponse &>(from));
}


void GetRepositoryProviderResponse::MergeFrom(const GetRepositoryProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetRepositoryProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  branchs_.MergeFrom(from.branchs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRepositoryProviderResponse::CopyFrom(const GetRepositoryProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetRepositoryProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRepositoryProviderResponse::IsInitialized() const {
  return true;
}

void GetRepositoryProviderResponse::InternalSwap(GetRepositoryProviderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  branchs_.InternalSwap(&other->branchs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRepositoryProviderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[11]);
}

// ===================================================================

class DetailRepository::_Internal {
 public:
};

DetailRepository::DetailRepository(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  branchs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DetailRepository)
}
DetailRepository::DetailRepository(const DetailRepository& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      branchs_(from.branchs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fullname(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clone_url().empty()) {
    clone_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clone_url(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&private__, &from.private__,
    static_cast<size_t>(reinterpret_cast<char*>(&fork_) -
    reinterpret_cast<char*>(&private__)) + sizeof(fork_));
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DetailRepository)
}

inline void DetailRepository::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&private__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fork_) -
    reinterpret_cast<char*>(&private__)) + sizeof(fork_));
}

DetailRepository::~DetailRepository() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DetailRepository)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DetailRepository::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clone_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetailRepository::ArenaDtor(void* object) {
  DetailRepository* _this = reinterpret_cast< DetailRepository* >(object);
  (void)_this;
}
void DetailRepository::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailRepository::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetailRepository::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DetailRepository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  branchs_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  fullname_.ClearToEmpty();
  description_.ClearToEmpty();
  clone_url_.ClearToEmpty();
  project_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  integration_id_.ClearToEmpty();
  ::memset(&private__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fork_) -
      reinterpret_cast<char*>(&private__)) + sizeof(fork_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailRepository::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 3 [json_name = "private"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullname = 4 [json_name = "fullname"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.fullname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5 [json_name = "description"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fork = 6 [json_name = "fork"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clone_url = 7 [json_name = "cloneUrl"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_clone_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.clone_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 8 [json_name = "projectId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 9 [json_name = "organizationId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string branchs = 10 [json_name = "branchs"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_branchs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.branchs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string integration_id = 11 [json_name = "integrationId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DetailRepository.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailRepository::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DetailRepository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool private = 3 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_private_(), target);
  }

  // string fullname = 4 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.fullname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fullname(), target);
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool fork = 6 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_fork(), target);
  }

  // string clone_url = 7 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clone_url().data(), static_cast<int>(this->_internal_clone_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.clone_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_clone_url(), target);
  }

  // string project_id = 8 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.project_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_project_id(), target);
  }

  // string organization_id = 9 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.organization_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_organization_id(), target);
  }

  // repeated string branchs = 10 [json_name = "branchs"];
  for (int i = 0, n = this->_internal_branchs_size(); i < n; i++) {
    const auto& s = this->_internal_branchs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.branchs");
    target = stream->WriteString(10, s, target);
  }

  // string integration_id = 11 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DetailRepository.integration_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_integration_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DetailRepository)
  return target;
}

size_t DetailRepository::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DetailRepository)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string branchs = 10 [json_name = "branchs"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(branchs_.size());
  for (int i = 0, n = branchs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      branchs_.Get(i));
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string fullname = 4 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string clone_url = 7 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clone_url());
  }

  // string project_id = 8 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string organization_id = 9 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string integration_id = 11 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  // bool private = 3 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    total_size += 1 + 1;
  }

  // bool fork = 6 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetailRepository::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetailRepository::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetailRepository::GetClassData() const { return &_class_data_; }

void DetailRepository::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DetailRepository *>(to)->MergeFrom(
      static_cast<const DetailRepository &>(from));
}


void DetailRepository::MergeFrom(const DetailRepository& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DetailRepository)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  branchs_.MergeFrom(from.branchs_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_fullname().empty()) {
    _internal_set_fullname(from._internal_fullname());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_clone_url().empty()) {
    _internal_set_clone_url(from._internal_clone_url());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  if (from._internal_private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  if (from._internal_fork() != 0) {
    _internal_set_fork(from._internal_fork());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetailRepository::CopyFrom(const DetailRepository& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DetailRepository)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailRepository::IsInitialized() const {
  return true;
}

void DetailRepository::InternalSwap(DetailRepository* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  branchs_.InternalSwap(&other->branchs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fullname_, GetArenaForAllocation(),
      &other->fullname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clone_url_, GetArenaForAllocation(),
      &other->clone_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailRepository, fork_)
      + sizeof(DetailRepository::fork_)
      - PROTOBUF_FIELD_OFFSET(DetailRepository, private__)>(
          reinterpret_cast<char*>(&private__),
          reinterpret_cast<char*>(&other->private__));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailRepository::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[12]);
}

// ===================================================================

class ListRepository::_Internal {
 public:
};

ListRepository::ListRepository(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListRepository)
}
ListRepository::ListRepository(const ListRepository& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fullname(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clone_url().empty()) {
    clone_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clone_url(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  private__ = from.private__;
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListRepository)
}

inline void ListRepository::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
private__ = false;
}

ListRepository::~ListRepository() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListRepository)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRepository::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clone_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListRepository::ArenaDtor(void* object) {
  ListRepository* _this = reinterpret_cast< ListRepository* >(object);
  (void)_this;
}
void ListRepository::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRepository::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRepository::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListRepository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  fullname_.ClearToEmpty();
  description_.ClearToEmpty();
  clone_url_.ClearToEmpty();
  project_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  integration_id_.ClearToEmpty();
  private__ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRepository::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 3 [json_name = "private"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullname = 4 [json_name = "fullname"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.fullname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5 [json_name = "description"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clone_url = 7 [json_name = "cloneUrl"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_clone_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.clone_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 8 [json_name = "projectId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 9 [json_name = "organizationId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string integration_id = 11 [json_name = "integrationId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepository.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRepository::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListRepository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool private = 3 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_private_(), target);
  }

  // string fullname = 4 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.fullname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fullname(), target);
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string clone_url = 7 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clone_url().data(), static_cast<int>(this->_internal_clone_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.clone_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_clone_url(), target);
  }

  // string project_id = 8 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.project_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_project_id(), target);
  }

  // string organization_id = 9 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.organization_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_organization_id(), target);
  }

  // string integration_id = 11 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepository.integration_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_integration_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListRepository)
  return target;
}

size_t ListRepository::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListRepository)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string fullname = 4 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // string description = 5 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string clone_url = 7 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clone_url());
  }

  // string project_id = 8 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string organization_id = 9 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string integration_id = 11 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  // bool private = 3 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRepository::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRepository::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRepository::GetClassData() const { return &_class_data_; }

void ListRepository::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListRepository *>(to)->MergeFrom(
      static_cast<const ListRepository &>(from));
}


void ListRepository::MergeFrom(const ListRepository& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListRepository)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_fullname().empty()) {
    _internal_set_fullname(from._internal_fullname());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_clone_url().empty()) {
    _internal_set_clone_url(from._internal_clone_url());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  if (from._internal_private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRepository::CopyFrom(const ListRepository& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListRepository)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRepository::IsInitialized() const {
  return true;
}

void ListRepository::InternalSwap(ListRepository* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fullname_, GetArenaForAllocation(),
      &other->fullname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clone_url_, GetArenaForAllocation(),
      &other->clone_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
  swap(private__, other->private__);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRepository::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[13]);
}

// ===================================================================

class CreateDetailRepository::_Internal {
 public:
};

CreateDetailRepository::CreateDetailRepository(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.CreateDetailRepository)
}
CreateDetailRepository::CreateDetailRepository(const CreateDetailRepository& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fullname(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clone_url().empty()) {
    clone_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clone_url(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&private__, &from.private__,
    static_cast<size_t>(reinterpret_cast<char*>(&fork_) -
    reinterpret_cast<char*>(&private__)) + sizeof(fork_));
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.CreateDetailRepository)
}

inline void CreateDetailRepository::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&private__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fork_) -
    reinterpret_cast<char*>(&private__)) + sizeof(fork_));
}

CreateDetailRepository::~CreateDetailRepository() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.CreateDetailRepository)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDetailRepository::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clone_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateDetailRepository::ArenaDtor(void* object) {
  CreateDetailRepository* _this = reinterpret_cast< CreateDetailRepository* >(object);
  (void)_this;
}
void CreateDetailRepository::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDetailRepository::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDetailRepository::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.CreateDetailRepository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  fullname_.ClearToEmpty();
  description_.ClearToEmpty();
  clone_url_.ClearToEmpty();
  project_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  integration_id_.ClearToEmpty();
  ::memset(&private__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fork_) -
      reinterpret_cast<char*>(&private__)) + sizeof(fork_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDetailRepository::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateDetailRepository.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 2 [json_name = "private"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullname = 3 [json_name = "fullname"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateDetailRepository.fullname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4 [json_name = "description"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateDetailRepository.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fork = 5 [json_name = "fork"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clone_url = 6 [json_name = "cloneUrl"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clone_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateDetailRepository.clone_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 7 [json_name = "projectId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateDetailRepository.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 8 [json_name = "organizationId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateDetailRepository.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string integration_id = 9 [json_name = "integrationId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateDetailRepository.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDetailRepository::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.CreateDetailRepository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateDetailRepository.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool private = 2 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_private_(), target);
  }

  // string fullname = 3 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateDetailRepository.fullname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fullname(), target);
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateDetailRepository.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // bool fork = 5 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fork(), target);
  }

  // string clone_url = 6 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clone_url().data(), static_cast<int>(this->_internal_clone_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateDetailRepository.clone_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_clone_url(), target);
  }

  // string project_id = 7 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateDetailRepository.project_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_project_id(), target);
  }

  // string organization_id = 8 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateDetailRepository.organization_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_organization_id(), target);
  }

  // string integration_id = 9 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateDetailRepository.integration_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_integration_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.CreateDetailRepository)
  return target;
}

size_t CreateDetailRepository::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.CreateDetailRepository)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string fullname = 3 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string clone_url = 6 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clone_url());
  }

  // string project_id = 7 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string organization_id = 8 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string integration_id = 9 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  // bool private = 2 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    total_size += 1 + 1;
  }

  // bool fork = 5 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDetailRepository::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDetailRepository::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDetailRepository::GetClassData() const { return &_class_data_; }

void CreateDetailRepository::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateDetailRepository *>(to)->MergeFrom(
      static_cast<const CreateDetailRepository &>(from));
}


void CreateDetailRepository::MergeFrom(const CreateDetailRepository& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.CreateDetailRepository)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_fullname().empty()) {
    _internal_set_fullname(from._internal_fullname());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_clone_url().empty()) {
    _internal_set_clone_url(from._internal_clone_url());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  if (from._internal_private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  if (from._internal_fork() != 0) {
    _internal_set_fork(from._internal_fork());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDetailRepository::CopyFrom(const CreateDetailRepository& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.CreateDetailRepository)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDetailRepository::IsInitialized() const {
  return true;
}

void CreateDetailRepository::InternalSwap(CreateDetailRepository* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fullname_, GetArenaForAllocation(),
      &other->fullname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clone_url_, GetArenaForAllocation(),
      &other->clone_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateDetailRepository, fork_)
      + sizeof(CreateDetailRepository::fork_)
      - PROTOBUF_FIELD_OFFSET(CreateDetailRepository, private__)>(
          reinterpret_cast<char*>(&private__),
          reinterpret_cast<char*>(&other->private__));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDetailRepository::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[14]);
}

// ===================================================================

class CreateRepositoryRequest::_Internal {
 public:
  static const ::source::v1alpha1::CreateDetailRepository& repository(const CreateRepositoryRequest* msg);
};

const ::source::v1alpha1::CreateDetailRepository&
CreateRepositoryRequest::_Internal::repository(const CreateRepositoryRequest* msg) {
  return *msg->repository_;
}
CreateRepositoryRequest::CreateRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.CreateRepositoryRequest)
}
CreateRepositoryRequest::CreateRepositoryRequest(const CreateRepositoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_repository()) {
    repository_ = new ::source::v1alpha1::CreateDetailRepository(*from.repository_);
  } else {
    repository_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.CreateRepositoryRequest)
}

inline void CreateRepositoryRequest::SharedCtor() {
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
repository_ = nullptr;
}

CreateRepositoryRequest::~CreateRepositoryRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.CreateRepositoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRepositoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete repository_;
}

void CreateRepositoryRequest::ArenaDtor(void* object) {
  CreateRepositoryRequest* _this = reinterpret_cast< CreateRepositoryRequest* >(object);
  (void)_this;
}
void CreateRepositoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRepositoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRepositoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.CreateRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && repository_ != nullptr) {
    delete repository_;
  }
  repository_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRepositoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .source.v1alpha1.CreateDetailRepository repository = 1 [json_name = "repository"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_repository(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateRepositoryRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 3 [json_name = "organizationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateRepositoryRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRepositoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.CreateRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .source.v1alpha1.CreateDetailRepository repository = 1 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::repository(this), target, stream);
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateRepositoryRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_id(), target);
  }

  // string organization_id = 3 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateRepositoryRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.CreateRepositoryRequest)
  return target;
}

size_t CreateRepositoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.CreateRepositoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string organization_id = 3 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // .source.v1alpha1.CreateDetailRepository repository = 1 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repository_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRepositoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRepositoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRepositoryRequest::GetClassData() const { return &_class_data_; }

void CreateRepositoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateRepositoryRequest *>(to)->MergeFrom(
      static_cast<const CreateRepositoryRequest &>(from));
}


void CreateRepositoryRequest::MergeFrom(const CreateRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.CreateRepositoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_has_repository()) {
    _internal_mutable_repository()->::source::v1alpha1::CreateDetailRepository::MergeFrom(from._internal_repository());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRepositoryRequest::CopyFrom(const CreateRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.CreateRepositoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRepositoryRequest::IsInitialized() const {
  return true;
}

void CreateRepositoryRequest::InternalSwap(CreateRepositoryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  swap(repository_, other->repository_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRepositoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[15]);
}

// ===================================================================

class CreateRepositoryResponse::_Internal {
 public:
};

CreateRepositoryResponse::CreateRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.CreateRepositoryResponse)
}
CreateRepositoryResponse::CreateRepositoryResponse(const CreateRepositoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.CreateRepositoryResponse)
}

inline void CreateRepositoryResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateRepositoryResponse::~CreateRepositoryResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.CreateRepositoryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRepositoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRepositoryResponse::ArenaDtor(void* object) {
  CreateRepositoryResponse* _this = reinterpret_cast< CreateRepositoryResponse* >(object);
  (void)_this;
}
void CreateRepositoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRepositoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRepositoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.CreateRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRepositoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateRepositoryResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRepositoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.CreateRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateRepositoryResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.CreateRepositoryResponse)
  return target;
}

size_t CreateRepositoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.CreateRepositoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRepositoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRepositoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRepositoryResponse::GetClassData() const { return &_class_data_; }

void CreateRepositoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateRepositoryResponse *>(to)->MergeFrom(
      static_cast<const CreateRepositoryResponse &>(from));
}


void CreateRepositoryResponse::MergeFrom(const CreateRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.CreateRepositoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRepositoryResponse::CopyFrom(const CreateRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.CreateRepositoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRepositoryResponse::IsInitialized() const {
  return true;
}

void CreateRepositoryResponse::InternalSwap(CreateRepositoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRepositoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[16]);
}

// ===================================================================

class ListRepositoriesRequest::_Internal {
 public:
};

ListRepositoriesRequest::ListRepositoriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListRepositoriesRequest)
}
ListRepositoriesRequest::ListRepositoriesRequest(const ListRepositoriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListRepositoriesRequest)
}

inline void ListRepositoriesRequest::SharedCtor() {
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListRepositoriesRequest::~ListRepositoriesRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListRepositoriesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRepositoriesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListRepositoriesRequest::ArenaDtor(void* object) {
  ListRepositoriesRequest* _this = reinterpret_cast< ListRepositoriesRequest* >(object);
  (void)_this;
}
void ListRepositoriesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRepositoriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRepositoriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListRepositoriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRepositoriesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project_id = 1 [json_name = "projectId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepositoriesRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListRepositoriesRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRepositoriesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListRepositoriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepositoriesRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project_id(), target);
  }

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListRepositoriesRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListRepositoriesRequest)
  return target;
}

size_t ListRepositoriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListRepositoriesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project_id = 1 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRepositoriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRepositoriesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRepositoriesRequest::GetClassData() const { return &_class_data_; }

void ListRepositoriesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListRepositoriesRequest *>(to)->MergeFrom(
      static_cast<const ListRepositoriesRequest &>(from));
}


void ListRepositoriesRequest::MergeFrom(const ListRepositoriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListRepositoriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRepositoriesRequest::CopyFrom(const ListRepositoriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListRepositoriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRepositoriesRequest::IsInitialized() const {
  return true;
}

void ListRepositoriesRequest::InternalSwap(ListRepositoriesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRepositoriesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[17]);
}

// ===================================================================

class ListRepositoriesResponse::_Internal {
 public:
};

ListRepositoriesResponse::ListRepositoriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repositories_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListRepositoriesResponse)
}
ListRepositoriesResponse::ListRepositoriesResponse(const ListRepositoriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repositories_(from.repositories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListRepositoriesResponse)
}

inline void ListRepositoriesResponse::SharedCtor() {
}

ListRepositoriesResponse::~ListRepositoriesResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListRepositoriesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRepositoriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListRepositoriesResponse::ArenaDtor(void* object) {
  ListRepositoriesResponse* _this = reinterpret_cast< ListRepositoriesResponse* >(object);
  (void)_this;
}
void ListRepositoriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRepositoriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRepositoriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListRepositoriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repositories_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRepositoriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .source.v1alpha1.ListRepository repositories = 1 [json_name = "repositories"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repositories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRepositoriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListRepositoriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .source.v1alpha1.ListRepository repositories = 1 [json_name = "repositories"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repositories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_repositories(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListRepositoriesResponse)
  return target;
}

size_t ListRepositoriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListRepositoriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .source.v1alpha1.ListRepository repositories = 1 [json_name = "repositories"];
  total_size += 1UL * this->_internal_repositories_size();
  for (const auto& msg : this->repositories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRepositoriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRepositoriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRepositoriesResponse::GetClassData() const { return &_class_data_; }

void ListRepositoriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListRepositoriesResponse *>(to)->MergeFrom(
      static_cast<const ListRepositoriesResponse &>(from));
}


void ListRepositoriesResponse::MergeFrom(const ListRepositoriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListRepositoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repositories_.MergeFrom(from.repositories_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRepositoriesResponse::CopyFrom(const ListRepositoriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListRepositoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRepositoriesResponse::IsInitialized() const {
  return true;
}

void ListRepositoriesResponse::InternalSwap(ListRepositoriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repositories_.InternalSwap(&other->repositories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRepositoriesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[18]);
}

// ===================================================================

class GetRepositoryRequest::_Internal {
 public:
};

GetRepositoryRequest::GetRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetRepositoryRequest)
}
GetRepositoryRequest::GetRepositoryRequest(const GetRepositoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  repository_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repository_id().empty()) {
    repository_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_repository_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetRepositoryRequest)
}

inline void GetRepositoryRequest::SharedCtor() {
repository_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRepositoryRequest::~GetRepositoryRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetRepositoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRepositoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  repository_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRepositoryRequest::ArenaDtor(void* object) {
  GetRepositoryRequest* _this = reinterpret_cast< GetRepositoryRequest* >(object);
  (void)_this;
}
void GetRepositoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRepositoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRepositoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repository_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRepositoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string repository_id = 1 [json_name = "repositoryId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_repository_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.GetRepositoryRequest.repository_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRepositoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repository_id = 1 [json_name = "repositoryId"];
  if (!this->_internal_repository_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_id().data(), static_cast<int>(this->_internal_repository_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.GetRepositoryRequest.repository_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repository_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetRepositoryRequest)
  return target;
}

size_t GetRepositoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetRepositoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string repository_id = 1 [json_name = "repositoryId"];
  if (!this->_internal_repository_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRepositoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRepositoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRepositoryRequest::GetClassData() const { return &_class_data_; }

void GetRepositoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetRepositoryRequest *>(to)->MergeFrom(
      static_cast<const GetRepositoryRequest &>(from));
}


void GetRepositoryRequest::MergeFrom(const GetRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetRepositoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_repository_id().empty()) {
    _internal_set_repository_id(from._internal_repository_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRepositoryRequest::CopyFrom(const GetRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetRepositoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRepositoryRequest::IsInitialized() const {
  return true;
}

void GetRepositoryRequest::InternalSwap(GetRepositoryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &repository_id_, GetArenaForAllocation(),
      &other->repository_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRepositoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[19]);
}

// ===================================================================

class GetRepositoryResponse::_Internal {
 public:
  static const ::source::v1alpha1::DetailRepository& repository(const GetRepositoryResponse* msg);
};

const ::source::v1alpha1::DetailRepository&
GetRepositoryResponse::_Internal::repository(const GetRepositoryResponse* msg) {
  return *msg->repository_;
}
GetRepositoryResponse::GetRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetRepositoryResponse)
}
GetRepositoryResponse::GetRepositoryResponse(const GetRepositoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_repository()) {
    repository_ = new ::source::v1alpha1::DetailRepository(*from.repository_);
  } else {
    repository_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetRepositoryResponse)
}

inline void GetRepositoryResponse::SharedCtor() {
repository_ = nullptr;
}

GetRepositoryResponse::~GetRepositoryResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetRepositoryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRepositoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete repository_;
}

void GetRepositoryResponse::ArenaDtor(void* object) {
  GetRepositoryResponse* _this = reinterpret_cast< GetRepositoryResponse* >(object);
  (void)_this;
}
void GetRepositoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRepositoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRepositoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && repository_ != nullptr) {
    delete repository_;
  }
  repository_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRepositoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .source.v1alpha1.DetailRepository repository = 1 [json_name = "repository"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_repository(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRepositoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .source.v1alpha1.DetailRepository repository = 1 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::repository(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetRepositoryResponse)
  return target;
}

size_t GetRepositoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetRepositoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .source.v1alpha1.DetailRepository repository = 1 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repository_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRepositoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRepositoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRepositoryResponse::GetClassData() const { return &_class_data_; }

void GetRepositoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetRepositoryResponse *>(to)->MergeFrom(
      static_cast<const GetRepositoryResponse &>(from));
}


void GetRepositoryResponse::MergeFrom(const GetRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetRepositoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_repository()) {
    _internal_mutable_repository()->::source::v1alpha1::DetailRepository::MergeFrom(from._internal_repository());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRepositoryResponse::CopyFrom(const GetRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetRepositoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRepositoryResponse::IsInitialized() const {
  return true;
}

void GetRepositoryResponse::InternalSwap(GetRepositoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(repository_, other->repository_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRepositoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[20]);
}

// ===================================================================

class DeleteRepositoryRequest::_Internal {
 public:
};

DeleteRepositoryRequest::DeleteRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteRepositoryRequest)
}
DeleteRepositoryRequest::DeleteRepositoryRequest(const DeleteRepositoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  repository_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repository_id().empty()) {
    repository_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_repository_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteRepositoryRequest)
}

inline void DeleteRepositoryRequest::SharedCtor() {
repository_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteRepositoryRequest::~DeleteRepositoryRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteRepositoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRepositoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  repository_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRepositoryRequest::ArenaDtor(void* object) {
  DeleteRepositoryRequest* _this = reinterpret_cast< DeleteRepositoryRequest* >(object);
  (void)_this;
}
void DeleteRepositoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRepositoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRepositoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repository_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRepositoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string repository_id = 1 [json_name = "repositoryId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_repository_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteRepositoryRequest.repository_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRepositoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repository_id = 1 [json_name = "repositoryId"];
  if (!this->_internal_repository_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_id().data(), static_cast<int>(this->_internal_repository_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteRepositoryRequest.repository_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repository_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteRepositoryRequest)
  return target;
}

size_t DeleteRepositoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteRepositoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string repository_id = 1 [json_name = "repositoryId"];
  if (!this->_internal_repository_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRepositoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRepositoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRepositoryRequest::GetClassData() const { return &_class_data_; }

void DeleteRepositoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteRepositoryRequest *>(to)->MergeFrom(
      static_cast<const DeleteRepositoryRequest &>(from));
}


void DeleteRepositoryRequest::MergeFrom(const DeleteRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteRepositoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_repository_id().empty()) {
    _internal_set_repository_id(from._internal_repository_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRepositoryRequest::CopyFrom(const DeleteRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteRepositoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRepositoryRequest::IsInitialized() const {
  return true;
}

void DeleteRepositoryRequest::InternalSwap(DeleteRepositoryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &repository_id_, GetArenaForAllocation(),
      &other->repository_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRepositoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[21]);
}

// ===================================================================

class DeleteRepositoryResponse::_Internal {
 public:
};

DeleteRepositoryResponse::DeleteRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteRepositoryResponse)
}
DeleteRepositoryResponse::DeleteRepositoryResponse(const DeleteRepositoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteRepositoryResponse)
}

inline void DeleteRepositoryResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteRepositoryResponse::~DeleteRepositoryResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteRepositoryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRepositoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRepositoryResponse::ArenaDtor(void* object) {
  DeleteRepositoryResponse* _this = reinterpret_cast< DeleteRepositoryResponse* >(object);
  (void)_this;
}
void DeleteRepositoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRepositoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRepositoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRepositoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteRepositoryResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRepositoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteRepositoryResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteRepositoryResponse)
  return target;
}

size_t DeleteRepositoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteRepositoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRepositoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRepositoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRepositoryResponse::GetClassData() const { return &_class_data_; }

void DeleteRepositoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteRepositoryResponse *>(to)->MergeFrom(
      static_cast<const DeleteRepositoryResponse &>(from));
}


void DeleteRepositoryResponse::MergeFrom(const DeleteRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteRepositoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRepositoryResponse::CopyFrom(const DeleteRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteRepositoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRepositoryResponse::IsInitialized() const {
  return true;
}

void DeleteRepositoryResponse::InternalSwap(DeleteRepositoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRepositoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[22]);
}

// ===================================================================

class UpdateRepositoryRequest::_Internal {
 public:
  static const ::source::v1alpha1::DetailRepository& repository(const UpdateRepositoryRequest* msg);
};

const ::source::v1alpha1::DetailRepository&
UpdateRepositoryRequest::_Internal::repository(const UpdateRepositoryRequest* msg) {
  return *msg->repository_;
}
UpdateRepositoryRequest::UpdateRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.UpdateRepositoryRequest)
}
UpdateRepositoryRequest::UpdateRepositoryRequest(const UpdateRepositoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  repository_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repository_id().empty()) {
    repository_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_repository_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_repository()) {
    repository_ = new ::source::v1alpha1::DetailRepository(*from.repository_);
  } else {
    repository_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.UpdateRepositoryRequest)
}

inline void UpdateRepositoryRequest::SharedCtor() {
repository_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
repository_ = nullptr;
}

UpdateRepositoryRequest::~UpdateRepositoryRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.UpdateRepositoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRepositoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  repository_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete repository_;
}

void UpdateRepositoryRequest::ArenaDtor(void* object) {
  UpdateRepositoryRequest* _this = reinterpret_cast< UpdateRepositoryRequest* >(object);
  (void)_this;
}
void UpdateRepositoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRepositoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRepositoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.UpdateRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repository_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && repository_ != nullptr) {
    delete repository_;
  }
  repository_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRepositoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string repository_id = 1 [json_name = "repositoryId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_repository_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.UpdateRepositoryRequest.repository_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .source.v1alpha1.DetailRepository repository = 2 [json_name = "repository"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_repository(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRepositoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.UpdateRepositoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repository_id = 1 [json_name = "repositoryId"];
  if (!this->_internal_repository_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_id().data(), static_cast<int>(this->_internal_repository_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.UpdateRepositoryRequest.repository_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repository_id(), target);
  }

  // .source.v1alpha1.DetailRepository repository = 2 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::repository(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.UpdateRepositoryRequest)
  return target;
}

size_t UpdateRepositoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.UpdateRepositoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string repository_id = 1 [json_name = "repositoryId"];
  if (!this->_internal_repository_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_id());
  }

  // .source.v1alpha1.DetailRepository repository = 2 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repository_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRepositoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRepositoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRepositoryRequest::GetClassData() const { return &_class_data_; }

void UpdateRepositoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateRepositoryRequest *>(to)->MergeFrom(
      static_cast<const UpdateRepositoryRequest &>(from));
}


void UpdateRepositoryRequest::MergeFrom(const UpdateRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.UpdateRepositoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_repository_id().empty()) {
    _internal_set_repository_id(from._internal_repository_id());
  }
  if (from._internal_has_repository()) {
    _internal_mutable_repository()->::source::v1alpha1::DetailRepository::MergeFrom(from._internal_repository());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRepositoryRequest::CopyFrom(const UpdateRepositoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.UpdateRepositoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRepositoryRequest::IsInitialized() const {
  return true;
}

void UpdateRepositoryRequest::InternalSwap(UpdateRepositoryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &repository_id_, GetArenaForAllocation(),
      &other->repository_id_, other->GetArenaForAllocation()
  );
  swap(repository_, other->repository_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRepositoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[23]);
}

// ===================================================================

class UpdateRepositoryResponse::_Internal {
 public:
};

UpdateRepositoryResponse::UpdateRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.UpdateRepositoryResponse)
}
UpdateRepositoryResponse::UpdateRepositoryResponse(const UpdateRepositoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.UpdateRepositoryResponse)
}

inline void UpdateRepositoryResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateRepositoryResponse::~UpdateRepositoryResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.UpdateRepositoryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRepositoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateRepositoryResponse::ArenaDtor(void* object) {
  UpdateRepositoryResponse* _this = reinterpret_cast< UpdateRepositoryResponse* >(object);
  (void)_this;
}
void UpdateRepositoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRepositoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRepositoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.UpdateRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRepositoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.UpdateRepositoryResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRepositoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.UpdateRepositoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.UpdateRepositoryResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.UpdateRepositoryResponse)
  return target;
}

size_t UpdateRepositoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.UpdateRepositoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRepositoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRepositoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRepositoryResponse::GetClassData() const { return &_class_data_; }

void UpdateRepositoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateRepositoryResponse *>(to)->MergeFrom(
      static_cast<const UpdateRepositoryResponse &>(from));
}


void UpdateRepositoryResponse::MergeFrom(const UpdateRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.UpdateRepositoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRepositoryResponse::CopyFrom(const UpdateRepositoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.UpdateRepositoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRepositoryResponse::IsInitialized() const {
  return true;
}

void UpdateRepositoryResponse::InternalSwap(UpdateRepositoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRepositoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[24]);
}

// ===================================================================

Integration_DataEntry_DoNotUse::Integration_DataEntry_DoNotUse() {}
Integration_DataEntry_DoNotUse::Integration_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Integration_DataEntry_DoNotUse::MergeFrom(const Integration_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Integration_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[25]);
}

// ===================================================================

Integration_MetadataEntry_DoNotUse::Integration_MetadataEntry_DoNotUse() {}
Integration_MetadataEntry_DoNotUse::Integration_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Integration_MetadataEntry_DoNotUse::MergeFrom(const Integration_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Integration_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[26]);
}

// ===================================================================

class Integration::_Internal {
 public:
  static const ::source::v1alpha1::Provider& provider(const Integration* msg);
  static const ::source::v1alpha1::AccountIntegration& account(const Integration* msg);
};

const ::source::v1alpha1::Provider&
Integration::_Internal::provider(const Integration* msg) {
  return *msg->provider_;
}
const ::source::v1alpha1::AccountIntegration&
Integration::_Internal::account(const Integration* msg) {
  return *msg->account_;
}
Integration::Integration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.Integration)
}
Integration::Integration(const Integration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_provider()) {
    provider_ = new ::source::v1alpha1::Provider(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_account()) {
    account_ = new ::source::v1alpha1::AccountIntegration(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.Integration)
}

inline void Integration::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&provider_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(account_));
}

Integration::~Integration() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.Integration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Integration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete account_;
}

void Integration::ArenaDtor(void* object) {
  Integration* _this = reinterpret_cast< Integration* >(object);
  (void)_this;
  _this->data_. ~MapField();
  _this->metadata_. ~MapField();
}
inline void Integration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Integration::ArenaDtor);
  }
}
void Integration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Integration::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.Integration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  metadata_.Clear();
  id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Integration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Integration.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Integration.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Integration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .source.v1alpha1.Provider provider = 4 [json_name = "provider"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> data = 5 [json_name = "data"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 6 [json_name = "metadata"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string user_id = 7 [json_name = "userId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Integration.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .source.v1alpha1.AccountIntegration account = 8 [json_name = "account"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Integration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.Integration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Integration.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Integration.organization_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_organization_id(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Integration.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .source.v1alpha1.Provider provider = 4 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::provider(this), target, stream);
  }

  // map<string, string> data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Integration.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Integration.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Integration_DataEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = Integration_DataEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Integration.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Integration.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Integration_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = Integration_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string user_id = 7 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Integration.user_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_id(), target);
  }

  // .source.v1alpha1.AccountIntegration account = 8 [json_name = "account"];
  if (this->_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.Integration)
  return target;
}

size_t Integration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.Integration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 5 [json_name = "data"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += Integration_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Integration_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_id = 7 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .source.v1alpha1.Provider provider = 4 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // .source.v1alpha1.AccountIntegration account = 8 [json_name = "account"];
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Integration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Integration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Integration::GetClassData() const { return &_class_data_; }

void Integration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Integration *>(to)->MergeFrom(
      static_cast<const Integration &>(from));
}


void Integration::MergeFrom(const Integration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.Integration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_provider()) {
    _internal_mutable_provider()->::source::v1alpha1::Provider::MergeFrom(from._internal_provider());
  }
  if (from._internal_has_account()) {
    _internal_mutable_account()->::source::v1alpha1::AccountIntegration::MergeFrom(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Integration::CopyFrom(const Integration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.Integration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Integration::IsInitialized() const {
  return true;
}

void Integration::InternalSwap(Integration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Integration, account_)
      + sizeof(Integration::account_)
      - PROTOBUF_FIELD_OFFSET(Integration, provider_)>(
          reinterpret_cast<char*>(&provider_),
          reinterpret_cast<char*>(&other->provider_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Integration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[27]);
}

// ===================================================================

class Repository::_Internal {
 public:
};

Repository::Repository(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.Repository)
}
Repository::Repository(const Repository& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fullname(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clone_url().empty()) {
    clone_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clone_url(), 
      GetArenaForAllocation());
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch().empty()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  ::memcpy(&private__, &from.private__,
    static_cast<size_t>(reinterpret_cast<char*>(&fork_) -
    reinterpret_cast<char*>(&private__)) + sizeof(fork_));
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.Repository)
}

inline void Repository::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&private__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fork_) -
    reinterpret_cast<char*>(&private__)) + sizeof(fork_));
}

Repository::~Repository() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.Repository)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Repository::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clone_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Repository::ArenaDtor(void* object) {
  Repository* _this = reinterpret_cast< Repository* >(object);
  (void)_this;
}
void Repository::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Repository::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Repository::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.Repository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  fullname_.ClearToEmpty();
  description_.ClearToEmpty();
  clone_url_.ClearToEmpty();
  branch_.ClearToEmpty();
  ::memset(&private__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fork_) -
      reinterpret_cast<char*>(&private__)) + sizeof(fork_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Repository::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Repository.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 2 [json_name = "private"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullname = 3 [json_name = "fullname"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Repository.fullname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4 [json_name = "description"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Repository.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fork = 5 [json_name = "fork"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clone_url = 6 [json_name = "cloneUrl"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clone_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Repository.clone_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string branch = 7 [json_name = "branch"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Repository.branch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Repository::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.Repository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Repository.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool private = 2 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_private_(), target);
  }

  // string fullname = 3 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Repository.fullname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fullname(), target);
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Repository.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // bool fork = 5 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fork(), target);
  }

  // string clone_url = 6 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clone_url().data(), static_cast<int>(this->_internal_clone_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Repository.clone_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_clone_url(), target);
  }

  // string branch = 7 [json_name = "branch"];
  if (!this->_internal_branch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Repository.branch");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_branch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.Repository)
  return target;
}

size_t Repository::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.Repository)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string fullname = 3 [json_name = "fullname"];
  if (!this->_internal_fullname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string clone_url = 6 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clone_url());
  }

  // string branch = 7 [json_name = "branch"];
  if (!this->_internal_branch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch());
  }

  // bool private = 2 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    total_size += 1 + 1;
  }

  // bool fork = 5 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Repository::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Repository::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Repository::GetClassData() const { return &_class_data_; }

void Repository::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Repository *>(to)->MergeFrom(
      static_cast<const Repository &>(from));
}


void Repository::MergeFrom(const Repository& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.Repository)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_fullname().empty()) {
    _internal_set_fullname(from._internal_fullname());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_clone_url().empty()) {
    _internal_set_clone_url(from._internal_clone_url());
  }
  if (!from._internal_branch().empty()) {
    _internal_set_branch(from._internal_branch());
  }
  if (from._internal_private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  if (from._internal_fork() != 0) {
    _internal_set_fork(from._internal_fork());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Repository::CopyFrom(const Repository& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.Repository)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repository::IsInitialized() const {
  return true;
}

void Repository::InternalSwap(Repository* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fullname_, GetArenaForAllocation(),
      &other->fullname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clone_url_, GetArenaForAllocation(),
      &other->clone_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Repository, fork_)
      + sizeof(Repository::fork_)
      - PROTOBUF_FIELD_OFFSET(Repository, private__)>(
          reinterpret_cast<char*>(&private__),
          reinterpret_cast<char*>(&other->private__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Repository::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[28]);
}

// ===================================================================

class AccountIntegration::_Internal {
 public:
};

AccountIntegration::AccountIntegration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.AccountIntegration)
}
AccountIntegration::AccountIntegration(const AccountIntegration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.AccountIntegration)
}

inline void AccountIntegration::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountIntegration::~AccountIntegration() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.AccountIntegration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountIntegration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountIntegration::ArenaDtor(void* object) {
  AccountIntegration* _this = reinterpret_cast< AccountIntegration* >(object);
  (void)_this;
}
void AccountIntegration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountIntegration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountIntegration::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.AccountIntegration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountIntegration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.AccountIntegration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.AccountIntegration.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountIntegration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.AccountIntegration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.AccountIntegration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.AccountIntegration.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.AccountIntegration)
  return target;
}

size_t AccountIntegration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.AccountIntegration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountIntegration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountIntegration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountIntegration::GetClassData() const { return &_class_data_; }

void AccountIntegration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountIntegration *>(to)->MergeFrom(
      static_cast<const AccountIntegration &>(from));
}


void AccountIntegration::MergeFrom(const AccountIntegration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.AccountIntegration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountIntegration::CopyFrom(const AccountIntegration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.AccountIntegration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountIntegration::IsInitialized() const {
  return true;
}

void AccountIntegration::InternalSwap(AccountIntegration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountIntegration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[29]);
}

// ===================================================================

CreateIntegrationRequest_DataEntry_DoNotUse::CreateIntegrationRequest_DataEntry_DoNotUse() {}
CreateIntegrationRequest_DataEntry_DoNotUse::CreateIntegrationRequest_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateIntegrationRequest_DataEntry_DoNotUse::MergeFrom(const CreateIntegrationRequest_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateIntegrationRequest_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[30]);
}

// ===================================================================

CreateIntegrationRequest_MetadataEntry_DoNotUse::CreateIntegrationRequest_MetadataEntry_DoNotUse() {}
CreateIntegrationRequest_MetadataEntry_DoNotUse::CreateIntegrationRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateIntegrationRequest_MetadataEntry_DoNotUse::MergeFrom(const CreateIntegrationRequest_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateIntegrationRequest_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[31]);
}

// ===================================================================

class CreateIntegrationRequest::_Internal {
 public:
  static const ::source::v1alpha1::AccountIntegration& account(const CreateIntegrationRequest* msg);
};

const ::source::v1alpha1::AccountIntegration&
CreateIntegrationRequest::_Internal::account(const CreateIntegrationRequest* msg) {
  return *msg->account_;
}
CreateIntegrationRequest::CreateIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.CreateIntegrationRequest)
}
CreateIntegrationRequest::CreateIntegrationRequest(const CreateIntegrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  provider_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_id().empty()) {
    provider_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_account()) {
    account_ = new ::source::v1alpha1::AccountIntegration(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.CreateIntegrationRequest)
}

inline void CreateIntegrationRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
provider_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_ = nullptr;
}

CreateIntegrationRequest::~CreateIntegrationRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.CreateIntegrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateIntegrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
}

void CreateIntegrationRequest::ArenaDtor(void* object) {
  CreateIntegrationRequest* _this = reinterpret_cast< CreateIntegrationRequest* >(object);
  (void)_this;
  _this->data_. ~MapField();
  _this->metadata_. ~MapField();
}
inline void CreateIntegrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CreateIntegrationRequest::ArenaDtor);
  }
}
void CreateIntegrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateIntegrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.CreateIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  metadata_.Clear();
  name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  provider_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIntegrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateIntegrationRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> data = 5 [json_name = "data"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 6 [json_name = "metadata"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string user_id = 7 [json_name = "userId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateIntegrationRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider_id = 8 [json_name = "providerId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_provider_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateIntegrationRequest.provider_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .source.v1alpha1.AccountIntegration account = 9 [json_name = "account"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 10 [json_name = "organizationId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateIntegrationRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateIntegrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.CreateIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateIntegrationRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // map<string, string> data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateIntegrationRequest.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateIntegrationRequest.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateIntegrationRequest_DataEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = CreateIntegrationRequest_DataEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateIntegrationRequest.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateIntegrationRequest.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateIntegrationRequest_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = CreateIntegrationRequest_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string user_id = 7 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateIntegrationRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_id(), target);
  }

  // string provider_id = 8 [json_name = "providerId"];
  if (!this->_internal_provider_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_id().data(), static_cast<int>(this->_internal_provider_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateIntegrationRequest.provider_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_provider_id(), target);
  }

  // .source.v1alpha1.AccountIntegration account = 9 [json_name = "account"];
  if (this->_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::account(this), target, stream);
  }

  // string organization_id = 10 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateIntegrationRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.CreateIntegrationRequest)
  return target;
}

size_t CreateIntegrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.CreateIntegrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 5 [json_name = "data"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += CreateIntegrationRequest_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += CreateIntegrationRequest_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_id = 7 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string provider_id = 8 [json_name = "providerId"];
  if (!this->_internal_provider_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_id());
  }

  // string organization_id = 10 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // .source.v1alpha1.AccountIntegration account = 9 [json_name = "account"];
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIntegrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateIntegrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIntegrationRequest::GetClassData() const { return &_class_data_; }

void CreateIntegrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateIntegrationRequest *>(to)->MergeFrom(
      static_cast<const CreateIntegrationRequest &>(from));
}


void CreateIntegrationRequest::MergeFrom(const CreateIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.CreateIntegrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_provider_id().empty()) {
    _internal_set_provider_id(from._internal_provider_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_has_account()) {
    _internal_mutable_account()->::source::v1alpha1::AccountIntegration::MergeFrom(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIntegrationRequest::CopyFrom(const CreateIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.CreateIntegrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIntegrationRequest::IsInitialized() const {
  return true;
}

void CreateIntegrationRequest::InternalSwap(CreateIntegrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_id_, GetArenaForAllocation(),
      &other->provider_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIntegrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[32]);
}

// ===================================================================

class CreateIntegrationResponse::_Internal {
 public:
};

CreateIntegrationResponse::CreateIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.CreateIntegrationResponse)
}
CreateIntegrationResponse::CreateIntegrationResponse(const CreateIntegrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.CreateIntegrationResponse)
}

inline void CreateIntegrationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateIntegrationResponse::~CreateIntegrationResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.CreateIntegrationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateIntegrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateIntegrationResponse::ArenaDtor(void* object) {
  CreateIntegrationResponse* _this = reinterpret_cast< CreateIntegrationResponse* >(object);
  (void)_this;
}
void CreateIntegrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateIntegrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateIntegrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.CreateIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  integration_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIntegrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateIntegrationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string integration_id = 3 [json_name = "integrationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateIntegrationResponse.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateIntegrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.CreateIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateIntegrationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string integration_id = 3 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateIntegrationResponse.integration_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_integration_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.CreateIntegrationResponse)
  return target;
}

size_t CreateIntegrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.CreateIntegrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string integration_id = 3 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIntegrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateIntegrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIntegrationResponse::GetClassData() const { return &_class_data_; }

void CreateIntegrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateIntegrationResponse *>(to)->MergeFrom(
      static_cast<const CreateIntegrationResponse &>(from));
}


void CreateIntegrationResponse::MergeFrom(const CreateIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.CreateIntegrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIntegrationResponse::CopyFrom(const CreateIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.CreateIntegrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIntegrationResponse::IsInitialized() const {
  return true;
}

void CreateIntegrationResponse::InternalSwap(CreateIntegrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIntegrationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[33]);
}

// ===================================================================

class ListIntegrationsRequest::_Internal {
 public:
};

ListIntegrationsRequest::ListIntegrationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListIntegrationsRequest)
}
ListIntegrationsRequest::ListIntegrationsRequest(const ListIntegrationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  organization_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_uid().empty()) {
    organization_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_uid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListIntegrationsRequest)
}

inline void ListIntegrationsRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListIntegrationsRequest::~ListIntegrationsRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListIntegrationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListIntegrationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListIntegrationsRequest::ArenaDtor(void* object) {
  ListIntegrationsRequest* _this = reinterpret_cast< ListIntegrationsRequest* >(object);
  (void)_this;
}
void ListIntegrationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIntegrationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListIntegrationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListIntegrationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  organization_uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIntegrationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListIntegrationsRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_uid = 3 [json_name = "organizationUid"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_organization_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListIntegrationsRequest.organization_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListIntegrationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListIntegrationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListIntegrationsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string organization_uid = 3 [json_name = "organizationUid"];
  if (!this->_internal_organization_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_uid().data(), static_cast<int>(this->_internal_organization_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListIntegrationsRequest.organization_uid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_organization_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListIntegrationsRequest)
  return target;
}

size_t ListIntegrationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListIntegrationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string organization_uid = 3 [json_name = "organizationUid"];
  if (!this->_internal_organization_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListIntegrationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListIntegrationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListIntegrationsRequest::GetClassData() const { return &_class_data_; }

void ListIntegrationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListIntegrationsRequest *>(to)->MergeFrom(
      static_cast<const ListIntegrationsRequest &>(from));
}


void ListIntegrationsRequest::MergeFrom(const ListIntegrationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListIntegrationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_organization_uid().empty()) {
    _internal_set_organization_uid(from._internal_organization_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListIntegrationsRequest::CopyFrom(const ListIntegrationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListIntegrationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIntegrationsRequest::IsInitialized() const {
  return true;
}

void ListIntegrationsRequest::InternalSwap(ListIntegrationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_uid_, GetArenaForAllocation(),
      &other->organization_uid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIntegrationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[34]);
}

// ===================================================================

class ListIntegrationsResponse::_Internal {
 public:
};

ListIntegrationsResponse::ListIntegrationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  integrations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListIntegrationsResponse)
}
ListIntegrationsResponse::ListIntegrationsResponse(const ListIntegrationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      integrations_(from.integrations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListIntegrationsResponse)
}

inline void ListIntegrationsResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListIntegrationsResponse::~ListIntegrationsResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListIntegrationsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListIntegrationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListIntegrationsResponse::ArenaDtor(void* object) {
  ListIntegrationsResponse* _this = reinterpret_cast< ListIntegrationsResponse* >(object);
  (void)_this;
}
void ListIntegrationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIntegrationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListIntegrationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListIntegrationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  integrations_.Clear();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIntegrationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .source.v1alpha1.Integration integrations = 1 [json_name = "integrations"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_integrations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.ListIntegrationsResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListIntegrationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListIntegrationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Integration integrations = 1 [json_name = "integrations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_integrations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_integrations(i), target, stream);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.ListIntegrationsResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListIntegrationsResponse)
  return target;
}

size_t ListIntegrationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListIntegrationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Integration integrations = 1 [json_name = "integrations"];
  total_size += 1UL * this->_internal_integrations_size();
  for (const auto& msg : this->integrations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListIntegrationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListIntegrationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListIntegrationsResponse::GetClassData() const { return &_class_data_; }

void ListIntegrationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListIntegrationsResponse *>(to)->MergeFrom(
      static_cast<const ListIntegrationsResponse &>(from));
}


void ListIntegrationsResponse::MergeFrom(const ListIntegrationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListIntegrationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  integrations_.MergeFrom(from.integrations_);
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListIntegrationsResponse::CopyFrom(const ListIntegrationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListIntegrationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIntegrationsResponse::IsInitialized() const {
  return true;
}

void ListIntegrationsResponse::InternalSwap(ListIntegrationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  integrations_.InternalSwap(&other->integrations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIntegrationsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[35]);
}

// ===================================================================

class GetIntegrationRequest::_Internal {
 public:
};

GetIntegrationRequest::GetIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetIntegrationRequest)
}
GetIntegrationRequest::GetIntegrationRequest(const GetIntegrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetIntegrationRequest)
}

inline void GetIntegrationRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetIntegrationRequest::~GetIntegrationRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetIntegrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetIntegrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetIntegrationRequest::ArenaDtor(void* object) {
  GetIntegrationRequest* _this = reinterpret_cast< GetIntegrationRequest* >(object);
  (void)_this;
}
void GetIntegrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIntegrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetIntegrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIntegrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.GetIntegrationRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIntegrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.GetIntegrationRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetIntegrationRequest)
  return target;
}

size_t GetIntegrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetIntegrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIntegrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetIntegrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIntegrationRequest::GetClassData() const { return &_class_data_; }

void GetIntegrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetIntegrationRequest *>(to)->MergeFrom(
      static_cast<const GetIntegrationRequest &>(from));
}


void GetIntegrationRequest::MergeFrom(const GetIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetIntegrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIntegrationRequest::CopyFrom(const GetIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetIntegrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIntegrationRequest::IsInitialized() const {
  return true;
}

void GetIntegrationRequest::InternalSwap(GetIntegrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIntegrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[36]);
}

// ===================================================================

class GetIntegrationResponse::_Internal {
 public:
  static const ::source::v1alpha1::Integration& integration(const GetIntegrationResponse* msg);
};

const ::source::v1alpha1::Integration&
GetIntegrationResponse::_Internal::integration(const GetIntegrationResponse* msg) {
  return *msg->integration_;
}
GetIntegrationResponse::GetIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetIntegrationResponse)
}
GetIntegrationResponse::GetIntegrationResponse(const GetIntegrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_integration()) {
    integration_ = new ::source::v1alpha1::Integration(*from.integration_);
  } else {
    integration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetIntegrationResponse)
}

inline void GetIntegrationResponse::SharedCtor() {
integration_ = nullptr;
}

GetIntegrationResponse::~GetIntegrationResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetIntegrationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetIntegrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete integration_;
}

void GetIntegrationResponse::ArenaDtor(void* object) {
  GetIntegrationResponse* _this = reinterpret_cast< GetIntegrationResponse* >(object);
  (void)_this;
}
void GetIntegrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIntegrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetIntegrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && integration_ != nullptr) {
    delete integration_;
  }
  integration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIntegrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .source.v1alpha1.Integration integration = 1 [json_name = "integration"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_integration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIntegrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .source.v1alpha1.Integration integration = 1 [json_name = "integration"];
  if (this->_internal_has_integration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::integration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetIntegrationResponse)
  return target;
}

size_t GetIntegrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetIntegrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .source.v1alpha1.Integration integration = 1 [json_name = "integration"];
  if (this->_internal_has_integration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *integration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIntegrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetIntegrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIntegrationResponse::GetClassData() const { return &_class_data_; }

void GetIntegrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetIntegrationResponse *>(to)->MergeFrom(
      static_cast<const GetIntegrationResponse &>(from));
}


void GetIntegrationResponse::MergeFrom(const GetIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetIntegrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_integration()) {
    _internal_mutable_integration()->::source::v1alpha1::Integration::MergeFrom(from._internal_integration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIntegrationResponse::CopyFrom(const GetIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetIntegrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIntegrationResponse::IsInitialized() const {
  return true;
}

void GetIntegrationResponse::InternalSwap(GetIntegrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(integration_, other->integration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIntegrationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[37]);
}

// ===================================================================

class UpdateIntegrationRequest::_Internal {
 public:
  static const ::source::v1alpha1::CreateIntegrationRequest& integrations(const UpdateIntegrationRequest* msg);
};

const ::source::v1alpha1::CreateIntegrationRequest&
UpdateIntegrationRequest::_Internal::integrations(const UpdateIntegrationRequest* msg) {
  return *msg->integrations_;
}
UpdateIntegrationRequest::UpdateIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.UpdateIntegrationRequest)
}
UpdateIntegrationRequest::UpdateIntegrationRequest(const UpdateIntegrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_integrations()) {
    integrations_ = new ::source::v1alpha1::CreateIntegrationRequest(*from.integrations_);
  } else {
    integrations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.UpdateIntegrationRequest)
}

inline void UpdateIntegrationRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integrations_ = nullptr;
}

UpdateIntegrationRequest::~UpdateIntegrationRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.UpdateIntegrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateIntegrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete integrations_;
}

void UpdateIntegrationRequest::ArenaDtor(void* object) {
  UpdateIntegrationRequest* _this = reinterpret_cast< UpdateIntegrationRequest* >(object);
  (void)_this;
}
void UpdateIntegrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateIntegrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateIntegrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.UpdateIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && integrations_ != nullptr) {
    delete integrations_;
  }
  integrations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateIntegrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.UpdateIntegrationRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .source.v1alpha1.CreateIntegrationRequest integrations = 2 [json_name = "integrations"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_integrations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateIntegrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.UpdateIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.UpdateIntegrationRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .source.v1alpha1.CreateIntegrationRequest integrations = 2 [json_name = "integrations"];
  if (this->_internal_has_integrations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::integrations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.UpdateIntegrationRequest)
  return target;
}

size_t UpdateIntegrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.UpdateIntegrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .source.v1alpha1.CreateIntegrationRequest integrations = 2 [json_name = "integrations"];
  if (this->_internal_has_integrations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *integrations_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateIntegrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateIntegrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateIntegrationRequest::GetClassData() const { return &_class_data_; }

void UpdateIntegrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateIntegrationRequest *>(to)->MergeFrom(
      static_cast<const UpdateIntegrationRequest &>(from));
}


void UpdateIntegrationRequest::MergeFrom(const UpdateIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.UpdateIntegrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_integrations()) {
    _internal_mutable_integrations()->::source::v1alpha1::CreateIntegrationRequest::MergeFrom(from._internal_integrations());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateIntegrationRequest::CopyFrom(const UpdateIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.UpdateIntegrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateIntegrationRequest::IsInitialized() const {
  return true;
}

void UpdateIntegrationRequest::InternalSwap(UpdateIntegrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  swap(integrations_, other->integrations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateIntegrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[38]);
}

// ===================================================================

class UpdateIntegrationResponse::_Internal {
 public:
};

UpdateIntegrationResponse::UpdateIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.UpdateIntegrationResponse)
}
UpdateIntegrationResponse::UpdateIntegrationResponse(const UpdateIntegrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.UpdateIntegrationResponse)
}

inline void UpdateIntegrationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateIntegrationResponse::~UpdateIntegrationResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.UpdateIntegrationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateIntegrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateIntegrationResponse::ArenaDtor(void* object) {
  UpdateIntegrationResponse* _this = reinterpret_cast< UpdateIntegrationResponse* >(object);
  (void)_this;
}
void UpdateIntegrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateIntegrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateIntegrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.UpdateIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateIntegrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.UpdateIntegrationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateIntegrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.UpdateIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.UpdateIntegrationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.UpdateIntegrationResponse)
  return target;
}

size_t UpdateIntegrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.UpdateIntegrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateIntegrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateIntegrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateIntegrationResponse::GetClassData() const { return &_class_data_; }

void UpdateIntegrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateIntegrationResponse *>(to)->MergeFrom(
      static_cast<const UpdateIntegrationResponse &>(from));
}


void UpdateIntegrationResponse::MergeFrom(const UpdateIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.UpdateIntegrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateIntegrationResponse::CopyFrom(const UpdateIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.UpdateIntegrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateIntegrationResponse::IsInitialized() const {
  return true;
}

void UpdateIntegrationResponse::InternalSwap(UpdateIntegrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateIntegrationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[39]);
}

// ===================================================================

class DeleteIntegrationRequest::_Internal {
 public:
};

DeleteIntegrationRequest::DeleteIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteIntegrationRequest)
}
DeleteIntegrationRequest::DeleteIntegrationRequest(const DeleteIntegrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteIntegrationRequest)
}

inline void DeleteIntegrationRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteIntegrationRequest::~DeleteIntegrationRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteIntegrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteIntegrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteIntegrationRequest::ArenaDtor(void* object) {
  DeleteIntegrationRequest* _this = reinterpret_cast< DeleteIntegrationRequest* >(object);
  (void)_this;
}
void DeleteIntegrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteIntegrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteIntegrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteIntegrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteIntegrationRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteIntegrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteIntegrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteIntegrationRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteIntegrationRequest)
  return target;
}

size_t DeleteIntegrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteIntegrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteIntegrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteIntegrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteIntegrationRequest::GetClassData() const { return &_class_data_; }

void DeleteIntegrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteIntegrationRequest *>(to)->MergeFrom(
      static_cast<const DeleteIntegrationRequest &>(from));
}


void DeleteIntegrationRequest::MergeFrom(const DeleteIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteIntegrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteIntegrationRequest::CopyFrom(const DeleteIntegrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteIntegrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteIntegrationRequest::IsInitialized() const {
  return true;
}

void DeleteIntegrationRequest::InternalSwap(DeleteIntegrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteIntegrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[40]);
}

// ===================================================================

class DeleteIntegrationResponse::_Internal {
 public:
};

DeleteIntegrationResponse::DeleteIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteIntegrationResponse)
}
DeleteIntegrationResponse::DeleteIntegrationResponse(const DeleteIntegrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteIntegrationResponse)
}

inline void DeleteIntegrationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteIntegrationResponse::~DeleteIntegrationResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteIntegrationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteIntegrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteIntegrationResponse::ArenaDtor(void* object) {
  DeleteIntegrationResponse* _this = reinterpret_cast< DeleteIntegrationResponse* >(object);
  (void)_this;
}
void DeleteIntegrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteIntegrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteIntegrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteIntegrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteIntegrationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteIntegrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteIntegrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteIntegrationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteIntegrationResponse)
  return target;
}

size_t DeleteIntegrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteIntegrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteIntegrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteIntegrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteIntegrationResponse::GetClassData() const { return &_class_data_; }

void DeleteIntegrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteIntegrationResponse *>(to)->MergeFrom(
      static_cast<const DeleteIntegrationResponse &>(from));
}


void DeleteIntegrationResponse::MergeFrom(const DeleteIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteIntegrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteIntegrationResponse::CopyFrom(const DeleteIntegrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteIntegrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteIntegrationResponse::IsInitialized() const {
  return true;
}

void DeleteIntegrationResponse::InternalSwap(DeleteIntegrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteIntegrationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[41]);
}

// ===================================================================

Provider_DataEntry_DoNotUse::Provider_DataEntry_DoNotUse() {}
Provider_DataEntry_DoNotUse::Provider_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Provider_DataEntry_DoNotUse::MergeFrom(const Provider_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Provider_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[42]);
}

// ===================================================================

Provider_MetadataEntry_DoNotUse::Provider_MetadataEntry_DoNotUse() {}
Provider_MetadataEntry_DoNotUse::Provider_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Provider_MetadataEntry_DoNotUse::MergeFrom(const Provider_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Provider_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[43]);
}

// ===================================================================

class Provider::_Internal {
 public:
};

Provider::Provider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.Provider)
}
Provider::Provider(const Provider& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logo().empty()) {
    logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logo(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.Provider)
}

inline void Provider::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Provider::~Provider() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.Provider)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Provider::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Provider::ArenaDtor(void* object) {
  Provider* _this = reinterpret_cast< Provider* >(object);
  (void)_this;
  _this->data_. ~MapField();
  _this->metadata_. ~MapField();
}
inline void Provider::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Provider::ArenaDtor);
  }
}
void Provider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Provider::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.Provider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  metadata_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  logo_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Provider::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Provider.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Provider.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3 [json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Provider.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logo = 4 [json_name = "logo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.Provider.logo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> data = 5 [json_name = "data"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 6 [json_name = "metadata"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Provider::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.Provider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Provider.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Provider.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Provider.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string logo = 4 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.Provider.logo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_logo(), target);
  }

  // map<string, string> data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Provider.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Provider.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Provider_DataEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = Provider_DataEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Provider.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.Provider.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Provider_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = Provider_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.Provider)
  return target;
}

size_t Provider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.Provider)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 5 [json_name = "data"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += Provider_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Provider_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string logo = 4 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Provider::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Provider::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Provider::GetClassData() const { return &_class_data_; }

void Provider::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Provider *>(to)->MergeFrom(
      static_cast<const Provider &>(from));
}


void Provider::MergeFrom(const Provider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.Provider)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_logo().empty()) {
    _internal_set_logo(from._internal_logo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Provider::CopyFrom(const Provider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.Provider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Provider::IsInitialized() const {
  return true;
}

void Provider::InternalSwap(Provider* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logo_, GetArenaForAllocation(),
      &other->logo_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Provider::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[44]);
}

// ===================================================================

class DeleteProviderRequest::_Internal {
 public:
};

DeleteProviderRequest::DeleteProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteProviderRequest)
}
DeleteProviderRequest::DeleteProviderRequest(const DeleteProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteProviderRequest)
}

inline void DeleteProviderRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteProviderRequest::~DeleteProviderRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteProviderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteProviderRequest::ArenaDtor(void* object) {
  DeleteProviderRequest* _this = reinterpret_cast< DeleteProviderRequest* >(object);
  (void)_this;
}
void DeleteProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteProviderRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteProviderRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteProviderRequest)
  return target;
}

size_t DeleteProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteProviderRequest::GetClassData() const { return &_class_data_; }

void DeleteProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteProviderRequest *>(to)->MergeFrom(
      static_cast<const DeleteProviderRequest &>(from));
}


void DeleteProviderRequest::MergeFrom(const DeleteProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteProviderRequest::CopyFrom(const DeleteProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteProviderRequest::IsInitialized() const {
  return true;
}

void DeleteProviderRequest::InternalSwap(DeleteProviderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteProviderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[45]);
}

// ===================================================================

class DeleteProviderResponse::_Internal {
 public:
};

DeleteProviderResponse::DeleteProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.DeleteProviderResponse)
}
DeleteProviderResponse::DeleteProviderResponse(const DeleteProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.DeleteProviderResponse)
}

inline void DeleteProviderResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteProviderResponse::~DeleteProviderResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.DeleteProviderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteProviderResponse::ArenaDtor(void* object) {
  DeleteProviderResponse* _this = reinterpret_cast< DeleteProviderResponse* >(object);
  (void)_this;
}
void DeleteProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.DeleteProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.DeleteProviderResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.DeleteProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.DeleteProviderResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.DeleteProviderResponse)
  return target;
}

size_t DeleteProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.DeleteProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteProviderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteProviderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteProviderResponse::GetClassData() const { return &_class_data_; }

void DeleteProviderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteProviderResponse *>(to)->MergeFrom(
      static_cast<const DeleteProviderResponse &>(from));
}


void DeleteProviderResponse::MergeFrom(const DeleteProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.DeleteProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteProviderResponse::CopyFrom(const DeleteProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.DeleteProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteProviderResponse::IsInitialized() const {
  return true;
}

void DeleteProviderResponse::InternalSwap(DeleteProviderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteProviderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[46]);
}

// ===================================================================

class UpdateProviderRequest::_Internal {
 public:
  static const ::source::v1alpha1::CreateProviderRequest& provider(const UpdateProviderRequest* msg);
};

const ::source::v1alpha1::CreateProviderRequest&
UpdateProviderRequest::_Internal::provider(const UpdateProviderRequest* msg) {
  return *msg->provider_;
}
UpdateProviderRequest::UpdateProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.UpdateProviderRequest)
}
UpdateProviderRequest::UpdateProviderRequest(const UpdateProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_provider()) {
    provider_ = new ::source::v1alpha1::CreateProviderRequest(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.UpdateProviderRequest)
}

inline void UpdateProviderRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
provider_ = nullptr;
}

UpdateProviderRequest::~UpdateProviderRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.UpdateProviderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete provider_;
}

void UpdateProviderRequest::ArenaDtor(void* object) {
  UpdateProviderRequest* _this = reinterpret_cast< UpdateProviderRequest* >(object);
  (void)_this;
}
void UpdateProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.UpdateProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.UpdateProviderRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .source.v1alpha1.CreateProviderRequest provider = 2 [json_name = "provider"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.UpdateProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.UpdateProviderRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .source.v1alpha1.CreateProviderRequest provider = 2 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::provider(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.UpdateProviderRequest)
  return target;
}

size_t UpdateProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.UpdateProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .source.v1alpha1.CreateProviderRequest provider = 2 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProviderRequest::GetClassData() const { return &_class_data_; }

void UpdateProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProviderRequest *>(to)->MergeFrom(
      static_cast<const UpdateProviderRequest &>(from));
}


void UpdateProviderRequest::MergeFrom(const UpdateProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.UpdateProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_provider()) {
    _internal_mutable_provider()->::source::v1alpha1::CreateProviderRequest::MergeFrom(from._internal_provider());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProviderRequest::CopyFrom(const UpdateProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.UpdateProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProviderRequest::IsInitialized() const {
  return true;
}

void UpdateProviderRequest::InternalSwap(UpdateProviderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  swap(provider_, other->provider_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProviderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[47]);
}

// ===================================================================

class UpdateProviderResponse::_Internal {
 public:
};

UpdateProviderResponse::UpdateProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.UpdateProviderResponse)
}
UpdateProviderResponse::UpdateProviderResponse(const UpdateProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.UpdateProviderResponse)
}

inline void UpdateProviderResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateProviderResponse::~UpdateProviderResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.UpdateProviderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateProviderResponse::ArenaDtor(void* object) {
  UpdateProviderResponse* _this = reinterpret_cast< UpdateProviderResponse* >(object);
  (void)_this;
}
void UpdateProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.UpdateProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.UpdateProviderResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.UpdateProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.UpdateProviderResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.UpdateProviderResponse)
  return target;
}

size_t UpdateProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.UpdateProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProviderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProviderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProviderResponse::GetClassData() const { return &_class_data_; }

void UpdateProviderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProviderResponse *>(to)->MergeFrom(
      static_cast<const UpdateProviderResponse &>(from));
}


void UpdateProviderResponse::MergeFrom(const UpdateProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.UpdateProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProviderResponse::CopyFrom(const UpdateProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.UpdateProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProviderResponse::IsInitialized() const {
  return true;
}

void UpdateProviderResponse::InternalSwap(UpdateProviderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProviderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[48]);
}

// ===================================================================

class GetProviderRequest::_Internal {
 public:
};

GetProviderRequest::GetProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetProviderRequest)
}
GetProviderRequest::GetProviderRequest(const GetProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetProviderRequest)
}

inline void GetProviderRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProviderRequest::~GetProviderRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetProviderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProviderRequest::ArenaDtor(void* object) {
  GetProviderRequest* _this = reinterpret_cast< GetProviderRequest* >(object);
  (void)_this;
}
void GetProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.GetProviderRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.GetProviderRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetProviderRequest)
  return target;
}

size_t GetProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProviderRequest::GetClassData() const { return &_class_data_; }

void GetProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetProviderRequest *>(to)->MergeFrom(
      static_cast<const GetProviderRequest &>(from));
}


void GetProviderRequest::MergeFrom(const GetProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProviderRequest::CopyFrom(const GetProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProviderRequest::IsInitialized() const {
  return true;
}

void GetProviderRequest::InternalSwap(GetProviderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProviderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[49]);
}

// ===================================================================

class GetProviderResponse::_Internal {
 public:
  static const ::source::v1alpha1::Provider& provider(const GetProviderResponse* msg);
};

const ::source::v1alpha1::Provider&
GetProviderResponse::_Internal::provider(const GetProviderResponse* msg) {
  return *msg->provider_;
}
GetProviderResponse::GetProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.GetProviderResponse)
}
GetProviderResponse::GetProviderResponse(const GetProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_provider()) {
    provider_ = new ::source::v1alpha1::Provider(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.GetProviderResponse)
}

inline void GetProviderResponse::SharedCtor() {
provider_ = nullptr;
}

GetProviderResponse::~GetProviderResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.GetProviderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete provider_;
}

void GetProviderResponse::ArenaDtor(void* object) {
  GetProviderResponse* _this = reinterpret_cast< GetProviderResponse* >(object);
  (void)_this;
}
void GetProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.GetProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.GetProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::provider(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.GetProviderResponse)
  return target;
}

size_t GetProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.GetProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
  if (this->_internal_has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProviderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProviderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProviderResponse::GetClassData() const { return &_class_data_; }

void GetProviderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetProviderResponse *>(to)->MergeFrom(
      static_cast<const GetProviderResponse &>(from));
}


void GetProviderResponse::MergeFrom(const GetProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.GetProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_provider()) {
    _internal_mutable_provider()->::source::v1alpha1::Provider::MergeFrom(from._internal_provider());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProviderResponse::CopyFrom(const GetProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.GetProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProviderResponse::IsInitialized() const {
  return true;
}

void GetProviderResponse::InternalSwap(GetProviderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(provider_, other->provider_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProviderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[50]);
}

// ===================================================================

CreateProviderRequest_DataEntry_DoNotUse::CreateProviderRequest_DataEntry_DoNotUse() {}
CreateProviderRequest_DataEntry_DoNotUse::CreateProviderRequest_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateProviderRequest_DataEntry_DoNotUse::MergeFrom(const CreateProviderRequest_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateProviderRequest_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[51]);
}

// ===================================================================

CreateProviderRequest_MetadataEntry_DoNotUse::CreateProviderRequest_MetadataEntry_DoNotUse() {}
CreateProviderRequest_MetadataEntry_DoNotUse::CreateProviderRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateProviderRequest_MetadataEntry_DoNotUse::MergeFrom(const CreateProviderRequest_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateProviderRequest_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[52]);
}

// ===================================================================

class CreateProviderRequest::_Internal {
 public:
};

CreateProviderRequest::CreateProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.CreateProviderRequest)
}
CreateProviderRequest::CreateProviderRequest(const CreateProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logo().empty()) {
    logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logo(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.CreateProviderRequest)
}

inline void CreateProviderRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProviderRequest::~CreateProviderRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.CreateProviderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProviderRequest::ArenaDtor(void* object) {
  CreateProviderRequest* _this = reinterpret_cast< CreateProviderRequest* >(object);
  (void)_this;
  _this->data_. ~MapField();
  _this->metadata_. ~MapField();
}
inline void CreateProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CreateProviderRequest::ArenaDtor);
  }
}
void CreateProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.CreateProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  metadata_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  logo_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateProviderRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateProviderRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logo = 3 [json_name = "logo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateProviderRequest.logo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> data = 5 [json_name = "data"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 6 [json_name = "metadata"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.CreateProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateProviderRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateProviderRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string logo = 3 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateProviderRequest.logo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_logo(), target);
  }

  // map<string, string> data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateProviderRequest.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateProviderRequest.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateProviderRequest_DataEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = CreateProviderRequest_DataEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateProviderRequest.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "source.v1alpha1.CreateProviderRequest.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateProviderRequest_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = CreateProviderRequest_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.CreateProviderRequest)
  return target;
}

size_t CreateProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.CreateProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 5 [json_name = "data"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += CreateProviderRequest_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> metadata = 6 [json_name = "metadata"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += CreateProviderRequest_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string logo = 3 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProviderRequest::GetClassData() const { return &_class_data_; }

void CreateProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProviderRequest *>(to)->MergeFrom(
      static_cast<const CreateProviderRequest &>(from));
}


void CreateProviderRequest::MergeFrom(const CreateProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.CreateProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_logo().empty()) {
    _internal_set_logo(from._internal_logo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProviderRequest::CopyFrom(const CreateProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.CreateProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProviderRequest::IsInitialized() const {
  return true;
}

void CreateProviderRequest::InternalSwap(CreateProviderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logo_, GetArenaForAllocation(),
      &other->logo_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProviderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[53]);
}

// ===================================================================

class CreateProviderResponse::_Internal {
 public:
};

CreateProviderResponse::CreateProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.CreateProviderResponse)
}
CreateProviderResponse::CreateProviderResponse(const CreateProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.CreateProviderResponse)
}

inline void CreateProviderResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProviderResponse::~CreateProviderResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.CreateProviderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProviderResponse::ArenaDtor(void* object) {
  CreateProviderResponse* _this = reinterpret_cast< CreateProviderResponse* >(object);
  (void)_this;
}
void CreateProviderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateProviderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.CreateProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProviderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "source.v1alpha1.CreateProviderResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProviderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.CreateProviderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "source.v1alpha1.CreateProviderResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.CreateProviderResponse)
  return target;
}

size_t CreateProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.CreateProviderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProviderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProviderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProviderResponse::GetClassData() const { return &_class_data_; }

void CreateProviderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProviderResponse *>(to)->MergeFrom(
      static_cast<const CreateProviderResponse &>(from));
}


void CreateProviderResponse::MergeFrom(const CreateProviderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.CreateProviderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProviderResponse::CopyFrom(const CreateProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.CreateProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProviderResponse::IsInitialized() const {
  return true;
}

void CreateProviderResponse::InternalSwap(CreateProviderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProviderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[54]);
}

// ===================================================================

class ListProvidersRequest::_Internal {
 public:
};

ListProvidersRequest::ListProvidersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListProvidersRequest)
}
ListProvidersRequest::ListProvidersRequest(const ListProvidersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListProvidersRequest)
}

inline void ListProvidersRequest::SharedCtor() {
}

ListProvidersRequest::~ListProvidersRequest() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListProvidersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProvidersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProvidersRequest::ArenaDtor(void* object) {
  ListProvidersRequest* _this = reinterpret_cast< ListProvidersRequest* >(object);
  (void)_this;
}
void ListProvidersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProvidersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProvidersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListProvidersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProvidersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProvidersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListProvidersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListProvidersRequest)
  return target;
}

size_t ListProvidersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListProvidersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProvidersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProvidersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProvidersRequest::GetClassData() const { return &_class_data_; }

void ListProvidersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProvidersRequest *>(to)->MergeFrom(
      static_cast<const ListProvidersRequest &>(from));
}


void ListProvidersRequest::MergeFrom(const ListProvidersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListProvidersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProvidersRequest::CopyFrom(const ListProvidersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListProvidersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProvidersRequest::IsInitialized() const {
  return true;
}

void ListProvidersRequest::InternalSwap(ListProvidersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProvidersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[55]);
}

// ===================================================================

class ListProvidersResponse::_Internal {
 public:
};

ListProvidersResponse::ListProvidersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  providers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:source.v1alpha1.ListProvidersResponse)
}
ListProvidersResponse::ListProvidersResponse(const ListProvidersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_pages_, &from.total_pages_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&total_pages_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:source.v1alpha1.ListProvidersResponse)
}

inline void ListProvidersResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_pages_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&total_pages_)) + sizeof(count_));
}

ListProvidersResponse::~ListProvidersResponse() {
  // @@protoc_insertion_point(destructor:source.v1alpha1.ListProvidersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProvidersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProvidersResponse::ArenaDtor(void* object) {
  ListProvidersResponse* _this = reinterpret_cast< ListProvidersResponse* >(object);
  (void)_this;
}
void ListProvidersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProvidersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProvidersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:source.v1alpha1.ListProvidersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  providers_.Clear();
  ::memset(&total_pages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&total_pages_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProvidersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .source.v1alpha1.Provider providers = 1 [json_name = "providers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 total_pages = 2 [json_name = "totalPages"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 3 [json_name = "count"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProvidersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:source.v1alpha1.ListProvidersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Provider providers = 1 [json_name = "providers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_providers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_providers(i), target, stream);
  }

  // uint32 total_pages = 2 [json_name = "totalPages"];
  if (this->_internal_total_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_pages(), target);
  }

  // uint32 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:source.v1alpha1.ListProvidersResponse)
  return target;
}

size_t ListProvidersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:source.v1alpha1.ListProvidersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .source.v1alpha1.Provider providers = 1 [json_name = "providers"];
  total_size += 1UL * this->_internal_providers_size();
  for (const auto& msg : this->providers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_pages = 2 [json_name = "totalPages"];
  if (this->_internal_total_pages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_pages());
  }

  // uint32 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProvidersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProvidersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProvidersResponse::GetClassData() const { return &_class_data_; }

void ListProvidersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProvidersResponse *>(to)->MergeFrom(
      static_cast<const ListProvidersResponse &>(from));
}


void ListProvidersResponse::MergeFrom(const ListProvidersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:source.v1alpha1.ListProvidersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  providers_.MergeFrom(from.providers_);
  if (from._internal_total_pages() != 0) {
    _internal_set_total_pages(from._internal_total_pages());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProvidersResponse::CopyFrom(const ListProvidersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:source.v1alpha1.ListProvidersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProvidersResponse::IsInitialized() const {
  return true;
}

void ListProvidersResponse::InternalSwap(ListProvidersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  providers_.InternalSwap(&other->providers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListProvidersResponse, count_)
      + sizeof(ListProvidersResponse::count_)
      - PROTOBUF_FIELD_OFFSET(ListProvidersResponse, total_pages_)>(
          reinterpret_cast<char*>(&total_pages_),
          reinterpret_cast<char*>(&other->total_pages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProvidersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_source_2fv1alpha1_2fsource_2eproto_getter, &descriptor_table_source_2fv1alpha1_2fsource_2eproto_once,
      file_level_metadata_source_2fv1alpha1_2fsource_2eproto[56]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace source
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::source::v1alpha1::AccountProvider* Arena::CreateMaybeMessage< ::source::v1alpha1::AccountProvider >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::AccountProvider >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::AccountsProvidersRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::AccountsProvidersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::AccountsProvidersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::AccountsProvidersResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::AccountsProvidersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::AccountsProvidersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetOneProviderByNameRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::GetOneProviderByNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetOneProviderByNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetOneProviderByNameResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::GetOneProviderByNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetOneProviderByNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Branch* Arena::CreateMaybeMessage< ::source::v1alpha1::Branch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Branch >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListRepositoriesProviderRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::ListRepositoriesProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListRepositoriesProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListRepositoriesProviderResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::ListRepositoriesProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListRepositoriesProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetRepositoryProviderRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::GetRepositoryProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetRepositoryProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetRepositoryProviderResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::GetRepositoryProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetRepositoryProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DetailRepository* Arena::CreateMaybeMessage< ::source::v1alpha1::DetailRepository >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DetailRepository >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListRepository* Arena::CreateMaybeMessage< ::source::v1alpha1::ListRepository >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListRepository >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateDetailRepository* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateDetailRepository >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateDetailRepository >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateRepositoryRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateRepositoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateRepositoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateRepositoryResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateRepositoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateRepositoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListRepositoriesRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::ListRepositoriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListRepositoriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListRepositoriesResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::ListRepositoriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListRepositoriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetRepositoryRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::GetRepositoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetRepositoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetRepositoryResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::GetRepositoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetRepositoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteRepositoryRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteRepositoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteRepositoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteRepositoryResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteRepositoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteRepositoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::UpdateRepositoryRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::UpdateRepositoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::UpdateRepositoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::UpdateRepositoryResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::UpdateRepositoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::UpdateRepositoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Integration_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::Integration_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Integration_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Integration_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::Integration_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Integration_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Integration* Arena::CreateMaybeMessage< ::source::v1alpha1::Integration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Integration >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Repository* Arena::CreateMaybeMessage< ::source::v1alpha1::Repository >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Repository >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::AccountIntegration* Arena::CreateMaybeMessage< ::source::v1alpha1::AccountIntegration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::AccountIntegration >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateIntegrationRequest_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateIntegrationRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateIntegrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateIntegrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateIntegrationResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateIntegrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateIntegrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListIntegrationsRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::ListIntegrationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListIntegrationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListIntegrationsResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::ListIntegrationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListIntegrationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetIntegrationRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::GetIntegrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetIntegrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetIntegrationResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::GetIntegrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetIntegrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::UpdateIntegrationRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::UpdateIntegrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::UpdateIntegrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::UpdateIntegrationResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::UpdateIntegrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::UpdateIntegrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteIntegrationRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteIntegrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteIntegrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteIntegrationResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteIntegrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteIntegrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Provider_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::Provider_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Provider_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Provider_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::Provider_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Provider_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::Provider* Arena::CreateMaybeMessage< ::source::v1alpha1::Provider >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::Provider >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteProviderRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::DeleteProviderResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::DeleteProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::DeleteProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::UpdateProviderRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::UpdateProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::UpdateProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::UpdateProviderResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::UpdateProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::UpdateProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetProviderRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::GetProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::GetProviderResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::GetProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::GetProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateProviderRequest_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateProviderRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::CreateProviderResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::CreateProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::CreateProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListProvidersRequest* Arena::CreateMaybeMessage< ::source::v1alpha1::ListProvidersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListProvidersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::source::v1alpha1::ListProvidersResponse* Arena::CreateMaybeMessage< ::source::v1alpha1::ListProvidersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::source::v1alpha1::ListProvidersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
