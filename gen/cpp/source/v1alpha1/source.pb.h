// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/v1alpha1/source.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_source_2fv1alpha1_2fsource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_source_2fv1alpha1_2fsource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_source_2fv1alpha1_2fsource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_source_2fv1alpha1_2fsource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fv1alpha1_2fsource_2eproto;
namespace source {
namespace v1alpha1 {
class CreateIntegrationRequest;
struct CreateIntegrationRequestDefaultTypeInternal;
extern CreateIntegrationRequestDefaultTypeInternal _CreateIntegrationRequest_default_instance_;
class CreateIntegrationRequest_DataEntry_DoNotUse;
struct CreateIntegrationRequest_DataEntry_DoNotUseDefaultTypeInternal;
extern CreateIntegrationRequest_DataEntry_DoNotUseDefaultTypeInternal _CreateIntegrationRequest_DataEntry_DoNotUse_default_instance_;
class CreateIntegrationResponse;
struct CreateIntegrationResponseDefaultTypeInternal;
extern CreateIntegrationResponseDefaultTypeInternal _CreateIntegrationResponse_default_instance_;
class CreateProviderRequest;
struct CreateProviderRequestDefaultTypeInternal;
extern CreateProviderRequestDefaultTypeInternal _CreateProviderRequest_default_instance_;
class CreateProviderRequest_DataEntry_DoNotUse;
struct CreateProviderRequest_DataEntry_DoNotUseDefaultTypeInternal;
extern CreateProviderRequest_DataEntry_DoNotUseDefaultTypeInternal _CreateProviderRequest_DataEntry_DoNotUse_default_instance_;
class CreateProviderResponse;
struct CreateProviderResponseDefaultTypeInternal;
extern CreateProviderResponseDefaultTypeInternal _CreateProviderResponse_default_instance_;
class DeleteIntegrationRequest;
struct DeleteIntegrationRequestDefaultTypeInternal;
extern DeleteIntegrationRequestDefaultTypeInternal _DeleteIntegrationRequest_default_instance_;
class DeleteIntegrationResponse;
struct DeleteIntegrationResponseDefaultTypeInternal;
extern DeleteIntegrationResponseDefaultTypeInternal _DeleteIntegrationResponse_default_instance_;
class DeleteProviderRequest;
struct DeleteProviderRequestDefaultTypeInternal;
extern DeleteProviderRequestDefaultTypeInternal _DeleteProviderRequest_default_instance_;
class DeleteProviderResponse;
struct DeleteProviderResponseDefaultTypeInternal;
extern DeleteProviderResponseDefaultTypeInternal _DeleteProviderResponse_default_instance_;
class GetIntegrationRequest;
struct GetIntegrationRequestDefaultTypeInternal;
extern GetIntegrationRequestDefaultTypeInternal _GetIntegrationRequest_default_instance_;
class GetIntegrationResponse;
struct GetIntegrationResponseDefaultTypeInternal;
extern GetIntegrationResponseDefaultTypeInternal _GetIntegrationResponse_default_instance_;
class GetProviderRequest;
struct GetProviderRequestDefaultTypeInternal;
extern GetProviderRequestDefaultTypeInternal _GetProviderRequest_default_instance_;
class GetProviderResponse;
struct GetProviderResponseDefaultTypeInternal;
extern GetProviderResponseDefaultTypeInternal _GetProviderResponse_default_instance_;
class Integration;
struct IntegrationDefaultTypeInternal;
extern IntegrationDefaultTypeInternal _Integration_default_instance_;
class Integration_DataEntry_DoNotUse;
struct Integration_DataEntry_DoNotUseDefaultTypeInternal;
extern Integration_DataEntry_DoNotUseDefaultTypeInternal _Integration_DataEntry_DoNotUse_default_instance_;
class ListIntegrationsRequest;
struct ListIntegrationsRequestDefaultTypeInternal;
extern ListIntegrationsRequestDefaultTypeInternal _ListIntegrationsRequest_default_instance_;
class ListIntegrationsResponse;
struct ListIntegrationsResponseDefaultTypeInternal;
extern ListIntegrationsResponseDefaultTypeInternal _ListIntegrationsResponse_default_instance_;
class ListProvidersRequest;
struct ListProvidersRequestDefaultTypeInternal;
extern ListProvidersRequestDefaultTypeInternal _ListProvidersRequest_default_instance_;
class ListProvidersResponse;
struct ListProvidersResponseDefaultTypeInternal;
extern ListProvidersResponseDefaultTypeInternal _ListProvidersResponse_default_instance_;
class Provider;
struct ProviderDefaultTypeInternal;
extern ProviderDefaultTypeInternal _Provider_default_instance_;
class Provider_DataEntry_DoNotUse;
struct Provider_DataEntry_DoNotUseDefaultTypeInternal;
extern Provider_DataEntry_DoNotUseDefaultTypeInternal _Provider_DataEntry_DoNotUse_default_instance_;
class UpdateIntegrationRequest;
struct UpdateIntegrationRequestDefaultTypeInternal;
extern UpdateIntegrationRequestDefaultTypeInternal _UpdateIntegrationRequest_default_instance_;
class UpdateIntegrationResponse;
struct UpdateIntegrationResponseDefaultTypeInternal;
extern UpdateIntegrationResponseDefaultTypeInternal _UpdateIntegrationResponse_default_instance_;
class UpdateProviderRequest;
struct UpdateProviderRequestDefaultTypeInternal;
extern UpdateProviderRequestDefaultTypeInternal _UpdateProviderRequest_default_instance_;
class UpdateProviderResponse;
struct UpdateProviderResponseDefaultTypeInternal;
extern UpdateProviderResponseDefaultTypeInternal _UpdateProviderResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace source
PROTOBUF_NAMESPACE_OPEN
template<> ::source::v1alpha1::CreateIntegrationRequest* Arena::CreateMaybeMessage<::source::v1alpha1::CreateIntegrationRequest>(Arena*);
template<> ::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::source::v1alpha1::CreateIntegrationRequest_DataEntry_DoNotUse>(Arena*);
template<> ::source::v1alpha1::CreateIntegrationResponse* Arena::CreateMaybeMessage<::source::v1alpha1::CreateIntegrationResponse>(Arena*);
template<> ::source::v1alpha1::CreateProviderRequest* Arena::CreateMaybeMessage<::source::v1alpha1::CreateProviderRequest>(Arena*);
template<> ::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::source::v1alpha1::CreateProviderRequest_DataEntry_DoNotUse>(Arena*);
template<> ::source::v1alpha1::CreateProviderResponse* Arena::CreateMaybeMessage<::source::v1alpha1::CreateProviderResponse>(Arena*);
template<> ::source::v1alpha1::DeleteIntegrationRequest* Arena::CreateMaybeMessage<::source::v1alpha1::DeleteIntegrationRequest>(Arena*);
template<> ::source::v1alpha1::DeleteIntegrationResponse* Arena::CreateMaybeMessage<::source::v1alpha1::DeleteIntegrationResponse>(Arena*);
template<> ::source::v1alpha1::DeleteProviderRequest* Arena::CreateMaybeMessage<::source::v1alpha1::DeleteProviderRequest>(Arena*);
template<> ::source::v1alpha1::DeleteProviderResponse* Arena::CreateMaybeMessage<::source::v1alpha1::DeleteProviderResponse>(Arena*);
template<> ::source::v1alpha1::GetIntegrationRequest* Arena::CreateMaybeMessage<::source::v1alpha1::GetIntegrationRequest>(Arena*);
template<> ::source::v1alpha1::GetIntegrationResponse* Arena::CreateMaybeMessage<::source::v1alpha1::GetIntegrationResponse>(Arena*);
template<> ::source::v1alpha1::GetProviderRequest* Arena::CreateMaybeMessage<::source::v1alpha1::GetProviderRequest>(Arena*);
template<> ::source::v1alpha1::GetProviderResponse* Arena::CreateMaybeMessage<::source::v1alpha1::GetProviderResponse>(Arena*);
template<> ::source::v1alpha1::Integration* Arena::CreateMaybeMessage<::source::v1alpha1::Integration>(Arena*);
template<> ::source::v1alpha1::Integration_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::source::v1alpha1::Integration_DataEntry_DoNotUse>(Arena*);
template<> ::source::v1alpha1::ListIntegrationsRequest* Arena::CreateMaybeMessage<::source::v1alpha1::ListIntegrationsRequest>(Arena*);
template<> ::source::v1alpha1::ListIntegrationsResponse* Arena::CreateMaybeMessage<::source::v1alpha1::ListIntegrationsResponse>(Arena*);
template<> ::source::v1alpha1::ListProvidersRequest* Arena::CreateMaybeMessage<::source::v1alpha1::ListProvidersRequest>(Arena*);
template<> ::source::v1alpha1::ListProvidersResponse* Arena::CreateMaybeMessage<::source::v1alpha1::ListProvidersResponse>(Arena*);
template<> ::source::v1alpha1::Provider* Arena::CreateMaybeMessage<::source::v1alpha1::Provider>(Arena*);
template<> ::source::v1alpha1::Provider_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::source::v1alpha1::Provider_DataEntry_DoNotUse>(Arena*);
template<> ::source::v1alpha1::UpdateIntegrationRequest* Arena::CreateMaybeMessage<::source::v1alpha1::UpdateIntegrationRequest>(Arena*);
template<> ::source::v1alpha1::UpdateIntegrationResponse* Arena::CreateMaybeMessage<::source::v1alpha1::UpdateIntegrationResponse>(Arena*);
template<> ::source::v1alpha1::UpdateProviderRequest* Arena::CreateMaybeMessage<::source::v1alpha1::UpdateProviderRequest>(Arena*);
template<> ::source::v1alpha1::UpdateProviderResponse* Arena::CreateMaybeMessage<::source::v1alpha1::UpdateProviderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace source {
namespace v1alpha1 {

// ===================================================================

class Integration_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Integration_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Integration_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Integration_DataEntry_DoNotUse();
  explicit constexpr Integration_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Integration_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Integration_DataEntry_DoNotUse& other);
  static const Integration_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Integration_DataEntry_DoNotUse*>(&_Integration_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.Integration.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.Integration.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Integration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.Integration) */ {
 public:
  inline Integration() : Integration(nullptr) {}
  ~Integration() override;
  explicit constexpr Integration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Integration(const Integration& from);
  Integration(Integration&& from) noexcept
    : Integration() {
    *this = ::std::move(from);
  }

  inline Integration& operator=(const Integration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Integration& operator=(Integration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Integration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Integration* internal_default_instance() {
    return reinterpret_cast<const Integration*>(
               &_Integration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Integration& a, Integration& b) {
    a.Swap(&b);
  }
  inline void Swap(Integration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Integration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Integration* New() const final {
    return new Integration();
  }

  Integration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Integration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Integration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Integration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Integration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.Integration";
  }
  protected:
  explicit Integration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kIdFieldNumber = 1,
    kNameFieldNumber = 3,
    kProviderFieldNumber = 4,
    kOrganizationIdFieldNumber = 2,
  };
  // map<string, string> data = 5 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 3 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .source.v1alpha1.Provider provider = 4 [json_name = "provider"];
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::source::v1alpha1::Provider& provider() const;
  PROTOBUF_MUST_USE_RESULT ::source::v1alpha1::Provider* release_provider();
  ::source::v1alpha1::Provider* mutable_provider();
  void set_allocated_provider(::source::v1alpha1::Provider* provider);
  private:
  const ::source::v1alpha1::Provider& _internal_provider() const;
  ::source::v1alpha1::Provider* _internal_mutable_provider();
  public:
  void unsafe_arena_set_allocated_provider(
      ::source::v1alpha1::Provider* provider);
  ::source::v1alpha1::Provider* unsafe_arena_release_provider();

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.Integration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Integration_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::source::v1alpha1::Provider* provider_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class CreateIntegrationRequest_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateIntegrationRequest_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateIntegrationRequest_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CreateIntegrationRequest_DataEntry_DoNotUse();
  explicit constexpr CreateIntegrationRequest_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateIntegrationRequest_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateIntegrationRequest_DataEntry_DoNotUse& other);
  static const CreateIntegrationRequest_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateIntegrationRequest_DataEntry_DoNotUse*>(&_CreateIntegrationRequest_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.CreateIntegrationRequest.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.CreateIntegrationRequest.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CreateIntegrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.CreateIntegrationRequest) */ {
 public:
  inline CreateIntegrationRequest() : CreateIntegrationRequest(nullptr) {}
  ~CreateIntegrationRequest() override;
  explicit constexpr CreateIntegrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateIntegrationRequest(const CreateIntegrationRequest& from);
  CreateIntegrationRequest(CreateIntegrationRequest&& from) noexcept
    : CreateIntegrationRequest() {
    *this = ::std::move(from);
  }

  inline CreateIntegrationRequest& operator=(const CreateIntegrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIntegrationRequest& operator=(CreateIntegrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIntegrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIntegrationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIntegrationRequest*>(
               &_CreateIntegrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateIntegrationRequest& a, CreateIntegrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIntegrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIntegrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIntegrationRequest* New() const final {
    return new CreateIntegrationRequest();
  }

  CreateIntegrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIntegrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateIntegrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateIntegrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIntegrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.CreateIntegrationRequest";
  }
  protected:
  explicit CreateIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kNameFieldNumber = 3,
    kProviderFieldNumber = 4,
    kOrganizationIdFieldNumber = 2,
  };
  // map<string, string> data = 5 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // string name = 3 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .source.v1alpha1.Provider provider = 4 [json_name = "provider"];
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::source::v1alpha1::Provider& provider() const;
  PROTOBUF_MUST_USE_RESULT ::source::v1alpha1::Provider* release_provider();
  ::source::v1alpha1::Provider* mutable_provider();
  void set_allocated_provider(::source::v1alpha1::Provider* provider);
  private:
  const ::source::v1alpha1::Provider& _internal_provider() const;
  ::source::v1alpha1::Provider* _internal_mutable_provider();
  public:
  void unsafe_arena_set_allocated_provider(
      ::source::v1alpha1::Provider* provider);
  ::source::v1alpha1::Provider* unsafe_arena_release_provider();

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.CreateIntegrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateIntegrationRequest_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::source::v1alpha1::Provider* provider_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class CreateIntegrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.CreateIntegrationResponse) */ {
 public:
  inline CreateIntegrationResponse() : CreateIntegrationResponse(nullptr) {}
  ~CreateIntegrationResponse() override;
  explicit constexpr CreateIntegrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateIntegrationResponse(const CreateIntegrationResponse& from);
  CreateIntegrationResponse(CreateIntegrationResponse&& from) noexcept
    : CreateIntegrationResponse() {
    *this = ::std::move(from);
  }

  inline CreateIntegrationResponse& operator=(const CreateIntegrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIntegrationResponse& operator=(CreateIntegrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIntegrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIntegrationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateIntegrationResponse*>(
               &_CreateIntegrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateIntegrationResponse& a, CreateIntegrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIntegrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIntegrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIntegrationResponse* New() const final {
    return new CreateIntegrationResponse();
  }

  CreateIntegrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIntegrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateIntegrationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateIntegrationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIntegrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.CreateIntegrationResponse";
  }
  protected:
  explicit CreateIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.CreateIntegrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class ListIntegrationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.ListIntegrationsRequest) */ {
 public:
  inline ListIntegrationsRequest() : ListIntegrationsRequest(nullptr) {}
  ~ListIntegrationsRequest() override;
  explicit constexpr ListIntegrationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListIntegrationsRequest(const ListIntegrationsRequest& from);
  ListIntegrationsRequest(ListIntegrationsRequest&& from) noexcept
    : ListIntegrationsRequest() {
    *this = ::std::move(from);
  }

  inline ListIntegrationsRequest& operator=(const ListIntegrationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIntegrationsRequest& operator=(ListIntegrationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListIntegrationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListIntegrationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListIntegrationsRequest*>(
               &_ListIntegrationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListIntegrationsRequest& a, ListIntegrationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIntegrationsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIntegrationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListIntegrationsRequest* New() const final {
    return new ListIntegrationsRequest();
  }

  ListIntegrationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListIntegrationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListIntegrationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListIntegrationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIntegrationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.ListIntegrationsRequest";
  }
  protected:
  explicit ListIntegrationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
  };
  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.ListIntegrationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class ListIntegrationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.ListIntegrationsResponse) */ {
 public:
  inline ListIntegrationsResponse() : ListIntegrationsResponse(nullptr) {}
  ~ListIntegrationsResponse() override;
  explicit constexpr ListIntegrationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListIntegrationsResponse(const ListIntegrationsResponse& from);
  ListIntegrationsResponse(ListIntegrationsResponse&& from) noexcept
    : ListIntegrationsResponse() {
    *this = ::std::move(from);
  }

  inline ListIntegrationsResponse& operator=(const ListIntegrationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIntegrationsResponse& operator=(ListIntegrationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListIntegrationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListIntegrationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListIntegrationsResponse*>(
               &_ListIntegrationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListIntegrationsResponse& a, ListIntegrationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIntegrationsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIntegrationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListIntegrationsResponse* New() const final {
    return new ListIntegrationsResponse();
  }

  ListIntegrationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListIntegrationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListIntegrationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListIntegrationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIntegrationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.ListIntegrationsResponse";
  }
  protected:
  explicit ListIntegrationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntegrationsFieldNumber = 1,
  };
  // repeated .source.v1alpha1.Integration integrations = 1 [json_name = "integrations"];
  int integrations_size() const;
  private:
  int _internal_integrations_size() const;
  public:
  void clear_integrations();
  ::source::v1alpha1::Integration* mutable_integrations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Integration >*
      mutable_integrations();
  private:
  const ::source::v1alpha1::Integration& _internal_integrations(int index) const;
  ::source::v1alpha1::Integration* _internal_add_integrations();
  public:
  const ::source::v1alpha1::Integration& integrations(int index) const;
  ::source::v1alpha1::Integration* add_integrations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Integration >&
      integrations() const;

  // @@protoc_insertion_point(class_scope:source.v1alpha1.ListIntegrationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Integration > integrations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class GetIntegrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.GetIntegrationRequest) */ {
 public:
  inline GetIntegrationRequest() : GetIntegrationRequest(nullptr) {}
  ~GetIntegrationRequest() override;
  explicit constexpr GetIntegrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIntegrationRequest(const GetIntegrationRequest& from);
  GetIntegrationRequest(GetIntegrationRequest&& from) noexcept
    : GetIntegrationRequest() {
    *this = ::std::move(from);
  }

  inline GetIntegrationRequest& operator=(const GetIntegrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIntegrationRequest& operator=(GetIntegrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIntegrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIntegrationRequest* internal_default_instance() {
    return reinterpret_cast<const GetIntegrationRequest*>(
               &_GetIntegrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetIntegrationRequest& a, GetIntegrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIntegrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIntegrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIntegrationRequest* New() const final {
    return new GetIntegrationRequest();
  }

  GetIntegrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIntegrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIntegrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetIntegrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIntegrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.GetIntegrationRequest";
  }
  protected:
  explicit GetIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.GetIntegrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class GetIntegrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.GetIntegrationResponse) */ {
 public:
  inline GetIntegrationResponse() : GetIntegrationResponse(nullptr) {}
  ~GetIntegrationResponse() override;
  explicit constexpr GetIntegrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIntegrationResponse(const GetIntegrationResponse& from);
  GetIntegrationResponse(GetIntegrationResponse&& from) noexcept
    : GetIntegrationResponse() {
    *this = ::std::move(from);
  }

  inline GetIntegrationResponse& operator=(const GetIntegrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIntegrationResponse& operator=(GetIntegrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIntegrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIntegrationResponse* internal_default_instance() {
    return reinterpret_cast<const GetIntegrationResponse*>(
               &_GetIntegrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetIntegrationResponse& a, GetIntegrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIntegrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIntegrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIntegrationResponse* New() const final {
    return new GetIntegrationResponse();
  }

  GetIntegrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIntegrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIntegrationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetIntegrationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIntegrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.GetIntegrationResponse";
  }
  protected:
  explicit GetIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntegrationFieldNumber = 1,
  };
  // .source.v1alpha1.Integration integration = 1 [json_name = "integration"];
  bool has_integration() const;
  private:
  bool _internal_has_integration() const;
  public:
  void clear_integration();
  const ::source::v1alpha1::Integration& integration() const;
  PROTOBUF_MUST_USE_RESULT ::source::v1alpha1::Integration* release_integration();
  ::source::v1alpha1::Integration* mutable_integration();
  void set_allocated_integration(::source::v1alpha1::Integration* integration);
  private:
  const ::source::v1alpha1::Integration& _internal_integration() const;
  ::source::v1alpha1::Integration* _internal_mutable_integration();
  public:
  void unsafe_arena_set_allocated_integration(
      ::source::v1alpha1::Integration* integration);
  ::source::v1alpha1::Integration* unsafe_arena_release_integration();

  // @@protoc_insertion_point(class_scope:source.v1alpha1.GetIntegrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::source::v1alpha1::Integration* integration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class UpdateIntegrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.UpdateIntegrationRequest) */ {
 public:
  inline UpdateIntegrationRequest() : UpdateIntegrationRequest(nullptr) {}
  ~UpdateIntegrationRequest() override;
  explicit constexpr UpdateIntegrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateIntegrationRequest(const UpdateIntegrationRequest& from);
  UpdateIntegrationRequest(UpdateIntegrationRequest&& from) noexcept
    : UpdateIntegrationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateIntegrationRequest& operator=(const UpdateIntegrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIntegrationRequest& operator=(UpdateIntegrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateIntegrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateIntegrationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateIntegrationRequest*>(
               &_UpdateIntegrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateIntegrationRequest& a, UpdateIntegrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIntegrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIntegrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateIntegrationRequest* New() const final {
    return new UpdateIntegrationRequest();
  }

  UpdateIntegrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIntegrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateIntegrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateIntegrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIntegrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.UpdateIntegrationRequest";
  }
  protected:
  explicit UpdateIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIntegrationsFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .source.v1alpha1.CreateIntegrationRequest integrations = 2 [json_name = "integrations"];
  bool has_integrations() const;
  private:
  bool _internal_has_integrations() const;
  public:
  void clear_integrations();
  const ::source::v1alpha1::CreateIntegrationRequest& integrations() const;
  PROTOBUF_MUST_USE_RESULT ::source::v1alpha1::CreateIntegrationRequest* release_integrations();
  ::source::v1alpha1::CreateIntegrationRequest* mutable_integrations();
  void set_allocated_integrations(::source::v1alpha1::CreateIntegrationRequest* integrations);
  private:
  const ::source::v1alpha1::CreateIntegrationRequest& _internal_integrations() const;
  ::source::v1alpha1::CreateIntegrationRequest* _internal_mutable_integrations();
  public:
  void unsafe_arena_set_allocated_integrations(
      ::source::v1alpha1::CreateIntegrationRequest* integrations);
  ::source::v1alpha1::CreateIntegrationRequest* unsafe_arena_release_integrations();

  // @@protoc_insertion_point(class_scope:source.v1alpha1.UpdateIntegrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::source::v1alpha1::CreateIntegrationRequest* integrations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class UpdateIntegrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.UpdateIntegrationResponse) */ {
 public:
  inline UpdateIntegrationResponse() : UpdateIntegrationResponse(nullptr) {}
  ~UpdateIntegrationResponse() override;
  explicit constexpr UpdateIntegrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateIntegrationResponse(const UpdateIntegrationResponse& from);
  UpdateIntegrationResponse(UpdateIntegrationResponse&& from) noexcept
    : UpdateIntegrationResponse() {
    *this = ::std::move(from);
  }

  inline UpdateIntegrationResponse& operator=(const UpdateIntegrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIntegrationResponse& operator=(UpdateIntegrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateIntegrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateIntegrationResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateIntegrationResponse*>(
               &_UpdateIntegrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateIntegrationResponse& a, UpdateIntegrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIntegrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIntegrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateIntegrationResponse* New() const final {
    return new UpdateIntegrationResponse();
  }

  UpdateIntegrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIntegrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateIntegrationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateIntegrationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIntegrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.UpdateIntegrationResponse";
  }
  protected:
  explicit UpdateIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.UpdateIntegrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class DeleteIntegrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.DeleteIntegrationRequest) */ {
 public:
  inline DeleteIntegrationRequest() : DeleteIntegrationRequest(nullptr) {}
  ~DeleteIntegrationRequest() override;
  explicit constexpr DeleteIntegrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteIntegrationRequest(const DeleteIntegrationRequest& from);
  DeleteIntegrationRequest(DeleteIntegrationRequest&& from) noexcept
    : DeleteIntegrationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteIntegrationRequest& operator=(const DeleteIntegrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIntegrationRequest& operator=(DeleteIntegrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteIntegrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteIntegrationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteIntegrationRequest*>(
               &_DeleteIntegrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteIntegrationRequest& a, DeleteIntegrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIntegrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIntegrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIntegrationRequest* New() const final {
    return new DeleteIntegrationRequest();
  }

  DeleteIntegrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIntegrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteIntegrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteIntegrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIntegrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.DeleteIntegrationRequest";
  }
  protected:
  explicit DeleteIntegrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.DeleteIntegrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class DeleteIntegrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.DeleteIntegrationResponse) */ {
 public:
  inline DeleteIntegrationResponse() : DeleteIntegrationResponse(nullptr) {}
  ~DeleteIntegrationResponse() override;
  explicit constexpr DeleteIntegrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteIntegrationResponse(const DeleteIntegrationResponse& from);
  DeleteIntegrationResponse(DeleteIntegrationResponse&& from) noexcept
    : DeleteIntegrationResponse() {
    *this = ::std::move(from);
  }

  inline DeleteIntegrationResponse& operator=(const DeleteIntegrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIntegrationResponse& operator=(DeleteIntegrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteIntegrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteIntegrationResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteIntegrationResponse*>(
               &_DeleteIntegrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteIntegrationResponse& a, DeleteIntegrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIntegrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIntegrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIntegrationResponse* New() const final {
    return new DeleteIntegrationResponse();
  }

  DeleteIntegrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIntegrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteIntegrationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteIntegrationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIntegrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.DeleteIntegrationResponse";
  }
  protected:
  explicit DeleteIntegrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.DeleteIntegrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class Provider_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Provider_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Provider_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Provider_DataEntry_DoNotUse();
  explicit constexpr Provider_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Provider_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Provider_DataEntry_DoNotUse& other);
  static const Provider_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Provider_DataEntry_DoNotUse*>(&_Provider_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.Provider.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.Provider.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Provider final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.Provider) */ {
 public:
  inline Provider() : Provider(nullptr) {}
  ~Provider() override;
  explicit constexpr Provider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Provider(const Provider& from);
  Provider(Provider&& from) noexcept
    : Provider() {
    *this = ::std::move(from);
  }

  inline Provider& operator=(const Provider& from) {
    CopyFrom(from);
    return *this;
  }
  inline Provider& operator=(Provider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Provider& default_instance() {
    return *internal_default_instance();
  }
  static inline const Provider* internal_default_instance() {
    return reinterpret_cast<const Provider*>(
               &_Provider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Provider& a, Provider& b) {
    a.Swap(&b);
  }
  inline void Swap(Provider* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Provider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Provider* New() const final {
    return new Provider();
  }

  Provider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Provider>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Provider& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Provider& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Provider* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.Provider";
  }
  protected:
  explicit Provider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kLogoFieldNumber = 4,
  };
  // map<string, string> data = 5 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string logo = 4 [json_name = "logo"];
  void clear_logo();
  const std::string& logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo();
  PROTOBUF_MUST_USE_RESULT std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.Provider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Provider_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class DeleteProviderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.DeleteProviderRequest) */ {
 public:
  inline DeleteProviderRequest() : DeleteProviderRequest(nullptr) {}
  ~DeleteProviderRequest() override;
  explicit constexpr DeleteProviderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProviderRequest(const DeleteProviderRequest& from);
  DeleteProviderRequest(DeleteProviderRequest&& from) noexcept
    : DeleteProviderRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProviderRequest& operator=(const DeleteProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProviderRequest& operator=(DeleteProviderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProviderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProviderRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProviderRequest*>(
               &_DeleteProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteProviderRequest& a, DeleteProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProviderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProviderRequest* New() const final {
    return new DeleteProviderRequest();
  }

  DeleteProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProviderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProviderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteProviderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.DeleteProviderRequest";
  }
  protected:
  explicit DeleteProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.DeleteProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class DeleteProviderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.DeleteProviderResponse) */ {
 public:
  inline DeleteProviderResponse() : DeleteProviderResponse(nullptr) {}
  ~DeleteProviderResponse() override;
  explicit constexpr DeleteProviderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProviderResponse(const DeleteProviderResponse& from);
  DeleteProviderResponse(DeleteProviderResponse&& from) noexcept
    : DeleteProviderResponse() {
    *this = ::std::move(from);
  }

  inline DeleteProviderResponse& operator=(const DeleteProviderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProviderResponse& operator=(DeleteProviderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProviderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProviderResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteProviderResponse*>(
               &_DeleteProviderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteProviderResponse& a, DeleteProviderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProviderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProviderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProviderResponse* New() const final {
    return new DeleteProviderResponse();
  }

  DeleteProviderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProviderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProviderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteProviderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProviderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.DeleteProviderResponse";
  }
  protected:
  explicit DeleteProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.DeleteProviderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class UpdateProviderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.UpdateProviderRequest) */ {
 public:
  inline UpdateProviderRequest() : UpdateProviderRequest(nullptr) {}
  ~UpdateProviderRequest() override;
  explicit constexpr UpdateProviderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProviderRequest(const UpdateProviderRequest& from);
  UpdateProviderRequest(UpdateProviderRequest&& from) noexcept
    : UpdateProviderRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProviderRequest& operator=(const UpdateProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProviderRequest& operator=(UpdateProviderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProviderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProviderRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProviderRequest*>(
               &_UpdateProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateProviderRequest& a, UpdateProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProviderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProviderRequest* New() const final {
    return new UpdateProviderRequest();
  }

  UpdateProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProviderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProviderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateProviderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.UpdateProviderRequest";
  }
  protected:
  explicit UpdateProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProviderFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .source.v1alpha1.CreateProviderRequest provider = 2 [json_name = "provider"];
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::source::v1alpha1::CreateProviderRequest& provider() const;
  PROTOBUF_MUST_USE_RESULT ::source::v1alpha1::CreateProviderRequest* release_provider();
  ::source::v1alpha1::CreateProviderRequest* mutable_provider();
  void set_allocated_provider(::source::v1alpha1::CreateProviderRequest* provider);
  private:
  const ::source::v1alpha1::CreateProviderRequest& _internal_provider() const;
  ::source::v1alpha1::CreateProviderRequest* _internal_mutable_provider();
  public:
  void unsafe_arena_set_allocated_provider(
      ::source::v1alpha1::CreateProviderRequest* provider);
  ::source::v1alpha1::CreateProviderRequest* unsafe_arena_release_provider();

  // @@protoc_insertion_point(class_scope:source.v1alpha1.UpdateProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::source::v1alpha1::CreateProviderRequest* provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class UpdateProviderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.UpdateProviderResponse) */ {
 public:
  inline UpdateProviderResponse() : UpdateProviderResponse(nullptr) {}
  ~UpdateProviderResponse() override;
  explicit constexpr UpdateProviderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProviderResponse(const UpdateProviderResponse& from);
  UpdateProviderResponse(UpdateProviderResponse&& from) noexcept
    : UpdateProviderResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProviderResponse& operator=(const UpdateProviderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProviderResponse& operator=(UpdateProviderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProviderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProviderResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProviderResponse*>(
               &_UpdateProviderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateProviderResponse& a, UpdateProviderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProviderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProviderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProviderResponse* New() const final {
    return new UpdateProviderResponse();
  }

  UpdateProviderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProviderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProviderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateProviderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProviderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.UpdateProviderResponse";
  }
  protected:
  explicit UpdateProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.UpdateProviderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class GetProviderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.GetProviderRequest) */ {
 public:
  inline GetProviderRequest() : GetProviderRequest(nullptr) {}
  ~GetProviderRequest() override;
  explicit constexpr GetProviderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProviderRequest(const GetProviderRequest& from);
  GetProviderRequest(GetProviderRequest&& from) noexcept
    : GetProviderRequest() {
    *this = ::std::move(from);
  }

  inline GetProviderRequest& operator=(const GetProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProviderRequest& operator=(GetProviderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProviderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProviderRequest* internal_default_instance() {
    return reinterpret_cast<const GetProviderRequest*>(
               &_GetProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetProviderRequest& a, GetProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProviderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProviderRequest* New() const final {
    return new GetProviderRequest();
  }

  GetProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProviderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProviderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetProviderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.GetProviderRequest";
  }
  protected:
  explicit GetProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.GetProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class GetProviderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.GetProviderResponse) */ {
 public:
  inline GetProviderResponse() : GetProviderResponse(nullptr) {}
  ~GetProviderResponse() override;
  explicit constexpr GetProviderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProviderResponse(const GetProviderResponse& from);
  GetProviderResponse(GetProviderResponse&& from) noexcept
    : GetProviderResponse() {
    *this = ::std::move(from);
  }

  inline GetProviderResponse& operator=(const GetProviderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProviderResponse& operator=(GetProviderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProviderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProviderResponse* internal_default_instance() {
    return reinterpret_cast<const GetProviderResponse*>(
               &_GetProviderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetProviderResponse& a, GetProviderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProviderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProviderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProviderResponse* New() const final {
    return new GetProviderResponse();
  }

  GetProviderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProviderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProviderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetProviderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProviderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.GetProviderResponse";
  }
  protected:
  explicit GetProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 1,
  };
  // .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::source::v1alpha1::Provider& provider() const;
  PROTOBUF_MUST_USE_RESULT ::source::v1alpha1::Provider* release_provider();
  ::source::v1alpha1::Provider* mutable_provider();
  void set_allocated_provider(::source::v1alpha1::Provider* provider);
  private:
  const ::source::v1alpha1::Provider& _internal_provider() const;
  ::source::v1alpha1::Provider* _internal_mutable_provider();
  public:
  void unsafe_arena_set_allocated_provider(
      ::source::v1alpha1::Provider* provider);
  ::source::v1alpha1::Provider* unsafe_arena_release_provider();

  // @@protoc_insertion_point(class_scope:source.v1alpha1.GetProviderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::source::v1alpha1::Provider* provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class CreateProviderRequest_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateProviderRequest_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateProviderRequest_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CreateProviderRequest_DataEntry_DoNotUse();
  explicit constexpr CreateProviderRequest_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateProviderRequest_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateProviderRequest_DataEntry_DoNotUse& other);
  static const CreateProviderRequest_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateProviderRequest_DataEntry_DoNotUse*>(&_CreateProviderRequest_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.CreateProviderRequest.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "source.v1alpha1.CreateProviderRequest.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CreateProviderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.CreateProviderRequest) */ {
 public:
  inline CreateProviderRequest() : CreateProviderRequest(nullptr) {}
  ~CreateProviderRequest() override;
  explicit constexpr CreateProviderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProviderRequest(const CreateProviderRequest& from);
  CreateProviderRequest(CreateProviderRequest&& from) noexcept
    : CreateProviderRequest() {
    *this = ::std::move(from);
  }

  inline CreateProviderRequest& operator=(const CreateProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProviderRequest& operator=(CreateProviderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProviderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProviderRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProviderRequest*>(
               &_CreateProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateProviderRequest& a, CreateProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProviderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProviderRequest* New() const final {
    return new CreateProviderRequest();
  }

  CreateProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProviderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProviderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateProviderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.CreateProviderRequest";
  }
  protected:
  explicit CreateProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kLogoFieldNumber = 3,
  };
  // map<string, string> data = 5 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string logo = 3 [json_name = "logo"];
  void clear_logo();
  const std::string& logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo();
  PROTOBUF_MUST_USE_RESULT std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.CreateProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateProviderRequest_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class CreateProviderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.CreateProviderResponse) */ {
 public:
  inline CreateProviderResponse() : CreateProviderResponse(nullptr) {}
  ~CreateProviderResponse() override;
  explicit constexpr CreateProviderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProviderResponse(const CreateProviderResponse& from);
  CreateProviderResponse(CreateProviderResponse&& from) noexcept
    : CreateProviderResponse() {
    *this = ::std::move(from);
  }

  inline CreateProviderResponse& operator=(const CreateProviderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProviderResponse& operator=(CreateProviderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProviderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProviderResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProviderResponse*>(
               &_CreateProviderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CreateProviderResponse& a, CreateProviderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProviderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProviderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProviderResponse* New() const final {
    return new CreateProviderResponse();
  }

  CreateProviderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProviderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProviderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateProviderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProviderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.CreateProviderResponse";
  }
  protected:
  explicit CreateProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:source.v1alpha1.CreateProviderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class ListProvidersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.ListProvidersRequest) */ {
 public:
  inline ListProvidersRequest() : ListProvidersRequest(nullptr) {}
  ~ListProvidersRequest() override;
  explicit constexpr ListProvidersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProvidersRequest(const ListProvidersRequest& from);
  ListProvidersRequest(ListProvidersRequest&& from) noexcept
    : ListProvidersRequest() {
    *this = ::std::move(from);
  }

  inline ListProvidersRequest& operator=(const ListProvidersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProvidersRequest& operator=(ListProvidersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProvidersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProvidersRequest* internal_default_instance() {
    return reinterpret_cast<const ListProvidersRequest*>(
               &_ListProvidersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListProvidersRequest& a, ListProvidersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProvidersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProvidersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProvidersRequest* New() const final {
    return new ListProvidersRequest();
  }

  ListProvidersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProvidersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProvidersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProvidersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProvidersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.ListProvidersRequest";
  }
  protected:
  explicit ListProvidersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:source.v1alpha1.ListProvidersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// -------------------------------------------------------------------

class ListProvidersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.v1alpha1.ListProvidersResponse) */ {
 public:
  inline ListProvidersResponse() : ListProvidersResponse(nullptr) {}
  ~ListProvidersResponse() override;
  explicit constexpr ListProvidersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProvidersResponse(const ListProvidersResponse& from);
  ListProvidersResponse(ListProvidersResponse&& from) noexcept
    : ListProvidersResponse() {
    *this = ::std::move(from);
  }

  inline ListProvidersResponse& operator=(const ListProvidersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProvidersResponse& operator=(ListProvidersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProvidersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProvidersResponse* internal_default_instance() {
    return reinterpret_cast<const ListProvidersResponse*>(
               &_ListProvidersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListProvidersResponse& a, ListProvidersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProvidersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProvidersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProvidersResponse* New() const final {
    return new ListProvidersResponse();
  }

  ListProvidersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProvidersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProvidersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProvidersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProvidersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.v1alpha1.ListProvidersResponse";
  }
  protected:
  explicit ListProvidersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProvidersFieldNumber = 1,
  };
  // repeated .source.v1alpha1.Provider providers = 1 [json_name = "providers"];
  int providers_size() const;
  private:
  int _internal_providers_size() const;
  public:
  void clear_providers();
  ::source::v1alpha1::Provider* mutable_providers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Provider >*
      mutable_providers();
  private:
  const ::source::v1alpha1::Provider& _internal_providers(int index) const;
  ::source::v1alpha1::Provider* _internal_add_providers();
  public:
  const ::source::v1alpha1::Provider& providers(int index) const;
  ::source::v1alpha1::Provider* add_providers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Provider >&
      providers() const;

  // @@protoc_insertion_point(class_scope:source.v1alpha1.ListProvidersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Provider > providers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fv1alpha1_2fsource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Integration

// string id = 1 [json_name = "id"];
inline void Integration::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Integration::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Integration.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Integration::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.Integration.id)
}
inline std::string* Integration::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.Integration.id)
  return _s;
}
inline const std::string& Integration::_internal_id() const {
  return id_.Get();
}
inline void Integration::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Integration::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Integration::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.Integration.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Integration::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.Integration.id)
}

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void Integration::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Integration::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Integration::organization_id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Integration.organization_id)
  return _internal_organization_id();
}
inline void Integration::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Integration::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:source.v1alpha1.Integration.organization_id)
}

// string name = 3 [json_name = "name"];
inline void Integration::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Integration::name() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Integration.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Integration::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.Integration.name)
}
inline std::string* Integration::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.Integration.name)
  return _s;
}
inline const std::string& Integration::_internal_name() const {
  return name_.Get();
}
inline void Integration::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Integration::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Integration::release_name() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.Integration.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Integration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.Integration.name)
}

// .source.v1alpha1.Provider provider = 4 [json_name = "provider"];
inline bool Integration::_internal_has_provider() const {
  return this != internal_default_instance() && provider_ != nullptr;
}
inline bool Integration::has_provider() const {
  return _internal_has_provider();
}
inline void Integration::clear_provider() {
  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
}
inline const ::source::v1alpha1::Provider& Integration::_internal_provider() const {
  const ::source::v1alpha1::Provider* p = provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::source::v1alpha1::Provider&>(
      ::source::v1alpha1::_Provider_default_instance_);
}
inline const ::source::v1alpha1::Provider& Integration::provider() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Integration.provider)
  return _internal_provider();
}
inline void Integration::unsafe_arena_set_allocated_provider(
    ::source::v1alpha1::Provider* provider) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_);
  }
  provider_ = provider;
  if (provider) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:source.v1alpha1.Integration.provider)
}
inline ::source::v1alpha1::Provider* Integration::release_provider() {
  
  ::source::v1alpha1::Provider* temp = provider_;
  provider_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::source::v1alpha1::Provider* Integration::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.Integration.provider)
  
  ::source::v1alpha1::Provider* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::source::v1alpha1::Provider* Integration::_internal_mutable_provider() {
  
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::source::v1alpha1::Provider>(GetArenaForAllocation());
    provider_ = p;
  }
  return provider_;
}
inline ::source::v1alpha1::Provider* Integration::mutable_provider() {
  ::source::v1alpha1::Provider* _msg = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.Integration.provider)
  return _msg;
}
inline void Integration::set_allocated_provider(::source::v1alpha1::Provider* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::source::v1alpha1::Provider>::GetOwningArena(provider);
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.Integration.provider)
}

// map<string, string> data = 5 [json_name = "data"];
inline int Integration::_internal_data_size() const {
  return data_.size();
}
inline int Integration::data_size() const {
  return _internal_data_size();
}
inline void Integration::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Integration::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Integration::data() const {
  // @@protoc_insertion_point(field_map:source.v1alpha1.Integration.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Integration::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Integration::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:source.v1alpha1.Integration.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateIntegrationRequest

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void CreateIntegrationRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateIntegrationRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateIntegrationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateIntegrationRequest.organization_id)
  return _internal_organization_id();
}
inline void CreateIntegrationRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void CreateIntegrationRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateIntegrationRequest.organization_id)
}

// string name = 3 [json_name = "name"];
inline void CreateIntegrationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateIntegrationRequest::name() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateIntegrationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIntegrationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateIntegrationRequest.name)
}
inline std::string* CreateIntegrationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateIntegrationRequest.name)
  return _s;
}
inline const std::string& CreateIntegrationRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateIntegrationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateIntegrationRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateIntegrationRequest::release_name() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateIntegrationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateIntegrationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateIntegrationRequest.name)
}

// .source.v1alpha1.Provider provider = 4 [json_name = "provider"];
inline bool CreateIntegrationRequest::_internal_has_provider() const {
  return this != internal_default_instance() && provider_ != nullptr;
}
inline bool CreateIntegrationRequest::has_provider() const {
  return _internal_has_provider();
}
inline void CreateIntegrationRequest::clear_provider() {
  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
}
inline const ::source::v1alpha1::Provider& CreateIntegrationRequest::_internal_provider() const {
  const ::source::v1alpha1::Provider* p = provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::source::v1alpha1::Provider&>(
      ::source::v1alpha1::_Provider_default_instance_);
}
inline const ::source::v1alpha1::Provider& CreateIntegrationRequest::provider() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateIntegrationRequest.provider)
  return _internal_provider();
}
inline void CreateIntegrationRequest::unsafe_arena_set_allocated_provider(
    ::source::v1alpha1::Provider* provider) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_);
  }
  provider_ = provider;
  if (provider) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:source.v1alpha1.CreateIntegrationRequest.provider)
}
inline ::source::v1alpha1::Provider* CreateIntegrationRequest::release_provider() {
  
  ::source::v1alpha1::Provider* temp = provider_;
  provider_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::source::v1alpha1::Provider* CreateIntegrationRequest::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateIntegrationRequest.provider)
  
  ::source::v1alpha1::Provider* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::source::v1alpha1::Provider* CreateIntegrationRequest::_internal_mutable_provider() {
  
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::source::v1alpha1::Provider>(GetArenaForAllocation());
    provider_ = p;
  }
  return provider_;
}
inline ::source::v1alpha1::Provider* CreateIntegrationRequest::mutable_provider() {
  ::source::v1alpha1::Provider* _msg = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateIntegrationRequest.provider)
  return _msg;
}
inline void CreateIntegrationRequest::set_allocated_provider(::source::v1alpha1::Provider* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::source::v1alpha1::Provider>::GetOwningArena(provider);
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateIntegrationRequest.provider)
}

// map<string, string> data = 5 [json_name = "data"];
inline int CreateIntegrationRequest::_internal_data_size() const {
  return data_.size();
}
inline int CreateIntegrationRequest::data_size() const {
  return _internal_data_size();
}
inline void CreateIntegrationRequest::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateIntegrationRequest::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateIntegrationRequest::data() const {
  // @@protoc_insertion_point(field_map:source.v1alpha1.CreateIntegrationRequest.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateIntegrationRequest::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateIntegrationRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:source.v1alpha1.CreateIntegrationRequest.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// CreateIntegrationResponse

// string msg = 1 [json_name = "msg"];
inline void CreateIntegrationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateIntegrationResponse::msg() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateIntegrationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIntegrationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateIntegrationResponse.msg)
}
inline std::string* CreateIntegrationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateIntegrationResponse.msg)
  return _s;
}
inline const std::string& CreateIntegrationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateIntegrationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateIntegrationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateIntegrationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateIntegrationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateIntegrationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateIntegrationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateIntegrationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateIntegrationResponse::error() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateIntegrationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateIntegrationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateIntegrationResponse.error)
}
inline std::string* CreateIntegrationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateIntegrationResponse.error)
  return _s;
}
inline const std::string& CreateIntegrationResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateIntegrationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateIntegrationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateIntegrationResponse::release_error() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateIntegrationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateIntegrationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateIntegrationResponse.error)
}

// -------------------------------------------------------------------

// ListIntegrationsRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void ListIntegrationsRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListIntegrationsRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListIntegrationsRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.ListIntegrationsRequest.organization_id)
  return _internal_organization_id();
}
inline void ListIntegrationsRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListIntegrationsRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:source.v1alpha1.ListIntegrationsRequest.organization_id)
}

// -------------------------------------------------------------------

// ListIntegrationsResponse

// repeated .source.v1alpha1.Integration integrations = 1 [json_name = "integrations"];
inline int ListIntegrationsResponse::_internal_integrations_size() const {
  return integrations_.size();
}
inline int ListIntegrationsResponse::integrations_size() const {
  return _internal_integrations_size();
}
inline void ListIntegrationsResponse::clear_integrations() {
  integrations_.Clear();
}
inline ::source::v1alpha1::Integration* ListIntegrationsResponse::mutable_integrations(int index) {
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.ListIntegrationsResponse.integrations)
  return integrations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Integration >*
ListIntegrationsResponse::mutable_integrations() {
  // @@protoc_insertion_point(field_mutable_list:source.v1alpha1.ListIntegrationsResponse.integrations)
  return &integrations_;
}
inline const ::source::v1alpha1::Integration& ListIntegrationsResponse::_internal_integrations(int index) const {
  return integrations_.Get(index);
}
inline const ::source::v1alpha1::Integration& ListIntegrationsResponse::integrations(int index) const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.ListIntegrationsResponse.integrations)
  return _internal_integrations(index);
}
inline ::source::v1alpha1::Integration* ListIntegrationsResponse::_internal_add_integrations() {
  return integrations_.Add();
}
inline ::source::v1alpha1::Integration* ListIntegrationsResponse::add_integrations() {
  ::source::v1alpha1::Integration* _add = _internal_add_integrations();
  // @@protoc_insertion_point(field_add:source.v1alpha1.ListIntegrationsResponse.integrations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Integration >&
ListIntegrationsResponse::integrations() const {
  // @@protoc_insertion_point(field_list:source.v1alpha1.ListIntegrationsResponse.integrations)
  return integrations_;
}

// -------------------------------------------------------------------

// GetIntegrationRequest

// string id = 1 [json_name = "id"];
inline void GetIntegrationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetIntegrationRequest::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.GetIntegrationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIntegrationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.GetIntegrationRequest.id)
}
inline std::string* GetIntegrationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.GetIntegrationRequest.id)
  return _s;
}
inline const std::string& GetIntegrationRequest::_internal_id() const {
  return id_.Get();
}
inline void GetIntegrationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetIntegrationRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetIntegrationRequest::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.GetIntegrationRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetIntegrationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.GetIntegrationRequest.id)
}

// -------------------------------------------------------------------

// GetIntegrationResponse

// .source.v1alpha1.Integration integration = 1 [json_name = "integration"];
inline bool GetIntegrationResponse::_internal_has_integration() const {
  return this != internal_default_instance() && integration_ != nullptr;
}
inline bool GetIntegrationResponse::has_integration() const {
  return _internal_has_integration();
}
inline void GetIntegrationResponse::clear_integration() {
  if (GetArenaForAllocation() == nullptr && integration_ != nullptr) {
    delete integration_;
  }
  integration_ = nullptr;
}
inline const ::source::v1alpha1::Integration& GetIntegrationResponse::_internal_integration() const {
  const ::source::v1alpha1::Integration* p = integration_;
  return p != nullptr ? *p : reinterpret_cast<const ::source::v1alpha1::Integration&>(
      ::source::v1alpha1::_Integration_default_instance_);
}
inline const ::source::v1alpha1::Integration& GetIntegrationResponse::integration() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.GetIntegrationResponse.integration)
  return _internal_integration();
}
inline void GetIntegrationResponse::unsafe_arena_set_allocated_integration(
    ::source::v1alpha1::Integration* integration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(integration_);
  }
  integration_ = integration;
  if (integration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:source.v1alpha1.GetIntegrationResponse.integration)
}
inline ::source::v1alpha1::Integration* GetIntegrationResponse::release_integration() {
  
  ::source::v1alpha1::Integration* temp = integration_;
  integration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::source::v1alpha1::Integration* GetIntegrationResponse::unsafe_arena_release_integration() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.GetIntegrationResponse.integration)
  
  ::source::v1alpha1::Integration* temp = integration_;
  integration_ = nullptr;
  return temp;
}
inline ::source::v1alpha1::Integration* GetIntegrationResponse::_internal_mutable_integration() {
  
  if (integration_ == nullptr) {
    auto* p = CreateMaybeMessage<::source::v1alpha1::Integration>(GetArenaForAllocation());
    integration_ = p;
  }
  return integration_;
}
inline ::source::v1alpha1::Integration* GetIntegrationResponse::mutable_integration() {
  ::source::v1alpha1::Integration* _msg = _internal_mutable_integration();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.GetIntegrationResponse.integration)
  return _msg;
}
inline void GetIntegrationResponse::set_allocated_integration(::source::v1alpha1::Integration* integration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete integration_;
  }
  if (integration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::source::v1alpha1::Integration>::GetOwningArena(integration);
    if (message_arena != submessage_arena) {
      integration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integration, submessage_arena);
    }
    
  } else {
    
  }
  integration_ = integration;
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.GetIntegrationResponse.integration)
}

// -------------------------------------------------------------------

// UpdateIntegrationRequest

// string id = 1 [json_name = "id"];
inline void UpdateIntegrationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UpdateIntegrationRequest::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateIntegrationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateIntegrationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.UpdateIntegrationRequest.id)
}
inline std::string* UpdateIntegrationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateIntegrationRequest.id)
  return _s;
}
inline const std::string& UpdateIntegrationRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateIntegrationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateIntegrationRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateIntegrationRequest::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateIntegrationRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateIntegrationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateIntegrationRequest.id)
}

// .source.v1alpha1.CreateIntegrationRequest integrations = 2 [json_name = "integrations"];
inline bool UpdateIntegrationRequest::_internal_has_integrations() const {
  return this != internal_default_instance() && integrations_ != nullptr;
}
inline bool UpdateIntegrationRequest::has_integrations() const {
  return _internal_has_integrations();
}
inline void UpdateIntegrationRequest::clear_integrations() {
  if (GetArenaForAllocation() == nullptr && integrations_ != nullptr) {
    delete integrations_;
  }
  integrations_ = nullptr;
}
inline const ::source::v1alpha1::CreateIntegrationRequest& UpdateIntegrationRequest::_internal_integrations() const {
  const ::source::v1alpha1::CreateIntegrationRequest* p = integrations_;
  return p != nullptr ? *p : reinterpret_cast<const ::source::v1alpha1::CreateIntegrationRequest&>(
      ::source::v1alpha1::_CreateIntegrationRequest_default_instance_);
}
inline const ::source::v1alpha1::CreateIntegrationRequest& UpdateIntegrationRequest::integrations() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateIntegrationRequest.integrations)
  return _internal_integrations();
}
inline void UpdateIntegrationRequest::unsafe_arena_set_allocated_integrations(
    ::source::v1alpha1::CreateIntegrationRequest* integrations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(integrations_);
  }
  integrations_ = integrations;
  if (integrations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:source.v1alpha1.UpdateIntegrationRequest.integrations)
}
inline ::source::v1alpha1::CreateIntegrationRequest* UpdateIntegrationRequest::release_integrations() {
  
  ::source::v1alpha1::CreateIntegrationRequest* temp = integrations_;
  integrations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::source::v1alpha1::CreateIntegrationRequest* UpdateIntegrationRequest::unsafe_arena_release_integrations() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateIntegrationRequest.integrations)
  
  ::source::v1alpha1::CreateIntegrationRequest* temp = integrations_;
  integrations_ = nullptr;
  return temp;
}
inline ::source::v1alpha1::CreateIntegrationRequest* UpdateIntegrationRequest::_internal_mutable_integrations() {
  
  if (integrations_ == nullptr) {
    auto* p = CreateMaybeMessage<::source::v1alpha1::CreateIntegrationRequest>(GetArenaForAllocation());
    integrations_ = p;
  }
  return integrations_;
}
inline ::source::v1alpha1::CreateIntegrationRequest* UpdateIntegrationRequest::mutable_integrations() {
  ::source::v1alpha1::CreateIntegrationRequest* _msg = _internal_mutable_integrations();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateIntegrationRequest.integrations)
  return _msg;
}
inline void UpdateIntegrationRequest::set_allocated_integrations(::source::v1alpha1::CreateIntegrationRequest* integrations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete integrations_;
  }
  if (integrations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::source::v1alpha1::CreateIntegrationRequest>::GetOwningArena(integrations);
    if (message_arena != submessage_arena) {
      integrations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integrations, submessage_arena);
    }
    
  } else {
    
  }
  integrations_ = integrations;
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateIntegrationRequest.integrations)
}

// -------------------------------------------------------------------

// UpdateIntegrationResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateIntegrationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateIntegrationResponse::msg() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateIntegrationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateIntegrationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.UpdateIntegrationResponse.msg)
}
inline std::string* UpdateIntegrationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateIntegrationResponse.msg)
  return _s;
}
inline const std::string& UpdateIntegrationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateIntegrationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateIntegrationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateIntegrationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateIntegrationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateIntegrationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateIntegrationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateIntegrationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateIntegrationResponse::error() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateIntegrationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateIntegrationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.UpdateIntegrationResponse.error)
}
inline std::string* UpdateIntegrationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateIntegrationResponse.error)
  return _s;
}
inline const std::string& UpdateIntegrationResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateIntegrationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateIntegrationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateIntegrationResponse::release_error() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateIntegrationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateIntegrationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateIntegrationResponse.error)
}

// -------------------------------------------------------------------

// DeleteIntegrationRequest

// string id = 1 [json_name = "id"];
inline void DeleteIntegrationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteIntegrationRequest::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.DeleteIntegrationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteIntegrationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.DeleteIntegrationRequest.id)
}
inline std::string* DeleteIntegrationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.DeleteIntegrationRequest.id)
  return _s;
}
inline const std::string& DeleteIntegrationRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteIntegrationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteIntegrationRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteIntegrationRequest::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.DeleteIntegrationRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteIntegrationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.DeleteIntegrationRequest.id)
}

// -------------------------------------------------------------------

// DeleteIntegrationResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteIntegrationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteIntegrationResponse::msg() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.DeleteIntegrationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteIntegrationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.DeleteIntegrationResponse.msg)
}
inline std::string* DeleteIntegrationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.DeleteIntegrationResponse.msg)
  return _s;
}
inline const std::string& DeleteIntegrationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteIntegrationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteIntegrationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteIntegrationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.DeleteIntegrationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteIntegrationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.DeleteIntegrationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteIntegrationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteIntegrationResponse::error() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.DeleteIntegrationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteIntegrationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.DeleteIntegrationResponse.error)
}
inline std::string* DeleteIntegrationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.DeleteIntegrationResponse.error)
  return _s;
}
inline const std::string& DeleteIntegrationResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteIntegrationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteIntegrationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteIntegrationResponse::release_error() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.DeleteIntegrationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteIntegrationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.DeleteIntegrationResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Provider

// string id = 1 [json_name = "id"];
inline void Provider::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Provider::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Provider.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Provider::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.Provider.id)
}
inline std::string* Provider::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.Provider.id)
  return _s;
}
inline const std::string& Provider::_internal_id() const {
  return id_.Get();
}
inline void Provider::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Provider::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Provider::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.Provider.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Provider::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.Provider.id)
}

// string name = 2 [json_name = "name"];
inline void Provider::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Provider::name() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Provider.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Provider::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.Provider.name)
}
inline std::string* Provider::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.Provider.name)
  return _s;
}
inline const std::string& Provider::_internal_name() const {
  return name_.Get();
}
inline void Provider::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Provider::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Provider::release_name() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.Provider.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Provider::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.Provider.name)
}

// string description = 3 [json_name = "description"];
inline void Provider::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Provider::description() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Provider.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Provider::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.Provider.description)
}
inline std::string* Provider::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.Provider.description)
  return _s;
}
inline const std::string& Provider::_internal_description() const {
  return description_.Get();
}
inline void Provider::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Provider::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Provider::release_description() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.Provider.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Provider::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.Provider.description)
}

// string logo = 4 [json_name = "logo"];
inline void Provider::clear_logo() {
  logo_.ClearToEmpty();
}
inline const std::string& Provider::logo() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.Provider.logo)
  return _internal_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Provider::set_logo(ArgT0&& arg0, ArgT... args) {
 
 logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.Provider.logo)
}
inline std::string* Provider::mutable_logo() {
  std::string* _s = _internal_mutable_logo();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.Provider.logo)
  return _s;
}
inline const std::string& Provider::_internal_logo() const {
  return logo_.Get();
}
inline void Provider::_internal_set_logo(const std::string& value) {
  
  logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Provider::_internal_mutable_logo() {
  
  return logo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Provider::release_logo() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.Provider.logo)
  return logo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Provider::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    
  } else {
    
  }
  logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.Provider.logo)
}

// map<string, string> data = 5 [json_name = "data"];
inline int Provider::_internal_data_size() const {
  return data_.size();
}
inline int Provider::data_size() const {
  return _internal_data_size();
}
inline void Provider::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Provider::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Provider::data() const {
  // @@protoc_insertion_point(field_map:source.v1alpha1.Provider.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Provider::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Provider::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:source.v1alpha1.Provider.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// DeleteProviderRequest

// string id = 1 [json_name = "id"];
inline void DeleteProviderRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteProviderRequest::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.DeleteProviderRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProviderRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.DeleteProviderRequest.id)
}
inline std::string* DeleteProviderRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.DeleteProviderRequest.id)
  return _s;
}
inline const std::string& DeleteProviderRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteProviderRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteProviderRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteProviderRequest::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.DeleteProviderRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteProviderRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.DeleteProviderRequest.id)
}

// -------------------------------------------------------------------

// DeleteProviderResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteProviderResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteProviderResponse::msg() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.DeleteProviderResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProviderResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.DeleteProviderResponse.msg)
}
inline std::string* DeleteProviderResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.DeleteProviderResponse.msg)
  return _s;
}
inline const std::string& DeleteProviderResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteProviderResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteProviderResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteProviderResponse::release_msg() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.DeleteProviderResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteProviderResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.DeleteProviderResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteProviderResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteProviderResponse::error() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.DeleteProviderResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProviderResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.DeleteProviderResponse.error)
}
inline std::string* DeleteProviderResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.DeleteProviderResponse.error)
  return _s;
}
inline const std::string& DeleteProviderResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteProviderResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteProviderResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteProviderResponse::release_error() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.DeleteProviderResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteProviderResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.DeleteProviderResponse.error)
}

// -------------------------------------------------------------------

// UpdateProviderRequest

// string id = 1 [json_name = "id"];
inline void UpdateProviderRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UpdateProviderRequest::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateProviderRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProviderRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.UpdateProviderRequest.id)
}
inline std::string* UpdateProviderRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateProviderRequest.id)
  return _s;
}
inline const std::string& UpdateProviderRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateProviderRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateProviderRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateProviderRequest::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateProviderRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateProviderRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateProviderRequest.id)
}

// .source.v1alpha1.CreateProviderRequest provider = 2 [json_name = "provider"];
inline bool UpdateProviderRequest::_internal_has_provider() const {
  return this != internal_default_instance() && provider_ != nullptr;
}
inline bool UpdateProviderRequest::has_provider() const {
  return _internal_has_provider();
}
inline void UpdateProviderRequest::clear_provider() {
  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
}
inline const ::source::v1alpha1::CreateProviderRequest& UpdateProviderRequest::_internal_provider() const {
  const ::source::v1alpha1::CreateProviderRequest* p = provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::source::v1alpha1::CreateProviderRequest&>(
      ::source::v1alpha1::_CreateProviderRequest_default_instance_);
}
inline const ::source::v1alpha1::CreateProviderRequest& UpdateProviderRequest::provider() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateProviderRequest.provider)
  return _internal_provider();
}
inline void UpdateProviderRequest::unsafe_arena_set_allocated_provider(
    ::source::v1alpha1::CreateProviderRequest* provider) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_);
  }
  provider_ = provider;
  if (provider) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:source.v1alpha1.UpdateProviderRequest.provider)
}
inline ::source::v1alpha1::CreateProviderRequest* UpdateProviderRequest::release_provider() {
  
  ::source::v1alpha1::CreateProviderRequest* temp = provider_;
  provider_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::source::v1alpha1::CreateProviderRequest* UpdateProviderRequest::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateProviderRequest.provider)
  
  ::source::v1alpha1::CreateProviderRequest* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::source::v1alpha1::CreateProviderRequest* UpdateProviderRequest::_internal_mutable_provider() {
  
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::source::v1alpha1::CreateProviderRequest>(GetArenaForAllocation());
    provider_ = p;
  }
  return provider_;
}
inline ::source::v1alpha1::CreateProviderRequest* UpdateProviderRequest::mutable_provider() {
  ::source::v1alpha1::CreateProviderRequest* _msg = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateProviderRequest.provider)
  return _msg;
}
inline void UpdateProviderRequest::set_allocated_provider(::source::v1alpha1::CreateProviderRequest* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::source::v1alpha1::CreateProviderRequest>::GetOwningArena(provider);
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateProviderRequest.provider)
}

// -------------------------------------------------------------------

// UpdateProviderResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateProviderResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateProviderResponse::msg() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateProviderResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProviderResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.UpdateProviderResponse.msg)
}
inline std::string* UpdateProviderResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateProviderResponse.msg)
  return _s;
}
inline const std::string& UpdateProviderResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateProviderResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateProviderResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateProviderResponse::release_msg() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateProviderResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateProviderResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateProviderResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateProviderResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateProviderResponse::error() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.UpdateProviderResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProviderResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.UpdateProviderResponse.error)
}
inline std::string* UpdateProviderResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.UpdateProviderResponse.error)
  return _s;
}
inline const std::string& UpdateProviderResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateProviderResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateProviderResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateProviderResponse::release_error() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.UpdateProviderResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateProviderResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.UpdateProviderResponse.error)
}

// -------------------------------------------------------------------

// GetProviderRequest

// string id = 1 [json_name = "id"];
inline void GetProviderRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetProviderRequest::id() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.GetProviderRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetProviderRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.GetProviderRequest.id)
}
inline std::string* GetProviderRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.GetProviderRequest.id)
  return _s;
}
inline const std::string& GetProviderRequest::_internal_id() const {
  return id_.Get();
}
inline void GetProviderRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetProviderRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetProviderRequest::release_id() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.GetProviderRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetProviderRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.GetProviderRequest.id)
}

// -------------------------------------------------------------------

// GetProviderResponse

// .source.v1alpha1.Provider provider = 1 [json_name = "provider"];
inline bool GetProviderResponse::_internal_has_provider() const {
  return this != internal_default_instance() && provider_ != nullptr;
}
inline bool GetProviderResponse::has_provider() const {
  return _internal_has_provider();
}
inline void GetProviderResponse::clear_provider() {
  if (GetArenaForAllocation() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
}
inline const ::source::v1alpha1::Provider& GetProviderResponse::_internal_provider() const {
  const ::source::v1alpha1::Provider* p = provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::source::v1alpha1::Provider&>(
      ::source::v1alpha1::_Provider_default_instance_);
}
inline const ::source::v1alpha1::Provider& GetProviderResponse::provider() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.GetProviderResponse.provider)
  return _internal_provider();
}
inline void GetProviderResponse::unsafe_arena_set_allocated_provider(
    ::source::v1alpha1::Provider* provider) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_);
  }
  provider_ = provider;
  if (provider) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:source.v1alpha1.GetProviderResponse.provider)
}
inline ::source::v1alpha1::Provider* GetProviderResponse::release_provider() {
  
  ::source::v1alpha1::Provider* temp = provider_;
  provider_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::source::v1alpha1::Provider* GetProviderResponse::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.GetProviderResponse.provider)
  
  ::source::v1alpha1::Provider* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::source::v1alpha1::Provider* GetProviderResponse::_internal_mutable_provider() {
  
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::source::v1alpha1::Provider>(GetArenaForAllocation());
    provider_ = p;
  }
  return provider_;
}
inline ::source::v1alpha1::Provider* GetProviderResponse::mutable_provider() {
  ::source::v1alpha1::Provider* _msg = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.GetProviderResponse.provider)
  return _msg;
}
inline void GetProviderResponse::set_allocated_provider(::source::v1alpha1::Provider* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::source::v1alpha1::Provider>::GetOwningArena(provider);
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.GetProviderResponse.provider)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateProviderRequest

// string name = 1 [json_name = "name"];
inline void CreateProviderRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateProviderRequest::name() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateProviderRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProviderRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateProviderRequest.name)
}
inline std::string* CreateProviderRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateProviderRequest.name)
  return _s;
}
inline const std::string& CreateProviderRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateProviderRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProviderRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProviderRequest::release_name() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateProviderRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProviderRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateProviderRequest.name)
}

// string description = 2 [json_name = "description"];
inline void CreateProviderRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreateProviderRequest::description() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateProviderRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProviderRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateProviderRequest.description)
}
inline std::string* CreateProviderRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateProviderRequest.description)
  return _s;
}
inline const std::string& CreateProviderRequest::_internal_description() const {
  return description_.Get();
}
inline void CreateProviderRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProviderRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProviderRequest::release_description() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateProviderRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProviderRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateProviderRequest.description)
}

// string logo = 3 [json_name = "logo"];
inline void CreateProviderRequest::clear_logo() {
  logo_.ClearToEmpty();
}
inline const std::string& CreateProviderRequest::logo() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateProviderRequest.logo)
  return _internal_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProviderRequest::set_logo(ArgT0&& arg0, ArgT... args) {
 
 logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateProviderRequest.logo)
}
inline std::string* CreateProviderRequest::mutable_logo() {
  std::string* _s = _internal_mutable_logo();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateProviderRequest.logo)
  return _s;
}
inline const std::string& CreateProviderRequest::_internal_logo() const {
  return logo_.Get();
}
inline void CreateProviderRequest::_internal_set_logo(const std::string& value) {
  
  logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProviderRequest::_internal_mutable_logo() {
  
  return logo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProviderRequest::release_logo() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateProviderRequest.logo)
  return logo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProviderRequest::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    
  } else {
    
  }
  logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateProviderRequest.logo)
}

// map<string, string> data = 5 [json_name = "data"];
inline int CreateProviderRequest::_internal_data_size() const {
  return data_.size();
}
inline int CreateProviderRequest::data_size() const {
  return _internal_data_size();
}
inline void CreateProviderRequest::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateProviderRequest::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateProviderRequest::data() const {
  // @@protoc_insertion_point(field_map:source.v1alpha1.CreateProviderRequest.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateProviderRequest::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateProviderRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:source.v1alpha1.CreateProviderRequest.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// CreateProviderResponse

// string msg = 1 [json_name = "msg"];
inline void CreateProviderResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateProviderResponse::msg() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateProviderResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProviderResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateProviderResponse.msg)
}
inline std::string* CreateProviderResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateProviderResponse.msg)
  return _s;
}
inline const std::string& CreateProviderResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateProviderResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProviderResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProviderResponse::release_msg() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateProviderResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProviderResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateProviderResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void CreateProviderResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& CreateProviderResponse::error() const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.CreateProviderResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProviderResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:source.v1alpha1.CreateProviderResponse.error)
}
inline std::string* CreateProviderResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.CreateProviderResponse.error)
  return _s;
}
inline const std::string& CreateProviderResponse::_internal_error() const {
  return error_.Get();
}
inline void CreateProviderResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProviderResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProviderResponse::release_error() {
  // @@protoc_insertion_point(field_release:source.v1alpha1.CreateProviderResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProviderResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:source.v1alpha1.CreateProviderResponse.error)
}

// -------------------------------------------------------------------

// ListProvidersRequest

// -------------------------------------------------------------------

// ListProvidersResponse

// repeated .source.v1alpha1.Provider providers = 1 [json_name = "providers"];
inline int ListProvidersResponse::_internal_providers_size() const {
  return providers_.size();
}
inline int ListProvidersResponse::providers_size() const {
  return _internal_providers_size();
}
inline void ListProvidersResponse::clear_providers() {
  providers_.Clear();
}
inline ::source::v1alpha1::Provider* ListProvidersResponse::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:source.v1alpha1.ListProvidersResponse.providers)
  return providers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Provider >*
ListProvidersResponse::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:source.v1alpha1.ListProvidersResponse.providers)
  return &providers_;
}
inline const ::source::v1alpha1::Provider& ListProvidersResponse::_internal_providers(int index) const {
  return providers_.Get(index);
}
inline const ::source::v1alpha1::Provider& ListProvidersResponse::providers(int index) const {
  // @@protoc_insertion_point(field_get:source.v1alpha1.ListProvidersResponse.providers)
  return _internal_providers(index);
}
inline ::source::v1alpha1::Provider* ListProvidersResponse::_internal_add_providers() {
  return providers_.Add();
}
inline ::source::v1alpha1::Provider* ListProvidersResponse::add_providers() {
  ::source::v1alpha1::Provider* _add = _internal_add_providers();
  // @@protoc_insertion_point(field_add:source.v1alpha1.ListProvidersResponse.providers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::v1alpha1::Provider >&
ListProvidersResponse::providers() const {
  // @@protoc_insertion_point(field_list:source.v1alpha1.ListProvidersResponse.providers)
  return providers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace source

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_source_2fv1alpha1_2fsource_2eproto
