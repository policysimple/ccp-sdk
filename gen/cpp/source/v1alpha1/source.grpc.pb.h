// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: source/v1alpha1/source.proto
#ifndef GRPC_source_2fv1alpha1_2fsource_2eproto__INCLUDED
#define GRPC_source_2fv1alpha1_2fsource_2eproto__INCLUDED

#include "source/v1alpha1/source.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace source {
namespace v1alpha1 {

class SourceService final {
 public:
  static constexpr char const* service_full_name() {
    return "source.v1alpha1.SourceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // PROVIDERS
    virtual ::grpc::Status CreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::source::v1alpha1::CreateProviderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateProviderResponse>> AsyncCreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateProviderResponse>>(AsyncCreateProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateProviderResponse>> PrepareAsyncCreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateProviderResponse>>(PrepareAsyncCreateProviderRaw(context, request, cq));
    }
    virtual ::grpc::Status ListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::source::v1alpha1::ListProvidersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListProvidersResponse>> AsyncListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListProvidersResponse>>(AsyncListProvidersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListProvidersResponse>> PrepareAsyncListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListProvidersResponse>>(PrepareAsyncListProvidersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::source::v1alpha1::GetProviderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetProviderResponse>> AsyncGetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetProviderResponse>>(AsyncGetProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetProviderResponse>> PrepareAsyncGetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetProviderResponse>>(PrepareAsyncGetProviderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::source::v1alpha1::GetOneProviderByNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetOneProviderByNameResponse>> AsyncGetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetOneProviderByNameResponse>>(AsyncGetOneProviderByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetOneProviderByNameResponse>> PrepareAsyncGetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetOneProviderByNameResponse>>(PrepareAsyncGetOneProviderByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::source::v1alpha1::UpdateProviderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateProviderResponse>> AsyncUpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateProviderResponse>>(AsyncUpdateProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateProviderResponse>> PrepareAsyncUpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateProviderResponse>>(PrepareAsyncUpdateProviderRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::source::v1alpha1::DeleteProviderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteProviderResponse>> AsyncDeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteProviderResponse>>(AsyncDeleteProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteProviderResponse>> PrepareAsyncDeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteProviderResponse>>(PrepareAsyncDeleteProviderRaw(context, request, cq));
    }
    // INTEGRATIONS
    virtual ::grpc::Status CreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::source::v1alpha1::CreateIntegrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateIntegrationResponse>> AsyncCreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateIntegrationResponse>>(AsyncCreateIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateIntegrationResponse>> PrepareAsyncCreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateIntegrationResponse>>(PrepareAsyncCreateIntegrationRaw(context, request, cq));
    }
    virtual ::grpc::Status ListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::source::v1alpha1::ListIntegrationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListIntegrationsResponse>> AsyncListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListIntegrationsResponse>>(AsyncListIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListIntegrationsResponse>> PrepareAsyncListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListIntegrationsResponse>>(PrepareAsyncListIntegrationsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::source::v1alpha1::GetIntegrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetIntegrationResponse>> AsyncGetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetIntegrationResponse>>(AsyncGetIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetIntegrationResponse>> PrepareAsyncGetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetIntegrationResponse>>(PrepareAsyncGetIntegrationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::source::v1alpha1::UpdateIntegrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateIntegrationResponse>> AsyncUpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateIntegrationResponse>>(AsyncUpdateIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateIntegrationResponse>> PrepareAsyncUpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateIntegrationResponse>>(PrepareAsyncUpdateIntegrationRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::source::v1alpha1::DeleteIntegrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationResponse>> AsyncDeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationResponse>>(AsyncDeleteIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationResponse>> PrepareAsyncDeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationResponse>>(PrepareAsyncDeleteIntegrationRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>> AsyncDeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>>(AsyncDeleteIntegrationsByOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>> PrepareAsyncDeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>>(PrepareAsyncDeleteIntegrationsByOrganizationRaw(context, request, cq));
    }
    // List Repositories providers by integrations
    virtual ::grpc::Status ListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesProviderResponse>> AsyncListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesProviderResponse>>(AsyncListRepositoriesProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesProviderResponse>> PrepareAsyncListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesProviderResponse>>(PrepareAsyncListRepositoriesProviderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::source::v1alpha1::GetRepositoryProviderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryProviderResponse>> AsyncGetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryProviderResponse>>(AsyncGetRepositoryProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryProviderResponse>> PrepareAsyncGetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryProviderResponse>>(PrepareAsyncGetRepositoryProviderRaw(context, request, cq));
    }
    // REPOSITORIES
    virtual ::grpc::Status CreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::source::v1alpha1::CreateRepositoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateRepositoryResponse>> AsyncCreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateRepositoryResponse>>(AsyncCreateRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateRepositoryResponse>> PrepareAsyncCreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateRepositoryResponse>>(PrepareAsyncCreateRepositoryRaw(context, request, cq));
    }
    virtual ::grpc::Status ListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::source::v1alpha1::ListRepositoriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesResponse>> AsyncListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesResponse>>(AsyncListRepositoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesResponse>> PrepareAsyncListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesResponse>>(PrepareAsyncListRepositoriesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::source::v1alpha1::GetRepositoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryResponse>> AsyncGetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryResponse>>(AsyncGetRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryResponse>> PrepareAsyncGetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryResponse>>(PrepareAsyncGetRepositoryRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::source::v1alpha1::DeleteRepositoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteRepositoryResponse>> AsyncDeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteRepositoryResponse>>(AsyncDeleteRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteRepositoryResponse>> PrepareAsyncDeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteRepositoryResponse>>(PrepareAsyncDeleteRepositoryRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::source::v1alpha1::UpdateRepositoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateRepositoryResponse>> AsyncUpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateRepositoryResponse>>(AsyncUpdateRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateRepositoryResponse>> PrepareAsyncUpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateRepositoryResponse>>(PrepareAsyncUpdateRepositoryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // PROVIDERS
      virtual void CreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest* request, ::source::v1alpha1::GetOneProviderByNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response, std::function<void(::grpc::Status)>) = 0;
      // INTEGRATIONS
      virtual void CreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      // List Repositories providers by integrations
      virtual void ListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response, std::function<void(::grpc::Status)>) = 0;
      // REPOSITORIES
      virtual void CreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateProviderResponse>* AsyncCreateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateProviderResponse>* PrepareAsyncCreateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListProvidersResponse>* AsyncListProvidersRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListProvidersResponse>* PrepareAsyncListProvidersRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetProviderResponse>* AsyncGetProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetProviderResponse>* PrepareAsyncGetProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetOneProviderByNameResponse>* AsyncGetOneProviderByNameRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetOneProviderByNameResponse>* PrepareAsyncGetOneProviderByNameRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateProviderResponse>* AsyncUpdateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateProviderResponse>* PrepareAsyncUpdateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteProviderResponse>* AsyncDeleteProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteProviderResponse>* PrepareAsyncDeleteProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateIntegrationResponse>* AsyncCreateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateIntegrationResponse>* PrepareAsyncCreateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListIntegrationsResponse>* AsyncListIntegrationsRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListIntegrationsResponse>* PrepareAsyncListIntegrationsRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetIntegrationResponse>* AsyncGetIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetIntegrationResponse>* PrepareAsyncGetIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateIntegrationResponse>* AsyncUpdateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateIntegrationResponse>* PrepareAsyncUpdateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationResponse>* AsyncDeleteIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationResponse>* PrepareAsyncDeleteIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>* AsyncDeleteIntegrationsByOrganizationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>* PrepareAsyncDeleteIntegrationsByOrganizationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesProviderResponse>* AsyncListRepositoriesProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesProviderResponse>* PrepareAsyncListRepositoriesProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryProviderResponse>* AsyncGetRepositoryProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryProviderResponse>* PrepareAsyncGetRepositoryProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateRepositoryResponse>* AsyncCreateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::CreateRepositoryResponse>* PrepareAsyncCreateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesResponse>* AsyncListRepositoriesRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::ListRepositoriesResponse>* PrepareAsyncListRepositoriesRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryResponse>* AsyncGetRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::GetRepositoryResponse>* PrepareAsyncGetRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteRepositoryResponse>* AsyncDeleteRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::DeleteRepositoryResponse>* PrepareAsyncDeleteRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateRepositoryResponse>* AsyncUpdateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::source::v1alpha1::UpdateRepositoryResponse>* PrepareAsyncUpdateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::source::v1alpha1::CreateProviderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>> AsyncCreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>>(AsyncCreateProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>> PrepareAsyncCreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>>(PrepareAsyncCreateProviderRaw(context, request, cq));
    }
    ::grpc::Status ListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::source::v1alpha1::ListProvidersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>> AsyncListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>>(AsyncListProvidersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>> PrepareAsyncListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>>(PrepareAsyncListProvidersRaw(context, request, cq));
    }
    ::grpc::Status GetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::source::v1alpha1::GetProviderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>> AsyncGetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>>(AsyncGetProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>> PrepareAsyncGetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>>(PrepareAsyncGetProviderRaw(context, request, cq));
    }
    ::grpc::Status GetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::source::v1alpha1::GetOneProviderByNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetOneProviderByNameResponse>> AsyncGetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetOneProviderByNameResponse>>(AsyncGetOneProviderByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetOneProviderByNameResponse>> PrepareAsyncGetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetOneProviderByNameResponse>>(PrepareAsyncGetOneProviderByNameRaw(context, request, cq));
    }
    ::grpc::Status UpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::source::v1alpha1::UpdateProviderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>> AsyncUpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>>(AsyncUpdateProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>> PrepareAsyncUpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>>(PrepareAsyncUpdateProviderRaw(context, request, cq));
    }
    ::grpc::Status DeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::source::v1alpha1::DeleteProviderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>> AsyncDeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>>(AsyncDeleteProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>> PrepareAsyncDeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>>(PrepareAsyncDeleteProviderRaw(context, request, cq));
    }
    ::grpc::Status CreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::source::v1alpha1::CreateIntegrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>> AsyncCreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>>(AsyncCreateIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>> PrepareAsyncCreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>>(PrepareAsyncCreateIntegrationRaw(context, request, cq));
    }
    ::grpc::Status ListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::source::v1alpha1::ListIntegrationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>> AsyncListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>>(AsyncListIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>> PrepareAsyncListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>>(PrepareAsyncListIntegrationsRaw(context, request, cq));
    }
    ::grpc::Status GetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::source::v1alpha1::GetIntegrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>> AsyncGetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>>(AsyncGetIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>> PrepareAsyncGetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>>(PrepareAsyncGetIntegrationRaw(context, request, cq));
    }
    ::grpc::Status UpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::source::v1alpha1::UpdateIntegrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>> AsyncUpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>>(AsyncUpdateIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>> PrepareAsyncUpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>>(PrepareAsyncUpdateIntegrationRaw(context, request, cq));
    }
    ::grpc::Status DeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::source::v1alpha1::DeleteIntegrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>> AsyncDeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>>(AsyncDeleteIntegrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>> PrepareAsyncDeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>>(PrepareAsyncDeleteIntegrationRaw(context, request, cq));
    }
    ::grpc::Status DeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>> AsyncDeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>>(AsyncDeleteIntegrationsByOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>> PrepareAsyncDeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>>(PrepareAsyncDeleteIntegrationsByOrganizationRaw(context, request, cq));
    }
    ::grpc::Status ListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>> AsyncListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>>(AsyncListRepositoriesProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>> PrepareAsyncListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>>(PrepareAsyncListRepositoriesProviderRaw(context, request, cq));
    }
    ::grpc::Status GetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::source::v1alpha1::GetRepositoryProviderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>> AsyncGetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>>(AsyncGetRepositoryProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>> PrepareAsyncGetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>>(PrepareAsyncGetRepositoryProviderRaw(context, request, cq));
    }
    ::grpc::Status CreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::source::v1alpha1::CreateRepositoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>> AsyncCreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>>(AsyncCreateRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>> PrepareAsyncCreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>>(PrepareAsyncCreateRepositoryRaw(context, request, cq));
    }
    ::grpc::Status ListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::source::v1alpha1::ListRepositoriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>> AsyncListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>>(AsyncListRepositoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>> PrepareAsyncListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>>(PrepareAsyncListRepositoriesRaw(context, request, cq));
    }
    ::grpc::Status GetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::source::v1alpha1::GetRepositoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>> AsyncGetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>>(AsyncGetRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>> PrepareAsyncGetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>>(PrepareAsyncGetRepositoryRaw(context, request, cq));
    }
    ::grpc::Status DeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::source::v1alpha1::DeleteRepositoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>> AsyncDeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>>(AsyncDeleteRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>> PrepareAsyncDeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>>(PrepareAsyncDeleteRepositoryRaw(context, request, cq));
    }
    ::grpc::Status UpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::source::v1alpha1::UpdateRepositoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>> AsyncUpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>>(AsyncUpdateRepositoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>> PrepareAsyncUpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>>(PrepareAsyncUpdateRepositoryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response, std::function<void(::grpc::Status)>) override;
      void ListProviders(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOneProviderByName(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest* request, ::source::v1alpha1::GetOneProviderByNameResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateProvider(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteProvider(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response, std::function<void(::grpc::Status)>) override;
      void ListIntegrations(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteIntegration(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteIntegrationsByOrganization(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void ListRepositoriesProvider(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRepositoryProvider(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response, std::function<void(::grpc::Status)>) override;
      void ListRepositories(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRepository(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRepository(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateRepository(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>* AsyncCreateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateProviderResponse>* PrepareAsyncCreateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>* AsyncListProvidersRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListProvidersResponse>* PrepareAsyncListProvidersRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListProvidersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>* AsyncGetProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetProviderResponse>* PrepareAsyncGetProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetOneProviderByNameResponse>* AsyncGetOneProviderByNameRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetOneProviderByNameResponse>* PrepareAsyncGetOneProviderByNameRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>* AsyncUpdateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateProviderResponse>* PrepareAsyncUpdateProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>* AsyncDeleteProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteProviderResponse>* PrepareAsyncDeleteProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>* AsyncCreateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateIntegrationResponse>* PrepareAsyncCreateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>* AsyncListIntegrationsRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListIntegrationsResponse>* PrepareAsyncListIntegrationsRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>* AsyncGetIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetIntegrationResponse>* PrepareAsyncGetIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>* AsyncUpdateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateIntegrationResponse>* PrepareAsyncUpdateIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>* AsyncDeleteIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationResponse>* PrepareAsyncDeleteIntegrationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>* AsyncDeleteIntegrationsByOrganizationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>* PrepareAsyncDeleteIntegrationsByOrganizationRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>* AsyncListRepositoriesProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesProviderResponse>* PrepareAsyncListRepositoriesProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>* AsyncGetRepositoryProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryProviderResponse>* PrepareAsyncGetRepositoryProviderRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>* AsyncCreateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::CreateRepositoryResponse>* PrepareAsyncCreateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::CreateRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>* AsyncListRepositoriesRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::ListRepositoriesResponse>* PrepareAsyncListRepositoriesRaw(::grpc::ClientContext* context, const ::source::v1alpha1::ListRepositoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>* AsyncGetRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::GetRepositoryResponse>* PrepareAsyncGetRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::GetRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>* AsyncDeleteRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::DeleteRepositoryResponse>* PrepareAsyncDeleteRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::DeleteRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>* AsyncUpdateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::source::v1alpha1::UpdateRepositoryResponse>* PrepareAsyncUpdateRepositoryRaw(::grpc::ClientContext* context, const ::source::v1alpha1::UpdateRepositoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProviders_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOneProviderByName_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateIntegration_;
    const ::grpc::internal::RpcMethod rpcmethod_ListIntegrations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIntegration_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateIntegration_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteIntegration_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteIntegrationsByOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_ListRepositoriesProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRepositoryProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRepository_;
    const ::grpc::internal::RpcMethod rpcmethod_ListRepositories_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRepository_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRepository_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRepository_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // PROVIDERS
    virtual ::grpc::Status CreateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response);
    virtual ::grpc::Status ListProviders(::grpc::ServerContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response);
    virtual ::grpc::Status GetProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response);
    virtual ::grpc::Status GetOneProviderByName(::grpc::ServerContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest* request, ::source::v1alpha1::GetOneProviderByNameResponse* response);
    virtual ::grpc::Status UpdateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response);
    virtual ::grpc::Status DeleteProvider(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response);
    // INTEGRATIONS
    virtual ::grpc::Status CreateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response);
    virtual ::grpc::Status ListIntegrations(::grpc::ServerContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response);
    virtual ::grpc::Status GetIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response);
    virtual ::grpc::Status UpdateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response);
    virtual ::grpc::Status DeleteIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response);
    virtual ::grpc::Status DeleteIntegrationsByOrganization(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response);
    // List Repositories providers by integrations
    virtual ::grpc::Status ListRepositoriesProvider(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response);
    virtual ::grpc::Status GetRepositoryProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response);
    // REPOSITORIES
    virtual ::grpc::Status CreateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response);
    virtual ::grpc::Status ListRepositories(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response);
    virtual ::grpc::Status GetRepository(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response);
    virtual ::grpc::Status DeleteRepository(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response);
    virtual ::grpc::Status UpdateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateProvider() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProvider(::grpc::ServerContext* context, ::source::v1alpha1::CreateProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::CreateProviderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProviders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListProviders() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListProviders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProviders(::grpc::ServerContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProviders(::grpc::ServerContext* context, ::source::v1alpha1::ListProvidersRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::ListProvidersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetProvider() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProvider(::grpc::ServerContext* context, ::source::v1alpha1::GetProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::GetProviderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOneProviderByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOneProviderByName() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetOneProviderByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneProviderByName(::grpc::ServerContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest* request, ::source::v1alpha1::GetOneProviderByNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneProviderByName(::grpc::ServerContext* context, ::source::v1alpha1::GetOneProviderByNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::GetOneProviderByNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateProvider() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProvider(::grpc::ServerContext* context, ::source::v1alpha1::UpdateProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::UpdateProviderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteProvider() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProvider(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProvider(::grpc::ServerContext* context, ::source::v1alpha1::DeleteProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::DeleteProviderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateIntegration() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIntegration(::grpc::ServerContext* context, ::source::v1alpha1::CreateIntegrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::CreateIntegrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListIntegrations() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIntegrations(::grpc::ServerContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIntegrations(::grpc::ServerContext* context, ::source::v1alpha1::ListIntegrationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::ListIntegrationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIntegration() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIntegration(::grpc::ServerContext* context, ::source::v1alpha1::GetIntegrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::GetIntegrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateIntegration() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateIntegration(::grpc::ServerContext* context, ::source::v1alpha1::UpdateIntegrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::UpdateIntegrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteIntegration() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteIntegration(::grpc::ServerContext* context, ::source::v1alpha1::DeleteIntegrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::DeleteIntegrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteIntegrationsByOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteIntegrationsByOrganization() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DeleteIntegrationsByOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIntegrationsByOrganization(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteIntegrationsByOrganization(::grpc::ServerContext* context, ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRepositoriesProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListRepositoriesProvider() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ListRepositoriesProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRepositoriesProvider(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRepositoriesProvider(::grpc::ServerContext* context, ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::ListRepositoriesProviderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRepositoryProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRepositoryProvider() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetRepositoryProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRepositoryProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRepositoryProvider(::grpc::ServerContext* context, ::source::v1alpha1::GetRepositoryProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::GetRepositoryProviderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateRepository() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_CreateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRepository(::grpc::ServerContext* context, ::source::v1alpha1::CreateRepositoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::CreateRepositoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRepositories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListRepositories() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ListRepositories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRepositories(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRepositories(::grpc::ServerContext* context, ::source::v1alpha1::ListRepositoriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::ListRepositoriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRepository() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRepository(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRepository(::grpc::ServerContext* context, ::source::v1alpha1::GetRepositoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::GetRepositoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteRepository() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DeleteRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRepository(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRepository(::grpc::ServerContext* context, ::source::v1alpha1::DeleteRepositoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::DeleteRepositoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateRepository() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_UpdateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRepository(::grpc::ServerContext* context, ::source::v1alpha1::UpdateRepositoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::source::v1alpha1::UpdateRepositoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateProvider<WithAsyncMethod_ListProviders<WithAsyncMethod_GetProvider<WithAsyncMethod_GetOneProviderByName<WithAsyncMethod_UpdateProvider<WithAsyncMethod_DeleteProvider<WithAsyncMethod_CreateIntegration<WithAsyncMethod_ListIntegrations<WithAsyncMethod_GetIntegration<WithAsyncMethod_UpdateIntegration<WithAsyncMethod_DeleteIntegration<WithAsyncMethod_DeleteIntegrationsByOrganization<WithAsyncMethod_ListRepositoriesProvider<WithAsyncMethod_GetRepositoryProvider<WithAsyncMethod_CreateRepository<WithAsyncMethod_ListRepositories<WithAsyncMethod_GetRepository<WithAsyncMethod_DeleteRepository<WithAsyncMethod_UpdateRepository<Service > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateProvider() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProviders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListProviders() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListProviders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProviders(::grpc::ServerContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetProvider() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOneProviderByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOneProviderByName() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetOneProviderByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneProviderByName(::grpc::ServerContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest* request, ::source::v1alpha1::GetOneProviderByNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateProvider() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteProvider() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProvider(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateIntegration() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListIntegrations() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIntegrations(::grpc::ServerContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIntegration() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateIntegration() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteIntegration() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteIntegrationsByOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteIntegrationsByOrganization() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DeleteIntegrationsByOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIntegrationsByOrganization(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRepositoriesProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListRepositoriesProvider() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ListRepositoriesProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRepositoriesProvider(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRepositoryProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRepositoryProvider() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetRepositoryProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRepositoryProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateRepository() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_CreateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRepositories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListRepositories() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ListRepositories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRepositories(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRepository() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRepository(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteRepository() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DeleteRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRepository(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateRepository() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_UpdateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateProvider() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListProviders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListProviders() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListProviders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProviders(::grpc::ServerContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProviders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetProvider() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOneProviderByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOneProviderByName() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetOneProviderByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneProviderByName(::grpc::ServerContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest* request, ::source::v1alpha1::GetOneProviderByNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneProviderByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateProvider() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteProvider() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProvider(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateIntegration() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIntegration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListIntegrations() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIntegrations(::grpc::ServerContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIntegrations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetIntegration() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIntegration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateIntegration() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateIntegration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteIntegration() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteIntegration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteIntegrationsByOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteIntegrationsByOrganization() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DeleteIntegrationsByOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIntegrationsByOrganization(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteIntegrationsByOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListRepositoriesProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListRepositoriesProvider() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ListRepositoriesProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRepositoriesProvider(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRepositoriesProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRepositoryProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRepositoryProvider() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetRepositoryProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRepositoryProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRepositoryProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateRepository() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_CreateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRepository(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListRepositories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListRepositories() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ListRepositories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRepositories(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRepositories(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRepository() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRepository(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRepository(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteRepository() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DeleteRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRepository(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRepository(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateRepository() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_UpdateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRepository(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateProvider() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::CreateProviderRequest, ::source::v1alpha1::CreateProviderResponse>(std::bind(&WithStreamedUnaryMethod_CreateProvider<BaseClass>::StreamedCreateProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::CreateProviderRequest* request, ::source::v1alpha1::CreateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::CreateProviderRequest,::source::v1alpha1::CreateProviderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProviders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListProviders() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::ListProvidersRequest, ::source::v1alpha1::ListProvidersResponse>(std::bind(&WithStreamedUnaryMethod_ListProviders<BaseClass>::StreamedListProviders, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListProviders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProviders(::grpc::ServerContext* context, const ::source::v1alpha1::ListProvidersRequest* request, ::source::v1alpha1::ListProvidersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProviders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::ListProvidersRequest,::source::v1alpha1::ListProvidersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetProvider() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::GetProviderRequest, ::source::v1alpha1::GetProviderResponse>(std::bind(&WithStreamedUnaryMethod_GetProvider<BaseClass>::StreamedGetProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetProviderRequest* request, ::source::v1alpha1::GetProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::GetProviderRequest,::source::v1alpha1::GetProviderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOneProviderByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOneProviderByName() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::GetOneProviderByNameRequest, ::source::v1alpha1::GetOneProviderByNameResponse>(std::bind(&WithStreamedUnaryMethod_GetOneProviderByName<BaseClass>::StreamedGetOneProviderByName, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOneProviderByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOneProviderByName(::grpc::ServerContext* context, const ::source::v1alpha1::GetOneProviderByNameRequest* request, ::source::v1alpha1::GetOneProviderByNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOneProviderByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::GetOneProviderByNameRequest,::source::v1alpha1::GetOneProviderByNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateProvider() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::UpdateProviderRequest, ::source::v1alpha1::UpdateProviderResponse>(std::bind(&WithStreamedUnaryMethod_UpdateProvider<BaseClass>::StreamedUpdateProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateProvider(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateProviderRequest* request, ::source::v1alpha1::UpdateProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::UpdateProviderRequest,::source::v1alpha1::UpdateProviderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteProvider() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::DeleteProviderRequest, ::source::v1alpha1::DeleteProviderResponse>(std::bind(&WithStreamedUnaryMethod_DeleteProvider<BaseClass>::StreamedDeleteProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteProvider(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteProviderRequest* request, ::source::v1alpha1::DeleteProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::DeleteProviderRequest,::source::v1alpha1::DeleteProviderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateIntegration() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::CreateIntegrationRequest, ::source::v1alpha1::CreateIntegrationResponse>(std::bind(&WithStreamedUnaryMethod_CreateIntegration<BaseClass>::StreamedCreateIntegration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::CreateIntegrationRequest* request, ::source::v1alpha1::CreateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateIntegration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::CreateIntegrationRequest,::source::v1alpha1::CreateIntegrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListIntegrations() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::ListIntegrationsRequest, ::source::v1alpha1::ListIntegrationsResponse>(std::bind(&WithStreamedUnaryMethod_ListIntegrations<BaseClass>::StreamedListIntegrations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListIntegrations(::grpc::ServerContext* context, const ::source::v1alpha1::ListIntegrationsRequest* request, ::source::v1alpha1::ListIntegrationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListIntegrations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::ListIntegrationsRequest,::source::v1alpha1::ListIntegrationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIntegration() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::GetIntegrationRequest, ::source::v1alpha1::GetIntegrationResponse>(std::bind(&WithStreamedUnaryMethod_GetIntegration<BaseClass>::StreamedGetIntegration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::GetIntegrationRequest* request, ::source::v1alpha1::GetIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIntegration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::GetIntegrationRequest,::source::v1alpha1::GetIntegrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateIntegration() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::UpdateIntegrationRequest, ::source::v1alpha1::UpdateIntegrationResponse>(std::bind(&WithStreamedUnaryMethod_UpdateIntegration<BaseClass>::StreamedUpdateIntegration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateIntegrationRequest* request, ::source::v1alpha1::UpdateIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateIntegration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::UpdateIntegrationRequest,::source::v1alpha1::UpdateIntegrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteIntegration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteIntegration() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::DeleteIntegrationRequest, ::source::v1alpha1::DeleteIntegrationResponse>(std::bind(&WithStreamedUnaryMethod_DeleteIntegration<BaseClass>::StreamedDeleteIntegration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteIntegration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteIntegration(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationRequest* request, ::source::v1alpha1::DeleteIntegrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteIntegration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::DeleteIntegrationRequest,::source::v1alpha1::DeleteIntegrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteIntegrationsByOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteIntegrationsByOrganization() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_DeleteIntegrationsByOrganization<BaseClass>::StreamedDeleteIntegrationsByOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteIntegrationsByOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteIntegrationsByOrganization(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest* request, ::source::v1alpha1::DeleteIntegrationsByOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteIntegrationsByOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::DeleteIntegrationsByOrganizationRequest,::source::v1alpha1::DeleteIntegrationsByOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListRepositoriesProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListRepositoriesProvider() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::ListRepositoriesProviderRequest, ::source::v1alpha1::ListRepositoriesProviderResponse>(std::bind(&WithStreamedUnaryMethod_ListRepositoriesProvider<BaseClass>::StreamedListRepositoriesProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListRepositoriesProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRepositoriesProvider(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesProviderRequest* request, ::source::v1alpha1::ListRepositoriesProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListRepositoriesProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::ListRepositoriesProviderRequest,::source::v1alpha1::ListRepositoriesProviderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRepositoryProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRepositoryProvider() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::GetRepositoryProviderRequest, ::source::v1alpha1::GetRepositoryProviderResponse>(std::bind(&WithStreamedUnaryMethod_GetRepositoryProvider<BaseClass>::StreamedGetRepositoryProvider, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRepositoryProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRepositoryProvider(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryProviderRequest* request, ::source::v1alpha1::GetRepositoryProviderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRepositoryProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::GetRepositoryProviderRequest,::source::v1alpha1::GetRepositoryProviderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateRepository() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::CreateRepositoryRequest, ::source::v1alpha1::CreateRepositoryResponse>(std::bind(&WithStreamedUnaryMethod_CreateRepository<BaseClass>::StreamedCreateRepository, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::CreateRepositoryRequest* request, ::source::v1alpha1::CreateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRepository(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::CreateRepositoryRequest,::source::v1alpha1::CreateRepositoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListRepositories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListRepositories() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::ListRepositoriesRequest, ::source::v1alpha1::ListRepositoriesResponse>(std::bind(&WithStreamedUnaryMethod_ListRepositories<BaseClass>::StreamedListRepositories, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListRepositories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRepositories(::grpc::ServerContext* context, const ::source::v1alpha1::ListRepositoriesRequest* request, ::source::v1alpha1::ListRepositoriesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListRepositories(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::ListRepositoriesRequest,::source::v1alpha1::ListRepositoriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRepository() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::GetRepositoryRequest, ::source::v1alpha1::GetRepositoryResponse>(std::bind(&WithStreamedUnaryMethod_GetRepository<BaseClass>::StreamedGetRepository, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRepository(::grpc::ServerContext* context, const ::source::v1alpha1::GetRepositoryRequest* request, ::source::v1alpha1::GetRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRepository(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::GetRepositoryRequest,::source::v1alpha1::GetRepositoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteRepository() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::DeleteRepositoryRequest, ::source::v1alpha1::DeleteRepositoryResponse>(std::bind(&WithStreamedUnaryMethod_DeleteRepository<BaseClass>::StreamedDeleteRepository, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRepository(::grpc::ServerContext* context, const ::source::v1alpha1::DeleteRepositoryRequest* request, ::source::v1alpha1::DeleteRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRepository(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::DeleteRepositoryRequest,::source::v1alpha1::DeleteRepositoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRepository : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateRepository() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::source::v1alpha1::UpdateRepositoryRequest, ::source::v1alpha1::UpdateRepositoryResponse>(std::bind(&WithStreamedUnaryMethod_UpdateRepository<BaseClass>::StreamedUpdateRepository, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateRepository() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRepository(::grpc::ServerContext* context, const ::source::v1alpha1::UpdateRepositoryRequest* request, ::source::v1alpha1::UpdateRepositoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRepository(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::source::v1alpha1::UpdateRepositoryRequest,::source::v1alpha1::UpdateRepositoryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateProvider<WithStreamedUnaryMethod_ListProviders<WithStreamedUnaryMethod_GetProvider<WithStreamedUnaryMethod_GetOneProviderByName<WithStreamedUnaryMethod_UpdateProvider<WithStreamedUnaryMethod_DeleteProvider<WithStreamedUnaryMethod_CreateIntegration<WithStreamedUnaryMethod_ListIntegrations<WithStreamedUnaryMethod_GetIntegration<WithStreamedUnaryMethod_UpdateIntegration<WithStreamedUnaryMethod_DeleteIntegration<WithStreamedUnaryMethod_DeleteIntegrationsByOrganization<WithStreamedUnaryMethod_ListRepositoriesProvider<WithStreamedUnaryMethod_GetRepositoryProvider<WithStreamedUnaryMethod_CreateRepository<WithStreamedUnaryMethod_ListRepositories<WithStreamedUnaryMethod_GetRepository<WithStreamedUnaryMethod_DeleteRepository<WithStreamedUnaryMethod_UpdateRepository<Service > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateProvider<WithStreamedUnaryMethod_ListProviders<WithStreamedUnaryMethod_GetProvider<WithStreamedUnaryMethod_GetOneProviderByName<WithStreamedUnaryMethod_UpdateProvider<WithStreamedUnaryMethod_DeleteProvider<WithStreamedUnaryMethod_CreateIntegration<WithStreamedUnaryMethod_ListIntegrations<WithStreamedUnaryMethod_GetIntegration<WithStreamedUnaryMethod_UpdateIntegration<WithStreamedUnaryMethod_DeleteIntegration<WithStreamedUnaryMethod_DeleteIntegrationsByOrganization<WithStreamedUnaryMethod_ListRepositoriesProvider<WithStreamedUnaryMethod_GetRepositoryProvider<WithStreamedUnaryMethod_CreateRepository<WithStreamedUnaryMethod_ListRepositories<WithStreamedUnaryMethod_GetRepository<WithStreamedUnaryMethod_DeleteRepository<WithStreamedUnaryMethod_UpdateRepository<Service > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace source


#endif  // GRPC_source_2fv1alpha1_2fsource_2eproto__INCLUDED
