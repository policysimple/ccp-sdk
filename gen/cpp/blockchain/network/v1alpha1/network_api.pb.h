// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/network/v1alpha1/network_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blockchain/network/v1alpha1/network.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
namespace blockchain {
namespace network {
namespace v1alpha1 {
class AddPeerToOrganizationRequest;
struct AddPeerToOrganizationRequestDefaultTypeInternal;
extern AddPeerToOrganizationRequestDefaultTypeInternal _AddPeerToOrganizationRequest_default_instance_;
class AddPeerToOrganizationResponse;
struct AddPeerToOrganizationResponseDefaultTypeInternal;
extern AddPeerToOrganizationResponseDefaultTypeInternal _AddPeerToOrganizationResponse_default_instance_;
class CreateChannelRequest;
struct CreateChannelRequestDefaultTypeInternal;
extern CreateChannelRequestDefaultTypeInternal _CreateChannelRequest_default_instance_;
class CreateChannelResponse;
struct CreateChannelResponseDefaultTypeInternal;
extern CreateChannelResponseDefaultTypeInternal _CreateChannelResponse_default_instance_;
class CreateNetworkRequest;
struct CreateNetworkRequestDefaultTypeInternal;
extern CreateNetworkRequestDefaultTypeInternal _CreateNetworkRequest_default_instance_;
class CreateNetworkResponse;
struct CreateNetworkResponseDefaultTypeInternal;
extern CreateNetworkResponseDefaultTypeInternal _CreateNetworkResponse_default_instance_;
class CreateOrganizationRequest;
struct CreateOrganizationRequestDefaultTypeInternal;
extern CreateOrganizationRequestDefaultTypeInternal _CreateOrganizationRequest_default_instance_;
class CreateOrganizationResponse;
struct CreateOrganizationResponseDefaultTypeInternal;
extern CreateOrganizationResponseDefaultTypeInternal _CreateOrganizationResponse_default_instance_;
class GetBlockchainsRequest;
struct GetBlockchainsRequestDefaultTypeInternal;
extern GetBlockchainsRequestDefaultTypeInternal _GetBlockchainsRequest_default_instance_;
class GetBlockchainsResponse;
struct GetBlockchainsResponseDefaultTypeInternal;
extern GetBlockchainsResponseDefaultTypeInternal _GetBlockchainsResponse_default_instance_;
class SendInvitationRequest;
struct SendInvitationRequestDefaultTypeInternal;
extern SendInvitationRequestDefaultTypeInternal _SendInvitationRequest_default_instance_;
class SendInvitationResponse;
struct SendInvitationResponseDefaultTypeInternal;
extern SendInvitationResponseDefaultTypeInternal _SendInvitationResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::network::v1alpha1::AddPeerToOrganizationRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddPeerToOrganizationRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::AddPeerToOrganizationResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddPeerToOrganizationResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateChannelRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateChannelRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateChannelResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateChannelResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateOrganizationRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateOrganizationRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateOrganizationResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateOrganizationResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::SendInvitationRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::SendInvitationRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::SendInvitationResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::SendInvitationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace network {
namespace v1alpha1 {

// ===================================================================

class CreateNetworkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkRequest) */ {
 public:
  inline CreateNetworkRequest() : CreateNetworkRequest(nullptr) {}
  ~CreateNetworkRequest() override;
  explicit constexpr CreateNetworkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkRequest(const CreateNetworkRequest& from);
  CreateNetworkRequest(CreateNetworkRequest&& from) noexcept
    : CreateNetworkRequest() {
    *this = ::std::move(from);
  }

  inline CreateNetworkRequest& operator=(const CreateNetworkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkRequest& operator=(CreateNetworkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkRequest*>(
               &_CreateNetworkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateNetworkRequest& a, CreateNetworkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkRequest* New() const final {
    return new CreateNetworkRequest();
  }

  CreateNetworkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkRequest";
  }
  protected:
  explicit CreateNetworkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 1,
    kOrganizationFieldNumber = 2,
  };
  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // .blockchain.network.v1alpha1.Organization organization = 2 [json_name = "organization"];
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::blockchain::network::v1alpha1::Organization& organization() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Organization* release_organization();
  ::blockchain::network::v1alpha1::Organization* mutable_organization();
  void set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization);
  private:
  const ::blockchain::network::v1alpha1::Organization& _internal_organization() const;
  ::blockchain::network::v1alpha1::Organization* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::blockchain::network::v1alpha1::Organization* organization);
  ::blockchain::network::v1alpha1::Organization* unsafe_arena_release_organization();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Network* network_;
  ::blockchain::network::v1alpha1::Organization* organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddPeerToOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddPeerToOrganizationRequest) */ {
 public:
  inline AddPeerToOrganizationRequest() : AddPeerToOrganizationRequest(nullptr) {}
  ~AddPeerToOrganizationRequest() override;
  explicit constexpr AddPeerToOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerToOrganizationRequest(const AddPeerToOrganizationRequest& from);
  AddPeerToOrganizationRequest(AddPeerToOrganizationRequest&& from) noexcept
    : AddPeerToOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline AddPeerToOrganizationRequest& operator=(const AddPeerToOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerToOrganizationRequest& operator=(AddPeerToOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerToOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerToOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const AddPeerToOrganizationRequest*>(
               &_AddPeerToOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddPeerToOrganizationRequest& a, AddPeerToOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerToOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerToOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerToOrganizationRequest* New() const final {
    return new AddPeerToOrganizationRequest();
  }

  AddPeerToOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerToOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerToOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerToOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerToOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddPeerToOrganizationRequest";
  }
  protected:
  explicit AddPeerToOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockchainIdFieldNumber = 2,
    kOrganizationFieldNumber = 1,
  };
  // string blockchain_id = 2 [json_name = "blockchainId"];
  void clear_blockchain_id();
  const std::string& blockchain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockchain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockchain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_blockchain_id();
  void set_allocated_blockchain_id(std::string* blockchain_id);
  private:
  const std::string& _internal_blockchain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockchain_id(const std::string& value);
  std::string* _internal_mutable_blockchain_id();
  public:

  // .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::blockchain::network::v1alpha1::Organization& organization() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Organization* release_organization();
  ::blockchain::network::v1alpha1::Organization* mutable_organization();
  void set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization);
  private:
  const ::blockchain::network::v1alpha1::Organization& _internal_organization() const;
  ::blockchain::network::v1alpha1::Organization* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::blockchain::network::v1alpha1::Organization* organization);
  ::blockchain::network::v1alpha1::Organization* unsafe_arena_release_organization();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddPeerToOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockchain_id_;
  ::blockchain::network::v1alpha1::Organization* organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateChannelRequest) */ {
 public:
  inline CreateChannelRequest() : CreateChannelRequest(nullptr) {}
  ~CreateChannelRequest() override;
  explicit constexpr CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelRequest(const CreateChannelRequest& from);
  CreateChannelRequest(CreateChannelRequest&& from) noexcept
    : CreateChannelRequest() {
    *this = ::std::move(from);
  }

  inline CreateChannelRequest& operator=(const CreateChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelRequest& operator=(CreateChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChannelRequest*>(
               &_CreateChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateChannelRequest& a, CreateChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelRequest* New() const final {
    return new CreateChannelRequest();
  }

  CreateChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateChannelRequest";
  }
  protected:
  explicit CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::blockchain::network::v1alpha1::Channel& channel() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Channel* release_channel();
  ::blockchain::network::v1alpha1::Channel* mutable_channel();
  void set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel);
  private:
  const ::blockchain::network::v1alpha1::Channel& _internal_channel() const;
  ::blockchain::network::v1alpha1::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::blockchain::network::v1alpha1::Channel* channel);
  ::blockchain::network::v1alpha1::Channel* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Channel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsRequest) */ {
 public:
  inline GetBlockchainsRequest() : GetBlockchainsRequest(nullptr) {}
  ~GetBlockchainsRequest() override;
  explicit constexpr GetBlockchainsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsRequest(const GetBlockchainsRequest& from);
  GetBlockchainsRequest(GetBlockchainsRequest&& from) noexcept
    : GetBlockchainsRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsRequest& operator=(const GetBlockchainsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsRequest& operator=(GetBlockchainsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsRequest*>(
               &_GetBlockchainsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBlockchainsRequest& a, GetBlockchainsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsRequest* New() const final {
    return new GetBlockchainsRequest();
  }

  GetBlockchainsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsRequest";
  }
  protected:
  explicit GetBlockchainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateOrganizationRequest) */ {
 public:
  inline CreateOrganizationRequest() : CreateOrganizationRequest(nullptr) {}
  ~CreateOrganizationRequest() override;
  explicit constexpr CreateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrganizationRequest(const CreateOrganizationRequest& from);
  CreateOrganizationRequest(CreateOrganizationRequest&& from) noexcept
    : CreateOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationRequest& operator=(const CreateOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationRequest& operator=(CreateOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationRequest*>(
               &_CreateOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateOrganizationRequest& a, CreateOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationRequest* New() const final {
    return new CreateOrganizationRequest();
  }

  CreateOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateOrganizationRequest";
  }
  protected:
  explicit CreateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationFieldNumber = 1,
  };
  // .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::blockchain::network::v1alpha1::Organization& organization() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Organization* release_organization();
  ::blockchain::network::v1alpha1::Organization* mutable_organization();
  void set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization);
  private:
  const ::blockchain::network::v1alpha1::Organization& _internal_organization() const;
  ::blockchain::network::v1alpha1::Organization* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::blockchain::network::v1alpha1::Organization* organization);
  ::blockchain::network::v1alpha1::Organization* unsafe_arena_release_organization();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Organization* organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendInvitationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.SendInvitationRequest) */ {
 public:
  inline SendInvitationRequest() : SendInvitationRequest(nullptr) {}
  ~SendInvitationRequest() override;
  explicit constexpr SendInvitationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendInvitationRequest(const SendInvitationRequest& from);
  SendInvitationRequest(SendInvitationRequest&& from) noexcept
    : SendInvitationRequest() {
    *this = ::std::move(from);
  }

  inline SendInvitationRequest& operator=(const SendInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationRequest& operator=(SendInvitationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendInvitationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const SendInvitationRequest*>(
               &_SendInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendInvitationRequest& a, SendInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendInvitationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationRequest* New() const final {
    return new SendInvitationRequest();
  }

  SendInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendInvitationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendInvitationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.SendInvitationRequest";
  }
  protected:
  explicit SendInvitationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationFieldNumber = 1,
  };
  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::blockchain::network::v1alpha1::Invitation& invitation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Invitation* release_invitation();
  ::blockchain::network::v1alpha1::Invitation* mutable_invitation();
  void set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation);
  private:
  const ::blockchain::network::v1alpha1::Invitation& _internal_invitation() const;
  ::blockchain::network::v1alpha1::Invitation* _internal_mutable_invitation();
  public:
  void unsafe_arena_set_allocated_invitation(
      ::blockchain::network::v1alpha1::Invitation* invitation);
  ::blockchain::network::v1alpha1::Invitation* unsafe_arena_release_invitation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.SendInvitationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Invitation* invitation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateNetworkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkResponse) */ {
 public:
  inline CreateNetworkResponse() : CreateNetworkResponse(nullptr) {}
  ~CreateNetworkResponse() override;
  explicit constexpr CreateNetworkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkResponse(const CreateNetworkResponse& from);
  CreateNetworkResponse(CreateNetworkResponse&& from) noexcept
    : CreateNetworkResponse() {
    *this = ::std::move(from);
  }

  inline CreateNetworkResponse& operator=(const CreateNetworkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkResponse& operator=(CreateNetworkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkResponse*>(
               &_CreateNetworkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateNetworkResponse& a, CreateNetworkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkResponse* New() const final {
    return new CreateNetworkResponse();
  }

  CreateNetworkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkResponse";
  }
  protected:
  explicit CreateNetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kNetworkFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Network* network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddPeerToOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddPeerToOrganizationResponse) */ {
 public:
  inline AddPeerToOrganizationResponse() : AddPeerToOrganizationResponse(nullptr) {}
  ~AddPeerToOrganizationResponse() override;
  explicit constexpr AddPeerToOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerToOrganizationResponse(const AddPeerToOrganizationResponse& from);
  AddPeerToOrganizationResponse(AddPeerToOrganizationResponse&& from) noexcept
    : AddPeerToOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline AddPeerToOrganizationResponse& operator=(const AddPeerToOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerToOrganizationResponse& operator=(AddPeerToOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerToOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerToOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const AddPeerToOrganizationResponse*>(
               &_AddPeerToOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddPeerToOrganizationResponse& a, AddPeerToOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerToOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerToOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerToOrganizationResponse* New() const final {
    return new AddPeerToOrganizationResponse();
  }

  AddPeerToOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerToOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerToOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerToOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerToOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddPeerToOrganizationResponse";
  }
  protected:
  explicit AddPeerToOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kOrganizationFieldNumber = 1,
  };
  // string message = 3 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::blockchain::network::v1alpha1::Organization& organization() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Organization* release_organization();
  ::blockchain::network::v1alpha1::Organization* mutable_organization();
  void set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization);
  private:
  const ::blockchain::network::v1alpha1::Organization& _internal_organization() const;
  ::blockchain::network::v1alpha1::Organization* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::blockchain::network::v1alpha1::Organization* organization);
  ::blockchain::network::v1alpha1::Organization* unsafe_arena_release_organization();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddPeerToOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Organization* organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateChannelResponse) */ {
 public:
  inline CreateChannelResponse() : CreateChannelResponse(nullptr) {}
  ~CreateChannelResponse() override;
  explicit constexpr CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelResponse(const CreateChannelResponse& from);
  CreateChannelResponse(CreateChannelResponse&& from) noexcept
    : CreateChannelResponse() {
    *this = ::std::move(from);
  }

  inline CreateChannelResponse& operator=(const CreateChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelResponse& operator=(CreateChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CreateChannelResponse*>(
               &_CreateChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateChannelResponse& a, CreateChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelResponse* New() const final {
    return new CreateChannelResponse();
  }

  CreateChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateChannelResponse";
  }
  protected:
  explicit CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kChannelFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::blockchain::network::v1alpha1::Channel& channel() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Channel* release_channel();
  ::blockchain::network::v1alpha1::Channel* mutable_channel();
  void set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel);
  private:
  const ::blockchain::network::v1alpha1::Channel& _internal_channel() const;
  ::blockchain::network::v1alpha1::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::blockchain::network::v1alpha1::Channel* channel);
  ::blockchain::network::v1alpha1::Channel* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Channel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsResponse) */ {
 public:
  inline GetBlockchainsResponse() : GetBlockchainsResponse(nullptr) {}
  ~GetBlockchainsResponse() override;
  explicit constexpr GetBlockchainsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsResponse(const GetBlockchainsResponse& from);
  GetBlockchainsResponse(GetBlockchainsResponse&& from) noexcept
    : GetBlockchainsResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsResponse& operator=(const GetBlockchainsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsResponse& operator=(GetBlockchainsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsResponse*>(
               &_GetBlockchainsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetBlockchainsResponse& a, GetBlockchainsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsResponse* New() const final {
    return new GetBlockchainsResponse();
  }

  GetBlockchainsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsResponse";
  }
  protected:
  explicit GetBlockchainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // repeated .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  int network_size() const;
  private:
  int _internal_network_size() const;
  public:
  void clear_network();
  ::blockchain::network::v1alpha1::Network* mutable_network(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
      mutable_network();
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network(int index) const;
  ::blockchain::network::v1alpha1::Network* _internal_add_network();
  public:
  const ::blockchain::network::v1alpha1::Network& network(int index) const;
  ::blockchain::network::v1alpha1::Network* add_network();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
      network() const;

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network > network_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateOrganizationResponse) */ {
 public:
  inline CreateOrganizationResponse() : CreateOrganizationResponse(nullptr) {}
  ~CreateOrganizationResponse() override;
  explicit constexpr CreateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrganizationResponse(const CreateOrganizationResponse& from);
  CreateOrganizationResponse(CreateOrganizationResponse&& from) noexcept
    : CreateOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationResponse& operator=(const CreateOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationResponse& operator=(CreateOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationResponse*>(
               &_CreateOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateOrganizationResponse& a, CreateOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationResponse* New() const final {
    return new CreateOrganizationResponse();
  }

  CreateOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateOrganizationResponse";
  }
  protected:
  explicit CreateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOrganizationFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::blockchain::network::v1alpha1::Organization& organization() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Organization* release_organization();
  ::blockchain::network::v1alpha1::Organization* mutable_organization();
  void set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization);
  private:
  const ::blockchain::network::v1alpha1::Organization& _internal_organization() const;
  ::blockchain::network::v1alpha1::Organization* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::blockchain::network::v1alpha1::Organization* organization);
  ::blockchain::network::v1alpha1::Organization* unsafe_arena_release_organization();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Organization* organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendInvitationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.SendInvitationResponse) */ {
 public:
  inline SendInvitationResponse() : SendInvitationResponse(nullptr) {}
  ~SendInvitationResponse() override;
  explicit constexpr SendInvitationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendInvitationResponse(const SendInvitationResponse& from);
  SendInvitationResponse(SendInvitationResponse&& from) noexcept
    : SendInvitationResponse() {
    *this = ::std::move(from);
  }

  inline SendInvitationResponse& operator=(const SendInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationResponse& operator=(SendInvitationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendInvitationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendInvitationResponse* internal_default_instance() {
    return reinterpret_cast<const SendInvitationResponse*>(
               &_SendInvitationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendInvitationResponse& a, SendInvitationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendInvitationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationResponse* New() const final {
    return new SendInvitationResponse();
  }

  SendInvitationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendInvitationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendInvitationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.SendInvitationResponse";
  }
  protected:
  explicit SendInvitationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kInvitationFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::blockchain::network::v1alpha1::Invitation& invitation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Invitation* release_invitation();
  ::blockchain::network::v1alpha1::Invitation* mutable_invitation();
  void set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation);
  private:
  const ::blockchain::network::v1alpha1::Invitation& _internal_invitation() const;
  ::blockchain::network::v1alpha1::Invitation* _internal_mutable_invitation();
  public:
  void unsafe_arena_set_allocated_invitation(
      ::blockchain::network::v1alpha1::Invitation* invitation);
  ::blockchain::network::v1alpha1::Invitation* unsafe_arena_release_invitation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.SendInvitationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Invitation* invitation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateNetworkRequest

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool CreateNetworkRequest::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool CreateNetworkRequest::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkRequest::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkRequest::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  return _internal_network();
}
inline void CreateNetworkRequest::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.network)
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  return _msg;
}
inline void CreateNetworkRequest::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.network)
}

// .blockchain.network.v1alpha1.Organization organization = 2 [json_name = "organization"];
inline bool CreateNetworkRequest::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool CreateNetworkRequest::has_organization() const {
  return _internal_has_organization();
}
inline const ::blockchain::network::v1alpha1::Organization& CreateNetworkRequest::_internal_organization() const {
  const ::blockchain::network::v1alpha1::Organization* p = organization_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Organization&>(
      ::blockchain::network::v1alpha1::_Organization_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Organization& CreateNetworkRequest::organization() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkRequest.organization)
  return _internal_organization();
}
inline void CreateNetworkRequest::unsafe_arena_set_allocated_organization(
    ::blockchain::network::v1alpha1::Organization* organization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.organization)
}
inline ::blockchain::network::v1alpha1::Organization* CreateNetworkRequest::release_organization() {
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* CreateNetworkRequest::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkRequest.organization)
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* CreateNetworkRequest::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Organization>(GetArenaForAllocation());
    organization_ = p;
  }
  return organization_;
}
inline ::blockchain::network::v1alpha1::Organization* CreateNetworkRequest::mutable_organization() {
  ::blockchain::network::v1alpha1::Organization* _msg = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkRequest.organization)
  return _msg;
}
inline void CreateNetworkRequest::set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization));
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.organization)
}

// -------------------------------------------------------------------

// AddPeerToOrganizationRequest

// .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
inline bool AddPeerToOrganizationRequest::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool AddPeerToOrganizationRequest::has_organization() const {
  return _internal_has_organization();
}
inline const ::blockchain::network::v1alpha1::Organization& AddPeerToOrganizationRequest::_internal_organization() const {
  const ::blockchain::network::v1alpha1::Organization* p = organization_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Organization&>(
      ::blockchain::network::v1alpha1::_Organization_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Organization& AddPeerToOrganizationRequest::organization() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.organization)
  return _internal_organization();
}
inline void AddPeerToOrganizationRequest::unsafe_arena_set_allocated_organization(
    ::blockchain::network::v1alpha1::Organization* organization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.organization)
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationRequest::release_organization() {
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationRequest::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.organization)
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationRequest::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Organization>(GetArenaForAllocation());
    organization_ = p;
  }
  return organization_;
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationRequest::mutable_organization() {
  ::blockchain::network::v1alpha1::Organization* _msg = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.organization)
  return _msg;
}
inline void AddPeerToOrganizationRequest::set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization));
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.organization)
}

// string blockchain_id = 2 [json_name = "blockchainId"];
inline void AddPeerToOrganizationRequest::clear_blockchain_id() {
  blockchain_id_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationRequest::blockchain_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.blockchain_id)
  return _internal_blockchain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationRequest::set_blockchain_id(ArgT0&& arg0, ArgT... args) {
 
 blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.blockchain_id)
}
inline std::string* AddPeerToOrganizationRequest::mutable_blockchain_id() {
  std::string* _s = _internal_mutable_blockchain_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.blockchain_id)
  return _s;
}
inline const std::string& AddPeerToOrganizationRequest::_internal_blockchain_id() const {
  return blockchain_id_.Get();
}
inline void AddPeerToOrganizationRequest::_internal_set_blockchain_id(const std::string& value) {
  
  blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::_internal_mutable_blockchain_id() {
  
  return blockchain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::release_blockchain_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.blockchain_id)
  return blockchain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationRequest::set_allocated_blockchain_id(std::string* blockchain_id) {
  if (blockchain_id != nullptr) {
    
  } else {
    
  }
  blockchain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockchain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.blockchain_id)
}

// -------------------------------------------------------------------

// CreateChannelRequest

// .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
inline bool CreateChannelRequest::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CreateChannelRequest::has_channel() const {
  return _internal_has_channel();
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelRequest::_internal_channel() const {
  const ::blockchain::network::v1alpha1::Channel* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Channel&>(
      ::blockchain::network::v1alpha1::_Channel_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelRequest::channel() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelRequest.channel)
  return _internal_channel();
}
inline void CreateChannelRequest::unsafe_arena_set_allocated_channel(
    ::blockchain::network::v1alpha1::Channel* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateChannelRequest.channel)
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::release_channel() {
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelRequest.channel)
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Channel>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::mutable_channel() {
  ::blockchain::network::v1alpha1::Channel* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelRequest.channel)
  return _msg;
}
inline void CreateChannelRequest::set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel));
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelRequest.channel)
}

// -------------------------------------------------------------------

// GetBlockchainsRequest

// string id = 1 [json_name = "id"];
inline void GetBlockchainsRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetBlockchainsRequest::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsRequest.id)
}
inline std::string* GetBlockchainsRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsRequest.id)
  return _s;
}
inline const std::string& GetBlockchainsRequest::_internal_id() const {
  return id_.Get();
}
inline void GetBlockchainsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsRequest::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsRequest.id)
}

// -------------------------------------------------------------------

// CreateOrganizationRequest

// .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
inline bool CreateOrganizationRequest::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool CreateOrganizationRequest::has_organization() const {
  return _internal_has_organization();
}
inline const ::blockchain::network::v1alpha1::Organization& CreateOrganizationRequest::_internal_organization() const {
  const ::blockchain::network::v1alpha1::Organization* p = organization_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Organization&>(
      ::blockchain::network::v1alpha1::_Organization_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Organization& CreateOrganizationRequest::organization() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateOrganizationRequest.organization)
  return _internal_organization();
}
inline void CreateOrganizationRequest::unsafe_arena_set_allocated_organization(
    ::blockchain::network::v1alpha1::Organization* organization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateOrganizationRequest.organization)
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationRequest::release_organization() {
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationRequest::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateOrganizationRequest.organization)
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationRequest::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Organization>(GetArenaForAllocation());
    organization_ = p;
  }
  return organization_;
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationRequest::mutable_organization() {
  ::blockchain::network::v1alpha1::Organization* _msg = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateOrganizationRequest.organization)
  return _msg;
}
inline void CreateOrganizationRequest::set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization));
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateOrganizationRequest.organization)
}

// -------------------------------------------------------------------

// SendInvitationRequest

// .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
inline bool SendInvitationRequest::_internal_has_invitation() const {
  return this != internal_default_instance() && invitation_ != nullptr;
}
inline bool SendInvitationRequest::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationRequest::_internal_invitation() const {
  const ::blockchain::network::v1alpha1::Invitation* p = invitation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Invitation&>(
      ::blockchain::network::v1alpha1::_Invitation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationRequest::invitation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
  return _internal_invitation();
}
inline void SendInvitationRequest::unsafe_arena_set_allocated_invitation(
    ::blockchain::network::v1alpha1::Invitation* invitation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  invitation_ = invitation;
  if (invitation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::release_invitation() {
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::unsafe_arena_release_invitation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::_internal_mutable_invitation() {
  
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Invitation>(GetArenaForAllocation());
    invitation_ = p;
  }
  return invitation_;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::mutable_invitation() {
  ::blockchain::network::v1alpha1::Invitation* _msg = _internal_mutable_invitation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
  return _msg;
}
inline void SendInvitationRequest::set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation));
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    
  } else {
    
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
}

// -------------------------------------------------------------------

// CreateNetworkResponse

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool CreateNetworkResponse::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool CreateNetworkResponse::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkResponse::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkResponse::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkResponse.network)
  return _internal_network();
}
inline void CreateNetworkResponse::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.network)
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkResponse.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkResponse.network)
  return _msg;
}
inline void CreateNetworkResponse::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.network)
}

// string message = 2 [json_name = "message"];
inline void CreateNetworkResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateNetworkResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkResponse.message)
}
inline std::string* CreateNetworkResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return _s;
}
inline const std::string& CreateNetworkResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateNetworkResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.message)
}

// -------------------------------------------------------------------

// AddPeerToOrganizationResponse

// .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
inline bool AddPeerToOrganizationResponse::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool AddPeerToOrganizationResponse::has_organization() const {
  return _internal_has_organization();
}
inline const ::blockchain::network::v1alpha1::Organization& AddPeerToOrganizationResponse::_internal_organization() const {
  const ::blockchain::network::v1alpha1::Organization* p = organization_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Organization&>(
      ::blockchain::network::v1alpha1::_Organization_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Organization& AddPeerToOrganizationResponse::organization() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.organization)
  return _internal_organization();
}
inline void AddPeerToOrganizationResponse::unsafe_arena_set_allocated_organization(
    ::blockchain::network::v1alpha1::Organization* organization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.organization)
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationResponse::release_organization() {
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationResponse::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.organization)
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationResponse::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Organization>(GetArenaForAllocation());
    organization_ = p;
  }
  return organization_;
}
inline ::blockchain::network::v1alpha1::Organization* AddPeerToOrganizationResponse::mutable_organization() {
  ::blockchain::network::v1alpha1::Organization* _msg = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.organization)
  return _msg;
}
inline void AddPeerToOrganizationResponse::set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization));
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.organization)
}

// string message = 3 [json_name = "message"];
inline void AddPeerToOrganizationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
}
inline std::string* AddPeerToOrganizationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
  return _s;
}
inline const std::string& AddPeerToOrganizationResponse::_internal_message() const {
  return message_.Get();
}
inline void AddPeerToOrganizationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
}

// -------------------------------------------------------------------

// CreateChannelResponse

// .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
inline bool CreateChannelResponse::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CreateChannelResponse::has_channel() const {
  return _internal_has_channel();
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelResponse::_internal_channel() const {
  const ::blockchain::network::v1alpha1::Channel* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Channel&>(
      ::blockchain::network::v1alpha1::_Channel_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelResponse::channel() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelResponse.channel)
  return _internal_channel();
}
inline void CreateChannelResponse::unsafe_arena_set_allocated_channel(
    ::blockchain::network::v1alpha1::Channel* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.channel)
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::release_channel() {
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelResponse.channel)
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Channel>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::mutable_channel() {
  ::blockchain::network::v1alpha1::Channel* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelResponse.channel)
  return _msg;
}
inline void CreateChannelResponse::set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel));
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.channel)
}

// string message = 2 [json_name = "message"];
inline void CreateChannelResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateChannelResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelResponse.message)
}
inline std::string* CreateChannelResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return _s;
}
inline const std::string& CreateChannelResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateChannelResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.message)
}

// -------------------------------------------------------------------

// GetBlockchainsResponse

// repeated .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline int GetBlockchainsResponse::_internal_network_size() const {
  return network_.size();
}
inline int GetBlockchainsResponse::network_size() const {
  return _internal_network_size();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return network_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
GetBlockchainsResponse::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return &network_;
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsResponse::_internal_network(int index) const {
  return network_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsResponse::network(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return _internal_network(index);
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::_internal_add_network() {
  return network_.Add();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::add_network() {
  ::blockchain::network::v1alpha1::Network* _add = _internal_add_network();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
GetBlockchainsResponse::network() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return network_;
}

// string message = 2 [json_name = "message"];
inline void GetBlockchainsResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetBlockchainsResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsResponse.message)
}
inline std::string* GetBlockchainsResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsResponse.message)
  return _s;
}
inline const std::string& GetBlockchainsResponse::_internal_message() const {
  return message_.Get();
}
inline void GetBlockchainsResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsResponse.message)
}

// -------------------------------------------------------------------

// CreateOrganizationResponse

// .blockchain.network.v1alpha1.Organization organization = 1 [json_name = "organization"];
inline bool CreateOrganizationResponse::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool CreateOrganizationResponse::has_organization() const {
  return _internal_has_organization();
}
inline const ::blockchain::network::v1alpha1::Organization& CreateOrganizationResponse::_internal_organization() const {
  const ::blockchain::network::v1alpha1::Organization* p = organization_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Organization&>(
      ::blockchain::network::v1alpha1::_Organization_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Organization& CreateOrganizationResponse::organization() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateOrganizationResponse.organization)
  return _internal_organization();
}
inline void CreateOrganizationResponse::unsafe_arena_set_allocated_organization(
    ::blockchain::network::v1alpha1::Organization* organization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateOrganizationResponse.organization)
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationResponse::release_organization() {
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationResponse::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateOrganizationResponse.organization)
  
  ::blockchain::network::v1alpha1::Organization* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationResponse::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Organization>(GetArenaForAllocation());
    organization_ = p;
  }
  return organization_;
}
inline ::blockchain::network::v1alpha1::Organization* CreateOrganizationResponse::mutable_organization() {
  ::blockchain::network::v1alpha1::Organization* _msg = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateOrganizationResponse.organization)
  return _msg;
}
inline void CreateOrganizationResponse::set_allocated_organization(::blockchain::network::v1alpha1::Organization* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization));
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateOrganizationResponse.organization)
}

// string message = 2 [json_name = "message"];
inline void CreateOrganizationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateOrganizationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateOrganizationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateOrganizationResponse.message)
}
inline std::string* CreateOrganizationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateOrganizationResponse.message)
  return _s;
}
inline const std::string& CreateOrganizationResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateOrganizationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateOrganizationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateOrganizationResponse.message)
}

// -------------------------------------------------------------------

// SendInvitationResponse

// .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
inline bool SendInvitationResponse::_internal_has_invitation() const {
  return this != internal_default_instance() && invitation_ != nullptr;
}
inline bool SendInvitationResponse::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationResponse::_internal_invitation() const {
  const ::blockchain::network::v1alpha1::Invitation* p = invitation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Invitation&>(
      ::blockchain::network::v1alpha1::_Invitation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationResponse::invitation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
  return _internal_invitation();
}
inline void SendInvitationResponse::unsafe_arena_set_allocated_invitation(
    ::blockchain::network::v1alpha1::Invitation* invitation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  invitation_ = invitation;
  if (invitation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::release_invitation() {
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::unsafe_arena_release_invitation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::_internal_mutable_invitation() {
  
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Invitation>(GetArenaForAllocation());
    invitation_ = p;
  }
  return invitation_;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::mutable_invitation() {
  ::blockchain::network::v1alpha1::Invitation* _msg = _internal_mutable_invitation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
  return _msg;
}
inline void SendInvitationResponse::set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation));
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    
  } else {
    
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
}

// string message = 2 [json_name = "message"];
inline void SendInvitationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SendInvitationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.SendInvitationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.SendInvitationResponse.message)
}
inline std::string* SendInvitationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.SendInvitationResponse.message)
  return _s;
}
inline const std::string& SendInvitationResponse::_internal_message() const {
  return message_.Get();
}
inline void SendInvitationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.SendInvitationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.SendInvitationResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
