// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/network/v1alpha1/network_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blockchain/network/v1alpha1/network.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
namespace blockchain {
namespace network {
namespace v1alpha1 {
class AddOrdererByNetworkIdRequest;
struct AddOrdererByNetworkIdRequestDefaultTypeInternal;
extern AddOrdererByNetworkIdRequestDefaultTypeInternal _AddOrdererByNetworkIdRequest_default_instance_;
class AddOrdererByNetworkIdResponse;
struct AddOrdererByNetworkIdResponseDefaultTypeInternal;
extern AddOrdererByNetworkIdResponseDefaultTypeInternal _AddOrdererByNetworkIdResponse_default_instance_;
class AddPeerToCorporationRequest;
struct AddPeerToCorporationRequestDefaultTypeInternal;
extern AddPeerToCorporationRequestDefaultTypeInternal _AddPeerToCorporationRequest_default_instance_;
class AddPeerToCorporationResponse;
struct AddPeerToCorporationResponseDefaultTypeInternal;
extern AddPeerToCorporationResponseDefaultTypeInternal _AddPeerToCorporationResponse_default_instance_;
class CreateChannelRequest;
struct CreateChannelRequestDefaultTypeInternal;
extern CreateChannelRequestDefaultTypeInternal _CreateChannelRequest_default_instance_;
class CreateChannelResponse;
struct CreateChannelResponseDefaultTypeInternal;
extern CreateChannelResponseDefaultTypeInternal _CreateChannelResponse_default_instance_;
class CreateCorporationRequest;
struct CreateCorporationRequestDefaultTypeInternal;
extern CreateCorporationRequestDefaultTypeInternal _CreateCorporationRequest_default_instance_;
class CreateCorporationResponse;
struct CreateCorporationResponseDefaultTypeInternal;
extern CreateCorporationResponseDefaultTypeInternal _CreateCorporationResponse_default_instance_;
class CreateNetworkRequest;
struct CreateNetworkRequestDefaultTypeInternal;
extern CreateNetworkRequestDefaultTypeInternal _CreateNetworkRequest_default_instance_;
class CreateNetworkResponse;
struct CreateNetworkResponseDefaultTypeInternal;
extern CreateNetworkResponseDefaultTypeInternal _CreateNetworkResponse_default_instance_;
class GetBlockchainByIdRequest;
struct GetBlockchainByIdRequestDefaultTypeInternal;
extern GetBlockchainByIdRequestDefaultTypeInternal _GetBlockchainByIdRequest_default_instance_;
class GetBlockchainByIdResponse;
struct GetBlockchainByIdResponseDefaultTypeInternal;
extern GetBlockchainByIdResponseDefaultTypeInternal _GetBlockchainByIdResponse_default_instance_;
class GetBlockchainsByUserIdRequest;
struct GetBlockchainsByUserIdRequestDefaultTypeInternal;
extern GetBlockchainsByUserIdRequestDefaultTypeInternal _GetBlockchainsByUserIdRequest_default_instance_;
class GetBlockchainsByUserIdResponse;
struct GetBlockchainsByUserIdResponseDefaultTypeInternal;
extern GetBlockchainsByUserIdResponseDefaultTypeInternal _GetBlockchainsByUserIdResponse_default_instance_;
class GetBlockchainsRequest;
struct GetBlockchainsRequestDefaultTypeInternal;
extern GetBlockchainsRequestDefaultTypeInternal _GetBlockchainsRequest_default_instance_;
class GetBlockchainsResponse;
struct GetBlockchainsResponseDefaultTypeInternal;
extern GetBlockchainsResponseDefaultTypeInternal _GetBlockchainsResponse_default_instance_;
class GetCorporationsByBlockchainIdRequest;
struct GetCorporationsByBlockchainIdRequestDefaultTypeInternal;
extern GetCorporationsByBlockchainIdRequestDefaultTypeInternal _GetCorporationsByBlockchainIdRequest_default_instance_;
class GetCorporationsByBlockchainIdResponse;
struct GetCorporationsByBlockchainIdResponseDefaultTypeInternal;
extern GetCorporationsByBlockchainIdResponseDefaultTypeInternal _GetCorporationsByBlockchainIdResponse_default_instance_;
class GetOrderersByNetworkIdRequest;
struct GetOrderersByNetworkIdRequestDefaultTypeInternal;
extern GetOrderersByNetworkIdRequestDefaultTypeInternal _GetOrderersByNetworkIdRequest_default_instance_;
class GetOrderersByNetworkIdResponse;
struct GetOrderersByNetworkIdResponseDefaultTypeInternal;
extern GetOrderersByNetworkIdResponseDefaultTypeInternal _GetOrderersByNetworkIdResponse_default_instance_;
class GetPeersByCorporationIdRequest;
struct GetPeersByCorporationIdRequestDefaultTypeInternal;
extern GetPeersByCorporationIdRequestDefaultTypeInternal _GetPeersByCorporationIdRequest_default_instance_;
class GetPeersByCorporationIdResponse;
struct GetPeersByCorporationIdResponseDefaultTypeInternal;
extern GetPeersByCorporationIdResponseDefaultTypeInternal _GetPeersByCorporationIdResponse_default_instance_;
class SendInvitationRequest;
struct SendInvitationRequestDefaultTypeInternal;
extern SendInvitationRequestDefaultTypeInternal _SendInvitationRequest_default_instance_;
class SendInvitationResponse;
struct SendInvitationResponseDefaultTypeInternal;
extern SendInvitationResponseDefaultTypeInternal _SendInvitationResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddPeerToCorporationRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddPeerToCorporationResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateChannelRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateChannelRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateChannelResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateChannelResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateCorporationRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateCorporationRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateCorporationResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateCorporationResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainByIdRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainByIdResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::SendInvitationRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::SendInvitationRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::SendInvitationResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::SendInvitationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace network {
namespace v1alpha1 {

// ===================================================================

class CreateNetworkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkRequest) */ {
 public:
  inline CreateNetworkRequest() : CreateNetworkRequest(nullptr) {}
  ~CreateNetworkRequest() override;
  explicit constexpr CreateNetworkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkRequest(const CreateNetworkRequest& from);
  CreateNetworkRequest(CreateNetworkRequest&& from) noexcept
    : CreateNetworkRequest() {
    *this = ::std::move(from);
  }

  inline CreateNetworkRequest& operator=(const CreateNetworkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkRequest& operator=(CreateNetworkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkRequest*>(
               &_CreateNetworkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateNetworkRequest& a, CreateNetworkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkRequest* New() const final {
    return new CreateNetworkRequest();
  }

  CreateNetworkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkRequest";
  }
  protected:
  explicit CreateNetworkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcpOrganizationIdFieldNumber = 3,
    kCcpProjectIdFieldNumber = 4,
    kNetworkFieldNumber = 1,
    kCorporationFieldNumber = 2,
  };
  // string ccp_organization_id = 3 [json_name = "ccpOrganizationId"];
  void clear_ccp_organization_id();
  const std::string& ccp_organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_organization_id();
  void set_allocated_ccp_organization_id(std::string* ccp_organization_id);
  private:
  const std::string& _internal_ccp_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_organization_id(const std::string& value);
  std::string* _internal_mutable_ccp_organization_id();
  public:

  // string ccp_project_id = 4 [json_name = "ccpProjectId"];
  void clear_ccp_project_id();
  const std::string& ccp_project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_project_id();
  void set_allocated_ccp_project_id(std::string* ccp_project_id);
  private:
  const std::string& _internal_ccp_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_project_id(const std::string& value);
  std::string* _internal_mutable_ccp_project_id();
  public:

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // .blockchain.network.v1alpha1.Corporation corporation = 2 [json_name = "corporation"];
  bool has_corporation() const;
  private:
  bool _internal_has_corporation() const;
  public:
  void clear_corporation();
  const ::blockchain::network::v1alpha1::Corporation& corporation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Corporation* release_corporation();
  ::blockchain::network::v1alpha1::Corporation* mutable_corporation();
  void set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation);
  private:
  const ::blockchain::network::v1alpha1::Corporation& _internal_corporation() const;
  ::blockchain::network::v1alpha1::Corporation* _internal_mutable_corporation();
  public:
  void unsafe_arena_set_allocated_corporation(
      ::blockchain::network::v1alpha1::Corporation* corporation);
  ::blockchain::network::v1alpha1::Corporation* unsafe_arena_release_corporation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_project_id_;
  ::blockchain::network::v1alpha1::Network* network_;
  ::blockchain::network::v1alpha1::Corporation* corporation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddPeerToCorporationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddPeerToCorporationRequest) */ {
 public:
  inline AddPeerToCorporationRequest() : AddPeerToCorporationRequest(nullptr) {}
  ~AddPeerToCorporationRequest() override;
  explicit constexpr AddPeerToCorporationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerToCorporationRequest(const AddPeerToCorporationRequest& from);
  AddPeerToCorporationRequest(AddPeerToCorporationRequest&& from) noexcept
    : AddPeerToCorporationRequest() {
    *this = ::std::move(from);
  }

  inline AddPeerToCorporationRequest& operator=(const AddPeerToCorporationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerToCorporationRequest& operator=(AddPeerToCorporationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerToCorporationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerToCorporationRequest* internal_default_instance() {
    return reinterpret_cast<const AddPeerToCorporationRequest*>(
               &_AddPeerToCorporationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddPeerToCorporationRequest& a, AddPeerToCorporationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerToCorporationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerToCorporationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerToCorporationRequest* New() const final {
    return new AddPeerToCorporationRequest();
  }

  AddPeerToCorporationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerToCorporationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerToCorporationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerToCorporationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerToCorporationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddPeerToCorporationRequest";
  }
  protected:
  explicit AddPeerToCorporationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcpOrganizationIdFieldNumber = 1,
    kCcpProjectIdFieldNumber = 2,
    kCorporationIdFieldNumber = 3,
  };
  // string ccp_organization_id = 1 [json_name = "ccpOrganizationId"];
  void clear_ccp_organization_id();
  const std::string& ccp_organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_organization_id();
  void set_allocated_ccp_organization_id(std::string* ccp_organization_id);
  private:
  const std::string& _internal_ccp_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_organization_id(const std::string& value);
  std::string* _internal_mutable_ccp_organization_id();
  public:

  // string ccp_project_id = 2 [json_name = "ccpProjectId"];
  void clear_ccp_project_id();
  const std::string& ccp_project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_project_id();
  void set_allocated_ccp_project_id(std::string* ccp_project_id);
  private:
  const std::string& _internal_ccp_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_project_id(const std::string& value);
  std::string* _internal_mutable_ccp_project_id();
  public:

  // string corporation_id = 3 [json_name = "corporationId"];
  void clear_corporation_id();
  const std::string& corporation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_corporation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_corporation_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_corporation_id();
  void set_allocated_corporation_id(std::string* corporation_id);
  private:
  const std::string& _internal_corporation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_corporation_id(const std::string& value);
  std::string* _internal_mutable_corporation_id();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corporation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddOrdererByNetworkIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest) */ {
 public:
  inline AddOrdererByNetworkIdRequest() : AddOrdererByNetworkIdRequest(nullptr) {}
  ~AddOrdererByNetworkIdRequest() override;
  explicit constexpr AddOrdererByNetworkIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrdererByNetworkIdRequest(const AddOrdererByNetworkIdRequest& from);
  AddOrdererByNetworkIdRequest(AddOrdererByNetworkIdRequest&& from) noexcept
    : AddOrdererByNetworkIdRequest() {
    *this = ::std::move(from);
  }

  inline AddOrdererByNetworkIdRequest& operator=(const AddOrdererByNetworkIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrdererByNetworkIdRequest& operator=(AddOrdererByNetworkIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrdererByNetworkIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrdererByNetworkIdRequest* internal_default_instance() {
    return reinterpret_cast<const AddOrdererByNetworkIdRequest*>(
               &_AddOrdererByNetworkIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddOrdererByNetworkIdRequest& a, AddOrdererByNetworkIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrdererByNetworkIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrdererByNetworkIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrdererByNetworkIdRequest* New() const final {
    return new AddOrdererByNetworkIdRequest();
  }

  AddOrdererByNetworkIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrdererByNetworkIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddOrdererByNetworkIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddOrdererByNetworkIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrdererByNetworkIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest";
  }
  protected:
  explicit AddOrdererByNetworkIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcpOrganizationIdFieldNumber = 2,
    kCcpProjectIdFieldNumber = 3,
    kOrdererFieldNumber = 1,
  };
  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  void clear_ccp_organization_id();
  const std::string& ccp_organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_organization_id();
  void set_allocated_ccp_organization_id(std::string* ccp_organization_id);
  private:
  const std::string& _internal_ccp_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_organization_id(const std::string& value);
  std::string* _internal_mutable_ccp_organization_id();
  public:

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  void clear_ccp_project_id();
  const std::string& ccp_project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_project_id();
  void set_allocated_ccp_project_id(std::string* ccp_project_id);
  private:
  const std::string& _internal_ccp_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_project_id(const std::string& value);
  std::string* _internal_mutable_ccp_project_id();
  public:

  // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
  bool has_orderer() const;
  private:
  bool _internal_has_orderer() const;
  public:
  void clear_orderer();
  const ::blockchain::network::v1alpha1::Orderer& orderer() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Orderer* release_orderer();
  ::blockchain::network::v1alpha1::Orderer* mutable_orderer();
  void set_allocated_orderer(::blockchain::network::v1alpha1::Orderer* orderer);
  private:
  const ::blockchain::network::v1alpha1::Orderer& _internal_orderer() const;
  ::blockchain::network::v1alpha1::Orderer* _internal_mutable_orderer();
  public:
  void unsafe_arena_set_allocated_orderer(
      ::blockchain::network::v1alpha1::Orderer* orderer);
  ::blockchain::network::v1alpha1::Orderer* unsafe_arena_release_orderer();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_project_id_;
  ::blockchain::network::v1alpha1::Orderer* orderer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateChannelRequest) */ {
 public:
  inline CreateChannelRequest() : CreateChannelRequest(nullptr) {}
  ~CreateChannelRequest() override;
  explicit constexpr CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelRequest(const CreateChannelRequest& from);
  CreateChannelRequest(CreateChannelRequest&& from) noexcept
    : CreateChannelRequest() {
    *this = ::std::move(from);
  }

  inline CreateChannelRequest& operator=(const CreateChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelRequest& operator=(CreateChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChannelRequest*>(
               &_CreateChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateChannelRequest& a, CreateChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelRequest* New() const final {
    return new CreateChannelRequest();
  }

  CreateChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateChannelRequest";
  }
  protected:
  explicit CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::blockchain::network::v1alpha1::Channel& channel() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Channel* release_channel();
  ::blockchain::network::v1alpha1::Channel* mutable_channel();
  void set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel);
  private:
  const ::blockchain::network::v1alpha1::Channel& _internal_channel() const;
  ::blockchain::network::v1alpha1::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::blockchain::network::v1alpha1::Channel* channel);
  ::blockchain::network::v1alpha1::Channel* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Channel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsRequest) */ {
 public:
  inline GetBlockchainsRequest() : GetBlockchainsRequest(nullptr) {}
  ~GetBlockchainsRequest() override;
  explicit constexpr GetBlockchainsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsRequest(const GetBlockchainsRequest& from);
  GetBlockchainsRequest(GetBlockchainsRequest&& from) noexcept
    : GetBlockchainsRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsRequest& operator=(const GetBlockchainsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsRequest& operator=(GetBlockchainsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsRequest*>(
               &_GetBlockchainsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBlockchainsRequest& a, GetBlockchainsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsRequest* New() const final {
    return new GetBlockchainsRequest();
  }

  GetBlockchainsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsRequest";
  }
  protected:
  explicit GetBlockchainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryParamsFieldNumber = 3,
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // string query_params = 3 [json_name = "queryParams"];
  void clear_query_params();
  const std::string& query_params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_params();
  PROTOBUF_MUST_USE_RESULT std::string* release_query_params();
  void set_allocated_query_params(std::string* query_params);
  private:
  const std::string& _internal_query_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_params(const std::string& value);
  std::string* _internal_mutable_query_params();
  public:

  // int64 offset = 1 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit = 2 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_params_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsByUserIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest) */ {
 public:
  inline GetBlockchainsByUserIdRequest() : GetBlockchainsByUserIdRequest(nullptr) {}
  ~GetBlockchainsByUserIdRequest() override;
  explicit constexpr GetBlockchainsByUserIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsByUserIdRequest(const GetBlockchainsByUserIdRequest& from);
  GetBlockchainsByUserIdRequest(GetBlockchainsByUserIdRequest&& from) noexcept
    : GetBlockchainsByUserIdRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsByUserIdRequest& operator=(const GetBlockchainsByUserIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsByUserIdRequest& operator=(GetBlockchainsByUserIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsByUserIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsByUserIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsByUserIdRequest*>(
               &_GetBlockchainsByUserIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBlockchainsByUserIdRequest& a, GetBlockchainsByUserIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsByUserIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsByUserIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsByUserIdRequest* New() const final {
    return new GetBlockchainsByUserIdRequest();
  }

  GetBlockchainsByUserIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsByUserIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsByUserIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsByUserIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsByUserIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest";
  }
  protected:
  explicit GetBlockchainsByUserIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int64 offset = 2 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit = 3 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetPeersByCorporationIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest) */ {
 public:
  inline GetPeersByCorporationIdRequest() : GetPeersByCorporationIdRequest(nullptr) {}
  ~GetPeersByCorporationIdRequest() override;
  explicit constexpr GetPeersByCorporationIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPeersByCorporationIdRequest(const GetPeersByCorporationIdRequest& from);
  GetPeersByCorporationIdRequest(GetPeersByCorporationIdRequest&& from) noexcept
    : GetPeersByCorporationIdRequest() {
    *this = ::std::move(from);
  }

  inline GetPeersByCorporationIdRequest& operator=(const GetPeersByCorporationIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeersByCorporationIdRequest& operator=(GetPeersByCorporationIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPeersByCorporationIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPeersByCorporationIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeersByCorporationIdRequest*>(
               &_GetPeersByCorporationIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPeersByCorporationIdRequest& a, GetPeersByCorporationIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeersByCorporationIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPeersByCorporationIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeersByCorporationIdRequest* New() const final {
    return new GetPeersByCorporationIdRequest();
  }

  GetPeersByCorporationIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersByCorporationIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPeersByCorporationIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPeersByCorporationIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersByCorporationIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetPeersByCorporationIdRequest";
  }
  protected:
  explicit GetPeersByCorporationIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorporationIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string corporation_id = 1 [json_name = "corporationId"];
  void clear_corporation_id();
  const std::string& corporation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_corporation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_corporation_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_corporation_id();
  void set_allocated_corporation_id(std::string* corporation_id);
  private:
  const std::string& _internal_corporation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_corporation_id(const std::string& value);
  std::string* _internal_mutable_corporation_id();
  public:

  // int64 offset = 2 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit = 3 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corporation_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetOrderersByNetworkIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest) */ {
 public:
  inline GetOrderersByNetworkIdRequest() : GetOrderersByNetworkIdRequest(nullptr) {}
  ~GetOrderersByNetworkIdRequest() override;
  explicit constexpr GetOrderersByNetworkIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderersByNetworkIdRequest(const GetOrderersByNetworkIdRequest& from);
  GetOrderersByNetworkIdRequest(GetOrderersByNetworkIdRequest&& from) noexcept
    : GetOrderersByNetworkIdRequest() {
    *this = ::std::move(from);
  }

  inline GetOrderersByNetworkIdRequest& operator=(const GetOrderersByNetworkIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderersByNetworkIdRequest& operator=(GetOrderersByNetworkIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderersByNetworkIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderersByNetworkIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrderersByNetworkIdRequest*>(
               &_GetOrderersByNetworkIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetOrderersByNetworkIdRequest& a, GetOrderersByNetworkIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderersByNetworkIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderersByNetworkIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOrderersByNetworkIdRequest* New() const final {
    return new GetOrderersByNetworkIdRequest();
  }

  GetOrderersByNetworkIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOrderersByNetworkIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderersByNetworkIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOrderersByNetworkIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderersByNetworkIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest";
  }
  protected:
  explicit GetOrderersByNetworkIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string network_id = 1 [json_name = "networkId"];
  void clear_network_id();
  const std::string& network_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_network_id();
  void set_allocated_network_id(std::string* network_id);
  private:
  const std::string& _internal_network_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_id(const std::string& value);
  std::string* _internal_mutable_network_id();
  public:

  // int64 offset = 2 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit = 3 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainByIdRequest) */ {
 public:
  inline GetBlockchainByIdRequest() : GetBlockchainByIdRequest(nullptr) {}
  ~GetBlockchainByIdRequest() override;
  explicit constexpr GetBlockchainByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainByIdRequest(const GetBlockchainByIdRequest& from);
  GetBlockchainByIdRequest(GetBlockchainByIdRequest&& from) noexcept
    : GetBlockchainByIdRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockchainByIdRequest& operator=(const GetBlockchainByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainByIdRequest& operator=(GetBlockchainByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainByIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainByIdRequest*>(
               &_GetBlockchainByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetBlockchainByIdRequest& a, GetBlockchainByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainByIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainByIdRequest* New() const final {
    return new GetBlockchainByIdRequest();
  }

  GetBlockchainByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainByIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainByIdRequest";
  }
  protected:
  explicit GetBlockchainByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCorporationsByBlockchainIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest) */ {
 public:
  inline GetCorporationsByBlockchainIdRequest() : GetCorporationsByBlockchainIdRequest(nullptr) {}
  ~GetCorporationsByBlockchainIdRequest() override;
  explicit constexpr GetCorporationsByBlockchainIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCorporationsByBlockchainIdRequest(const GetCorporationsByBlockchainIdRequest& from);
  GetCorporationsByBlockchainIdRequest(GetCorporationsByBlockchainIdRequest&& from) noexcept
    : GetCorporationsByBlockchainIdRequest() {
    *this = ::std::move(from);
  }

  inline GetCorporationsByBlockchainIdRequest& operator=(const GetCorporationsByBlockchainIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCorporationsByBlockchainIdRequest& operator=(GetCorporationsByBlockchainIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCorporationsByBlockchainIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCorporationsByBlockchainIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetCorporationsByBlockchainIdRequest*>(
               &_GetCorporationsByBlockchainIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetCorporationsByBlockchainIdRequest& a, GetCorporationsByBlockchainIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCorporationsByBlockchainIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCorporationsByBlockchainIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCorporationsByBlockchainIdRequest* New() const final {
    return new GetCorporationsByBlockchainIdRequest();
  }

  GetCorporationsByBlockchainIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCorporationsByBlockchainIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCorporationsByBlockchainIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCorporationsByBlockchainIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCorporationsByBlockchainIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest";
  }
  protected:
  explicit GetCorporationsByBlockchainIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockchainIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string blockchain_id = 1 [json_name = "blockchainId"];
  void clear_blockchain_id();
  const std::string& blockchain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockchain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockchain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_blockchain_id();
  void set_allocated_blockchain_id(std::string* blockchain_id);
  private:
  const std::string& _internal_blockchain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockchain_id(const std::string& value);
  std::string* _internal_mutable_blockchain_id();
  public:

  // int64 offset = 2 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit = 3 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockchain_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateCorporationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateCorporationRequest) */ {
 public:
  inline CreateCorporationRequest() : CreateCorporationRequest(nullptr) {}
  ~CreateCorporationRequest() override;
  explicit constexpr CreateCorporationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCorporationRequest(const CreateCorporationRequest& from);
  CreateCorporationRequest(CreateCorporationRequest&& from) noexcept
    : CreateCorporationRequest() {
    *this = ::std::move(from);
  }

  inline CreateCorporationRequest& operator=(const CreateCorporationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCorporationRequest& operator=(CreateCorporationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCorporationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCorporationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCorporationRequest*>(
               &_CreateCorporationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateCorporationRequest& a, CreateCorporationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCorporationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCorporationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCorporationRequest* New() const final {
    return new CreateCorporationRequest();
  }

  CreateCorporationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCorporationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCorporationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateCorporationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCorporationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateCorporationRequest";
  }
  protected:
  explicit CreateCorporationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcpOrganizationIdFieldNumber = 2,
    kCcpProjectIdFieldNumber = 3,
    kCorporationFieldNumber = 1,
  };
  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  void clear_ccp_organization_id();
  const std::string& ccp_organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_organization_id();
  void set_allocated_ccp_organization_id(std::string* ccp_organization_id);
  private:
  const std::string& _internal_ccp_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_organization_id(const std::string& value);
  std::string* _internal_mutable_ccp_organization_id();
  public:

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  void clear_ccp_project_id();
  const std::string& ccp_project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_project_id();
  void set_allocated_ccp_project_id(std::string* ccp_project_id);
  private:
  const std::string& _internal_ccp_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_project_id(const std::string& value);
  std::string* _internal_mutable_ccp_project_id();
  public:

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  bool has_corporation() const;
  private:
  bool _internal_has_corporation() const;
  public:
  void clear_corporation();
  const ::blockchain::network::v1alpha1::Corporation& corporation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Corporation* release_corporation();
  ::blockchain::network::v1alpha1::Corporation* mutable_corporation();
  void set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation);
  private:
  const ::blockchain::network::v1alpha1::Corporation& _internal_corporation() const;
  ::blockchain::network::v1alpha1::Corporation* _internal_mutable_corporation();
  public:
  void unsafe_arena_set_allocated_corporation(
      ::blockchain::network::v1alpha1::Corporation* corporation);
  ::blockchain::network::v1alpha1::Corporation* unsafe_arena_release_corporation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateCorporationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_project_id_;
  ::blockchain::network::v1alpha1::Corporation* corporation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendInvitationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.SendInvitationRequest) */ {
 public:
  inline SendInvitationRequest() : SendInvitationRequest(nullptr) {}
  ~SendInvitationRequest() override;
  explicit constexpr SendInvitationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendInvitationRequest(const SendInvitationRequest& from);
  SendInvitationRequest(SendInvitationRequest&& from) noexcept
    : SendInvitationRequest() {
    *this = ::std::move(from);
  }

  inline SendInvitationRequest& operator=(const SendInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationRequest& operator=(SendInvitationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendInvitationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const SendInvitationRequest*>(
               &_SendInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendInvitationRequest& a, SendInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendInvitationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationRequest* New() const final {
    return new SendInvitationRequest();
  }

  SendInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendInvitationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendInvitationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.SendInvitationRequest";
  }
  protected:
  explicit SendInvitationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationFieldNumber = 1,
  };
  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::blockchain::network::v1alpha1::Invitation& invitation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Invitation* release_invitation();
  ::blockchain::network::v1alpha1::Invitation* mutable_invitation();
  void set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation);
  private:
  const ::blockchain::network::v1alpha1::Invitation& _internal_invitation() const;
  ::blockchain::network::v1alpha1::Invitation* _internal_mutable_invitation();
  public:
  void unsafe_arena_set_allocated_invitation(
      ::blockchain::network::v1alpha1::Invitation* invitation);
  ::blockchain::network::v1alpha1::Invitation* unsafe_arena_release_invitation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.SendInvitationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Invitation* invitation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateNetworkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkResponse) */ {
 public:
  inline CreateNetworkResponse() : CreateNetworkResponse(nullptr) {}
  ~CreateNetworkResponse() override;
  explicit constexpr CreateNetworkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkResponse(const CreateNetworkResponse& from);
  CreateNetworkResponse(CreateNetworkResponse&& from) noexcept
    : CreateNetworkResponse() {
    *this = ::std::move(from);
  }

  inline CreateNetworkResponse& operator=(const CreateNetworkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkResponse& operator=(CreateNetworkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkResponse*>(
               &_CreateNetworkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateNetworkResponse& a, CreateNetworkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkResponse* New() const final {
    return new CreateNetworkResponse();
  }

  CreateNetworkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkResponse";
  }
  protected:
  explicit CreateNetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kNetworkFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Network* network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddPeerToCorporationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddPeerToCorporationResponse) */ {
 public:
  inline AddPeerToCorporationResponse() : AddPeerToCorporationResponse(nullptr) {}
  ~AddPeerToCorporationResponse() override;
  explicit constexpr AddPeerToCorporationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerToCorporationResponse(const AddPeerToCorporationResponse& from);
  AddPeerToCorporationResponse(AddPeerToCorporationResponse&& from) noexcept
    : AddPeerToCorporationResponse() {
    *this = ::std::move(from);
  }

  inline AddPeerToCorporationResponse& operator=(const AddPeerToCorporationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerToCorporationResponse& operator=(AddPeerToCorporationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerToCorporationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerToCorporationResponse* internal_default_instance() {
    return reinterpret_cast<const AddPeerToCorporationResponse*>(
               &_AddPeerToCorporationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddPeerToCorporationResponse& a, AddPeerToCorporationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerToCorporationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerToCorporationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerToCorporationResponse* New() const final {
    return new AddPeerToCorporationResponse();
  }

  AddPeerToCorporationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerToCorporationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerToCorporationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerToCorporationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerToCorporationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddPeerToCorporationResponse";
  }
  protected:
  explicit AddPeerToCorporationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCorporationFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  bool has_corporation() const;
  private:
  bool _internal_has_corporation() const;
  public:
  void clear_corporation();
  const ::blockchain::network::v1alpha1::Corporation& corporation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Corporation* release_corporation();
  ::blockchain::network::v1alpha1::Corporation* mutable_corporation();
  void set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation);
  private:
  const ::blockchain::network::v1alpha1::Corporation& _internal_corporation() const;
  ::blockchain::network::v1alpha1::Corporation* _internal_mutable_corporation();
  public:
  void unsafe_arena_set_allocated_corporation(
      ::blockchain::network::v1alpha1::Corporation* corporation);
  ::blockchain::network::v1alpha1::Corporation* unsafe_arena_release_corporation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Corporation* corporation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddOrdererByNetworkIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse) */ {
 public:
  inline AddOrdererByNetworkIdResponse() : AddOrdererByNetworkIdResponse(nullptr) {}
  ~AddOrdererByNetworkIdResponse() override;
  explicit constexpr AddOrdererByNetworkIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrdererByNetworkIdResponse(const AddOrdererByNetworkIdResponse& from);
  AddOrdererByNetworkIdResponse(AddOrdererByNetworkIdResponse&& from) noexcept
    : AddOrdererByNetworkIdResponse() {
    *this = ::std::move(from);
  }

  inline AddOrdererByNetworkIdResponse& operator=(const AddOrdererByNetworkIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrdererByNetworkIdResponse& operator=(AddOrdererByNetworkIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrdererByNetworkIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrdererByNetworkIdResponse* internal_default_instance() {
    return reinterpret_cast<const AddOrdererByNetworkIdResponse*>(
               &_AddOrdererByNetworkIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AddOrdererByNetworkIdResponse& a, AddOrdererByNetworkIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrdererByNetworkIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrdererByNetworkIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrdererByNetworkIdResponse* New() const final {
    return new AddOrdererByNetworkIdResponse();
  }

  AddOrdererByNetworkIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrdererByNetworkIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddOrdererByNetworkIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddOrdererByNetworkIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrdererByNetworkIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse";
  }
  protected:
  explicit AddOrdererByNetworkIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOrdererFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
  bool has_orderer() const;
  private:
  bool _internal_has_orderer() const;
  public:
  void clear_orderer();
  const ::blockchain::network::v1alpha1::Orderer& orderer() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Orderer* release_orderer();
  ::blockchain::network::v1alpha1::Orderer* mutable_orderer();
  void set_allocated_orderer(::blockchain::network::v1alpha1::Orderer* orderer);
  private:
  const ::blockchain::network::v1alpha1::Orderer& _internal_orderer() const;
  ::blockchain::network::v1alpha1::Orderer* _internal_mutable_orderer();
  public:
  void unsafe_arena_set_allocated_orderer(
      ::blockchain::network::v1alpha1::Orderer* orderer);
  ::blockchain::network::v1alpha1::Orderer* unsafe_arena_release_orderer();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Orderer* orderer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateChannelResponse) */ {
 public:
  inline CreateChannelResponse() : CreateChannelResponse(nullptr) {}
  ~CreateChannelResponse() override;
  explicit constexpr CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelResponse(const CreateChannelResponse& from);
  CreateChannelResponse(CreateChannelResponse&& from) noexcept
    : CreateChannelResponse() {
    *this = ::std::move(from);
  }

  inline CreateChannelResponse& operator=(const CreateChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelResponse& operator=(CreateChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CreateChannelResponse*>(
               &_CreateChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateChannelResponse& a, CreateChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelResponse* New() const final {
    return new CreateChannelResponse();
  }

  CreateChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateChannelResponse";
  }
  protected:
  explicit CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kChannelFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::blockchain::network::v1alpha1::Channel& channel() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Channel* release_channel();
  ::blockchain::network::v1alpha1::Channel* mutable_channel();
  void set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel);
  private:
  const ::blockchain::network::v1alpha1::Channel& _internal_channel() const;
  ::blockchain::network::v1alpha1::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::blockchain::network::v1alpha1::Channel* channel);
  ::blockchain::network::v1alpha1::Channel* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Channel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsResponse) */ {
 public:
  inline GetBlockchainsResponse() : GetBlockchainsResponse(nullptr) {}
  ~GetBlockchainsResponse() override;
  explicit constexpr GetBlockchainsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsResponse(const GetBlockchainsResponse& from);
  GetBlockchainsResponse(GetBlockchainsResponse&& from) noexcept
    : GetBlockchainsResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsResponse& operator=(const GetBlockchainsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsResponse& operator=(GetBlockchainsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsResponse*>(
               &_GetBlockchainsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetBlockchainsResponse& a, GetBlockchainsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsResponse* New() const final {
    return new GetBlockchainsResponse();
  }

  GetBlockchainsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsResponse";
  }
  protected:
  explicit GetBlockchainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworksFieldNumber = 1,
    kNextUrlFieldNumber = 3,
    kPreviousUrlFieldNumber = 4,
    kTotalFieldNumber = 2,
  };
  // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
  int networks_size() const;
  private:
  int _internal_networks_size() const;
  public:
  void clear_networks();
  ::blockchain::network::v1alpha1::Network* mutable_networks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
      mutable_networks();
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_networks(int index) const;
  ::blockchain::network::v1alpha1::Network* _internal_add_networks();
  public:
  const ::blockchain::network::v1alpha1::Network& networks(int index) const;
  ::blockchain::network::v1alpha1::Network* add_networks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
      networks() const;

  // string next_url = 3 [json_name = "nextUrl"];
  void clear_next_url();
  const std::string& next_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_url();
  void set_allocated_next_url(std::string* next_url);
  private:
  const std::string& _internal_next_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_url(const std::string& value);
  std::string* _internal_mutable_next_url();
  public:

  // string previous_url = 4 [json_name = "previousUrl"];
  void clear_previous_url();
  const std::string& previous_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous_url();
  void set_allocated_previous_url(std::string* previous_url);
  private:
  const std::string& _internal_previous_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_url(const std::string& value);
  std::string* _internal_mutable_previous_url();
  public:

  // int64 total = 2 [json_name = "total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network > networks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsByUserIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse) */ {
 public:
  inline GetBlockchainsByUserIdResponse() : GetBlockchainsByUserIdResponse(nullptr) {}
  ~GetBlockchainsByUserIdResponse() override;
  explicit constexpr GetBlockchainsByUserIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsByUserIdResponse(const GetBlockchainsByUserIdResponse& from);
  GetBlockchainsByUserIdResponse(GetBlockchainsByUserIdResponse&& from) noexcept
    : GetBlockchainsByUserIdResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsByUserIdResponse& operator=(const GetBlockchainsByUserIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsByUserIdResponse& operator=(GetBlockchainsByUserIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsByUserIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsByUserIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsByUserIdResponse*>(
               &_GetBlockchainsByUserIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetBlockchainsByUserIdResponse& a, GetBlockchainsByUserIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsByUserIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsByUserIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsByUserIdResponse* New() const final {
    return new GetBlockchainsByUserIdResponse();
  }

  GetBlockchainsByUserIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsByUserIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsByUserIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsByUserIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsByUserIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse";
  }
  protected:
  explicit GetBlockchainsByUserIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworksFieldNumber = 1,
    kNextUrlFieldNumber = 3,
    kPreviousUrlFieldNumber = 4,
    kTotalFieldNumber = 2,
  };
  // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
  int networks_size() const;
  private:
  int _internal_networks_size() const;
  public:
  void clear_networks();
  ::blockchain::network::v1alpha1::Network* mutable_networks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
      mutable_networks();
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_networks(int index) const;
  ::blockchain::network::v1alpha1::Network* _internal_add_networks();
  public:
  const ::blockchain::network::v1alpha1::Network& networks(int index) const;
  ::blockchain::network::v1alpha1::Network* add_networks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
      networks() const;

  // string next_url = 3 [json_name = "nextUrl"];
  void clear_next_url();
  const std::string& next_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_url();
  void set_allocated_next_url(std::string* next_url);
  private:
  const std::string& _internal_next_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_url(const std::string& value);
  std::string* _internal_mutable_next_url();
  public:

  // string previous_url = 4 [json_name = "previousUrl"];
  void clear_previous_url();
  const std::string& previous_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous_url();
  void set_allocated_previous_url(std::string* previous_url);
  private:
  const std::string& _internal_previous_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_url(const std::string& value);
  std::string* _internal_mutable_previous_url();
  public:

  // int64 total = 2 [json_name = "total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network > networks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetOrderersByNetworkIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse) */ {
 public:
  inline GetOrderersByNetworkIdResponse() : GetOrderersByNetworkIdResponse(nullptr) {}
  ~GetOrderersByNetworkIdResponse() override;
  explicit constexpr GetOrderersByNetworkIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderersByNetworkIdResponse(const GetOrderersByNetworkIdResponse& from);
  GetOrderersByNetworkIdResponse(GetOrderersByNetworkIdResponse&& from) noexcept
    : GetOrderersByNetworkIdResponse() {
    *this = ::std::move(from);
  }

  inline GetOrderersByNetworkIdResponse& operator=(const GetOrderersByNetworkIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderersByNetworkIdResponse& operator=(GetOrderersByNetworkIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderersByNetworkIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderersByNetworkIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrderersByNetworkIdResponse*>(
               &_GetOrderersByNetworkIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetOrderersByNetworkIdResponse& a, GetOrderersByNetworkIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderersByNetworkIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderersByNetworkIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOrderersByNetworkIdResponse* New() const final {
    return new GetOrderersByNetworkIdResponse();
  }

  GetOrderersByNetworkIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOrderersByNetworkIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderersByNetworkIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOrderersByNetworkIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderersByNetworkIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse";
  }
  protected:
  explicit GetOrderersByNetworkIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderersFieldNumber = 1,
    kNextUrlFieldNumber = 3,
    kPreviousUrlFieldNumber = 4,
    kTotalFieldNumber = 2,
  };
  // repeated .blockchain.network.v1alpha1.Orderer orderers = 1 [json_name = "orderers"];
  int orderers_size() const;
  private:
  int _internal_orderers_size() const;
  public:
  void clear_orderers();
  ::blockchain::network::v1alpha1::Orderer* mutable_orderers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Orderer >*
      mutable_orderers();
  private:
  const ::blockchain::network::v1alpha1::Orderer& _internal_orderers(int index) const;
  ::blockchain::network::v1alpha1::Orderer* _internal_add_orderers();
  public:
  const ::blockchain::network::v1alpha1::Orderer& orderers(int index) const;
  ::blockchain::network::v1alpha1::Orderer* add_orderers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Orderer >&
      orderers() const;

  // string next_url = 3 [json_name = "nextUrl"];
  void clear_next_url();
  const std::string& next_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_url();
  void set_allocated_next_url(std::string* next_url);
  private:
  const std::string& _internal_next_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_url(const std::string& value);
  std::string* _internal_mutable_next_url();
  public:

  // string previous_url = 4 [json_name = "previousUrl"];
  void clear_previous_url();
  const std::string& previous_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous_url();
  void set_allocated_previous_url(std::string* previous_url);
  private:
  const std::string& _internal_previous_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_url(const std::string& value);
  std::string* _internal_mutable_previous_url();
  public:

  // int64 total = 2 [json_name = "total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Orderer > orderers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetPeersByCorporationIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse) */ {
 public:
  inline GetPeersByCorporationIdResponse() : GetPeersByCorporationIdResponse(nullptr) {}
  ~GetPeersByCorporationIdResponse() override;
  explicit constexpr GetPeersByCorporationIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPeersByCorporationIdResponse(const GetPeersByCorporationIdResponse& from);
  GetPeersByCorporationIdResponse(GetPeersByCorporationIdResponse&& from) noexcept
    : GetPeersByCorporationIdResponse() {
    *this = ::std::move(from);
  }

  inline GetPeersByCorporationIdResponse& operator=(const GetPeersByCorporationIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeersByCorporationIdResponse& operator=(GetPeersByCorporationIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPeersByCorporationIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPeersByCorporationIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeersByCorporationIdResponse*>(
               &_GetPeersByCorporationIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetPeersByCorporationIdResponse& a, GetPeersByCorporationIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeersByCorporationIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPeersByCorporationIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeersByCorporationIdResponse* New() const final {
    return new GetPeersByCorporationIdResponse();
  }

  GetPeersByCorporationIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersByCorporationIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPeersByCorporationIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPeersByCorporationIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersByCorporationIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetPeersByCorporationIdResponse";
  }
  protected:
  explicit GetPeersByCorporationIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
    kNextUrlFieldNumber = 3,
    kPreviousUrlFieldNumber = 4,
    kTotalFieldNumber = 2,
  };
  // repeated .blockchain.network.v1alpha1.Peer peer = 1 [json_name = "peer"];
  int peer_size() const;
  private:
  int _internal_peer_size() const;
  public:
  void clear_peer();
  ::blockchain::network::v1alpha1::Peer* mutable_peer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >*
      mutable_peer();
  private:
  const ::blockchain::network::v1alpha1::Peer& _internal_peer(int index) const;
  ::blockchain::network::v1alpha1::Peer* _internal_add_peer();
  public:
  const ::blockchain::network::v1alpha1::Peer& peer(int index) const;
  ::blockchain::network::v1alpha1::Peer* add_peer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >&
      peer() const;

  // string next_url = 3 [json_name = "nextUrl"];
  void clear_next_url();
  const std::string& next_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_url();
  void set_allocated_next_url(std::string* next_url);
  private:
  const std::string& _internal_next_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_url(const std::string& value);
  std::string* _internal_mutable_next_url();
  public:

  // string previous_url = 4 [json_name = "previousUrl"];
  void clear_previous_url();
  const std::string& previous_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous_url();
  void set_allocated_previous_url(std::string* previous_url);
  private:
  const std::string& _internal_previous_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_url(const std::string& value);
  std::string* _internal_mutable_previous_url();
  public:

  // int64 total = 2 [json_name = "total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer > peer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainByIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainByIdResponse) */ {
 public:
  inline GetBlockchainByIdResponse() : GetBlockchainByIdResponse(nullptr) {}
  ~GetBlockchainByIdResponse() override;
  explicit constexpr GetBlockchainByIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainByIdResponse(const GetBlockchainByIdResponse& from);
  GetBlockchainByIdResponse(GetBlockchainByIdResponse&& from) noexcept
    : GetBlockchainByIdResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockchainByIdResponse& operator=(const GetBlockchainByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainByIdResponse& operator=(GetBlockchainByIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainByIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainByIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainByIdResponse*>(
               &_GetBlockchainByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetBlockchainByIdResponse& a, GetBlockchainByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainByIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainByIdResponse* New() const final {
    return new GetBlockchainByIdResponse();
  }

  GetBlockchainByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainByIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainByIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainByIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainByIdResponse";
  }
  protected:
  explicit GetBlockchainByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 1,
  };
  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Network* network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetCorporationsByBlockchainIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse) */ {
 public:
  inline GetCorporationsByBlockchainIdResponse() : GetCorporationsByBlockchainIdResponse(nullptr) {}
  ~GetCorporationsByBlockchainIdResponse() override;
  explicit constexpr GetCorporationsByBlockchainIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCorporationsByBlockchainIdResponse(const GetCorporationsByBlockchainIdResponse& from);
  GetCorporationsByBlockchainIdResponse(GetCorporationsByBlockchainIdResponse&& from) noexcept
    : GetCorporationsByBlockchainIdResponse() {
    *this = ::std::move(from);
  }

  inline GetCorporationsByBlockchainIdResponse& operator=(const GetCorporationsByBlockchainIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCorporationsByBlockchainIdResponse& operator=(GetCorporationsByBlockchainIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCorporationsByBlockchainIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCorporationsByBlockchainIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetCorporationsByBlockchainIdResponse*>(
               &_GetCorporationsByBlockchainIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetCorporationsByBlockchainIdResponse& a, GetCorporationsByBlockchainIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCorporationsByBlockchainIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCorporationsByBlockchainIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCorporationsByBlockchainIdResponse* New() const final {
    return new GetCorporationsByBlockchainIdResponse();
  }

  GetCorporationsByBlockchainIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCorporationsByBlockchainIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCorporationsByBlockchainIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCorporationsByBlockchainIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCorporationsByBlockchainIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse";
  }
  protected:
  explicit GetCorporationsByBlockchainIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorporationsFieldNumber = 1,
    kNextUrlFieldNumber = 3,
    kPreviousUrlFieldNumber = 4,
    kTotalFieldNumber = 2,
  };
  // repeated .blockchain.network.v1alpha1.Corporation corporations = 1 [json_name = "corporations"];
  int corporations_size() const;
  private:
  int _internal_corporations_size() const;
  public:
  void clear_corporations();
  ::blockchain::network::v1alpha1::Corporation* mutable_corporations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >*
      mutable_corporations();
  private:
  const ::blockchain::network::v1alpha1::Corporation& _internal_corporations(int index) const;
  ::blockchain::network::v1alpha1::Corporation* _internal_add_corporations();
  public:
  const ::blockchain::network::v1alpha1::Corporation& corporations(int index) const;
  ::blockchain::network::v1alpha1::Corporation* add_corporations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >&
      corporations() const;

  // string next_url = 3 [json_name = "nextUrl"];
  void clear_next_url();
  const std::string& next_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_next_url();
  void set_allocated_next_url(std::string* next_url);
  private:
  const std::string& _internal_next_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_url(const std::string& value);
  std::string* _internal_mutable_next_url();
  public:

  // string previous_url = 4 [json_name = "previousUrl"];
  void clear_previous_url();
  const std::string& previous_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous_url();
  void set_allocated_previous_url(std::string* previous_url);
  private:
  const std::string& _internal_previous_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_url(const std::string& value);
  std::string* _internal_mutable_previous_url();
  public:

  // int64 total = 2 [json_name = "total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation > corporations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateCorporationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateCorporationResponse) */ {
 public:
  inline CreateCorporationResponse() : CreateCorporationResponse(nullptr) {}
  ~CreateCorporationResponse() override;
  explicit constexpr CreateCorporationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCorporationResponse(const CreateCorporationResponse& from);
  CreateCorporationResponse(CreateCorporationResponse&& from) noexcept
    : CreateCorporationResponse() {
    *this = ::std::move(from);
  }

  inline CreateCorporationResponse& operator=(const CreateCorporationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCorporationResponse& operator=(CreateCorporationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCorporationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCorporationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCorporationResponse*>(
               &_CreateCorporationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateCorporationResponse& a, CreateCorporationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCorporationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCorporationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCorporationResponse* New() const final {
    return new CreateCorporationResponse();
  }

  CreateCorporationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCorporationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCorporationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateCorporationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCorporationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateCorporationResponse";
  }
  protected:
  explicit CreateCorporationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCorporationFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  bool has_corporation() const;
  private:
  bool _internal_has_corporation() const;
  public:
  void clear_corporation();
  const ::blockchain::network::v1alpha1::Corporation& corporation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Corporation* release_corporation();
  ::blockchain::network::v1alpha1::Corporation* mutable_corporation();
  void set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation);
  private:
  const ::blockchain::network::v1alpha1::Corporation& _internal_corporation() const;
  ::blockchain::network::v1alpha1::Corporation* _internal_mutable_corporation();
  public:
  void unsafe_arena_set_allocated_corporation(
      ::blockchain::network::v1alpha1::Corporation* corporation);
  ::blockchain::network::v1alpha1::Corporation* unsafe_arena_release_corporation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateCorporationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Corporation* corporation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SendInvitationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.SendInvitationResponse) */ {
 public:
  inline SendInvitationResponse() : SendInvitationResponse(nullptr) {}
  ~SendInvitationResponse() override;
  explicit constexpr SendInvitationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendInvitationResponse(const SendInvitationResponse& from);
  SendInvitationResponse(SendInvitationResponse&& from) noexcept
    : SendInvitationResponse() {
    *this = ::std::move(from);
  }

  inline SendInvitationResponse& operator=(const SendInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationResponse& operator=(SendInvitationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendInvitationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendInvitationResponse* internal_default_instance() {
    return reinterpret_cast<const SendInvitationResponse*>(
               &_SendInvitationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SendInvitationResponse& a, SendInvitationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendInvitationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationResponse* New() const final {
    return new SendInvitationResponse();
  }

  SendInvitationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendInvitationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendInvitationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.SendInvitationResponse";
  }
  protected:
  explicit SendInvitationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kInvitationFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::blockchain::network::v1alpha1::Invitation& invitation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Invitation* release_invitation();
  ::blockchain::network::v1alpha1::Invitation* mutable_invitation();
  void set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation);
  private:
  const ::blockchain::network::v1alpha1::Invitation& _internal_invitation() const;
  ::blockchain::network::v1alpha1::Invitation* _internal_mutable_invitation();
  public:
  void unsafe_arena_set_allocated_invitation(
      ::blockchain::network::v1alpha1::Invitation* invitation);
  ::blockchain::network::v1alpha1::Invitation* unsafe_arena_release_invitation();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.SendInvitationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::blockchain::network::v1alpha1::Invitation* invitation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateNetworkRequest

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool CreateNetworkRequest::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool CreateNetworkRequest::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkRequest::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkRequest::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  return _internal_network();
}
inline void CreateNetworkRequest::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.network)
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  return _msg;
}
inline void CreateNetworkRequest::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.network)
}

// .blockchain.network.v1alpha1.Corporation corporation = 2 [json_name = "corporation"];
inline bool CreateNetworkRequest::_internal_has_corporation() const {
  return this != internal_default_instance() && corporation_ != nullptr;
}
inline bool CreateNetworkRequest::has_corporation() const {
  return _internal_has_corporation();
}
inline const ::blockchain::network::v1alpha1::Corporation& CreateNetworkRequest::_internal_corporation() const {
  const ::blockchain::network::v1alpha1::Corporation* p = corporation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Corporation&>(
      ::blockchain::network::v1alpha1::_Corporation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Corporation& CreateNetworkRequest::corporation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkRequest.corporation)
  return _internal_corporation();
}
inline void CreateNetworkRequest::unsafe_arena_set_allocated_corporation(
    ::blockchain::network::v1alpha1::Corporation* corporation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  corporation_ = corporation;
  if (corporation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.corporation)
}
inline ::blockchain::network::v1alpha1::Corporation* CreateNetworkRequest::release_corporation() {
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateNetworkRequest::unsafe_arena_release_corporation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkRequest.corporation)
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateNetworkRequest::_internal_mutable_corporation() {
  
  if (corporation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Corporation>(GetArenaForAllocation());
    corporation_ = p;
  }
  return corporation_;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateNetworkRequest::mutable_corporation() {
  ::blockchain::network::v1alpha1::Corporation* _msg = _internal_mutable_corporation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkRequest.corporation)
  return _msg;
}
inline void CreateNetworkRequest::set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  if (corporation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation));
    if (message_arena != submessage_arena) {
      corporation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corporation, submessage_arena);
    }
    
  } else {
    
  }
  corporation_ = corporation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.corporation)
}

// string ccp_organization_id = 3 [json_name = "ccpOrganizationId"];
inline void CreateNetworkRequest::clear_ccp_organization_id() {
  ccp_organization_id_.ClearToEmpty();
}
inline const std::string& CreateNetworkRequest::ccp_organization_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_organization_id)
  return _internal_ccp_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkRequest::set_ccp_organization_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_organization_id)
}
inline std::string* CreateNetworkRequest::mutable_ccp_organization_id() {
  std::string* _s = _internal_mutable_ccp_organization_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_organization_id)
  return _s;
}
inline const std::string& CreateNetworkRequest::_internal_ccp_organization_id() const {
  return ccp_organization_id_.Get();
}
inline void CreateNetworkRequest::_internal_set_ccp_organization_id(const std::string& value) {
  
  ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkRequest::_internal_mutable_ccp_organization_id() {
  
  return ccp_organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkRequest::release_ccp_organization_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_organization_id)
  return ccp_organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkRequest::set_allocated_ccp_organization_id(std::string* ccp_organization_id) {
  if (ccp_organization_id != nullptr) {
    
  } else {
    
  }
  ccp_organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_organization_id)
}

// string ccp_project_id = 4 [json_name = "ccpProjectId"];
inline void CreateNetworkRequest::clear_ccp_project_id() {
  ccp_project_id_.ClearToEmpty();
}
inline const std::string& CreateNetworkRequest::ccp_project_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_project_id)
  return _internal_ccp_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkRequest::set_ccp_project_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_project_id)
}
inline std::string* CreateNetworkRequest::mutable_ccp_project_id() {
  std::string* _s = _internal_mutable_ccp_project_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_project_id)
  return _s;
}
inline const std::string& CreateNetworkRequest::_internal_ccp_project_id() const {
  return ccp_project_id_.Get();
}
inline void CreateNetworkRequest::_internal_set_ccp_project_id(const std::string& value) {
  
  ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkRequest::_internal_mutable_ccp_project_id() {
  
  return ccp_project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkRequest::release_ccp_project_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_project_id)
  return ccp_project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkRequest::set_allocated_ccp_project_id(std::string* ccp_project_id) {
  if (ccp_project_id != nullptr) {
    
  } else {
    
  }
  ccp_project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.ccp_project_id)
}

// -------------------------------------------------------------------

// AddPeerToCorporationRequest

// string ccp_organization_id = 1 [json_name = "ccpOrganizationId"];
inline void AddPeerToCorporationRequest::clear_ccp_organization_id() {
  ccp_organization_id_.ClearToEmpty();
}
inline const std::string& AddPeerToCorporationRequest::ccp_organization_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_organization_id)
  return _internal_ccp_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToCorporationRequest::set_ccp_organization_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_organization_id)
}
inline std::string* AddPeerToCorporationRequest::mutable_ccp_organization_id() {
  std::string* _s = _internal_mutable_ccp_organization_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_organization_id)
  return _s;
}
inline const std::string& AddPeerToCorporationRequest::_internal_ccp_organization_id() const {
  return ccp_organization_id_.Get();
}
inline void AddPeerToCorporationRequest::_internal_set_ccp_organization_id(const std::string& value) {
  
  ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationRequest::_internal_mutable_ccp_organization_id() {
  
  return ccp_organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationRequest::release_ccp_organization_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_organization_id)
  return ccp_organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToCorporationRequest::set_allocated_ccp_organization_id(std::string* ccp_organization_id) {
  if (ccp_organization_id != nullptr) {
    
  } else {
    
  }
  ccp_organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_organization_id)
}

// string ccp_project_id = 2 [json_name = "ccpProjectId"];
inline void AddPeerToCorporationRequest::clear_ccp_project_id() {
  ccp_project_id_.ClearToEmpty();
}
inline const std::string& AddPeerToCorporationRequest::ccp_project_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_project_id)
  return _internal_ccp_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToCorporationRequest::set_ccp_project_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_project_id)
}
inline std::string* AddPeerToCorporationRequest::mutable_ccp_project_id() {
  std::string* _s = _internal_mutable_ccp_project_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_project_id)
  return _s;
}
inline const std::string& AddPeerToCorporationRequest::_internal_ccp_project_id() const {
  return ccp_project_id_.Get();
}
inline void AddPeerToCorporationRequest::_internal_set_ccp_project_id(const std::string& value) {
  
  ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationRequest::_internal_mutable_ccp_project_id() {
  
  return ccp_project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationRequest::release_ccp_project_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_project_id)
  return ccp_project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToCorporationRequest::set_allocated_ccp_project_id(std::string* ccp_project_id) {
  if (ccp_project_id != nullptr) {
    
  } else {
    
  }
  ccp_project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_project_id)
}

// string corporation_id = 3 [json_name = "corporationId"];
inline void AddPeerToCorporationRequest::clear_corporation_id() {
  corporation_id_.ClearToEmpty();
}
inline const std::string& AddPeerToCorporationRequest::corporation_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToCorporationRequest.corporation_id)
  return _internal_corporation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToCorporationRequest::set_corporation_id(ArgT0&& arg0, ArgT... args) {
 
 corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToCorporationRequest.corporation_id)
}
inline std::string* AddPeerToCorporationRequest::mutable_corporation_id() {
  std::string* _s = _internal_mutable_corporation_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToCorporationRequest.corporation_id)
  return _s;
}
inline const std::string& AddPeerToCorporationRequest::_internal_corporation_id() const {
  return corporation_id_.Get();
}
inline void AddPeerToCorporationRequest::_internal_set_corporation_id(const std::string& value) {
  
  corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationRequest::_internal_mutable_corporation_id() {
  
  return corporation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationRequest::release_corporation_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToCorporationRequest.corporation_id)
  return corporation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToCorporationRequest::set_allocated_corporation_id(std::string* corporation_id) {
  if (corporation_id != nullptr) {
    
  } else {
    
  }
  corporation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corporation_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToCorporationRequest.corporation_id)
}

// -------------------------------------------------------------------

// AddOrdererByNetworkIdRequest

// .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
inline bool AddOrdererByNetworkIdRequest::_internal_has_orderer() const {
  return this != internal_default_instance() && orderer_ != nullptr;
}
inline bool AddOrdererByNetworkIdRequest::has_orderer() const {
  return _internal_has_orderer();
}
inline const ::blockchain::network::v1alpha1::Orderer& AddOrdererByNetworkIdRequest::_internal_orderer() const {
  const ::blockchain::network::v1alpha1::Orderer* p = orderer_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Orderer&>(
      ::blockchain::network::v1alpha1::_Orderer_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Orderer& AddOrdererByNetworkIdRequest::orderer() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.orderer)
  return _internal_orderer();
}
inline void AddOrdererByNetworkIdRequest::unsafe_arena_set_allocated_orderer(
    ::blockchain::network::v1alpha1::Orderer* orderer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderer_);
  }
  orderer_ = orderer;
  if (orderer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.orderer)
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdRequest::release_orderer() {
  
  ::blockchain::network::v1alpha1::Orderer* temp = orderer_;
  orderer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdRequest::unsafe_arena_release_orderer() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.orderer)
  
  ::blockchain::network::v1alpha1::Orderer* temp = orderer_;
  orderer_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdRequest::_internal_mutable_orderer() {
  
  if (orderer_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Orderer>(GetArenaForAllocation());
    orderer_ = p;
  }
  return orderer_;
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdRequest::mutable_orderer() {
  ::blockchain::network::v1alpha1::Orderer* _msg = _internal_mutable_orderer();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.orderer)
  return _msg;
}
inline void AddOrdererByNetworkIdRequest::set_allocated_orderer(::blockchain::network::v1alpha1::Orderer* orderer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderer_);
  }
  if (orderer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderer));
    if (message_arena != submessage_arena) {
      orderer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderer, submessage_arena);
    }
    
  } else {
    
  }
  orderer_ = orderer;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.orderer)
}

// string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
inline void AddOrdererByNetworkIdRequest::clear_ccp_organization_id() {
  ccp_organization_id_.ClearToEmpty();
}
inline const std::string& AddOrdererByNetworkIdRequest::ccp_organization_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_organization_id)
  return _internal_ccp_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddOrdererByNetworkIdRequest::set_ccp_organization_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_organization_id)
}
inline std::string* AddOrdererByNetworkIdRequest::mutable_ccp_organization_id() {
  std::string* _s = _internal_mutable_ccp_organization_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_organization_id)
  return _s;
}
inline const std::string& AddOrdererByNetworkIdRequest::_internal_ccp_organization_id() const {
  return ccp_organization_id_.Get();
}
inline void AddOrdererByNetworkIdRequest::_internal_set_ccp_organization_id(const std::string& value) {
  
  ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddOrdererByNetworkIdRequest::_internal_mutable_ccp_organization_id() {
  
  return ccp_organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddOrdererByNetworkIdRequest::release_ccp_organization_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_organization_id)
  return ccp_organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddOrdererByNetworkIdRequest::set_allocated_ccp_organization_id(std::string* ccp_organization_id) {
  if (ccp_organization_id != nullptr) {
    
  } else {
    
  }
  ccp_organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_organization_id)
}

// string ccp_project_id = 3 [json_name = "ccpProjectId"];
inline void AddOrdererByNetworkIdRequest::clear_ccp_project_id() {
  ccp_project_id_.ClearToEmpty();
}
inline const std::string& AddOrdererByNetworkIdRequest::ccp_project_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_project_id)
  return _internal_ccp_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddOrdererByNetworkIdRequest::set_ccp_project_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_project_id)
}
inline std::string* AddOrdererByNetworkIdRequest::mutable_ccp_project_id() {
  std::string* _s = _internal_mutable_ccp_project_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_project_id)
  return _s;
}
inline const std::string& AddOrdererByNetworkIdRequest::_internal_ccp_project_id() const {
  return ccp_project_id_.Get();
}
inline void AddOrdererByNetworkIdRequest::_internal_set_ccp_project_id(const std::string& value) {
  
  ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddOrdererByNetworkIdRequest::_internal_mutable_ccp_project_id() {
  
  return ccp_project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddOrdererByNetworkIdRequest::release_ccp_project_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_project_id)
  return ccp_project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddOrdererByNetworkIdRequest::set_allocated_ccp_project_id(std::string* ccp_project_id) {
  if (ccp_project_id != nullptr) {
    
  } else {
    
  }
  ccp_project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_project_id)
}

// -------------------------------------------------------------------

// CreateChannelRequest

// .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
inline bool CreateChannelRequest::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CreateChannelRequest::has_channel() const {
  return _internal_has_channel();
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelRequest::_internal_channel() const {
  const ::blockchain::network::v1alpha1::Channel* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Channel&>(
      ::blockchain::network::v1alpha1::_Channel_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelRequest::channel() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelRequest.channel)
  return _internal_channel();
}
inline void CreateChannelRequest::unsafe_arena_set_allocated_channel(
    ::blockchain::network::v1alpha1::Channel* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateChannelRequest.channel)
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::release_channel() {
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelRequest.channel)
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Channel>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelRequest::mutable_channel() {
  ::blockchain::network::v1alpha1::Channel* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelRequest.channel)
  return _msg;
}
inline void CreateChannelRequest::set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel));
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelRequest.channel)
}

// -------------------------------------------------------------------

// GetBlockchainsRequest

// int64 offset = 1 [json_name = "offset"];
inline void GetBlockchainsRequest::clear_offset() {
  offset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsRequest::offset() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsRequest.offset)
  return _internal_offset();
}
inline void GetBlockchainsRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetBlockchainsRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsRequest.offset)
}

// int64 limit = 2 [json_name = "limit"];
inline void GetBlockchainsRequest::clear_limit() {
  limit_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsRequest::limit() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsRequest.limit)
  return _internal_limit();
}
inline void GetBlockchainsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void GetBlockchainsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsRequest.limit)
}

// string query_params = 3 [json_name = "queryParams"];
inline void GetBlockchainsRequest::clear_query_params() {
  query_params_.ClearToEmpty();
}
inline const std::string& GetBlockchainsRequest::query_params() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsRequest.query_params)
  return _internal_query_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsRequest::set_query_params(ArgT0&& arg0, ArgT... args) {
 
 query_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsRequest.query_params)
}
inline std::string* GetBlockchainsRequest::mutable_query_params() {
  std::string* _s = _internal_mutable_query_params();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsRequest.query_params)
  return _s;
}
inline const std::string& GetBlockchainsRequest::_internal_query_params() const {
  return query_params_.Get();
}
inline void GetBlockchainsRequest::_internal_set_query_params(const std::string& value) {
  
  query_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsRequest::_internal_mutable_query_params() {
  
  return query_params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsRequest::release_query_params() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsRequest.query_params)
  return query_params_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsRequest::set_allocated_query_params(std::string* query_params) {
  if (query_params != nullptr) {
    
  } else {
    
  }
  query_params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_params,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsRequest.query_params)
}

// -------------------------------------------------------------------

// GetBlockchainsByUserIdRequest

// string user_id = 1 [json_name = "userId"];
inline void GetBlockchainsByUserIdRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& GetBlockchainsByUserIdRequest::user_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsByUserIdRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.user_id)
}
inline std::string* GetBlockchainsByUserIdRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.user_id)
  return _s;
}
inline const std::string& GetBlockchainsByUserIdRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetBlockchainsByUserIdRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsByUserIdRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsByUserIdRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsByUserIdRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.user_id)
}

// int64 offset = 2 [json_name = "offset"];
inline void GetBlockchainsByUserIdRequest::clear_offset() {
  offset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsByUserIdRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsByUserIdRequest::offset() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.offset)
  return _internal_offset();
}
inline void GetBlockchainsByUserIdRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetBlockchainsByUserIdRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.offset)
}

// int64 limit = 3 [json_name = "limit"];
inline void GetBlockchainsByUserIdRequest::clear_limit() {
  limit_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsByUserIdRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsByUserIdRequest::limit() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.limit)
  return _internal_limit();
}
inline void GetBlockchainsByUserIdRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void GetBlockchainsByUserIdRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.limit)
}

// -------------------------------------------------------------------

// GetPeersByCorporationIdRequest

// string corporation_id = 1 [json_name = "corporationId"];
inline void GetPeersByCorporationIdRequest::clear_corporation_id() {
  corporation_id_.ClearToEmpty();
}
inline const std::string& GetPeersByCorporationIdRequest::corporation_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.corporation_id)
  return _internal_corporation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPeersByCorporationIdRequest::set_corporation_id(ArgT0&& arg0, ArgT... args) {
 
 corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.corporation_id)
}
inline std::string* GetPeersByCorporationIdRequest::mutable_corporation_id() {
  std::string* _s = _internal_mutable_corporation_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.corporation_id)
  return _s;
}
inline const std::string& GetPeersByCorporationIdRequest::_internal_corporation_id() const {
  return corporation_id_.Get();
}
inline void GetPeersByCorporationIdRequest::_internal_set_corporation_id(const std::string& value) {
  
  corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPeersByCorporationIdRequest::_internal_mutable_corporation_id() {
  
  return corporation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPeersByCorporationIdRequest::release_corporation_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.corporation_id)
  return corporation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPeersByCorporationIdRequest::set_allocated_corporation_id(std::string* corporation_id) {
  if (corporation_id != nullptr) {
    
  } else {
    
  }
  corporation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corporation_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.corporation_id)
}

// int64 offset = 2 [json_name = "offset"];
inline void GetPeersByCorporationIdRequest::clear_offset() {
  offset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPeersByCorporationIdRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPeersByCorporationIdRequest::offset() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.offset)
  return _internal_offset();
}
inline void GetPeersByCorporationIdRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetPeersByCorporationIdRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.offset)
}

// int64 limit = 3 [json_name = "limit"];
inline void GetPeersByCorporationIdRequest::clear_limit() {
  limit_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPeersByCorporationIdRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPeersByCorporationIdRequest::limit() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.limit)
  return _internal_limit();
}
inline void GetPeersByCorporationIdRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void GetPeersByCorporationIdRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.limit)
}

// -------------------------------------------------------------------

// GetOrderersByNetworkIdRequest

// string network_id = 1 [json_name = "networkId"];
inline void GetOrderersByNetworkIdRequest::clear_network_id() {
  network_id_.ClearToEmpty();
}
inline const std::string& GetOrderersByNetworkIdRequest::network_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.network_id)
  return _internal_network_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderersByNetworkIdRequest::set_network_id(ArgT0&& arg0, ArgT... args) {
 
 network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.network_id)
}
inline std::string* GetOrderersByNetworkIdRequest::mutable_network_id() {
  std::string* _s = _internal_mutable_network_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.network_id)
  return _s;
}
inline const std::string& GetOrderersByNetworkIdRequest::_internal_network_id() const {
  return network_id_.Get();
}
inline void GetOrderersByNetworkIdRequest::_internal_set_network_id(const std::string& value) {
  
  network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOrderersByNetworkIdRequest::_internal_mutable_network_id() {
  
  return network_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOrderersByNetworkIdRequest::release_network_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.network_id)
  return network_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOrderersByNetworkIdRequest::set_allocated_network_id(std::string* network_id) {
  if (network_id != nullptr) {
    
  } else {
    
  }
  network_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.network_id)
}

// int64 offset = 2 [json_name = "offset"];
inline void GetOrderersByNetworkIdRequest::clear_offset() {
  offset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOrderersByNetworkIdRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOrderersByNetworkIdRequest::offset() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.offset)
  return _internal_offset();
}
inline void GetOrderersByNetworkIdRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetOrderersByNetworkIdRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.offset)
}

// int64 limit = 3 [json_name = "limit"];
inline void GetOrderersByNetworkIdRequest::clear_limit() {
  limit_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOrderersByNetworkIdRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOrderersByNetworkIdRequest::limit() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.limit)
  return _internal_limit();
}
inline void GetOrderersByNetworkIdRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void GetOrderersByNetworkIdRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.limit)
}

// -------------------------------------------------------------------

// GetBlockchainByIdRequest

// string id = 1 [json_name = "id"];
inline void GetBlockchainByIdRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetBlockchainByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainByIdRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainByIdRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainByIdRequest.id)
}
inline std::string* GetBlockchainByIdRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainByIdRequest.id)
  return _s;
}
inline const std::string& GetBlockchainByIdRequest::_internal_id() const {
  return id_.Get();
}
inline void GetBlockchainByIdRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainByIdRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainByIdRequest::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainByIdRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainByIdRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainByIdRequest.id)
}

// -------------------------------------------------------------------

// GetCorporationsByBlockchainIdRequest

// string blockchain_id = 1 [json_name = "blockchainId"];
inline void GetCorporationsByBlockchainIdRequest::clear_blockchain_id() {
  blockchain_id_.ClearToEmpty();
}
inline const std::string& GetCorporationsByBlockchainIdRequest::blockchain_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.blockchain_id)
  return _internal_blockchain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCorporationsByBlockchainIdRequest::set_blockchain_id(ArgT0&& arg0, ArgT... args) {
 
 blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.blockchain_id)
}
inline std::string* GetCorporationsByBlockchainIdRequest::mutable_blockchain_id() {
  std::string* _s = _internal_mutable_blockchain_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.blockchain_id)
  return _s;
}
inline const std::string& GetCorporationsByBlockchainIdRequest::_internal_blockchain_id() const {
  return blockchain_id_.Get();
}
inline void GetCorporationsByBlockchainIdRequest::_internal_set_blockchain_id(const std::string& value) {
  
  blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCorporationsByBlockchainIdRequest::_internal_mutable_blockchain_id() {
  
  return blockchain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCorporationsByBlockchainIdRequest::release_blockchain_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.blockchain_id)
  return blockchain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCorporationsByBlockchainIdRequest::set_allocated_blockchain_id(std::string* blockchain_id) {
  if (blockchain_id != nullptr) {
    
  } else {
    
  }
  blockchain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockchain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.blockchain_id)
}

// int64 offset = 2 [json_name = "offset"];
inline void GetCorporationsByBlockchainIdRequest::clear_offset() {
  offset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCorporationsByBlockchainIdRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCorporationsByBlockchainIdRequest::offset() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.offset)
  return _internal_offset();
}
inline void GetCorporationsByBlockchainIdRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetCorporationsByBlockchainIdRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.offset)
}

// int64 limit = 3 [json_name = "limit"];
inline void GetCorporationsByBlockchainIdRequest::clear_limit() {
  limit_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCorporationsByBlockchainIdRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCorporationsByBlockchainIdRequest::limit() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.limit)
  return _internal_limit();
}
inline void GetCorporationsByBlockchainIdRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void GetCorporationsByBlockchainIdRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.limit)
}

// -------------------------------------------------------------------

// CreateCorporationRequest

// .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
inline bool CreateCorporationRequest::_internal_has_corporation() const {
  return this != internal_default_instance() && corporation_ != nullptr;
}
inline bool CreateCorporationRequest::has_corporation() const {
  return _internal_has_corporation();
}
inline const ::blockchain::network::v1alpha1::Corporation& CreateCorporationRequest::_internal_corporation() const {
  const ::blockchain::network::v1alpha1::Corporation* p = corporation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Corporation&>(
      ::blockchain::network::v1alpha1::_Corporation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Corporation& CreateCorporationRequest::corporation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateCorporationRequest.corporation)
  return _internal_corporation();
}
inline void CreateCorporationRequest::unsafe_arena_set_allocated_corporation(
    ::blockchain::network::v1alpha1::Corporation* corporation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  corporation_ = corporation;
  if (corporation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateCorporationRequest.corporation)
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationRequest::release_corporation() {
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationRequest::unsafe_arena_release_corporation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateCorporationRequest.corporation)
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationRequest::_internal_mutable_corporation() {
  
  if (corporation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Corporation>(GetArenaForAllocation());
    corporation_ = p;
  }
  return corporation_;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationRequest::mutable_corporation() {
  ::blockchain::network::v1alpha1::Corporation* _msg = _internal_mutable_corporation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateCorporationRequest.corporation)
  return _msg;
}
inline void CreateCorporationRequest::set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  if (corporation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation));
    if (message_arena != submessage_arena) {
      corporation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corporation, submessage_arena);
    }
    
  } else {
    
  }
  corporation_ = corporation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateCorporationRequest.corporation)
}

// string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
inline void CreateCorporationRequest::clear_ccp_organization_id() {
  ccp_organization_id_.ClearToEmpty();
}
inline const std::string& CreateCorporationRequest::ccp_organization_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_organization_id)
  return _internal_ccp_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCorporationRequest::set_ccp_organization_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_organization_id)
}
inline std::string* CreateCorporationRequest::mutable_ccp_organization_id() {
  std::string* _s = _internal_mutable_ccp_organization_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_organization_id)
  return _s;
}
inline const std::string& CreateCorporationRequest::_internal_ccp_organization_id() const {
  return ccp_organization_id_.Get();
}
inline void CreateCorporationRequest::_internal_set_ccp_organization_id(const std::string& value) {
  
  ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateCorporationRequest::_internal_mutable_ccp_organization_id() {
  
  return ccp_organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateCorporationRequest::release_ccp_organization_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_organization_id)
  return ccp_organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateCorporationRequest::set_allocated_ccp_organization_id(std::string* ccp_organization_id) {
  if (ccp_organization_id != nullptr) {
    
  } else {
    
  }
  ccp_organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_organization_id)
}

// string ccp_project_id = 3 [json_name = "ccpProjectId"];
inline void CreateCorporationRequest::clear_ccp_project_id() {
  ccp_project_id_.ClearToEmpty();
}
inline const std::string& CreateCorporationRequest::ccp_project_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_project_id)
  return _internal_ccp_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCorporationRequest::set_ccp_project_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_project_id)
}
inline std::string* CreateCorporationRequest::mutable_ccp_project_id() {
  std::string* _s = _internal_mutable_ccp_project_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_project_id)
  return _s;
}
inline const std::string& CreateCorporationRequest::_internal_ccp_project_id() const {
  return ccp_project_id_.Get();
}
inline void CreateCorporationRequest::_internal_set_ccp_project_id(const std::string& value) {
  
  ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateCorporationRequest::_internal_mutable_ccp_project_id() {
  
  return ccp_project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateCorporationRequest::release_ccp_project_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_project_id)
  return ccp_project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateCorporationRequest::set_allocated_ccp_project_id(std::string* ccp_project_id) {
  if (ccp_project_id != nullptr) {
    
  } else {
    
  }
  ccp_project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateCorporationRequest.ccp_project_id)
}

// -------------------------------------------------------------------

// SendInvitationRequest

// .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
inline bool SendInvitationRequest::_internal_has_invitation() const {
  return this != internal_default_instance() && invitation_ != nullptr;
}
inline bool SendInvitationRequest::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationRequest::_internal_invitation() const {
  const ::blockchain::network::v1alpha1::Invitation* p = invitation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Invitation&>(
      ::blockchain::network::v1alpha1::_Invitation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationRequest::invitation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
  return _internal_invitation();
}
inline void SendInvitationRequest::unsafe_arena_set_allocated_invitation(
    ::blockchain::network::v1alpha1::Invitation* invitation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  invitation_ = invitation;
  if (invitation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::release_invitation() {
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::unsafe_arena_release_invitation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::_internal_mutable_invitation() {
  
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Invitation>(GetArenaForAllocation());
    invitation_ = p;
  }
  return invitation_;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationRequest::mutable_invitation() {
  ::blockchain::network::v1alpha1::Invitation* _msg = _internal_mutable_invitation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
  return _msg;
}
inline void SendInvitationRequest::set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation));
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    
  } else {
    
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.SendInvitationRequest.invitation)
}

// -------------------------------------------------------------------

// CreateNetworkResponse

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool CreateNetworkResponse::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool CreateNetworkResponse::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkResponse::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkResponse::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkResponse.network)
  return _internal_network();
}
inline void CreateNetworkResponse::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.network)
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkResponse.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkResponse::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkResponse.network)
  return _msg;
}
inline void CreateNetworkResponse::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.network)
}

// string message = 2 [json_name = "message"];
inline void CreateNetworkResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateNetworkResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkResponse.message)
}
inline std::string* CreateNetworkResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return _s;
}
inline const std::string& CreateNetworkResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateNetworkResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.message)
}

// -------------------------------------------------------------------

// AddPeerToCorporationResponse

// .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
inline bool AddPeerToCorporationResponse::_internal_has_corporation() const {
  return this != internal_default_instance() && corporation_ != nullptr;
}
inline bool AddPeerToCorporationResponse::has_corporation() const {
  return _internal_has_corporation();
}
inline const ::blockchain::network::v1alpha1::Corporation& AddPeerToCorporationResponse::_internal_corporation() const {
  const ::blockchain::network::v1alpha1::Corporation* p = corporation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Corporation&>(
      ::blockchain::network::v1alpha1::_Corporation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Corporation& AddPeerToCorporationResponse::corporation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToCorporationResponse.corporation)
  return _internal_corporation();
}
inline void AddPeerToCorporationResponse::unsafe_arena_set_allocated_corporation(
    ::blockchain::network::v1alpha1::Corporation* corporation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  corporation_ = corporation;
  if (corporation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.AddPeerToCorporationResponse.corporation)
}
inline ::blockchain::network::v1alpha1::Corporation* AddPeerToCorporationResponse::release_corporation() {
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* AddPeerToCorporationResponse::unsafe_arena_release_corporation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToCorporationResponse.corporation)
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* AddPeerToCorporationResponse::_internal_mutable_corporation() {
  
  if (corporation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Corporation>(GetArenaForAllocation());
    corporation_ = p;
  }
  return corporation_;
}
inline ::blockchain::network::v1alpha1::Corporation* AddPeerToCorporationResponse::mutable_corporation() {
  ::blockchain::network::v1alpha1::Corporation* _msg = _internal_mutable_corporation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToCorporationResponse.corporation)
  return _msg;
}
inline void AddPeerToCorporationResponse::set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  if (corporation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation));
    if (message_arena != submessage_arena) {
      corporation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corporation, submessage_arena);
    }
    
  } else {
    
  }
  corporation_ = corporation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToCorporationResponse.corporation)
}

// string message = 2 [json_name = "message"];
inline void AddPeerToCorporationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AddPeerToCorporationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToCorporationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToCorporationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToCorporationResponse.message)
}
inline std::string* AddPeerToCorporationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToCorporationResponse.message)
  return _s;
}
inline const std::string& AddPeerToCorporationResponse::_internal_message() const {
  return message_.Get();
}
inline void AddPeerToCorporationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToCorporationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToCorporationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToCorporationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToCorporationResponse.message)
}

// -------------------------------------------------------------------

// AddOrdererByNetworkIdResponse

// .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
inline bool AddOrdererByNetworkIdResponse::_internal_has_orderer() const {
  return this != internal_default_instance() && orderer_ != nullptr;
}
inline bool AddOrdererByNetworkIdResponse::has_orderer() const {
  return _internal_has_orderer();
}
inline const ::blockchain::network::v1alpha1::Orderer& AddOrdererByNetworkIdResponse::_internal_orderer() const {
  const ::blockchain::network::v1alpha1::Orderer* p = orderer_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Orderer&>(
      ::blockchain::network::v1alpha1::_Orderer_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Orderer& AddOrdererByNetworkIdResponse::orderer() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.orderer)
  return _internal_orderer();
}
inline void AddOrdererByNetworkIdResponse::unsafe_arena_set_allocated_orderer(
    ::blockchain::network::v1alpha1::Orderer* orderer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderer_);
  }
  orderer_ = orderer;
  if (orderer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.orderer)
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdResponse::release_orderer() {
  
  ::blockchain::network::v1alpha1::Orderer* temp = orderer_;
  orderer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdResponse::unsafe_arena_release_orderer() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.orderer)
  
  ::blockchain::network::v1alpha1::Orderer* temp = orderer_;
  orderer_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdResponse::_internal_mutable_orderer() {
  
  if (orderer_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Orderer>(GetArenaForAllocation());
    orderer_ = p;
  }
  return orderer_;
}
inline ::blockchain::network::v1alpha1::Orderer* AddOrdererByNetworkIdResponse::mutable_orderer() {
  ::blockchain::network::v1alpha1::Orderer* _msg = _internal_mutable_orderer();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.orderer)
  return _msg;
}
inline void AddOrdererByNetworkIdResponse::set_allocated_orderer(::blockchain::network::v1alpha1::Orderer* orderer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderer_);
  }
  if (orderer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orderer));
    if (message_arena != submessage_arena) {
      orderer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderer, submessage_arena);
    }
    
  } else {
    
  }
  orderer_ = orderer;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.orderer)
}

// string message = 2 [json_name = "message"];
inline void AddOrdererByNetworkIdResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AddOrdererByNetworkIdResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddOrdererByNetworkIdResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.message)
}
inline std::string* AddOrdererByNetworkIdResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.message)
  return _s;
}
inline const std::string& AddOrdererByNetworkIdResponse::_internal_message() const {
  return message_.Get();
}
inline void AddOrdererByNetworkIdResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddOrdererByNetworkIdResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddOrdererByNetworkIdResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddOrdererByNetworkIdResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.message)
}

// -------------------------------------------------------------------

// CreateChannelResponse

// .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
inline bool CreateChannelResponse::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CreateChannelResponse::has_channel() const {
  return _internal_has_channel();
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelResponse::_internal_channel() const {
  const ::blockchain::network::v1alpha1::Channel* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Channel&>(
      ::blockchain::network::v1alpha1::_Channel_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Channel& CreateChannelResponse::channel() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelResponse.channel)
  return _internal_channel();
}
inline void CreateChannelResponse::unsafe_arena_set_allocated_channel(
    ::blockchain::network::v1alpha1::Channel* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.channel)
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::release_channel() {
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelResponse.channel)
  
  ::blockchain::network::v1alpha1::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Channel>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::blockchain::network::v1alpha1::Channel* CreateChannelResponse::mutable_channel() {
  ::blockchain::network::v1alpha1::Channel* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelResponse.channel)
  return _msg;
}
inline void CreateChannelResponse::set_allocated_channel(::blockchain::network::v1alpha1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel));
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.channel)
}

// string message = 2 [json_name = "message"];
inline void CreateChannelResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateChannelResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelResponse.message)
}
inline std::string* CreateChannelResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return _s;
}
inline const std::string& CreateChannelResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateChannelResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.message)
}

// -------------------------------------------------------------------

// GetBlockchainsResponse

// repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
inline int GetBlockchainsResponse::_internal_networks_size() const {
  return networks_.size();
}
inline int GetBlockchainsResponse::networks_size() const {
  return _internal_networks_size();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsResponse.networks)
  return networks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
GetBlockchainsResponse::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.GetBlockchainsResponse.networks)
  return &networks_;
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsResponse::_internal_networks(int index) const {
  return networks_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsResponse::networks(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.networks)
  return _internal_networks(index);
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::_internal_add_networks() {
  return networks_.Add();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::add_networks() {
  ::blockchain::network::v1alpha1::Network* _add = _internal_add_networks();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.GetBlockchainsResponse.networks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
GetBlockchainsResponse::networks() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.GetBlockchainsResponse.networks)
  return networks_;
}

// int64 total = 2 [json_name = "total"];
inline void GetBlockchainsResponse::clear_total() {
  total_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsResponse::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsResponse::total() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.total)
  return _internal_total();
}
inline void GetBlockchainsResponse::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void GetBlockchainsResponse::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsResponse.total)
}

// string next_url = 3 [json_name = "nextUrl"];
inline void GetBlockchainsResponse::clear_next_url() {
  next_url_.ClearToEmpty();
}
inline const std::string& GetBlockchainsResponse::next_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.next_url)
  return _internal_next_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsResponse::set_next_url(ArgT0&& arg0, ArgT... args) {
 
 next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsResponse.next_url)
}
inline std::string* GetBlockchainsResponse::mutable_next_url() {
  std::string* _s = _internal_mutable_next_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsResponse.next_url)
  return _s;
}
inline const std::string& GetBlockchainsResponse::_internal_next_url() const {
  return next_url_.Get();
}
inline void GetBlockchainsResponse::_internal_set_next_url(const std::string& value) {
  
  next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::_internal_mutable_next_url() {
  
  return next_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::release_next_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsResponse.next_url)
  return next_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsResponse::set_allocated_next_url(std::string* next_url) {
  if (next_url != nullptr) {
    
  } else {
    
  }
  next_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsResponse.next_url)
}

// string previous_url = 4 [json_name = "previousUrl"];
inline void GetBlockchainsResponse::clear_previous_url() {
  previous_url_.ClearToEmpty();
}
inline const std::string& GetBlockchainsResponse::previous_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.previous_url)
  return _internal_previous_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsResponse::set_previous_url(ArgT0&& arg0, ArgT... args) {
 
 previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsResponse.previous_url)
}
inline std::string* GetBlockchainsResponse::mutable_previous_url() {
  std::string* _s = _internal_mutable_previous_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsResponse.previous_url)
  return _s;
}
inline const std::string& GetBlockchainsResponse::_internal_previous_url() const {
  return previous_url_.Get();
}
inline void GetBlockchainsResponse::_internal_set_previous_url(const std::string& value) {
  
  previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::_internal_mutable_previous_url() {
  
  return previous_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::release_previous_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsResponse.previous_url)
  return previous_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsResponse::set_allocated_previous_url(std::string* previous_url) {
  if (previous_url != nullptr) {
    
  } else {
    
  }
  previous_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsResponse.previous_url)
}

// -------------------------------------------------------------------

// GetBlockchainsByUserIdResponse

// repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
inline int GetBlockchainsByUserIdResponse::_internal_networks_size() const {
  return networks_.size();
}
inline int GetBlockchainsByUserIdResponse::networks_size() const {
  return _internal_networks_size();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsByUserIdResponse::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.networks)
  return networks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
GetBlockchainsByUserIdResponse::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.networks)
  return &networks_;
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsByUserIdResponse::_internal_networks(int index) const {
  return networks_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsByUserIdResponse::networks(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.networks)
  return _internal_networks(index);
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsByUserIdResponse::_internal_add_networks() {
  return networks_.Add();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsByUserIdResponse::add_networks() {
  ::blockchain::network::v1alpha1::Network* _add = _internal_add_networks();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.networks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
GetBlockchainsByUserIdResponse::networks() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.networks)
  return networks_;
}

// int64 total = 2 [json_name = "total"];
inline void GetBlockchainsByUserIdResponse::clear_total() {
  total_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsByUserIdResponse::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainsByUserIdResponse::total() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.total)
  return _internal_total();
}
inline void GetBlockchainsByUserIdResponse::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void GetBlockchainsByUserIdResponse::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.total)
}

// string next_url = 3 [json_name = "nextUrl"];
inline void GetBlockchainsByUserIdResponse::clear_next_url() {
  next_url_.ClearToEmpty();
}
inline const std::string& GetBlockchainsByUserIdResponse::next_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.next_url)
  return _internal_next_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsByUserIdResponse::set_next_url(ArgT0&& arg0, ArgT... args) {
 
 next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.next_url)
}
inline std::string* GetBlockchainsByUserIdResponse::mutable_next_url() {
  std::string* _s = _internal_mutable_next_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.next_url)
  return _s;
}
inline const std::string& GetBlockchainsByUserIdResponse::_internal_next_url() const {
  return next_url_.Get();
}
inline void GetBlockchainsByUserIdResponse::_internal_set_next_url(const std::string& value) {
  
  next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsByUserIdResponse::_internal_mutable_next_url() {
  
  return next_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsByUserIdResponse::release_next_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.next_url)
  return next_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsByUserIdResponse::set_allocated_next_url(std::string* next_url) {
  if (next_url != nullptr) {
    
  } else {
    
  }
  next_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.next_url)
}

// string previous_url = 4 [json_name = "previousUrl"];
inline void GetBlockchainsByUserIdResponse::clear_previous_url() {
  previous_url_.ClearToEmpty();
}
inline const std::string& GetBlockchainsByUserIdResponse::previous_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.previous_url)
  return _internal_previous_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsByUserIdResponse::set_previous_url(ArgT0&& arg0, ArgT... args) {
 
 previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.previous_url)
}
inline std::string* GetBlockchainsByUserIdResponse::mutable_previous_url() {
  std::string* _s = _internal_mutable_previous_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.previous_url)
  return _s;
}
inline const std::string& GetBlockchainsByUserIdResponse::_internal_previous_url() const {
  return previous_url_.Get();
}
inline void GetBlockchainsByUserIdResponse::_internal_set_previous_url(const std::string& value) {
  
  previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsByUserIdResponse::_internal_mutable_previous_url() {
  
  return previous_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsByUserIdResponse::release_previous_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.previous_url)
  return previous_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsByUserIdResponse::set_allocated_previous_url(std::string* previous_url) {
  if (previous_url != nullptr) {
    
  } else {
    
  }
  previous_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.previous_url)
}

// -------------------------------------------------------------------

// GetOrderersByNetworkIdResponse

// repeated .blockchain.network.v1alpha1.Orderer orderers = 1 [json_name = "orderers"];
inline int GetOrderersByNetworkIdResponse::_internal_orderers_size() const {
  return orderers_.size();
}
inline int GetOrderersByNetworkIdResponse::orderers_size() const {
  return _internal_orderers_size();
}
inline ::blockchain::network::v1alpha1::Orderer* GetOrderersByNetworkIdResponse::mutable_orderers(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.orderers)
  return orderers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Orderer >*
GetOrderersByNetworkIdResponse::mutable_orderers() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.orderers)
  return &orderers_;
}
inline const ::blockchain::network::v1alpha1::Orderer& GetOrderersByNetworkIdResponse::_internal_orderers(int index) const {
  return orderers_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Orderer& GetOrderersByNetworkIdResponse::orderers(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.orderers)
  return _internal_orderers(index);
}
inline ::blockchain::network::v1alpha1::Orderer* GetOrderersByNetworkIdResponse::_internal_add_orderers() {
  return orderers_.Add();
}
inline ::blockchain::network::v1alpha1::Orderer* GetOrderersByNetworkIdResponse::add_orderers() {
  ::blockchain::network::v1alpha1::Orderer* _add = _internal_add_orderers();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.orderers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Orderer >&
GetOrderersByNetworkIdResponse::orderers() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.orderers)
  return orderers_;
}

// int64 total = 2 [json_name = "total"];
inline void GetOrderersByNetworkIdResponse::clear_total() {
  total_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOrderersByNetworkIdResponse::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOrderersByNetworkIdResponse::total() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.total)
  return _internal_total();
}
inline void GetOrderersByNetworkIdResponse::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void GetOrderersByNetworkIdResponse::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.total)
}

// string next_url = 3 [json_name = "nextUrl"];
inline void GetOrderersByNetworkIdResponse::clear_next_url() {
  next_url_.ClearToEmpty();
}
inline const std::string& GetOrderersByNetworkIdResponse::next_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.next_url)
  return _internal_next_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderersByNetworkIdResponse::set_next_url(ArgT0&& arg0, ArgT... args) {
 
 next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.next_url)
}
inline std::string* GetOrderersByNetworkIdResponse::mutable_next_url() {
  std::string* _s = _internal_mutable_next_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.next_url)
  return _s;
}
inline const std::string& GetOrderersByNetworkIdResponse::_internal_next_url() const {
  return next_url_.Get();
}
inline void GetOrderersByNetworkIdResponse::_internal_set_next_url(const std::string& value) {
  
  next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOrderersByNetworkIdResponse::_internal_mutable_next_url() {
  
  return next_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOrderersByNetworkIdResponse::release_next_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.next_url)
  return next_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOrderersByNetworkIdResponse::set_allocated_next_url(std::string* next_url) {
  if (next_url != nullptr) {
    
  } else {
    
  }
  next_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.next_url)
}

// string previous_url = 4 [json_name = "previousUrl"];
inline void GetOrderersByNetworkIdResponse::clear_previous_url() {
  previous_url_.ClearToEmpty();
}
inline const std::string& GetOrderersByNetworkIdResponse::previous_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.previous_url)
  return _internal_previous_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderersByNetworkIdResponse::set_previous_url(ArgT0&& arg0, ArgT... args) {
 
 previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.previous_url)
}
inline std::string* GetOrderersByNetworkIdResponse::mutable_previous_url() {
  std::string* _s = _internal_mutable_previous_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.previous_url)
  return _s;
}
inline const std::string& GetOrderersByNetworkIdResponse::_internal_previous_url() const {
  return previous_url_.Get();
}
inline void GetOrderersByNetworkIdResponse::_internal_set_previous_url(const std::string& value) {
  
  previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOrderersByNetworkIdResponse::_internal_mutable_previous_url() {
  
  return previous_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOrderersByNetworkIdResponse::release_previous_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.previous_url)
  return previous_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOrderersByNetworkIdResponse::set_allocated_previous_url(std::string* previous_url) {
  if (previous_url != nullptr) {
    
  } else {
    
  }
  previous_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.previous_url)
}

// -------------------------------------------------------------------

// GetPeersByCorporationIdResponse

// repeated .blockchain.network.v1alpha1.Peer peer = 1 [json_name = "peer"];
inline int GetPeersByCorporationIdResponse::_internal_peer_size() const {
  return peer_.size();
}
inline int GetPeersByCorporationIdResponse::peer_size() const {
  return _internal_peer_size();
}
inline ::blockchain::network::v1alpha1::Peer* GetPeersByCorporationIdResponse::mutable_peer(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.peer)
  return peer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >*
GetPeersByCorporationIdResponse::mutable_peer() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.peer)
  return &peer_;
}
inline const ::blockchain::network::v1alpha1::Peer& GetPeersByCorporationIdResponse::_internal_peer(int index) const {
  return peer_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Peer& GetPeersByCorporationIdResponse::peer(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.peer)
  return _internal_peer(index);
}
inline ::blockchain::network::v1alpha1::Peer* GetPeersByCorporationIdResponse::_internal_add_peer() {
  return peer_.Add();
}
inline ::blockchain::network::v1alpha1::Peer* GetPeersByCorporationIdResponse::add_peer() {
  ::blockchain::network::v1alpha1::Peer* _add = _internal_add_peer();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.peer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >&
GetPeersByCorporationIdResponse::peer() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.peer)
  return peer_;
}

// int64 total = 2 [json_name = "total"];
inline void GetPeersByCorporationIdResponse::clear_total() {
  total_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPeersByCorporationIdResponse::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPeersByCorporationIdResponse::total() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.total)
  return _internal_total();
}
inline void GetPeersByCorporationIdResponse::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void GetPeersByCorporationIdResponse::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.total)
}

// string next_url = 3 [json_name = "nextUrl"];
inline void GetPeersByCorporationIdResponse::clear_next_url() {
  next_url_.ClearToEmpty();
}
inline const std::string& GetPeersByCorporationIdResponse::next_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.next_url)
  return _internal_next_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPeersByCorporationIdResponse::set_next_url(ArgT0&& arg0, ArgT... args) {
 
 next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.next_url)
}
inline std::string* GetPeersByCorporationIdResponse::mutable_next_url() {
  std::string* _s = _internal_mutable_next_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.next_url)
  return _s;
}
inline const std::string& GetPeersByCorporationIdResponse::_internal_next_url() const {
  return next_url_.Get();
}
inline void GetPeersByCorporationIdResponse::_internal_set_next_url(const std::string& value) {
  
  next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPeersByCorporationIdResponse::_internal_mutable_next_url() {
  
  return next_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPeersByCorporationIdResponse::release_next_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.next_url)
  return next_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPeersByCorporationIdResponse::set_allocated_next_url(std::string* next_url) {
  if (next_url != nullptr) {
    
  } else {
    
  }
  next_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.next_url)
}

// string previous_url = 4 [json_name = "previousUrl"];
inline void GetPeersByCorporationIdResponse::clear_previous_url() {
  previous_url_.ClearToEmpty();
}
inline const std::string& GetPeersByCorporationIdResponse::previous_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.previous_url)
  return _internal_previous_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPeersByCorporationIdResponse::set_previous_url(ArgT0&& arg0, ArgT... args) {
 
 previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.previous_url)
}
inline std::string* GetPeersByCorporationIdResponse::mutable_previous_url() {
  std::string* _s = _internal_mutable_previous_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.previous_url)
  return _s;
}
inline const std::string& GetPeersByCorporationIdResponse::_internal_previous_url() const {
  return previous_url_.Get();
}
inline void GetPeersByCorporationIdResponse::_internal_set_previous_url(const std::string& value) {
  
  previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPeersByCorporationIdResponse::_internal_mutable_previous_url() {
  
  return previous_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPeersByCorporationIdResponse::release_previous_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.previous_url)
  return previous_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPeersByCorporationIdResponse::set_allocated_previous_url(std::string* previous_url) {
  if (previous_url != nullptr) {
    
  } else {
    
  }
  previous_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.previous_url)
}

// -------------------------------------------------------------------

// GetBlockchainByIdResponse

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool GetBlockchainByIdResponse::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool GetBlockchainByIdResponse::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainByIdResponse::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainByIdResponse::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainByIdResponse.network)
  return _internal_network();
}
inline void GetBlockchainByIdResponse::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.GetBlockchainByIdResponse.network)
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainByIdResponse::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainByIdResponse::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainByIdResponse.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainByIdResponse::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainByIdResponse::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainByIdResponse.network)
  return _msg;
}
inline void GetBlockchainByIdResponse::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainByIdResponse.network)
}

// -------------------------------------------------------------------

// GetCorporationsByBlockchainIdResponse

// repeated .blockchain.network.v1alpha1.Corporation corporations = 1 [json_name = "corporations"];
inline int GetCorporationsByBlockchainIdResponse::_internal_corporations_size() const {
  return corporations_.size();
}
inline int GetCorporationsByBlockchainIdResponse::corporations_size() const {
  return _internal_corporations_size();
}
inline ::blockchain::network::v1alpha1::Corporation* GetCorporationsByBlockchainIdResponse::mutable_corporations(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.corporations)
  return corporations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >*
GetCorporationsByBlockchainIdResponse::mutable_corporations() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.corporations)
  return &corporations_;
}
inline const ::blockchain::network::v1alpha1::Corporation& GetCorporationsByBlockchainIdResponse::_internal_corporations(int index) const {
  return corporations_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Corporation& GetCorporationsByBlockchainIdResponse::corporations(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.corporations)
  return _internal_corporations(index);
}
inline ::blockchain::network::v1alpha1::Corporation* GetCorporationsByBlockchainIdResponse::_internal_add_corporations() {
  return corporations_.Add();
}
inline ::blockchain::network::v1alpha1::Corporation* GetCorporationsByBlockchainIdResponse::add_corporations() {
  ::blockchain::network::v1alpha1::Corporation* _add = _internal_add_corporations();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.corporations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >&
GetCorporationsByBlockchainIdResponse::corporations() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.corporations)
  return corporations_;
}

// int64 total = 2 [json_name = "total"];
inline void GetCorporationsByBlockchainIdResponse::clear_total() {
  total_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCorporationsByBlockchainIdResponse::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCorporationsByBlockchainIdResponse::total() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.total)
  return _internal_total();
}
inline void GetCorporationsByBlockchainIdResponse::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void GetCorporationsByBlockchainIdResponse::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.total)
}

// string next_url = 3 [json_name = "nextUrl"];
inline void GetCorporationsByBlockchainIdResponse::clear_next_url() {
  next_url_.ClearToEmpty();
}
inline const std::string& GetCorporationsByBlockchainIdResponse::next_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.next_url)
  return _internal_next_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCorporationsByBlockchainIdResponse::set_next_url(ArgT0&& arg0, ArgT... args) {
 
 next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.next_url)
}
inline std::string* GetCorporationsByBlockchainIdResponse::mutable_next_url() {
  std::string* _s = _internal_mutable_next_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.next_url)
  return _s;
}
inline const std::string& GetCorporationsByBlockchainIdResponse::_internal_next_url() const {
  return next_url_.Get();
}
inline void GetCorporationsByBlockchainIdResponse::_internal_set_next_url(const std::string& value) {
  
  next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCorporationsByBlockchainIdResponse::_internal_mutable_next_url() {
  
  return next_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCorporationsByBlockchainIdResponse::release_next_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.next_url)
  return next_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCorporationsByBlockchainIdResponse::set_allocated_next_url(std::string* next_url) {
  if (next_url != nullptr) {
    
  } else {
    
  }
  next_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.next_url)
}

// string previous_url = 4 [json_name = "previousUrl"];
inline void GetCorporationsByBlockchainIdResponse::clear_previous_url() {
  previous_url_.ClearToEmpty();
}
inline const std::string& GetCorporationsByBlockchainIdResponse::previous_url() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.previous_url)
  return _internal_previous_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCorporationsByBlockchainIdResponse::set_previous_url(ArgT0&& arg0, ArgT... args) {
 
 previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.previous_url)
}
inline std::string* GetCorporationsByBlockchainIdResponse::mutable_previous_url() {
  std::string* _s = _internal_mutable_previous_url();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.previous_url)
  return _s;
}
inline const std::string& GetCorporationsByBlockchainIdResponse::_internal_previous_url() const {
  return previous_url_.Get();
}
inline void GetCorporationsByBlockchainIdResponse::_internal_set_previous_url(const std::string& value) {
  
  previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCorporationsByBlockchainIdResponse::_internal_mutable_previous_url() {
  
  return previous_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCorporationsByBlockchainIdResponse::release_previous_url() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.previous_url)
  return previous_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCorporationsByBlockchainIdResponse::set_allocated_previous_url(std::string* previous_url) {
  if (previous_url != nullptr) {
    
  } else {
    
  }
  previous_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.previous_url)
}

// -------------------------------------------------------------------

// CreateCorporationResponse

// .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
inline bool CreateCorporationResponse::_internal_has_corporation() const {
  return this != internal_default_instance() && corporation_ != nullptr;
}
inline bool CreateCorporationResponse::has_corporation() const {
  return _internal_has_corporation();
}
inline const ::blockchain::network::v1alpha1::Corporation& CreateCorporationResponse::_internal_corporation() const {
  const ::blockchain::network::v1alpha1::Corporation* p = corporation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Corporation&>(
      ::blockchain::network::v1alpha1::_Corporation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Corporation& CreateCorporationResponse::corporation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateCorporationResponse.corporation)
  return _internal_corporation();
}
inline void CreateCorporationResponse::unsafe_arena_set_allocated_corporation(
    ::blockchain::network::v1alpha1::Corporation* corporation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  corporation_ = corporation;
  if (corporation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateCorporationResponse.corporation)
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationResponse::release_corporation() {
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationResponse::unsafe_arena_release_corporation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateCorporationResponse.corporation)
  
  ::blockchain::network::v1alpha1::Corporation* temp = corporation_;
  corporation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationResponse::_internal_mutable_corporation() {
  
  if (corporation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Corporation>(GetArenaForAllocation());
    corporation_ = p;
  }
  return corporation_;
}
inline ::blockchain::network::v1alpha1::Corporation* CreateCorporationResponse::mutable_corporation() {
  ::blockchain::network::v1alpha1::Corporation* _msg = _internal_mutable_corporation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateCorporationResponse.corporation)
  return _msg;
}
inline void CreateCorporationResponse::set_allocated_corporation(::blockchain::network::v1alpha1::Corporation* corporation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation_);
  }
  if (corporation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corporation));
    if (message_arena != submessage_arena) {
      corporation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corporation, submessage_arena);
    }
    
  } else {
    
  }
  corporation_ = corporation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateCorporationResponse.corporation)
}

// string message = 2 [json_name = "message"];
inline void CreateCorporationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateCorporationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateCorporationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCorporationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateCorporationResponse.message)
}
inline std::string* CreateCorporationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateCorporationResponse.message)
  return _s;
}
inline const std::string& CreateCorporationResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateCorporationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateCorporationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateCorporationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateCorporationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateCorporationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateCorporationResponse.message)
}

// -------------------------------------------------------------------

// SendInvitationResponse

// .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
inline bool SendInvitationResponse::_internal_has_invitation() const {
  return this != internal_default_instance() && invitation_ != nullptr;
}
inline bool SendInvitationResponse::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationResponse::_internal_invitation() const {
  const ::blockchain::network::v1alpha1::Invitation* p = invitation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Invitation&>(
      ::blockchain::network::v1alpha1::_Invitation_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Invitation& SendInvitationResponse::invitation() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
  return _internal_invitation();
}
inline void SendInvitationResponse::unsafe_arena_set_allocated_invitation(
    ::blockchain::network::v1alpha1::Invitation* invitation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  invitation_ = invitation;
  if (invitation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::release_invitation() {
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::unsafe_arena_release_invitation() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
  
  ::blockchain::network::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::_internal_mutable_invitation() {
  
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Invitation>(GetArenaForAllocation());
    invitation_ = p;
  }
  return invitation_;
}
inline ::blockchain::network::v1alpha1::Invitation* SendInvitationResponse::mutable_invitation() {
  ::blockchain::network::v1alpha1::Invitation* _msg = _internal_mutable_invitation();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
  return _msg;
}
inline void SendInvitationResponse::set_allocated_invitation(::blockchain::network::v1alpha1::Invitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation));
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    
  } else {
    
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.SendInvitationResponse.invitation)
}

// string message = 2 [json_name = "message"];
inline void SendInvitationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SendInvitationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.SendInvitationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendInvitationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.SendInvitationResponse.message)
}
inline std::string* SendInvitationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.SendInvitationResponse.message)
  return _s;
}
inline const std::string& SendInvitationResponse::_internal_message() const {
  return message_.Get();
}
inline void SendInvitationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendInvitationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendInvitationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.SendInvitationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendInvitationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.SendInvitationResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
