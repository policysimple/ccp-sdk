// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/network/v1alpha1/network_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blockchain/network/v1alpha1/network.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
namespace blockchain {
namespace network {
namespace v1alpha1 {
class AddPeerToOrganizationRequest;
struct AddPeerToOrganizationRequestDefaultTypeInternal;
extern AddPeerToOrganizationRequestDefaultTypeInternal _AddPeerToOrganizationRequest_default_instance_;
class AddPeerToOrganizationResponse;
struct AddPeerToOrganizationResponseDefaultTypeInternal;
extern AddPeerToOrganizationResponseDefaultTypeInternal _AddPeerToOrganizationResponse_default_instance_;
class CreateChannelRequest;
struct CreateChannelRequestDefaultTypeInternal;
extern CreateChannelRequestDefaultTypeInternal _CreateChannelRequest_default_instance_;
class CreateChannelResponse;
struct CreateChannelResponseDefaultTypeInternal;
extern CreateChannelResponseDefaultTypeInternal _CreateChannelResponse_default_instance_;
class CreateNetworkDefaultRequest;
struct CreateNetworkDefaultRequestDefaultTypeInternal;
extern CreateNetworkDefaultRequestDefaultTypeInternal _CreateNetworkDefaultRequest_default_instance_;
class CreateNetworkDefaultResponse;
struct CreateNetworkDefaultResponseDefaultTypeInternal;
extern CreateNetworkDefaultResponseDefaultTypeInternal _CreateNetworkDefaultResponse_default_instance_;
class CreateNetworkRequest;
struct CreateNetworkRequestDefaultTypeInternal;
extern CreateNetworkRequestDefaultTypeInternal _CreateNetworkRequest_default_instance_;
class CreateNetworkResponse;
struct CreateNetworkResponseDefaultTypeInternal;
extern CreateNetworkResponseDefaultTypeInternal _CreateNetworkResponse_default_instance_;
class GetBlockchainsRequest;
struct GetBlockchainsRequestDefaultTypeInternal;
extern GetBlockchainsRequestDefaultTypeInternal _GetBlockchainsRequest_default_instance_;
class GetBlockchainsResponse;
struct GetBlockchainsResponseDefaultTypeInternal;
extern GetBlockchainsResponseDefaultTypeInternal _GetBlockchainsResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::network::v1alpha1::AddPeerToOrganizationRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddPeerToOrganizationRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::AddPeerToOrganizationResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::AddPeerToOrganizationResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateChannelRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateChannelRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateChannelResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateChannelResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkDefaultRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkDefaultRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkDefaultResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkDefaultResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::CreateNetworkResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::CreateNetworkResponse>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsRequest* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsRequest>(Arena*);
template<> ::blockchain::network::v1alpha1::GetBlockchainsResponse* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::GetBlockchainsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace network {
namespace v1alpha1 {

// ===================================================================

class CreateNetworkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkRequest) */ {
 public:
  inline CreateNetworkRequest() : CreateNetworkRequest(nullptr) {}
  ~CreateNetworkRequest() override;
  explicit constexpr CreateNetworkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkRequest(const CreateNetworkRequest& from);
  CreateNetworkRequest(CreateNetworkRequest&& from) noexcept
    : CreateNetworkRequest() {
    *this = ::std::move(from);
  }

  inline CreateNetworkRequest& operator=(const CreateNetworkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkRequest& operator=(CreateNetworkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkRequest*>(
               &_CreateNetworkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateNetworkRequest& a, CreateNetworkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkRequest* New() const final {
    return new CreateNetworkRequest();
  }

  CreateNetworkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkRequest";
  }
  protected:
  explicit CreateNetworkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 1,
  };
  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::network::v1alpha1::Network* network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateNetworkDefaultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkDefaultResponse) */ {
 public:
  inline CreateNetworkDefaultResponse() : CreateNetworkDefaultResponse(nullptr) {}
  ~CreateNetworkDefaultResponse() override;
  explicit constexpr CreateNetworkDefaultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkDefaultResponse(const CreateNetworkDefaultResponse& from);
  CreateNetworkDefaultResponse(CreateNetworkDefaultResponse&& from) noexcept
    : CreateNetworkDefaultResponse() {
    *this = ::std::move(from);
  }

  inline CreateNetworkDefaultResponse& operator=(const CreateNetworkDefaultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkDefaultResponse& operator=(CreateNetworkDefaultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkDefaultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkDefaultResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkDefaultResponse*>(
               &_CreateNetworkDefaultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateNetworkDefaultResponse& a, CreateNetworkDefaultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkDefaultResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkDefaultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkDefaultResponse* New() const final {
    return new CreateNetworkDefaultResponse();
  }

  CreateNetworkDefaultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkDefaultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkDefaultResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkDefaultResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkDefaultResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkDefaultResponse";
  }
  protected:
  explicit CreateNetworkDefaultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kNetworkFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkDefaultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::blockchain::network::v1alpha1::Network* network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateNetworkDefaultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkDefaultRequest) */ {
 public:
  inline CreateNetworkDefaultRequest() : CreateNetworkDefaultRequest(nullptr) {}
  ~CreateNetworkDefaultRequest() override;
  explicit constexpr CreateNetworkDefaultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkDefaultRequest(const CreateNetworkDefaultRequest& from);
  CreateNetworkDefaultRequest(CreateNetworkDefaultRequest&& from) noexcept
    : CreateNetworkDefaultRequest() {
    *this = ::std::move(from);
  }

  inline CreateNetworkDefaultRequest& operator=(const CreateNetworkDefaultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkDefaultRequest& operator=(CreateNetworkDefaultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkDefaultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkDefaultRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkDefaultRequest*>(
               &_CreateNetworkDefaultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateNetworkDefaultRequest& a, CreateNetworkDefaultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkDefaultRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkDefaultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkDefaultRequest* New() const final {
    return new CreateNetworkDefaultRequest();
  }

  CreateNetworkDefaultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkDefaultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkDefaultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkDefaultRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkDefaultRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkDefaultRequest";
  }
  protected:
  explicit CreateNetworkDefaultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kNetworkFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::blockchain::network::v1alpha1::Network& network() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::network::v1alpha1::Network* release_network();
  ::blockchain::network::v1alpha1::Network* mutable_network();
  void set_allocated_network(::blockchain::network::v1alpha1::Network* network);
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network() const;
  ::blockchain::network::v1alpha1::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::blockchain::network::v1alpha1::Network* network);
  ::blockchain::network::v1alpha1::Network* unsafe_arena_release_network();

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkDefaultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::blockchain::network::v1alpha1::Network* network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddPeerToOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddPeerToOrganizationRequest) */ {
 public:
  inline AddPeerToOrganizationRequest() : AddPeerToOrganizationRequest(nullptr) {}
  ~AddPeerToOrganizationRequest() override;
  explicit constexpr AddPeerToOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerToOrganizationRequest(const AddPeerToOrganizationRequest& from);
  AddPeerToOrganizationRequest(AddPeerToOrganizationRequest&& from) noexcept
    : AddPeerToOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline AddPeerToOrganizationRequest& operator=(const AddPeerToOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerToOrganizationRequest& operator=(AddPeerToOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerToOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerToOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const AddPeerToOrganizationRequest*>(
               &_AddPeerToOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddPeerToOrganizationRequest& a, AddPeerToOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerToOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerToOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerToOrganizationRequest* New() const final {
    return new AddPeerToOrganizationRequest();
  }

  AddPeerToOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerToOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerToOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerToOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerToOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddPeerToOrganizationRequest";
  }
  protected:
  explicit AddPeerToOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgDomainFieldNumber = 1,
    kAdminPasswordFieldNumber = 2,
    kAdminUserFieldNumber = 3,
    kNetworkNameFieldNumber = 4,
    kNetworkIdFieldNumber = 5,
  };
  // string org_domain = 1 [json_name = "orgDomain"];
  void clear_org_domain();
  const std::string& org_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_domain();
  PROTOBUF_MUST_USE_RESULT std::string* release_org_domain();
  void set_allocated_org_domain(std::string* org_domain);
  private:
  const std::string& _internal_org_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_domain(const std::string& value);
  std::string* _internal_mutable_org_domain();
  public:

  // string admin_password = 2 [json_name = "adminPassword"];
  void clear_admin_password();
  const std::string& admin_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_password();
  void set_allocated_admin_password(std::string* admin_password);
  private:
  const std::string& _internal_admin_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_password(const std::string& value);
  std::string* _internal_mutable_admin_password();
  public:

  // string admin_user = 3 [json_name = "adminUser"];
  void clear_admin_user();
  const std::string& admin_user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_user();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_user();
  void set_allocated_admin_user(std::string* admin_user);
  private:
  const std::string& _internal_admin_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_user(const std::string& value);
  std::string* _internal_mutable_admin_user();
  public:

  // string network_name = 4 [json_name = "networkName"];
  void clear_network_name();
  const std::string& network_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_network_name();
  void set_allocated_network_name(std::string* network_name);
  private:
  const std::string& _internal_network_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_name(const std::string& value);
  std::string* _internal_mutable_network_name();
  public:

  // string network_id = 5 [json_name = "networkId"];
  void clear_network_id();
  const std::string& network_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_network_id();
  void set_allocated_network_id(std::string* network_id);
  private:
  const std::string& _internal_network_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_id(const std::string& value);
  std::string* _internal_mutable_network_id();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddPeerToOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateChannelRequest) */ {
 public:
  inline CreateChannelRequest() : CreateChannelRequest(nullptr) {}
  ~CreateChannelRequest() override;
  explicit constexpr CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelRequest(const CreateChannelRequest& from);
  CreateChannelRequest(CreateChannelRequest&& from) noexcept
    : CreateChannelRequest() {
    *this = ::std::move(from);
  }

  inline CreateChannelRequest& operator=(const CreateChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelRequest& operator=(CreateChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChannelRequest*>(
               &_CreateChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateChannelRequest& a, CreateChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelRequest* New() const final {
    return new CreateChannelRequest();
  }

  CreateChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateChannelRequest";
  }
  protected:
  explicit CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelOrgIdsFieldNumber = 4,
    kCreatorOrgIdFieldNumber = 1,
    kBlockchainIdFieldNumber = 2,
    kChannelNameFieldNumber = 3,
  };
  // repeated string channel_org_ids = 4 [json_name = "channelOrgIds"];
  int channel_org_ids_size() const;
  private:
  int _internal_channel_org_ids_size() const;
  public:
  void clear_channel_org_ids();
  const std::string& channel_org_ids(int index) const;
  std::string* mutable_channel_org_ids(int index);
  void set_channel_org_ids(int index, const std::string& value);
  void set_channel_org_ids(int index, std::string&& value);
  void set_channel_org_ids(int index, const char* value);
  void set_channel_org_ids(int index, const char* value, size_t size);
  std::string* add_channel_org_ids();
  void add_channel_org_ids(const std::string& value);
  void add_channel_org_ids(std::string&& value);
  void add_channel_org_ids(const char* value);
  void add_channel_org_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channel_org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channel_org_ids();
  private:
  const std::string& _internal_channel_org_ids(int index) const;
  std::string* _internal_add_channel_org_ids();
  public:

  // string creator_org_id = 1 [json_name = "creatorOrgId"];
  void clear_creator_org_id();
  const std::string& creator_org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_org_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_creator_org_id();
  void set_allocated_creator_org_id(std::string* creator_org_id);
  private:
  const std::string& _internal_creator_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_org_id(const std::string& value);
  std::string* _internal_mutable_creator_org_id();
  public:

  // string blockchain_id = 2 [json_name = "blockchainId"];
  void clear_blockchain_id();
  const std::string& blockchain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockchain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockchain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_blockchain_id();
  void set_allocated_blockchain_id(std::string* blockchain_id);
  private:
  const std::string& _internal_blockchain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockchain_id(const std::string& value);
  std::string* _internal_mutable_blockchain_id();
  public:

  // string channel_name = 3 [json_name = "channelName"];
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channel_org_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockchain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateNetworkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateNetworkResponse) */ {
 public:
  inline CreateNetworkResponse() : CreateNetworkResponse(nullptr) {}
  ~CreateNetworkResponse() override;
  explicit constexpr CreateNetworkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNetworkResponse(const CreateNetworkResponse& from);
  CreateNetworkResponse(CreateNetworkResponse&& from) noexcept
    : CreateNetworkResponse() {
    *this = ::std::move(from);
  }

  inline CreateNetworkResponse& operator=(const CreateNetworkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNetworkResponse& operator=(CreateNetworkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNetworkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNetworkResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNetworkResponse*>(
               &_CreateNetworkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateNetworkResponse& a, CreateNetworkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNetworkResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNetworkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNetworkResponse* New() const final {
    return new CreateNetworkResponse();
  }

  CreateNetworkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNetworkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNetworkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNetworkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNetworkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateNetworkResponse";
  }
  protected:
  explicit CreateNetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string status = 1 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateNetworkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AddPeerToOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.AddPeerToOrganizationResponse) */ {
 public:
  inline AddPeerToOrganizationResponse() : AddPeerToOrganizationResponse(nullptr) {}
  ~AddPeerToOrganizationResponse() override;
  explicit constexpr AddPeerToOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerToOrganizationResponse(const AddPeerToOrganizationResponse& from);
  AddPeerToOrganizationResponse(AddPeerToOrganizationResponse&& from) noexcept
    : AddPeerToOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline AddPeerToOrganizationResponse& operator=(const AddPeerToOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerToOrganizationResponse& operator=(AddPeerToOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerToOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerToOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const AddPeerToOrganizationResponse*>(
               &_AddPeerToOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddPeerToOrganizationResponse& a, AddPeerToOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerToOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerToOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerToOrganizationResponse* New() const final {
    return new AddPeerToOrganizationResponse();
  }

  AddPeerToOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerToOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerToOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerToOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerToOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.AddPeerToOrganizationResponse";
  }
  protected:
  explicit AddPeerToOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string status = 1 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.AddPeerToOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.CreateChannelResponse) */ {
 public:
  inline CreateChannelResponse() : CreateChannelResponse(nullptr) {}
  ~CreateChannelResponse() override;
  explicit constexpr CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelResponse(const CreateChannelResponse& from);
  CreateChannelResponse(CreateChannelResponse&& from) noexcept
    : CreateChannelResponse() {
    *this = ::std::move(from);
  }

  inline CreateChannelResponse& operator=(const CreateChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelResponse& operator=(CreateChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CreateChannelResponse*>(
               &_CreateChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateChannelResponse& a, CreateChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelResponse* New() const final {
    return new CreateChannelResponse();
  }

  CreateChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.CreateChannelResponse";
  }
  protected:
  explicit CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string status = 1 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.CreateChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsResponse) */ {
 public:
  inline GetBlockchainsResponse() : GetBlockchainsResponse(nullptr) {}
  ~GetBlockchainsResponse() override;
  explicit constexpr GetBlockchainsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsResponse(const GetBlockchainsResponse& from);
  GetBlockchainsResponse(GetBlockchainsResponse&& from) noexcept
    : GetBlockchainsResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsResponse& operator=(const GetBlockchainsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsResponse& operator=(GetBlockchainsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsResponse*>(
               &_GetBlockchainsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetBlockchainsResponse& a, GetBlockchainsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsResponse* New() const final {
    return new GetBlockchainsResponse();
  }

  GetBlockchainsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsResponse";
  }
  protected:
  explicit GetBlockchainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  int network_size() const;
  private:
  int _internal_network_size() const;
  public:
  void clear_network();
  ::blockchain::network::v1alpha1::Network* mutable_network(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
      mutable_network();
  private:
  const ::blockchain::network::v1alpha1::Network& _internal_network(int index) const;
  ::blockchain::network::v1alpha1::Network* _internal_add_network();
  public:
  const ::blockchain::network::v1alpha1::Network& network(int index) const;
  ::blockchain::network::v1alpha1::Network* add_network();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
      network() const;

  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network > network_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.GetBlockchainsRequest) */ {
 public:
  inline GetBlockchainsRequest() : GetBlockchainsRequest(nullptr) {}
  ~GetBlockchainsRequest() override;
  explicit constexpr GetBlockchainsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockchainsRequest(const GetBlockchainsRequest& from);
  GetBlockchainsRequest(GetBlockchainsRequest&& from) noexcept
    : GetBlockchainsRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockchainsRequest& operator=(const GetBlockchainsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainsRequest& operator=(GetBlockchainsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockchainsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockchainsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainsRequest*>(
               &_GetBlockchainsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetBlockchainsRequest& a, GetBlockchainsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainsRequest* New() const final {
    return new GetBlockchainsRequest();
  }

  GetBlockchainsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockchainsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockchainsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.GetBlockchainsRequest";
  }
  protected:
  explicit GetBlockchainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.GetBlockchainsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateNetworkRequest

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool CreateNetworkRequest::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool CreateNetworkRequest::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkRequest::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkRequest::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  return _internal_network();
}
inline void CreateNetworkRequest::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.network)
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkRequest::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkRequest.network)
  return _msg;
}
inline void CreateNetworkRequest::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkRequest.network)
}

// -------------------------------------------------------------------

// CreateNetworkDefaultResponse

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool CreateNetworkDefaultResponse::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool CreateNetworkDefaultResponse::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkDefaultResponse::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkDefaultResponse::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.network)
  return _internal_network();
}
inline void CreateNetworkDefaultResponse::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.network)
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultResponse::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultResponse::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultResponse::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultResponse::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.network)
  return _msg;
}
inline void CreateNetworkDefaultResponse::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.network)
}

// string status = 2 [json_name = "status"];
inline void CreateNetworkDefaultResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateNetworkDefaultResponse::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkDefaultResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.status)
}
inline std::string* CreateNetworkDefaultResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.status)
  return _s;
}
inline const std::string& CreateNetworkDefaultResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateNetworkDefaultResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkDefaultResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkDefaultResponse::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkDefaultResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkDefaultResponse.status)
}

// -------------------------------------------------------------------

// CreateNetworkDefaultRequest

// .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline bool CreateNetworkDefaultRequest::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool CreateNetworkDefaultRequest::has_network() const {
  return _internal_has_network();
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkDefaultRequest::_internal_network() const {
  const ::blockchain::network::v1alpha1::Network* p = network_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::network::v1alpha1::Network&>(
      ::blockchain::network::v1alpha1::_Network_default_instance_);
}
inline const ::blockchain::network::v1alpha1::Network& CreateNetworkDefaultRequest::network() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.network)
  return _internal_network();
}
inline void CreateNetworkDefaultRequest::unsafe_arena_set_allocated_network(
    ::blockchain::network::v1alpha1::Network* network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.network)
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultRequest::release_network() {
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultRequest::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.network)
  
  ::blockchain::network::v1alpha1::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultRequest::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(GetArenaForAllocation());
    network_ = p;
  }
  return network_;
}
inline ::blockchain::network::v1alpha1::Network* CreateNetworkDefaultRequest::mutable_network() {
  ::blockchain::network::v1alpha1::Network* _msg = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.network)
  return _msg;
}
inline void CreateNetworkDefaultRequest::set_allocated_network(::blockchain::network::v1alpha1::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network));
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.network)
}

// string status = 2 [json_name = "status"];
inline void CreateNetworkDefaultRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateNetworkDefaultRequest::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkDefaultRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.status)
}
inline std::string* CreateNetworkDefaultRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.status)
  return _s;
}
inline const std::string& CreateNetworkDefaultRequest::_internal_status() const {
  return status_.Get();
}
inline void CreateNetworkDefaultRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkDefaultRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkDefaultRequest::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkDefaultRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkDefaultRequest.status)
}

// -------------------------------------------------------------------

// AddPeerToOrganizationRequest

// string org_domain = 1 [json_name = "orgDomain"];
inline void AddPeerToOrganizationRequest::clear_org_domain() {
  org_domain_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationRequest::org_domain() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.org_domain)
  return _internal_org_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationRequest::set_org_domain(ArgT0&& arg0, ArgT... args) {
 
 org_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.org_domain)
}
inline std::string* AddPeerToOrganizationRequest::mutable_org_domain() {
  std::string* _s = _internal_mutable_org_domain();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.org_domain)
  return _s;
}
inline const std::string& AddPeerToOrganizationRequest::_internal_org_domain() const {
  return org_domain_.Get();
}
inline void AddPeerToOrganizationRequest::_internal_set_org_domain(const std::string& value) {
  
  org_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::_internal_mutable_org_domain() {
  
  return org_domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::release_org_domain() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.org_domain)
  return org_domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationRequest::set_allocated_org_domain(std::string* org_domain) {
  if (org_domain != nullptr) {
    
  } else {
    
  }
  org_domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), org_domain,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.org_domain)
}

// string admin_password = 2 [json_name = "adminPassword"];
inline void AddPeerToOrganizationRequest::clear_admin_password() {
  admin_password_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationRequest::admin_password() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_password)
  return _internal_admin_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationRequest::set_admin_password(ArgT0&& arg0, ArgT... args) {
 
 admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_password)
}
inline std::string* AddPeerToOrganizationRequest::mutable_admin_password() {
  std::string* _s = _internal_mutable_admin_password();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_password)
  return _s;
}
inline const std::string& AddPeerToOrganizationRequest::_internal_admin_password() const {
  return admin_password_.Get();
}
inline void AddPeerToOrganizationRequest::_internal_set_admin_password(const std::string& value) {
  
  admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::_internal_mutable_admin_password() {
  
  return admin_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::release_admin_password() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_password)
  return admin_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationRequest::set_allocated_admin_password(std::string* admin_password) {
  if (admin_password != nullptr) {
    
  } else {
    
  }
  admin_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_password)
}

// string admin_user = 3 [json_name = "adminUser"];
inline void AddPeerToOrganizationRequest::clear_admin_user() {
  admin_user_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationRequest::admin_user() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_user)
  return _internal_admin_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationRequest::set_admin_user(ArgT0&& arg0, ArgT... args) {
 
 admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_user)
}
inline std::string* AddPeerToOrganizationRequest::mutable_admin_user() {
  std::string* _s = _internal_mutable_admin_user();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_user)
  return _s;
}
inline const std::string& AddPeerToOrganizationRequest::_internal_admin_user() const {
  return admin_user_.Get();
}
inline void AddPeerToOrganizationRequest::_internal_set_admin_user(const std::string& value) {
  
  admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::_internal_mutable_admin_user() {
  
  return admin_user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::release_admin_user() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_user)
  return admin_user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationRequest::set_allocated_admin_user(std::string* admin_user) {
  if (admin_user != nullptr) {
    
  } else {
    
  }
  admin_user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_user,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.admin_user)
}

// string network_name = 4 [json_name = "networkName"];
inline void AddPeerToOrganizationRequest::clear_network_name() {
  network_name_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationRequest::network_name() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_name)
  return _internal_network_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationRequest::set_network_name(ArgT0&& arg0, ArgT... args) {
 
 network_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_name)
}
inline std::string* AddPeerToOrganizationRequest::mutable_network_name() {
  std::string* _s = _internal_mutable_network_name();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_name)
  return _s;
}
inline const std::string& AddPeerToOrganizationRequest::_internal_network_name() const {
  return network_name_.Get();
}
inline void AddPeerToOrganizationRequest::_internal_set_network_name(const std::string& value) {
  
  network_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::_internal_mutable_network_name() {
  
  return network_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::release_network_name() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_name)
  return network_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationRequest::set_allocated_network_name(std::string* network_name) {
  if (network_name != nullptr) {
    
  } else {
    
  }
  network_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_name)
}

// string network_id = 5 [json_name = "networkId"];
inline void AddPeerToOrganizationRequest::clear_network_id() {
  network_id_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationRequest::network_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_id)
  return _internal_network_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationRequest::set_network_id(ArgT0&& arg0, ArgT... args) {
 
 network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_id)
}
inline std::string* AddPeerToOrganizationRequest::mutable_network_id() {
  std::string* _s = _internal_mutable_network_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_id)
  return _s;
}
inline const std::string& AddPeerToOrganizationRequest::_internal_network_id() const {
  return network_id_.Get();
}
inline void AddPeerToOrganizationRequest::_internal_set_network_id(const std::string& value) {
  
  network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::_internal_mutable_network_id() {
  
  return network_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationRequest::release_network_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_id)
  return network_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationRequest::set_allocated_network_id(std::string* network_id) {
  if (network_id != nullptr) {
    
  } else {
    
  }
  network_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationRequest.network_id)
}

// -------------------------------------------------------------------

// CreateChannelRequest

// string creator_org_id = 1 [json_name = "creatorOrgId"];
inline void CreateChannelRequest::clear_creator_org_id() {
  creator_org_id_.ClearToEmpty();
}
inline const std::string& CreateChannelRequest::creator_org_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelRequest.creator_org_id)
  return _internal_creator_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelRequest::set_creator_org_id(ArgT0&& arg0, ArgT... args) {
 
 creator_org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelRequest.creator_org_id)
}
inline std::string* CreateChannelRequest::mutable_creator_org_id() {
  std::string* _s = _internal_mutable_creator_org_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelRequest.creator_org_id)
  return _s;
}
inline const std::string& CreateChannelRequest::_internal_creator_org_id() const {
  return creator_org_id_.Get();
}
inline void CreateChannelRequest::_internal_set_creator_org_id(const std::string& value) {
  
  creator_org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelRequest::_internal_mutable_creator_org_id() {
  
  return creator_org_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelRequest::release_creator_org_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelRequest.creator_org_id)
  return creator_org_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelRequest::set_allocated_creator_org_id(std::string* creator_org_id) {
  if (creator_org_id != nullptr) {
    
  } else {
    
  }
  creator_org_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_org_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelRequest.creator_org_id)
}

// string blockchain_id = 2 [json_name = "blockchainId"];
inline void CreateChannelRequest::clear_blockchain_id() {
  blockchain_id_.ClearToEmpty();
}
inline const std::string& CreateChannelRequest::blockchain_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelRequest.blockchain_id)
  return _internal_blockchain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelRequest::set_blockchain_id(ArgT0&& arg0, ArgT... args) {
 
 blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelRequest.blockchain_id)
}
inline std::string* CreateChannelRequest::mutable_blockchain_id() {
  std::string* _s = _internal_mutable_blockchain_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelRequest.blockchain_id)
  return _s;
}
inline const std::string& CreateChannelRequest::_internal_blockchain_id() const {
  return blockchain_id_.Get();
}
inline void CreateChannelRequest::_internal_set_blockchain_id(const std::string& value) {
  
  blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelRequest::_internal_mutable_blockchain_id() {
  
  return blockchain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelRequest::release_blockchain_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelRequest.blockchain_id)
  return blockchain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelRequest::set_allocated_blockchain_id(std::string* blockchain_id) {
  if (blockchain_id != nullptr) {
    
  } else {
    
  }
  blockchain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockchain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelRequest.blockchain_id)
}

// string channel_name = 3 [json_name = "channelName"];
inline void CreateChannelRequest::clear_channel_name() {
  channel_name_.ClearToEmpty();
}
inline const std::string& CreateChannelRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelRequest.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelRequest::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelRequest.channel_name)
}
inline std::string* CreateChannelRequest::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelRequest.channel_name)
  return _s;
}
inline const std::string& CreateChannelRequest::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void CreateChannelRequest::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelRequest::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelRequest.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelRequest.channel_name)
}

// repeated string channel_org_ids = 4 [json_name = "channelOrgIds"];
inline int CreateChannelRequest::_internal_channel_org_ids_size() const {
  return channel_org_ids_.size();
}
inline int CreateChannelRequest::channel_org_ids_size() const {
  return _internal_channel_org_ids_size();
}
inline void CreateChannelRequest::clear_channel_org_ids() {
  channel_org_ids_.Clear();
}
inline std::string* CreateChannelRequest::add_channel_org_ids() {
  std::string* _s = _internal_add_channel_org_ids();
  // @@protoc_insertion_point(field_add_mutable:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
  return _s;
}
inline const std::string& CreateChannelRequest::_internal_channel_org_ids(int index) const {
  return channel_org_ids_.Get(index);
}
inline const std::string& CreateChannelRequest::channel_org_ids(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
  return _internal_channel_org_ids(index);
}
inline std::string* CreateChannelRequest::mutable_channel_org_ids(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
  return channel_org_ids_.Mutable(index);
}
inline void CreateChannelRequest::set_channel_org_ids(int index, const std::string& value) {
  channel_org_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline void CreateChannelRequest::set_channel_org_ids(int index, std::string&& value) {
  channel_org_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline void CreateChannelRequest::set_channel_org_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channel_org_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline void CreateChannelRequest::set_channel_org_ids(int index, const char* value, size_t size) {
  channel_org_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline std::string* CreateChannelRequest::_internal_add_channel_org_ids() {
  return channel_org_ids_.Add();
}
inline void CreateChannelRequest::add_channel_org_ids(const std::string& value) {
  channel_org_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline void CreateChannelRequest::add_channel_org_ids(std::string&& value) {
  channel_org_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline void CreateChannelRequest::add_channel_org_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channel_org_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline void CreateChannelRequest::add_channel_org_ids(const char* value, size_t size) {
  channel_org_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateChannelRequest::channel_org_ids() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
  return channel_org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateChannelRequest::mutable_channel_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.CreateChannelRequest.channel_org_ids)
  return &channel_org_ids_;
}

// -------------------------------------------------------------------

// CreateNetworkResponse

// string status = 1 [json_name = "status"];
inline void CreateNetworkResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateNetworkResponse::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkResponse.status)
}
inline std::string* CreateNetworkResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkResponse.status)
  return _s;
}
inline const std::string& CreateNetworkResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateNetworkResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.status)
}

// string message = 2 [json_name = "message"];
inline void CreateNetworkResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateNetworkResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNetworkResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateNetworkResponse.message)
}
inline std::string* CreateNetworkResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return _s;
}
inline const std::string& CreateNetworkResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateNetworkResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNetworkResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateNetworkResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNetworkResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateNetworkResponse.message)
}

// -------------------------------------------------------------------

// AddPeerToOrganizationResponse

// string status = 1 [json_name = "status"];
inline void AddPeerToOrganizationResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationResponse::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.status)
}
inline std::string* AddPeerToOrganizationResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.status)
  return _s;
}
inline const std::string& AddPeerToOrganizationResponse::_internal_status() const {
  return status_.Get();
}
inline void AddPeerToOrganizationResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationResponse::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.status)
}

// string message = 2 [json_name = "message"];
inline void AddPeerToOrganizationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AddPeerToOrganizationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerToOrganizationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
}
inline std::string* AddPeerToOrganizationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
  return _s;
}
inline const std::string& AddPeerToOrganizationResponse::_internal_message() const {
  return message_.Get();
}
inline void AddPeerToOrganizationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerToOrganizationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerToOrganizationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.AddPeerToOrganizationResponse.message)
}

// -------------------------------------------------------------------

// CreateChannelResponse

// string status = 1 [json_name = "status"];
inline void CreateChannelResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateChannelResponse::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelResponse.status)
}
inline std::string* CreateChannelResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelResponse.status)
  return _s;
}
inline const std::string& CreateChannelResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateChannelResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.status)
}

// string message = 2 [json_name = "message"];
inline void CreateChannelResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateChannelResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.CreateChannelResponse.message)
}
inline std::string* CreateChannelResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return _s;
}
inline const std::string& CreateChannelResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateChannelResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChannelResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.CreateChannelResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChannelResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.CreateChannelResponse.message)
}

// -------------------------------------------------------------------

// GetBlockchainsResponse

// repeated .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
inline int GetBlockchainsResponse::_internal_network_size() const {
  return network_.size();
}
inline int GetBlockchainsResponse::network_size() const {
  return _internal_network_size();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return network_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >*
GetBlockchainsResponse::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return &network_;
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsResponse::_internal_network(int index) const {
  return network_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Network& GetBlockchainsResponse::network(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return _internal_network(index);
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::_internal_add_network() {
  return network_.Add();
}
inline ::blockchain::network::v1alpha1::Network* GetBlockchainsResponse::add_network() {
  ::blockchain::network::v1alpha1::Network* _add = _internal_add_network();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Network >&
GetBlockchainsResponse::network() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.GetBlockchainsResponse.network)
  return network_;
}

// string status = 2 [json_name = "status"];
inline void GetBlockchainsResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetBlockchainsResponse::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsResponse.status)
}
inline std::string* GetBlockchainsResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsResponse.status)
  return _s;
}
inline const std::string& GetBlockchainsResponse::_internal_status() const {
  return status_.Get();
}
inline void GetBlockchainsResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsResponse::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsResponse.status)
}

// -------------------------------------------------------------------

// GetBlockchainsRequest

// string status = 2 [json_name = "status"];
inline void GetBlockchainsRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetBlockchainsRequest::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.GetBlockchainsRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockchainsRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.GetBlockchainsRequest.status)
}
inline std::string* GetBlockchainsRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.GetBlockchainsRequest.status)
  return _s;
}
inline const std::string& GetBlockchainsRequest::_internal_status() const {
  return status_.Get();
}
inline void GetBlockchainsRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockchainsRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockchainsRequest::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.GetBlockchainsRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockchainsRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.GetBlockchainsRequest.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto
