// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/network/v1alpha1/network_api.proto

#include "blockchain/network/v1alpha1/network_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blockchain {
namespace network {
namespace v1alpha1 {
constexpr CreateNetworkRequest::CreateNetworkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ccp_organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ccp_project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_(nullptr)
  , corporation_(nullptr){}
struct CreateNetworkRequestDefaultTypeInternal {
  constexpr CreateNetworkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateNetworkRequestDefaultTypeInternal() {}
  union {
    CreateNetworkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateNetworkRequestDefaultTypeInternal _CreateNetworkRequest_default_instance_;
constexpr AddPeerToCorporationRequest::AddPeerToCorporationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ccp_organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ccp_project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , corporation_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AddPeerToCorporationRequestDefaultTypeInternal {
  constexpr AddPeerToCorporationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPeerToCorporationRequestDefaultTypeInternal() {}
  union {
    AddPeerToCorporationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPeerToCorporationRequestDefaultTypeInternal _AddPeerToCorporationRequest_default_instance_;
constexpr AddOrdererByNetworkIdRequest::AddOrdererByNetworkIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ccp_organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ccp_project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , orderer_(nullptr){}
struct AddOrdererByNetworkIdRequestDefaultTypeInternal {
  constexpr AddOrdererByNetworkIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddOrdererByNetworkIdRequestDefaultTypeInternal() {}
  union {
    AddOrdererByNetworkIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddOrdererByNetworkIdRequestDefaultTypeInternal _AddOrdererByNetworkIdRequest_default_instance_;
constexpr CreateChannelRequest::CreateChannelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(nullptr){}
struct CreateChannelRequestDefaultTypeInternal {
  constexpr CreateChannelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateChannelRequestDefaultTypeInternal() {}
  union {
    CreateChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateChannelRequestDefaultTypeInternal _CreateChannelRequest_default_instance_;
constexpr GetBlockchainsRequest::GetBlockchainsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct GetBlockchainsRequestDefaultTypeInternal {
  constexpr GetBlockchainsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockchainsRequestDefaultTypeInternal() {}
  union {
    GetBlockchainsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockchainsRequestDefaultTypeInternal _GetBlockchainsRequest_default_instance_;
constexpr GetBlockchainsByUserIdRequest::GetBlockchainsByUserIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct GetBlockchainsByUserIdRequestDefaultTypeInternal {
  constexpr GetBlockchainsByUserIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockchainsByUserIdRequestDefaultTypeInternal() {}
  union {
    GetBlockchainsByUserIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockchainsByUserIdRequestDefaultTypeInternal _GetBlockchainsByUserIdRequest_default_instance_;
constexpr GetPeersByCorporationIdRequest::GetPeersByCorporationIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : corporation_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct GetPeersByCorporationIdRequestDefaultTypeInternal {
  constexpr GetPeersByCorporationIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPeersByCorporationIdRequestDefaultTypeInternal() {}
  union {
    GetPeersByCorporationIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPeersByCorporationIdRequestDefaultTypeInternal _GetPeersByCorporationIdRequest_default_instance_;
constexpr GetOrderersByNetworkIdRequest::GetOrderersByNetworkIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : network_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct GetOrderersByNetworkIdRequestDefaultTypeInternal {
  constexpr GetOrderersByNetworkIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOrderersByNetworkIdRequestDefaultTypeInternal() {}
  union {
    GetOrderersByNetworkIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOrderersByNetworkIdRequestDefaultTypeInternal _GetOrderersByNetworkIdRequest_default_instance_;
constexpr GetBlockchainByIdRequest::GetBlockchainByIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBlockchainByIdRequestDefaultTypeInternal {
  constexpr GetBlockchainByIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockchainByIdRequestDefaultTypeInternal() {}
  union {
    GetBlockchainByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockchainByIdRequestDefaultTypeInternal _GetBlockchainByIdRequest_default_instance_;
constexpr GetCorporationsByBlockchainIdRequest::GetCorporationsByBlockchainIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blockchain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct GetCorporationsByBlockchainIdRequestDefaultTypeInternal {
  constexpr GetCorporationsByBlockchainIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCorporationsByBlockchainIdRequestDefaultTypeInternal() {}
  union {
    GetCorporationsByBlockchainIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCorporationsByBlockchainIdRequestDefaultTypeInternal _GetCorporationsByBlockchainIdRequest_default_instance_;
constexpr CreateCorporationRequest::CreateCorporationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ccp_organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ccp_project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , corporation_(nullptr){}
struct CreateCorporationRequestDefaultTypeInternal {
  constexpr CreateCorporationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCorporationRequestDefaultTypeInternal() {}
  union {
    CreateCorporationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCorporationRequestDefaultTypeInternal _CreateCorporationRequest_default_instance_;
constexpr SendInvitationRequest::SendInvitationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_(nullptr){}
struct SendInvitationRequestDefaultTypeInternal {
  constexpr SendInvitationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendInvitationRequestDefaultTypeInternal() {}
  union {
    SendInvitationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendInvitationRequestDefaultTypeInternal _SendInvitationRequest_default_instance_;
constexpr CreateNetworkResponse::CreateNetworkResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_(nullptr){}
struct CreateNetworkResponseDefaultTypeInternal {
  constexpr CreateNetworkResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateNetworkResponseDefaultTypeInternal() {}
  union {
    CreateNetworkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateNetworkResponseDefaultTypeInternal _CreateNetworkResponse_default_instance_;
constexpr AddPeerToCorporationResponse::AddPeerToCorporationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , corporation_(nullptr){}
struct AddPeerToCorporationResponseDefaultTypeInternal {
  constexpr AddPeerToCorporationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPeerToCorporationResponseDefaultTypeInternal() {}
  union {
    AddPeerToCorporationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPeerToCorporationResponseDefaultTypeInternal _AddPeerToCorporationResponse_default_instance_;
constexpr AddOrdererByNetworkIdResponse::AddOrdererByNetworkIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , orderer_(nullptr){}
struct AddOrdererByNetworkIdResponseDefaultTypeInternal {
  constexpr AddOrdererByNetworkIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddOrdererByNetworkIdResponseDefaultTypeInternal() {}
  union {
    AddOrdererByNetworkIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddOrdererByNetworkIdResponseDefaultTypeInternal _AddOrdererByNetworkIdResponse_default_instance_;
constexpr CreateChannelResponse::CreateChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(nullptr){}
struct CreateChannelResponseDefaultTypeInternal {
  constexpr CreateChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateChannelResponseDefaultTypeInternal() {}
  union {
    CreateChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateChannelResponseDefaultTypeInternal _CreateChannelResponse_default_instance_;
constexpr GetBlockchainsResponse::GetBlockchainsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : networks_()
  , next_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(int64_t{0}){}
struct GetBlockchainsResponseDefaultTypeInternal {
  constexpr GetBlockchainsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockchainsResponseDefaultTypeInternal() {}
  union {
    GetBlockchainsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockchainsResponseDefaultTypeInternal _GetBlockchainsResponse_default_instance_;
constexpr GetBlockchainsByUserIdResponse::GetBlockchainsByUserIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : networks_()
  , next_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(int64_t{0}){}
struct GetBlockchainsByUserIdResponseDefaultTypeInternal {
  constexpr GetBlockchainsByUserIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockchainsByUserIdResponseDefaultTypeInternal() {}
  union {
    GetBlockchainsByUserIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockchainsByUserIdResponseDefaultTypeInternal _GetBlockchainsByUserIdResponse_default_instance_;
constexpr GetOrderersByNetworkIdResponse::GetOrderersByNetworkIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orderers_()
  , next_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(int64_t{0}){}
struct GetOrderersByNetworkIdResponseDefaultTypeInternal {
  constexpr GetOrderersByNetworkIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOrderersByNetworkIdResponseDefaultTypeInternal() {}
  union {
    GetOrderersByNetworkIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOrderersByNetworkIdResponseDefaultTypeInternal _GetOrderersByNetworkIdResponse_default_instance_;
constexpr GetPeersByCorporationIdResponse::GetPeersByCorporationIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_()
  , next_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(int64_t{0}){}
struct GetPeersByCorporationIdResponseDefaultTypeInternal {
  constexpr GetPeersByCorporationIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPeersByCorporationIdResponseDefaultTypeInternal() {}
  union {
    GetPeersByCorporationIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPeersByCorporationIdResponseDefaultTypeInternal _GetPeersByCorporationIdResponse_default_instance_;
constexpr GetBlockchainByIdResponse::GetBlockchainByIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : network_(nullptr){}
struct GetBlockchainByIdResponseDefaultTypeInternal {
  constexpr GetBlockchainByIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockchainByIdResponseDefaultTypeInternal() {}
  union {
    GetBlockchainByIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockchainByIdResponseDefaultTypeInternal _GetBlockchainByIdResponse_default_instance_;
constexpr GetCorporationsByBlockchainIdResponse::GetCorporationsByBlockchainIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : corporations_()
  , next_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(int64_t{0}){}
struct GetCorporationsByBlockchainIdResponseDefaultTypeInternal {
  constexpr GetCorporationsByBlockchainIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCorporationsByBlockchainIdResponseDefaultTypeInternal() {}
  union {
    GetCorporationsByBlockchainIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCorporationsByBlockchainIdResponseDefaultTypeInternal _GetCorporationsByBlockchainIdResponse_default_instance_;
constexpr CreateCorporationResponse::CreateCorporationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , corporation_(nullptr){}
struct CreateCorporationResponseDefaultTypeInternal {
  constexpr CreateCorporationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCorporationResponseDefaultTypeInternal() {}
  union {
    CreateCorporationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCorporationResponseDefaultTypeInternal _CreateCorporationResponse_default_instance_;
constexpr SendInvitationResponse::SendInvitationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invitation_(nullptr){}
struct SendInvitationResponseDefaultTypeInternal {
  constexpr SendInvitationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendInvitationResponseDefaultTypeInternal() {}
  union {
    SendInvitationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendInvitationResponseDefaultTypeInternal _SendInvitationResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkRequest, network_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkRequest, corporation_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkRequest, ccp_organization_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkRequest, ccp_project_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddPeerToCorporationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddPeerToCorporationRequest, ccp_organization_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddPeerToCorporationRequest, ccp_project_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddPeerToCorporationRequest, corporation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest, orderer_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest, ccp_organization_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest, ccp_project_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateChannelRequest, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsRequest, query_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest, corporation_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest, network_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest, blockchain_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateCorporationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateCorporationRequest, corporation_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateCorporationRequest, ccp_organization_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateCorporationRequest, ccp_project_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::SendInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::SendInvitationRequest, invitation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkResponse, network_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateNetworkResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddPeerToCorporationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddPeerToCorporationResponse, corporation_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddPeerToCorporationResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse, orderer_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateChannelResponse, channel_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateChannelResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsResponse, networks_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsResponse, total_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsResponse, next_url_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsResponse, previous_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse, networks_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse, total_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse, next_url_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse, previous_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse, orderers_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse, total_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse, next_url_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse, previous_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse, peer_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse, total_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse, next_url_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse, previous_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetBlockchainByIdResponse, network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse, corporations_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse, total_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse, next_url_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse, previous_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateCorporationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateCorporationResponse, corporation_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::CreateCorporationResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::SendInvitationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::SendInvitationResponse, invitation_),
  PROTOBUF_FIELD_OFFSET(::blockchain::network::v1alpha1::SendInvitationResponse, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blockchain::network::v1alpha1::CreateNetworkRequest)},
  { 9, -1, sizeof(::blockchain::network::v1alpha1::AddPeerToCorporationRequest)},
  { 17, -1, sizeof(::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest)},
  { 25, -1, sizeof(::blockchain::network::v1alpha1::CreateChannelRequest)},
  { 31, -1, sizeof(::blockchain::network::v1alpha1::GetBlockchainsRequest)},
  { 39, -1, sizeof(::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest)},
  { 47, -1, sizeof(::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest)},
  { 55, -1, sizeof(::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest)},
  { 63, -1, sizeof(::blockchain::network::v1alpha1::GetBlockchainByIdRequest)},
  { 69, -1, sizeof(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest)},
  { 77, -1, sizeof(::blockchain::network::v1alpha1::CreateCorporationRequest)},
  { 85, -1, sizeof(::blockchain::network::v1alpha1::SendInvitationRequest)},
  { 91, -1, sizeof(::blockchain::network::v1alpha1::CreateNetworkResponse)},
  { 98, -1, sizeof(::blockchain::network::v1alpha1::AddPeerToCorporationResponse)},
  { 105, -1, sizeof(::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse)},
  { 112, -1, sizeof(::blockchain::network::v1alpha1::CreateChannelResponse)},
  { 119, -1, sizeof(::blockchain::network::v1alpha1::GetBlockchainsResponse)},
  { 128, -1, sizeof(::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse)},
  { 137, -1, sizeof(::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse)},
  { 146, -1, sizeof(::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse)},
  { 155, -1, sizeof(::blockchain::network::v1alpha1::GetBlockchainByIdResponse)},
  { 161, -1, sizeof(::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse)},
  { 170, -1, sizeof(::blockchain::network::v1alpha1::CreateCorporationResponse)},
  { 177, -1, sizeof(::blockchain::network::v1alpha1::SendInvitationResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_CreateNetworkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_AddPeerToCorporationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_AddOrdererByNetworkIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_CreateChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetBlockchainsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetBlockchainsByUserIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetPeersByCorporationIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetOrderersByNetworkIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetBlockchainByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetCorporationsByBlockchainIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_CreateCorporationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_SendInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_CreateNetworkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_AddPeerToCorporationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_AddOrdererByNetworkIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_CreateChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetBlockchainsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetBlockchainsByUserIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetOrderersByNetworkIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetPeersByCorporationIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetBlockchainByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_GetCorporationsByBlockchainIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_CreateCorporationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::network::v1alpha1::_SendInvitationResponse_default_instance_),
};

const char descriptor_table_protodef_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-blockchain/network/v1alpha1/network_ap"
  "i.proto\022\033blockchain.network.v1alpha1\032)bl"
  "ockchain/network/v1alpha1/network.proto\032"
  "\033google/protobuf/empty.proto\"\370\001\n\024CreateN"
  "etworkRequest\022>\n\007network\030\001 \001(\0132$.blockch"
  "ain.network.v1alpha1.NetworkR\007network\022J\n"
  "\013corporation\030\002 \001(\0132(.blockchain.network."
  "v1alpha1.CorporationR\013corporation\022.\n\023ccp"
  "_organization_id\030\003 \001(\tR\021ccpOrganizationI"
  "d\022$\n\016ccp_project_id\030\004 \001(\tR\014ccpProjectId\""
  "\232\001\n\033AddPeerToCorporationRequest\022.\n\023ccp_o"
  "rganization_id\030\001 \001(\tR\021ccpOrganizationId\022"
  "$\n\016ccp_project_id\030\002 \001(\tR\014ccpProjectId\022%\n"
  "\016corporation_id\030\003 \001(\tR\rcorporationId\"\264\001\n"
  "\034AddOrdererByNetworkIdRequest\022>\n\007orderer"
  "\030\001 \001(\0132$.blockchain.network.v1alpha1.Ord"
  "ererR\007orderer\022.\n\023ccp_organization_id\030\002 \001"
  "(\tR\021ccpOrganizationId\022$\n\016ccp_project_id\030"
  "\003 \001(\tR\014ccpProjectId\"V\n\024CreateChannelRequ"
  "est\022>\n\007channel\030\001 \001(\0132$.blockchain.networ"
  "k.v1alpha1.ChannelR\007channel\"h\n\025GetBlockc"
  "hainsRequest\022\026\n\006offset\030\001 \001(\003R\006offset\022\024\n\005"
  "limit\030\002 \001(\003R\005limit\022!\n\014query_params\030\003 \001(\t"
  "R\013queryParams\"f\n\035GetBlockchainsByUserIdR"
  "equest\022\027\n\007user_id\030\001 \001(\tR\006userId\022\026\n\006offse"
  "t\030\002 \001(\003R\006offset\022\024\n\005limit\030\003 \001(\003R\005limit\"u\n"
  "\036GetPeersByCorporationIdRequest\022%\n\016corpo"
  "ration_id\030\001 \001(\tR\rcorporationId\022\026\n\006offset"
  "\030\002 \001(\003R\006offset\022\024\n\005limit\030\003 \001(\003R\005limit\"l\n\035"
  "GetOrderersByNetworkIdRequest\022\035\n\nnetwork"
  "_id\030\001 \001(\tR\tnetworkId\022\026\n\006offset\030\002 \001(\003R\006of"
  "fset\022\024\n\005limit\030\003 \001(\003R\005limit\"*\n\030GetBlockch"
  "ainByIdRequest\022\016\n\002id\030\001 \001(\tR\002id\"y\n$GetCor"
  "porationsByBlockchainIdRequest\022#\n\rblockc"
  "hain_id\030\001 \001(\tR\014blockchainId\022\026\n\006offset\030\002 "
  "\001(\003R\006offset\022\024\n\005limit\030\003 \001(\003R\005limit\"\274\001\n\030Cr"
  "eateCorporationRequest\022J\n\013corporation\030\001 "
  "\001(\0132(.blockchain.network.v1alpha1.Corpor"
  "ationR\013corporation\022.\n\023ccp_organization_i"
  "d\030\002 \001(\tR\021ccpOrganizationId\022$\n\016ccp_projec"
  "t_id\030\003 \001(\tR\014ccpProjectId\"`\n\025SendInvitati"
  "onRequest\022G\n\ninvitation\030\001 \001(\0132\'.blockcha"
  "in.network.v1alpha1.InvitationR\ninvitati"
  "on\"q\n\025CreateNetworkResponse\022>\n\007network\030\001"
  " \001(\0132$.blockchain.network.v1alpha1.Netwo"
  "rkR\007network\022\030\n\007message\030\002 \001(\tR\007message\"\204\001"
  "\n\034AddPeerToCorporationResponse\022J\n\013corpor"
  "ation\030\001 \001(\0132(.blockchain.network.v1alpha"
  "1.CorporationR\013corporation\022\030\n\007message\030\002 "
  "\001(\tR\007message\"y\n\035AddOrdererByNetworkIdRes"
  "ponse\022>\n\007orderer\030\001 \001(\0132$.blockchain.netw"
  "ork.v1alpha1.OrdererR\007orderer\022\030\n\007message"
  "\030\002 \001(\tR\007message\"q\n\025CreateChannelResponse"
  "\022>\n\007channel\030\001 \001(\0132$.blockchain.network.v"
  "1alpha1.ChannelR\007channel\022\030\n\007message\030\002 \001("
  "\tR\007message\"\256\001\n\026GetBlockchainsResponse\022@\n"
  "\010networks\030\001 \003(\0132$.blockchain.network.v1a"
  "lpha1.NetworkR\010networks\022\024\n\005total\030\002 \001(\003R\005"
  "total\022\031\n\010next_url\030\003 \001(\tR\007nextUrl\022!\n\014prev"
  "ious_url\030\004 \001(\tR\013previousUrl\"\266\001\n\036GetBlock"
  "chainsByUserIdResponse\022@\n\010networks\030\001 \003(\013"
  "2$.blockchain.network.v1alpha1.NetworkR\010"
  "networks\022\024\n\005total\030\002 \001(\003R\005total\022\031\n\010next_u"
  "rl\030\003 \001(\tR\007nextUrl\022!\n\014previous_url\030\004 \001(\tR"
  "\013previousUrl\"\266\001\n\036GetOrderersByNetworkIdR"
  "esponse\022@\n\010orderers\030\001 \003(\0132$.blockchain.n"
  "etwork.v1alpha1.OrdererR\010orderers\022\024\n\005tot"
  "al\030\002 \001(\003R\005total\022\031\n\010next_url\030\003 \001(\tR\007nextU"
  "rl\022!\n\014previous_url\030\004 \001(\tR\013previousUrl\"\254\001"
  "\n\037GetPeersByCorporationIdResponse\0225\n\004pee"
  "r\030\001 \003(\0132!.blockchain.network.v1alpha1.Pe"
  "erR\004peer\022\024\n\005total\030\002 \001(\003R\005total\022\031\n\010next_u"
  "rl\030\003 \001(\tR\007nextUrl\022!\n\014previous_url\030\004 \001(\tR"
  "\013previousUrl\"[\n\031GetBlockchainByIdRespons"
  "e\022>\n\007network\030\001 \001(\0132$.blockchain.network."
  "v1alpha1.NetworkR\007network\"\311\001\n%GetCorpora"
  "tionsByBlockchainIdResponse\022L\n\014corporati"
  "ons\030\001 \003(\0132(.blockchain.network.v1alpha1."
  "CorporationR\014corporations\022\024\n\005total\030\002 \001(\003"
  "R\005total\022\031\n\010next_url\030\003 \001(\tR\007nextUrl\022!\n\014pr"
  "evious_url\030\004 \001(\tR\013previousUrl\"\201\001\n\031Create"
  "CorporationResponse\022J\n\013corporation\030\001 \001(\013"
  "2(.blockchain.network.v1alpha1.Corporati"
  "onR\013corporation\022\030\n\007message\030\002 \001(\tR\007messag"
  "e\"{\n\026SendInvitationResponse\022G\n\ninvitatio"
  "n\030\001 \001(\0132\'.blockchain.network.v1alpha1.In"
  "vitationR\ninvitation\022\030\n\007message\030\002 \001(\tR\007m"
  "essage2\215\r\n\024BlockchainAPIService\022v\n\rCreat"
  "eNetwork\0221.blockchain.network.v1alpha1.C"
  "reateNetworkRequest\0322.blockchain.network"
  ".v1alpha1.CreateNetworkResponse\022\213\001\n\024AddP"
  "eerToCorporation\0228.blockchain.network.v1"
  "alpha1.AddPeerToCorporationRequest\0329.blo"
  "ckchain.network.v1alpha1.AddPeerToCorpor"
  "ationResponse\022y\n\016GetBlockchains\0222.blockc"
  "hain.network.v1alpha1.GetBlockchainsRequ"
  "est\0323.blockchain.network.v1alpha1.GetBlo"
  "ckchainsResponse\022\221\001\n\026GetBlockchainsByUse"
  "rId\022:.blockchain.network.v1alpha1.GetBlo"
  "ckchainsByUserIdRequest\032;.blockchain.net"
  "work.v1alpha1.GetBlockchainsByUserIdResp"
  "onse\022\202\001\n\021GetBlockchainById\0225.blockchain."
  "network.v1alpha1.GetBlockchainByIdReques"
  "t\0326.blockchain.network.v1alpha1.GetBlock"
  "chainByIdResponse\022\246\001\n\035GetCorporationsByB"
  "lockchainId\022A.blockchain.network.v1alpha"
  "1.GetCorporationsByBlockchainIdRequest\032B"
  ".blockchain.network.v1alpha1.GetCorporat"
  "ionsByBlockchainIdResponse\022y\n\016SendInvita"
  "tion\0222.blockchain.network.v1alpha1.SendI"
  "nvitationRequest\0323.blockchain.network.v1"
  "alpha1.SendInvitationResponse\022\202\001\n\021Create"
  "Corporation\0225.blockchain.network.v1alpha"
  "1.CreateCorporationRequest\0326.blockchain."
  "network.v1alpha1.CreateCorporationRespon"
  "se\022v\n\rCreateChannel\0221.blockchain.network"
  ".v1alpha1.CreateChannelRequest\0322.blockch"
  "ain.network.v1alpha1.CreateChannelRespon"
  "se\022\224\001\n\027GetPeersByCorporationId\022;.blockch"
  "ain.network.v1alpha1.GetPeersByCorporati"
  "onIdRequest\032<.blockchain.network.v1alpha"
  "1.GetPeersByCorporationIdResponse\022\221\001\n\026Ge"
  "tOrderersByNetworkId\022:.blockchain.networ"
  "k.v1alpha1.GetOrderersByNetworkIdRequest"
  "\032;.blockchain.network.v1alpha1.GetOrdere"
  "rsByNetworkIdResponse\022\216\001\n\025AddOrdererByNe"
  "tworkId\0229.blockchain.network.v1alpha1.Ad"
  "dOrdererByNetworkIdRequest\032:.blockchain."
  "network.v1alpha1.AddOrdererByNetworkIdRe"
  "sponseB>Z<github.com/cuemby/ccp-sdk/gen/"
  "go/blockchain/network/v1alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_deps[2] = {
  &::descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto = {
  false, false, 5238, descriptor_table_protodef_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto, "blockchain/network/v1alpha1/network_api.proto", 
  &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once, descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_deps, 2, 24,
  schemas, file_default_instances, TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto::offsets,
  file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto, file_level_enum_descriptors_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto, file_level_service_descriptors_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter() {
  return &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto(&descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto);
namespace blockchain {
namespace network {
namespace v1alpha1 {

// ===================================================================

class CreateNetworkRequest::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Network& network(const CreateNetworkRequest* msg);
  static const ::blockchain::network::v1alpha1::Corporation& corporation(const CreateNetworkRequest* msg);
};

const ::blockchain::network::v1alpha1::Network&
CreateNetworkRequest::_Internal::network(const CreateNetworkRequest* msg) {
  return *msg->network_;
}
const ::blockchain::network::v1alpha1::Corporation&
CreateNetworkRequest::_Internal::corporation(const CreateNetworkRequest* msg) {
  return *msg->corporation_;
}
void CreateNetworkRequest::clear_network() {
  if (GetArenaForAllocation() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
void CreateNetworkRequest::clear_corporation() {
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
}
CreateNetworkRequest::CreateNetworkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.CreateNetworkRequest)
}
CreateNetworkRequest::CreateNetworkRequest(const CreateNetworkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_organization_id().empty()) {
    ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_organization_id(), 
      GetArenaForAllocation());
  }
  ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_project_id().empty()) {
    ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_project_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_network()) {
    network_ = new ::blockchain::network::v1alpha1::Network(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_corporation()) {
    corporation_ = new ::blockchain::network::v1alpha1::Corporation(*from.corporation_);
  } else {
    corporation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.CreateNetworkRequest)
}

inline void CreateNetworkRequest::SharedCtor() {
ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&network_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&corporation_) -
    reinterpret_cast<char*>(&network_)) + sizeof(corporation_));
}

CreateNetworkRequest::~CreateNetworkRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.CreateNetworkRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateNetworkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ccp_organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ccp_project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete corporation_;
}

void CreateNetworkRequest::ArenaDtor(void* object) {
  CreateNetworkRequest* _this = reinterpret_cast< CreateNetworkRequest* >(object);
  (void)_this;
}
void CreateNetworkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateNetworkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateNetworkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.CreateNetworkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ccp_organization_id_.ClearToEmpty();
  ccp_project_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNetworkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .blockchain.network.v1alpha1.Corporation corporation = 2 [json_name = "corporation"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_corporation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_organization_id = 3 [json_name = "ccpOrganizationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ccp_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.CreateNetworkRequest.ccp_organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_project_id = 4 [json_name = "ccpProjectId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ccp_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.CreateNetworkRequest.ccp_project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateNetworkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.CreateNetworkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  if (this->_internal_has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network(this), target, stream);
  }

  // .blockchain.network.v1alpha1.Corporation corporation = 2 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::corporation(this), target, stream);
  }

  // string ccp_organization_id = 3 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_organization_id().data(), static_cast<int>(this->_internal_ccp_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.CreateNetworkRequest.ccp_organization_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ccp_organization_id(), target);
  }

  // string ccp_project_id = 4 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_project_id().data(), static_cast<int>(this->_internal_ccp_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.CreateNetworkRequest.ccp_project_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ccp_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.CreateNetworkRequest)
  return target;
}

size_t CreateNetworkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.CreateNetworkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ccp_organization_id = 3 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_organization_id());
  }

  // string ccp_project_id = 4 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_project_id());
  }

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  if (this->_internal_has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // .blockchain.network.v1alpha1.Corporation corporation = 2 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corporation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNetworkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateNetworkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNetworkRequest::GetClassData() const { return &_class_data_; }

void CreateNetworkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateNetworkRequest *>(to)->MergeFrom(
      static_cast<const CreateNetworkRequest &>(from));
}


void CreateNetworkRequest::MergeFrom(const CreateNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.CreateNetworkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ccp_organization_id().empty()) {
    _internal_set_ccp_organization_id(from._internal_ccp_organization_id());
  }
  if (!from._internal_ccp_project_id().empty()) {
    _internal_set_ccp_project_id(from._internal_ccp_project_id());
  }
  if (from._internal_has_network()) {
    _internal_mutable_network()->::blockchain::network::v1alpha1::Network::MergeFrom(from._internal_network());
  }
  if (from._internal_has_corporation()) {
    _internal_mutable_corporation()->::blockchain::network::v1alpha1::Corporation::MergeFrom(from._internal_corporation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNetworkRequest::CopyFrom(const CreateNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.CreateNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNetworkRequest::IsInitialized() const {
  return true;
}

void CreateNetworkRequest::InternalSwap(CreateNetworkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_organization_id_, GetArenaForAllocation(),
      &other->ccp_organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_project_id_, GetArenaForAllocation(),
      &other->ccp_project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateNetworkRequest, corporation_)
      + sizeof(CreateNetworkRequest::corporation_)
      - PROTOBUF_FIELD_OFFSET(CreateNetworkRequest, network_)>(
          reinterpret_cast<char*>(&network_),
          reinterpret_cast<char*>(&other->network_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNetworkRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[0]);
}

// ===================================================================

class AddPeerToCorporationRequest::_Internal {
 public:
};

AddPeerToCorporationRequest::AddPeerToCorporationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
}
AddPeerToCorporationRequest::AddPeerToCorporationRequest(const AddPeerToCorporationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_organization_id().empty()) {
    ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_organization_id(), 
      GetArenaForAllocation());
  }
  ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_project_id().empty()) {
    ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_project_id(), 
      GetArenaForAllocation());
  }
  corporation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_corporation_id().empty()) {
    corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_corporation_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
}

inline void AddPeerToCorporationRequest::SharedCtor() {
ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
corporation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddPeerToCorporationRequest::~AddPeerToCorporationRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddPeerToCorporationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ccp_organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ccp_project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  corporation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddPeerToCorporationRequest::ArenaDtor(void* object) {
  AddPeerToCorporationRequest* _this = reinterpret_cast< AddPeerToCorporationRequest* >(object);
  (void)_this;
}
void AddPeerToCorporationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPeerToCorporationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPeerToCorporationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ccp_organization_id_.ClearToEmpty();
  ccp_project_id_.ClearToEmpty();
  corporation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerToCorporationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ccp_organization_id = 1 [json_name = "ccpOrganizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ccp_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_project_id = 2 [json_name = "ccpProjectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ccp_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string corporation_id = 3 [json_name = "corporationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_corporation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.AddPeerToCorporationRequest.corporation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPeerToCorporationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ccp_organization_id = 1 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_organization_id().data(), static_cast<int>(this->_internal_ccp_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ccp_organization_id(), target);
  }

  // string ccp_project_id = 2 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_project_id().data(), static_cast<int>(this->_internal_ccp_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.AddPeerToCorporationRequest.ccp_project_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ccp_project_id(), target);
  }

  // string corporation_id = 3 [json_name = "corporationId"];
  if (!this->_internal_corporation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_corporation_id().data(), static_cast<int>(this->_internal_corporation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.AddPeerToCorporationRequest.corporation_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_corporation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
  return target;
}

size_t AddPeerToCorporationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ccp_organization_id = 1 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_organization_id());
  }

  // string ccp_project_id = 2 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_project_id());
  }

  // string corporation_id = 3 [json_name = "corporationId"];
  if (!this->_internal_corporation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_corporation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPeerToCorporationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddPeerToCorporationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPeerToCorporationRequest::GetClassData() const { return &_class_data_; }

void AddPeerToCorporationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddPeerToCorporationRequest *>(to)->MergeFrom(
      static_cast<const AddPeerToCorporationRequest &>(from));
}


void AddPeerToCorporationRequest::MergeFrom(const AddPeerToCorporationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ccp_organization_id().empty()) {
    _internal_set_ccp_organization_id(from._internal_ccp_organization_id());
  }
  if (!from._internal_ccp_project_id().empty()) {
    _internal_set_ccp_project_id(from._internal_ccp_project_id());
  }
  if (!from._internal_corporation_id().empty()) {
    _internal_set_corporation_id(from._internal_corporation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPeerToCorporationRequest::CopyFrom(const AddPeerToCorporationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.AddPeerToCorporationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerToCorporationRequest::IsInitialized() const {
  return true;
}

void AddPeerToCorporationRequest::InternalSwap(AddPeerToCorporationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_organization_id_, GetArenaForAllocation(),
      &other->ccp_organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_project_id_, GetArenaForAllocation(),
      &other->ccp_project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &corporation_id_, GetArenaForAllocation(),
      &other->corporation_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerToCorporationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[1]);
}

// ===================================================================

class AddOrdererByNetworkIdRequest::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Orderer& orderer(const AddOrdererByNetworkIdRequest* msg);
};

const ::blockchain::network::v1alpha1::Orderer&
AddOrdererByNetworkIdRequest::_Internal::orderer(const AddOrdererByNetworkIdRequest* msg) {
  return *msg->orderer_;
}
void AddOrdererByNetworkIdRequest::clear_orderer() {
  if (GetArenaForAllocation() == nullptr && orderer_ != nullptr) {
    delete orderer_;
  }
  orderer_ = nullptr;
}
AddOrdererByNetworkIdRequest::AddOrdererByNetworkIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
}
AddOrdererByNetworkIdRequest::AddOrdererByNetworkIdRequest(const AddOrdererByNetworkIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_organization_id().empty()) {
    ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_organization_id(), 
      GetArenaForAllocation());
  }
  ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_project_id().empty()) {
    ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_project_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_orderer()) {
    orderer_ = new ::blockchain::network::v1alpha1::Orderer(*from.orderer_);
  } else {
    orderer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
}

inline void AddOrdererByNetworkIdRequest::SharedCtor() {
ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
orderer_ = nullptr;
}

AddOrdererByNetworkIdRequest::~AddOrdererByNetworkIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddOrdererByNetworkIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ccp_organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ccp_project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orderer_;
}

void AddOrdererByNetworkIdRequest::ArenaDtor(void* object) {
  AddOrdererByNetworkIdRequest* _this = reinterpret_cast< AddOrdererByNetworkIdRequest* >(object);
  (void)_this;
}
void AddOrdererByNetworkIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddOrdererByNetworkIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddOrdererByNetworkIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ccp_organization_id_.ClearToEmpty();
  ccp_project_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && orderer_ != nullptr) {
    delete orderer_;
  }
  orderer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddOrdererByNetworkIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ccp_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_project_id = 3 [json_name = "ccpProjectId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ccp_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddOrdererByNetworkIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
  if (this->_internal_has_orderer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::orderer(this), target, stream);
  }

  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_organization_id().data(), static_cast<int>(this->_internal_ccp_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_organization_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ccp_organization_id(), target);
  }

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_project_id().data(), static_cast<int>(this->_internal_ccp_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest.ccp_project_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ccp_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
  return target;
}

size_t AddOrdererByNetworkIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_organization_id());
  }

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_project_id());
  }

  // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
  if (this->_internal_has_orderer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orderer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddOrdererByNetworkIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddOrdererByNetworkIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddOrdererByNetworkIdRequest::GetClassData() const { return &_class_data_; }

void AddOrdererByNetworkIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddOrdererByNetworkIdRequest *>(to)->MergeFrom(
      static_cast<const AddOrdererByNetworkIdRequest &>(from));
}


void AddOrdererByNetworkIdRequest::MergeFrom(const AddOrdererByNetworkIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ccp_organization_id().empty()) {
    _internal_set_ccp_organization_id(from._internal_ccp_organization_id());
  }
  if (!from._internal_ccp_project_id().empty()) {
    _internal_set_ccp_project_id(from._internal_ccp_project_id());
  }
  if (from._internal_has_orderer()) {
    _internal_mutable_orderer()->::blockchain::network::v1alpha1::Orderer::MergeFrom(from._internal_orderer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddOrdererByNetworkIdRequest::CopyFrom(const AddOrdererByNetworkIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOrdererByNetworkIdRequest::IsInitialized() const {
  return true;
}

void AddOrdererByNetworkIdRequest::InternalSwap(AddOrdererByNetworkIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_organization_id_, GetArenaForAllocation(),
      &other->ccp_organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_project_id_, GetArenaForAllocation(),
      &other->ccp_project_id_, other->GetArenaForAllocation()
  );
  swap(orderer_, other->orderer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddOrdererByNetworkIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[2]);
}

// ===================================================================

class CreateChannelRequest::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Channel& channel(const CreateChannelRequest* msg);
};

const ::blockchain::network::v1alpha1::Channel&
CreateChannelRequest::_Internal::channel(const CreateChannelRequest* msg) {
  return *msg->channel_;
}
void CreateChannelRequest::clear_channel() {
  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
CreateChannelRequest::CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.CreateChannelRequest)
}
CreateChannelRequest::CreateChannelRequest(const CreateChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::blockchain::network::v1alpha1::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.CreateChannelRequest)
}

inline void CreateChannelRequest::SharedCtor() {
channel_ = nullptr;
}

CreateChannelRequest::~CreateChannelRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.CreateChannelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void CreateChannelRequest::ArenaDtor(void* object) {
  CreateChannelRequest* _this = reinterpret_cast< CreateChannelRequest* >(object);
  (void)_this;
}
void CreateChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.CreateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.CreateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  if (this->_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.CreateChannelRequest)
  return target;
}

size_t CreateChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.CreateChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChannelRequest::GetClassData() const { return &_class_data_; }

void CreateChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateChannelRequest *>(to)->MergeFrom(
      static_cast<const CreateChannelRequest &>(from));
}


void CreateChannelRequest::MergeFrom(const CreateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.CreateChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::blockchain::network::v1alpha1::Channel::MergeFrom(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChannelRequest::CopyFrom(const CreateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.CreateChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelRequest::IsInitialized() const {
  return true;
}

void CreateChannelRequest::InternalSwap(CreateChannelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[3]);
}

// ===================================================================

class GetBlockchainsRequest::_Internal {
 public:
};

GetBlockchainsRequest::GetBlockchainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetBlockchainsRequest)
}
GetBlockchainsRequest::GetBlockchainsRequest(const GetBlockchainsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_params().empty()) {
    query_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_params(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetBlockchainsRequest)
}

inline void GetBlockchainsRequest::SharedCtor() {
query_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

GetBlockchainsRequest::~GetBlockchainsRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetBlockchainsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockchainsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockchainsRequest::ArenaDtor(void* object) {
  GetBlockchainsRequest* _this = reinterpret_cast< GetBlockchainsRequest* >(object);
  (void)_this;
}
void GetBlockchainsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockchainsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetBlockchainsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_params_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1 [json_name = "offset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query_params = 3 [json_name = "queryParams"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_query_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetBlockchainsRequest.query_params"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetBlockchainsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  // int64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
  }

  // string query_params = 3 [json_name = "queryParams"];
  if (!this->_internal_query_params().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_params().data(), static_cast<int>(this->_internal_query_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetBlockchainsRequest.query_params");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetBlockchainsRequest)
  return target;
}

size_t GetBlockchainsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetBlockchainsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query_params = 3 [json_name = "queryParams"];
  if (!this->_internal_query_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_params());
  }

  // int64 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockchainsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockchainsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockchainsRequest::GetClassData() const { return &_class_data_; }

void GetBlockchainsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetBlockchainsRequest *>(to)->MergeFrom(
      static_cast<const GetBlockchainsRequest &>(from));
}


void GetBlockchainsRequest::MergeFrom(const GetBlockchainsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetBlockchainsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query_params().empty()) {
    _internal_set_query_params(from._internal_query_params());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockchainsRequest::CopyFrom(const GetBlockchainsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetBlockchainsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainsRequest::IsInitialized() const {
  return true;
}

void GetBlockchainsRequest::InternalSwap(GetBlockchainsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_params_, GetArenaForAllocation(),
      &other->query_params_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockchainsRequest, limit_)
      + sizeof(GetBlockchainsRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetBlockchainsRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[4]);
}

// ===================================================================

class GetBlockchainsByUserIdRequest::_Internal {
 public:
};

GetBlockchainsByUserIdRequest::GetBlockchainsByUserIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
}
GetBlockchainsByUserIdRequest::GetBlockchainsByUserIdRequest(const GetBlockchainsByUserIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
}

inline void GetBlockchainsByUserIdRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

GetBlockchainsByUserIdRequest::~GetBlockchainsByUserIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockchainsByUserIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockchainsByUserIdRequest::ArenaDtor(void* object) {
  GetBlockchainsByUserIdRequest* _this = reinterpret_cast< GetBlockchainsByUserIdRequest* >(object);
  (void)_this;
}
void GetBlockchainsByUserIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainsByUserIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockchainsByUserIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainsByUserIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainsByUserIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
  return target;
}

size_t GetBlockchainsByUserIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockchainsByUserIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockchainsByUserIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockchainsByUserIdRequest::GetClassData() const { return &_class_data_; }

void GetBlockchainsByUserIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetBlockchainsByUserIdRequest *>(to)->MergeFrom(
      static_cast<const GetBlockchainsByUserIdRequest &>(from));
}


void GetBlockchainsByUserIdRequest::MergeFrom(const GetBlockchainsByUserIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockchainsByUserIdRequest::CopyFrom(const GetBlockchainsByUserIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainsByUserIdRequest::IsInitialized() const {
  return true;
}

void GetBlockchainsByUserIdRequest::InternalSwap(GetBlockchainsByUserIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockchainsByUserIdRequest, limit_)
      + sizeof(GetBlockchainsByUserIdRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetBlockchainsByUserIdRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainsByUserIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[5]);
}

// ===================================================================

class GetPeersByCorporationIdRequest::_Internal {
 public:
};

GetPeersByCorporationIdRequest::GetPeersByCorporationIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
}
GetPeersByCorporationIdRequest::GetPeersByCorporationIdRequest(const GetPeersByCorporationIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  corporation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_corporation_id().empty()) {
    corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_corporation_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
}

inline void GetPeersByCorporationIdRequest::SharedCtor() {
corporation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

GetPeersByCorporationIdRequest::~GetPeersByCorporationIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPeersByCorporationIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  corporation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPeersByCorporationIdRequest::ArenaDtor(void* object) {
  GetPeersByCorporationIdRequest* _this = reinterpret_cast< GetPeersByCorporationIdRequest* >(object);
  (void)_this;
}
void GetPeersByCorporationIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPeersByCorporationIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPeersByCorporationIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corporation_id_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeersByCorporationIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string corporation_id = 1 [json_name = "corporationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_corporation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.corporation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeersByCorporationIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string corporation_id = 1 [json_name = "corporationId"];
  if (!this->_internal_corporation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_corporation_id().data(), static_cast<int>(this->_internal_corporation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetPeersByCorporationIdRequest.corporation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_corporation_id(), target);
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
  return target;
}

size_t GetPeersByCorporationIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string corporation_id = 1 [json_name = "corporationId"];
  if (!this->_internal_corporation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_corporation_id());
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPeersByCorporationIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPeersByCorporationIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPeersByCorporationIdRequest::GetClassData() const { return &_class_data_; }

void GetPeersByCorporationIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetPeersByCorporationIdRequest *>(to)->MergeFrom(
      static_cast<const GetPeersByCorporationIdRequest &>(from));
}


void GetPeersByCorporationIdRequest::MergeFrom(const GetPeersByCorporationIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_corporation_id().empty()) {
    _internal_set_corporation_id(from._internal_corporation_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPeersByCorporationIdRequest::CopyFrom(const GetPeersByCorporationIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetPeersByCorporationIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeersByCorporationIdRequest::IsInitialized() const {
  return true;
}

void GetPeersByCorporationIdRequest::InternalSwap(GetPeersByCorporationIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &corporation_id_, GetArenaForAllocation(),
      &other->corporation_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPeersByCorporationIdRequest, limit_)
      + sizeof(GetPeersByCorporationIdRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetPeersByCorporationIdRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeersByCorporationIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[6]);
}

// ===================================================================

class GetOrderersByNetworkIdRequest::_Internal {
 public:
};

GetOrderersByNetworkIdRequest::GetOrderersByNetworkIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
}
GetOrderersByNetworkIdRequest::GetOrderersByNetworkIdRequest(const GetOrderersByNetworkIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_id().empty()) {
    network_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
}

inline void GetOrderersByNetworkIdRequest::SharedCtor() {
network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

GetOrderersByNetworkIdRequest::~GetOrderersByNetworkIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOrderersByNetworkIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  network_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOrderersByNetworkIdRequest::ArenaDtor(void* object) {
  GetOrderersByNetworkIdRequest* _this = reinterpret_cast< GetOrderersByNetworkIdRequest* >(object);
  (void)_this;
}
void GetOrderersByNetworkIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOrderersByNetworkIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOrderersByNetworkIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_id_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderersByNetworkIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string network_id = 1 [json_name = "networkId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_network_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.network_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOrderersByNetworkIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string network_id = 1 [json_name = "networkId"];
  if (!this->_internal_network_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_id().data(), static_cast<int>(this->_internal_network_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest.network_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network_id(), target);
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
  return target;
}

size_t GetOrderersByNetworkIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network_id = 1 [json_name = "networkId"];
  if (!this->_internal_network_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_id());
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderersByNetworkIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOrderersByNetworkIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderersByNetworkIdRequest::GetClassData() const { return &_class_data_; }

void GetOrderersByNetworkIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOrderersByNetworkIdRequest *>(to)->MergeFrom(
      static_cast<const GetOrderersByNetworkIdRequest &>(from));
}


void GetOrderersByNetworkIdRequest::MergeFrom(const GetOrderersByNetworkIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_network_id().empty()) {
    _internal_set_network_id(from._internal_network_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderersByNetworkIdRequest::CopyFrom(const GetOrderersByNetworkIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderersByNetworkIdRequest::IsInitialized() const {
  return true;
}

void GetOrderersByNetworkIdRequest::InternalSwap(GetOrderersByNetworkIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &network_id_, GetArenaForAllocation(),
      &other->network_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrderersByNetworkIdRequest, limit_)
      + sizeof(GetOrderersByNetworkIdRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetOrderersByNetworkIdRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderersByNetworkIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[7]);
}

// ===================================================================

class GetBlockchainByIdRequest::_Internal {
 public:
};

GetBlockchainByIdRequest::GetBlockchainByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
}
GetBlockchainByIdRequest::GetBlockchainByIdRequest(const GetBlockchainByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
}

inline void GetBlockchainByIdRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockchainByIdRequest::~GetBlockchainByIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockchainByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockchainByIdRequest::ArenaDtor(void* object) {
  GetBlockchainByIdRequest* _this = reinterpret_cast< GetBlockchainByIdRequest* >(object);
  (void)_this;
}
void GetBlockchainByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockchainByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetBlockchainByIdRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetBlockchainByIdRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
  return target;
}

size_t GetBlockchainByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockchainByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockchainByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockchainByIdRequest::GetClassData() const { return &_class_data_; }

void GetBlockchainByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetBlockchainByIdRequest *>(to)->MergeFrom(
      static_cast<const GetBlockchainByIdRequest &>(from));
}


void GetBlockchainByIdRequest::MergeFrom(const GetBlockchainByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockchainByIdRequest::CopyFrom(const GetBlockchainByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetBlockchainByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainByIdRequest::IsInitialized() const {
  return true;
}

void GetBlockchainByIdRequest::InternalSwap(GetBlockchainByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainByIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[8]);
}

// ===================================================================

class GetCorporationsByBlockchainIdRequest::_Internal {
 public:
};

GetCorporationsByBlockchainIdRequest::GetCorporationsByBlockchainIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
}
GetCorporationsByBlockchainIdRequest::GetCorporationsByBlockchainIdRequest(const GetCorporationsByBlockchainIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blockchain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blockchain_id().empty()) {
    blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blockchain_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
}

inline void GetCorporationsByBlockchainIdRequest::SharedCtor() {
blockchain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

GetCorporationsByBlockchainIdRequest::~GetCorporationsByBlockchainIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCorporationsByBlockchainIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blockchain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCorporationsByBlockchainIdRequest::ArenaDtor(void* object) {
  GetCorporationsByBlockchainIdRequest* _this = reinterpret_cast< GetCorporationsByBlockchainIdRequest* >(object);
  (void)_this;
}
void GetCorporationsByBlockchainIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCorporationsByBlockchainIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCorporationsByBlockchainIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockchain_id_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCorporationsByBlockchainIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string blockchain_id = 1 [json_name = "blockchainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blockchain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.blockchain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCorporationsByBlockchainIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string blockchain_id = 1 [json_name = "blockchainId"];
  if (!this->_internal_blockchain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blockchain_id().data(), static_cast<int>(this->_internal_blockchain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest.blockchain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blockchain_id(), target);
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
  return target;
}

size_t GetCorporationsByBlockchainIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blockchain_id = 1 [json_name = "blockchainId"];
  if (!this->_internal_blockchain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blockchain_id());
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCorporationsByBlockchainIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCorporationsByBlockchainIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCorporationsByBlockchainIdRequest::GetClassData() const { return &_class_data_; }

void GetCorporationsByBlockchainIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetCorporationsByBlockchainIdRequest *>(to)->MergeFrom(
      static_cast<const GetCorporationsByBlockchainIdRequest &>(from));
}


void GetCorporationsByBlockchainIdRequest::MergeFrom(const GetCorporationsByBlockchainIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blockchain_id().empty()) {
    _internal_set_blockchain_id(from._internal_blockchain_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCorporationsByBlockchainIdRequest::CopyFrom(const GetCorporationsByBlockchainIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCorporationsByBlockchainIdRequest::IsInitialized() const {
  return true;
}

void GetCorporationsByBlockchainIdRequest::InternalSwap(GetCorporationsByBlockchainIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blockchain_id_, GetArenaForAllocation(),
      &other->blockchain_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCorporationsByBlockchainIdRequest, limit_)
      + sizeof(GetCorporationsByBlockchainIdRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetCorporationsByBlockchainIdRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCorporationsByBlockchainIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[9]);
}

// ===================================================================

class CreateCorporationRequest::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Corporation& corporation(const CreateCorporationRequest* msg);
};

const ::blockchain::network::v1alpha1::Corporation&
CreateCorporationRequest::_Internal::corporation(const CreateCorporationRequest* msg) {
  return *msg->corporation_;
}
void CreateCorporationRequest::clear_corporation() {
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
}
CreateCorporationRequest::CreateCorporationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.CreateCorporationRequest)
}
CreateCorporationRequest::CreateCorporationRequest(const CreateCorporationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_organization_id().empty()) {
    ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_organization_id(), 
      GetArenaForAllocation());
  }
  ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_project_id().empty()) {
    ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_project_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_corporation()) {
    corporation_ = new ::blockchain::network::v1alpha1::Corporation(*from.corporation_);
  } else {
    corporation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.CreateCorporationRequest)
}

inline void CreateCorporationRequest::SharedCtor() {
ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
corporation_ = nullptr;
}

CreateCorporationRequest::~CreateCorporationRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.CreateCorporationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCorporationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ccp_organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ccp_project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete corporation_;
}

void CreateCorporationRequest::ArenaDtor(void* object) {
  CreateCorporationRequest* _this = reinterpret_cast< CreateCorporationRequest* >(object);
  (void)_this;
}
void CreateCorporationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCorporationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCorporationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.CreateCorporationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ccp_organization_id_.ClearToEmpty();
  ccp_project_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCorporationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_corporation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ccp_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.CreateCorporationRequest.ccp_organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_project_id = 3 [json_name = "ccpProjectId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ccp_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.CreateCorporationRequest.ccp_project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCorporationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.CreateCorporationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::corporation(this), target, stream);
  }

  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_organization_id().data(), static_cast<int>(this->_internal_ccp_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.CreateCorporationRequest.ccp_organization_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ccp_organization_id(), target);
  }

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_project_id().data(), static_cast<int>(this->_internal_ccp_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.CreateCorporationRequest.ccp_project_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ccp_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.CreateCorporationRequest)
  return target;
}

size_t CreateCorporationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.CreateCorporationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_organization_id());
  }

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_project_id());
  }

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corporation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCorporationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCorporationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCorporationRequest::GetClassData() const { return &_class_data_; }

void CreateCorporationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateCorporationRequest *>(to)->MergeFrom(
      static_cast<const CreateCorporationRequest &>(from));
}


void CreateCorporationRequest::MergeFrom(const CreateCorporationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.CreateCorporationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ccp_organization_id().empty()) {
    _internal_set_ccp_organization_id(from._internal_ccp_organization_id());
  }
  if (!from._internal_ccp_project_id().empty()) {
    _internal_set_ccp_project_id(from._internal_ccp_project_id());
  }
  if (from._internal_has_corporation()) {
    _internal_mutable_corporation()->::blockchain::network::v1alpha1::Corporation::MergeFrom(from._internal_corporation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCorporationRequest::CopyFrom(const CreateCorporationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.CreateCorporationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCorporationRequest::IsInitialized() const {
  return true;
}

void CreateCorporationRequest::InternalSwap(CreateCorporationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_organization_id_, GetArenaForAllocation(),
      &other->ccp_organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_project_id_, GetArenaForAllocation(),
      &other->ccp_project_id_, other->GetArenaForAllocation()
  );
  swap(corporation_, other->corporation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCorporationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[10]);
}

// ===================================================================

class SendInvitationRequest::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Invitation& invitation(const SendInvitationRequest* msg);
};

const ::blockchain::network::v1alpha1::Invitation&
SendInvitationRequest::_Internal::invitation(const SendInvitationRequest* msg) {
  return *msg->invitation_;
}
void SendInvitationRequest::clear_invitation() {
  if (GetArenaForAllocation() == nullptr && invitation_ != nullptr) {
    delete invitation_;
  }
  invitation_ = nullptr;
}
SendInvitationRequest::SendInvitationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.SendInvitationRequest)
}
SendInvitationRequest::SendInvitationRequest(const SendInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_invitation()) {
    invitation_ = new ::blockchain::network::v1alpha1::Invitation(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.SendInvitationRequest)
}

inline void SendInvitationRequest::SharedCtor() {
invitation_ = nullptr;
}

SendInvitationRequest::~SendInvitationRequest() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.SendInvitationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendInvitationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete invitation_;
}

void SendInvitationRequest::ArenaDtor(void* object) {
  SendInvitationRequest* _this = reinterpret_cast< SendInvitationRequest* >(object);
  (void)_this;
}
void SendInvitationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.SendInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && invitation_ != nullptr) {
    delete invitation_;
  }
  invitation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.SendInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  if (this->_internal_has_invitation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::invitation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.SendInvitationRequest)
  return target;
}

size_t SendInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.SendInvitationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  if (this->_internal_has_invitation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendInvitationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendInvitationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendInvitationRequest::GetClassData() const { return &_class_data_; }

void SendInvitationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendInvitationRequest *>(to)->MergeFrom(
      static_cast<const SendInvitationRequest &>(from));
}


void SendInvitationRequest::MergeFrom(const SendInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.SendInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation()) {
    _internal_mutable_invitation()->::blockchain::network::v1alpha1::Invitation::MergeFrom(from._internal_invitation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendInvitationRequest::CopyFrom(const SendInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.SendInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationRequest::IsInitialized() const {
  return true;
}

void SendInvitationRequest::InternalSwap(SendInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(invitation_, other->invitation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendInvitationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[11]);
}

// ===================================================================

class CreateNetworkResponse::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Network& network(const CreateNetworkResponse* msg);
};

const ::blockchain::network::v1alpha1::Network&
CreateNetworkResponse::_Internal::network(const CreateNetworkResponse* msg) {
  return *msg->network_;
}
void CreateNetworkResponse::clear_network() {
  if (GetArenaForAllocation() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
CreateNetworkResponse::CreateNetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.CreateNetworkResponse)
}
CreateNetworkResponse::CreateNetworkResponse(const CreateNetworkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_network()) {
    network_ = new ::blockchain::network::v1alpha1::Network(*from.network_);
  } else {
    network_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.CreateNetworkResponse)
}

inline void CreateNetworkResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
network_ = nullptr;
}

CreateNetworkResponse::~CreateNetworkResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.CreateNetworkResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateNetworkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete network_;
}

void CreateNetworkResponse::ArenaDtor(void* object) {
  CreateNetworkResponse* _this = reinterpret_cast< CreateNetworkResponse* >(object);
  (void)_this;
}
void CreateNetworkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateNetworkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateNetworkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.CreateNetworkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNetworkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.CreateNetworkResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateNetworkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.CreateNetworkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  if (this->_internal_has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network(this), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.CreateNetworkResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.CreateNetworkResponse)
  return target;
}

size_t CreateNetworkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.CreateNetworkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  if (this->_internal_has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNetworkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateNetworkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNetworkResponse::GetClassData() const { return &_class_data_; }

void CreateNetworkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateNetworkResponse *>(to)->MergeFrom(
      static_cast<const CreateNetworkResponse &>(from));
}


void CreateNetworkResponse::MergeFrom(const CreateNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.CreateNetworkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_network()) {
    _internal_mutable_network()->::blockchain::network::v1alpha1::Network::MergeFrom(from._internal_network());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNetworkResponse::CopyFrom(const CreateNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.CreateNetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNetworkResponse::IsInitialized() const {
  return true;
}

void CreateNetworkResponse::InternalSwap(CreateNetworkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(network_, other->network_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNetworkResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[12]);
}

// ===================================================================

class AddPeerToCorporationResponse::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Corporation& corporation(const AddPeerToCorporationResponse* msg);
};

const ::blockchain::network::v1alpha1::Corporation&
AddPeerToCorporationResponse::_Internal::corporation(const AddPeerToCorporationResponse* msg) {
  return *msg->corporation_;
}
void AddPeerToCorporationResponse::clear_corporation() {
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
}
AddPeerToCorporationResponse::AddPeerToCorporationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
}
AddPeerToCorporationResponse::AddPeerToCorporationResponse(const AddPeerToCorporationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_corporation()) {
    corporation_ = new ::blockchain::network::v1alpha1::Corporation(*from.corporation_);
  } else {
    corporation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
}

inline void AddPeerToCorporationResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
corporation_ = nullptr;
}

AddPeerToCorporationResponse::~AddPeerToCorporationResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddPeerToCorporationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete corporation_;
}

void AddPeerToCorporationResponse::ArenaDtor(void* object) {
  AddPeerToCorporationResponse* _this = reinterpret_cast< AddPeerToCorporationResponse* >(object);
  (void)_this;
}
void AddPeerToCorporationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPeerToCorporationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPeerToCorporationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerToCorporationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_corporation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.AddPeerToCorporationResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPeerToCorporationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::corporation(this), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.AddPeerToCorporationResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
  return target;
}

size_t AddPeerToCorporationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corporation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPeerToCorporationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddPeerToCorporationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPeerToCorporationResponse::GetClassData() const { return &_class_data_; }

void AddPeerToCorporationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddPeerToCorporationResponse *>(to)->MergeFrom(
      static_cast<const AddPeerToCorporationResponse &>(from));
}


void AddPeerToCorporationResponse::MergeFrom(const AddPeerToCorporationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_corporation()) {
    _internal_mutable_corporation()->::blockchain::network::v1alpha1::Corporation::MergeFrom(from._internal_corporation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPeerToCorporationResponse::CopyFrom(const AddPeerToCorporationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.AddPeerToCorporationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerToCorporationResponse::IsInitialized() const {
  return true;
}

void AddPeerToCorporationResponse::InternalSwap(AddPeerToCorporationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(corporation_, other->corporation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerToCorporationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[13]);
}

// ===================================================================

class AddOrdererByNetworkIdResponse::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Orderer& orderer(const AddOrdererByNetworkIdResponse* msg);
};

const ::blockchain::network::v1alpha1::Orderer&
AddOrdererByNetworkIdResponse::_Internal::orderer(const AddOrdererByNetworkIdResponse* msg) {
  return *msg->orderer_;
}
void AddOrdererByNetworkIdResponse::clear_orderer() {
  if (GetArenaForAllocation() == nullptr && orderer_ != nullptr) {
    delete orderer_;
  }
  orderer_ = nullptr;
}
AddOrdererByNetworkIdResponse::AddOrdererByNetworkIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
}
AddOrdererByNetworkIdResponse::AddOrdererByNetworkIdResponse(const AddOrdererByNetworkIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_orderer()) {
    orderer_ = new ::blockchain::network::v1alpha1::Orderer(*from.orderer_);
  } else {
    orderer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
}

inline void AddOrdererByNetworkIdResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
orderer_ = nullptr;
}

AddOrdererByNetworkIdResponse::~AddOrdererByNetworkIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddOrdererByNetworkIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orderer_;
}

void AddOrdererByNetworkIdResponse::ArenaDtor(void* object) {
  AddOrdererByNetworkIdResponse* _this = reinterpret_cast< AddOrdererByNetworkIdResponse* >(object);
  (void)_this;
}
void AddOrdererByNetworkIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddOrdererByNetworkIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddOrdererByNetworkIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && orderer_ != nullptr) {
    delete orderer_;
  }
  orderer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddOrdererByNetworkIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddOrdererByNetworkIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
  if (this->_internal_has_orderer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::orderer(this), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
  return target;
}

size_t AddOrdererByNetworkIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .blockchain.network.v1alpha1.Orderer orderer = 1 [json_name = "orderer"];
  if (this->_internal_has_orderer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orderer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddOrdererByNetworkIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddOrdererByNetworkIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddOrdererByNetworkIdResponse::GetClassData() const { return &_class_data_; }

void AddOrdererByNetworkIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddOrdererByNetworkIdResponse *>(to)->MergeFrom(
      static_cast<const AddOrdererByNetworkIdResponse &>(from));
}


void AddOrdererByNetworkIdResponse::MergeFrom(const AddOrdererByNetworkIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_orderer()) {
    _internal_mutable_orderer()->::blockchain::network::v1alpha1::Orderer::MergeFrom(from._internal_orderer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddOrdererByNetworkIdResponse::CopyFrom(const AddOrdererByNetworkIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.AddOrdererByNetworkIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOrdererByNetworkIdResponse::IsInitialized() const {
  return true;
}

void AddOrdererByNetworkIdResponse::InternalSwap(AddOrdererByNetworkIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(orderer_, other->orderer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddOrdererByNetworkIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[14]);
}

// ===================================================================

class CreateChannelResponse::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Channel& channel(const CreateChannelResponse* msg);
};

const ::blockchain::network::v1alpha1::Channel&
CreateChannelResponse::_Internal::channel(const CreateChannelResponse* msg) {
  return *msg->channel_;
}
void CreateChannelResponse::clear_channel() {
  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
CreateChannelResponse::CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.CreateChannelResponse)
}
CreateChannelResponse::CreateChannelResponse(const CreateChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_channel()) {
    channel_ = new ::blockchain::network::v1alpha1::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.CreateChannelResponse)
}

inline void CreateChannelResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_ = nullptr;
}

CreateChannelResponse::~CreateChannelResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.CreateChannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void CreateChannelResponse::ArenaDtor(void* object) {
  CreateChannelResponse* _this = reinterpret_cast< CreateChannelResponse* >(object);
  (void)_this;
}
void CreateChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.CreateChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.CreateChannelResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.CreateChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  if (this->_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.CreateChannelResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.CreateChannelResponse)
  return target;
}

size_t CreateChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.CreateChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .blockchain.network.v1alpha1.Channel channel = 1 [json_name = "channel"];
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChannelResponse::GetClassData() const { return &_class_data_; }

void CreateChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateChannelResponse *>(to)->MergeFrom(
      static_cast<const CreateChannelResponse &>(from));
}


void CreateChannelResponse::MergeFrom(const CreateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.CreateChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::blockchain::network::v1alpha1::Channel::MergeFrom(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChannelResponse::CopyFrom(const CreateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.CreateChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelResponse::IsInitialized() const {
  return true;
}

void CreateChannelResponse::InternalSwap(CreateChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[15]);
}

// ===================================================================

class GetBlockchainsResponse::_Internal {
 public:
};

void GetBlockchainsResponse::clear_networks() {
  networks_.Clear();
}
GetBlockchainsResponse::GetBlockchainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  networks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetBlockchainsResponse)
}
GetBlockchainsResponse::GetBlockchainsResponse(const GetBlockchainsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      networks_(from.networks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_url().empty()) {
    next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_url(), 
      GetArenaForAllocation());
  }
  previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_url().empty()) {
    previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_url(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetBlockchainsResponse)
}

inline void GetBlockchainsResponse::SharedCtor() {
next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_ = int64_t{0};
}

GetBlockchainsResponse::~GetBlockchainsResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetBlockchainsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockchainsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockchainsResponse::ArenaDtor(void* object) {
  GetBlockchainsResponse* _this = reinterpret_cast< GetBlockchainsResponse* >(object);
  (void)_this;
}
void GetBlockchainsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockchainsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetBlockchainsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networks_.Clear();
  next_url_.ClearToEmpty();
  previous_url_.ClearToEmpty();
  total_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_url = 3 [json_name = "nextUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetBlockchainsResponse.next_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_url = 4 [json_name = "previousUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetBlockchainsResponse.previous_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetBlockchainsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_networks(i), target, stream);
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_url().data(), static_cast<int>(this->_internal_next_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetBlockchainsResponse.next_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_url(), target);
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_url().data(), static_cast<int>(this->_internal_previous_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetBlockchainsResponse.previous_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetBlockchainsResponse)
  return target;
}

size_t GetBlockchainsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetBlockchainsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
  total_size += 1UL * this->_internal_networks_size();
  for (const auto& msg : this->networks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_url());
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_url());
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockchainsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockchainsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockchainsResponse::GetClassData() const { return &_class_data_; }

void GetBlockchainsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetBlockchainsResponse *>(to)->MergeFrom(
      static_cast<const GetBlockchainsResponse &>(from));
}


void GetBlockchainsResponse::MergeFrom(const GetBlockchainsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetBlockchainsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networks_.MergeFrom(from.networks_);
  if (!from._internal_next_url().empty()) {
    _internal_set_next_url(from._internal_next_url());
  }
  if (!from._internal_previous_url().empty()) {
    _internal_set_previous_url(from._internal_previous_url());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockchainsResponse::CopyFrom(const GetBlockchainsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetBlockchainsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainsResponse::IsInitialized() const {
  return true;
}

void GetBlockchainsResponse::InternalSwap(GetBlockchainsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  networks_.InternalSwap(&other->networks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_url_, GetArenaForAllocation(),
      &other->next_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_url_, GetArenaForAllocation(),
      &other->previous_url_, other->GetArenaForAllocation()
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[16]);
}

// ===================================================================

class GetBlockchainsByUserIdResponse::_Internal {
 public:
};

void GetBlockchainsByUserIdResponse::clear_networks() {
  networks_.Clear();
}
GetBlockchainsByUserIdResponse::GetBlockchainsByUserIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  networks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
}
GetBlockchainsByUserIdResponse::GetBlockchainsByUserIdResponse(const GetBlockchainsByUserIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      networks_(from.networks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_url().empty()) {
    next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_url(), 
      GetArenaForAllocation());
  }
  previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_url().empty()) {
    previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_url(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
}

inline void GetBlockchainsByUserIdResponse::SharedCtor() {
next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_ = int64_t{0};
}

GetBlockchainsByUserIdResponse::~GetBlockchainsByUserIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockchainsByUserIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockchainsByUserIdResponse::ArenaDtor(void* object) {
  GetBlockchainsByUserIdResponse* _this = reinterpret_cast< GetBlockchainsByUserIdResponse* >(object);
  (void)_this;
}
void GetBlockchainsByUserIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainsByUserIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockchainsByUserIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networks_.Clear();
  next_url_.ClearToEmpty();
  previous_url_.ClearToEmpty();
  total_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainsByUserIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_url = 3 [json_name = "nextUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.next_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_url = 4 [json_name = "previousUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.previous_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainsByUserIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_networks(i), target, stream);
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_url().data(), static_cast<int>(this->_internal_next_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.next_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_url(), target);
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_url().data(), static_cast<int>(this->_internal_previous_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse.previous_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
  return target;
}

size_t GetBlockchainsByUserIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Network networks = 1 [json_name = "networks"];
  total_size += 1UL * this->_internal_networks_size();
  for (const auto& msg : this->networks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_url());
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_url());
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockchainsByUserIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockchainsByUserIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockchainsByUserIdResponse::GetClassData() const { return &_class_data_; }

void GetBlockchainsByUserIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetBlockchainsByUserIdResponse *>(to)->MergeFrom(
      static_cast<const GetBlockchainsByUserIdResponse &>(from));
}


void GetBlockchainsByUserIdResponse::MergeFrom(const GetBlockchainsByUserIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networks_.MergeFrom(from.networks_);
  if (!from._internal_next_url().empty()) {
    _internal_set_next_url(from._internal_next_url());
  }
  if (!from._internal_previous_url().empty()) {
    _internal_set_previous_url(from._internal_previous_url());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockchainsByUserIdResponse::CopyFrom(const GetBlockchainsByUserIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetBlockchainsByUserIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainsByUserIdResponse::IsInitialized() const {
  return true;
}

void GetBlockchainsByUserIdResponse::InternalSwap(GetBlockchainsByUserIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  networks_.InternalSwap(&other->networks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_url_, GetArenaForAllocation(),
      &other->next_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_url_, GetArenaForAllocation(),
      &other->previous_url_, other->GetArenaForAllocation()
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainsByUserIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[17]);
}

// ===================================================================

class GetOrderersByNetworkIdResponse::_Internal {
 public:
};

void GetOrderersByNetworkIdResponse::clear_orderers() {
  orderers_.Clear();
}
GetOrderersByNetworkIdResponse::GetOrderersByNetworkIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  orderers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
}
GetOrderersByNetworkIdResponse::GetOrderersByNetworkIdResponse(const GetOrderersByNetworkIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orderers_(from.orderers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_url().empty()) {
    next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_url(), 
      GetArenaForAllocation());
  }
  previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_url().empty()) {
    previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_url(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
}

inline void GetOrderersByNetworkIdResponse::SharedCtor() {
next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_ = int64_t{0};
}

GetOrderersByNetworkIdResponse::~GetOrderersByNetworkIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOrderersByNetworkIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOrderersByNetworkIdResponse::ArenaDtor(void* object) {
  GetOrderersByNetworkIdResponse* _this = reinterpret_cast< GetOrderersByNetworkIdResponse* >(object);
  (void)_this;
}
void GetOrderersByNetworkIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOrderersByNetworkIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOrderersByNetworkIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderers_.Clear();
  next_url_.ClearToEmpty();
  previous_url_.ClearToEmpty();
  total_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderersByNetworkIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blockchain.network.v1alpha1.Orderer orderers = 1 [json_name = "orderers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orderers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_url = 3 [json_name = "nextUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.next_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_url = 4 [json_name = "previousUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.previous_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOrderersByNetworkIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Orderer orderers = 1 [json_name = "orderers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orderers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orderers(i), target, stream);
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_url().data(), static_cast<int>(this->_internal_next_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.next_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_url(), target);
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_url().data(), static_cast<int>(this->_internal_previous_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse.previous_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
  return target;
}

size_t GetOrderersByNetworkIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Orderer orderers = 1 [json_name = "orderers"];
  total_size += 1UL * this->_internal_orderers_size();
  for (const auto& msg : this->orderers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_url());
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_url());
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderersByNetworkIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOrderersByNetworkIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderersByNetworkIdResponse::GetClassData() const { return &_class_data_; }

void GetOrderersByNetworkIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetOrderersByNetworkIdResponse *>(to)->MergeFrom(
      static_cast<const GetOrderersByNetworkIdResponse &>(from));
}


void GetOrderersByNetworkIdResponse::MergeFrom(const GetOrderersByNetworkIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orderers_.MergeFrom(from.orderers_);
  if (!from._internal_next_url().empty()) {
    _internal_set_next_url(from._internal_next_url());
  }
  if (!from._internal_previous_url().empty()) {
    _internal_set_previous_url(from._internal_previous_url());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderersByNetworkIdResponse::CopyFrom(const GetOrderersByNetworkIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetOrderersByNetworkIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderersByNetworkIdResponse::IsInitialized() const {
  return true;
}

void GetOrderersByNetworkIdResponse::InternalSwap(GetOrderersByNetworkIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  orderers_.InternalSwap(&other->orderers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_url_, GetArenaForAllocation(),
      &other->next_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_url_, GetArenaForAllocation(),
      &other->previous_url_, other->GetArenaForAllocation()
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderersByNetworkIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[18]);
}

// ===================================================================

class GetPeersByCorporationIdResponse::_Internal {
 public:
};

void GetPeersByCorporationIdResponse::clear_peer() {
  peer_.Clear();
}
GetPeersByCorporationIdResponse::GetPeersByCorporationIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
}
GetPeersByCorporationIdResponse::GetPeersByCorporationIdResponse(const GetPeersByCorporationIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peer_(from.peer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_url().empty()) {
    next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_url(), 
      GetArenaForAllocation());
  }
  previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_url().empty()) {
    previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_url(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
}

inline void GetPeersByCorporationIdResponse::SharedCtor() {
next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_ = int64_t{0};
}

GetPeersByCorporationIdResponse::~GetPeersByCorporationIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPeersByCorporationIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPeersByCorporationIdResponse::ArenaDtor(void* object) {
  GetPeersByCorporationIdResponse* _this = reinterpret_cast< GetPeersByCorporationIdResponse* >(object);
  (void)_this;
}
void GetPeersByCorporationIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPeersByCorporationIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPeersByCorporationIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_.Clear();
  next_url_.ClearToEmpty();
  previous_url_.ClearToEmpty();
  total_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeersByCorporationIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blockchain.network.v1alpha1.Peer peer = 1 [json_name = "peer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_url = 3 [json_name = "nextUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.next_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_url = 4 [json_name = "previousUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.previous_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeersByCorporationIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Peer peer = 1 [json_name = "peer"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peer(i), target, stream);
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_url().data(), static_cast<int>(this->_internal_next_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.next_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_url(), target);
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_url().data(), static_cast<int>(this->_internal_previous_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetPeersByCorporationIdResponse.previous_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
  return target;
}

size_t GetPeersByCorporationIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Peer peer = 1 [json_name = "peer"];
  total_size += 1UL * this->_internal_peer_size();
  for (const auto& msg : this->peer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_url());
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_url());
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPeersByCorporationIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPeersByCorporationIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPeersByCorporationIdResponse::GetClassData() const { return &_class_data_; }

void GetPeersByCorporationIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetPeersByCorporationIdResponse *>(to)->MergeFrom(
      static_cast<const GetPeersByCorporationIdResponse &>(from));
}


void GetPeersByCorporationIdResponse::MergeFrom(const GetPeersByCorporationIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peer_.MergeFrom(from.peer_);
  if (!from._internal_next_url().empty()) {
    _internal_set_next_url(from._internal_next_url());
  }
  if (!from._internal_previous_url().empty()) {
    _internal_set_previous_url(from._internal_previous_url());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPeersByCorporationIdResponse::CopyFrom(const GetPeersByCorporationIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetPeersByCorporationIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeersByCorporationIdResponse::IsInitialized() const {
  return true;
}

void GetPeersByCorporationIdResponse::InternalSwap(GetPeersByCorporationIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peer_.InternalSwap(&other->peer_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_url_, GetArenaForAllocation(),
      &other->next_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_url_, GetArenaForAllocation(),
      &other->previous_url_, other->GetArenaForAllocation()
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeersByCorporationIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[19]);
}

// ===================================================================

class GetBlockchainByIdResponse::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Network& network(const GetBlockchainByIdResponse* msg);
};

const ::blockchain::network::v1alpha1::Network&
GetBlockchainByIdResponse::_Internal::network(const GetBlockchainByIdResponse* msg) {
  return *msg->network_;
}
void GetBlockchainByIdResponse::clear_network() {
  if (GetArenaForAllocation() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
GetBlockchainByIdResponse::GetBlockchainByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
}
GetBlockchainByIdResponse::GetBlockchainByIdResponse(const GetBlockchainByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network()) {
    network_ = new ::blockchain::network::v1alpha1::Network(*from.network_);
  } else {
    network_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
}

inline void GetBlockchainByIdResponse::SharedCtor() {
network_ = nullptr;
}

GetBlockchainByIdResponse::~GetBlockchainByIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockchainByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete network_;
}

void GetBlockchainByIdResponse::ArenaDtor(void* object) {
  GetBlockchainByIdResponse* _this = reinterpret_cast< GetBlockchainByIdResponse* >(object);
  (void)_this;
}
void GetBlockchainByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockchainByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  if (this->_internal_has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
  return target;
}

size_t GetBlockchainByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Network network = 1 [json_name = "network"];
  if (this->_internal_has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockchainByIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockchainByIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockchainByIdResponse::GetClassData() const { return &_class_data_; }

void GetBlockchainByIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetBlockchainByIdResponse *>(to)->MergeFrom(
      static_cast<const GetBlockchainByIdResponse &>(from));
}


void GetBlockchainByIdResponse::MergeFrom(const GetBlockchainByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_network()) {
    _internal_mutable_network()->::blockchain::network::v1alpha1::Network::MergeFrom(from._internal_network());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockchainByIdResponse::CopyFrom(const GetBlockchainByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetBlockchainByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainByIdResponse::IsInitialized() const {
  return true;
}

void GetBlockchainByIdResponse::InternalSwap(GetBlockchainByIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(network_, other->network_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainByIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[20]);
}

// ===================================================================

class GetCorporationsByBlockchainIdResponse::_Internal {
 public:
};

void GetCorporationsByBlockchainIdResponse::clear_corporations() {
  corporations_.Clear();
}
GetCorporationsByBlockchainIdResponse::GetCorporationsByBlockchainIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  corporations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
}
GetCorporationsByBlockchainIdResponse::GetCorporationsByBlockchainIdResponse(const GetCorporationsByBlockchainIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      corporations_(from.corporations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_url().empty()) {
    next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_url(), 
      GetArenaForAllocation());
  }
  previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_url().empty()) {
    previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_url(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
}

inline void GetCorporationsByBlockchainIdResponse::SharedCtor() {
next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_ = int64_t{0};
}

GetCorporationsByBlockchainIdResponse::~GetCorporationsByBlockchainIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCorporationsByBlockchainIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCorporationsByBlockchainIdResponse::ArenaDtor(void* object) {
  GetCorporationsByBlockchainIdResponse* _this = reinterpret_cast< GetCorporationsByBlockchainIdResponse* >(object);
  (void)_this;
}
void GetCorporationsByBlockchainIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCorporationsByBlockchainIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCorporationsByBlockchainIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corporations_.Clear();
  next_url_.ClearToEmpty();
  previous_url_.ClearToEmpty();
  total_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCorporationsByBlockchainIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blockchain.network.v1alpha1.Corporation corporations = 1 [json_name = "corporations"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_corporations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_url = 3 [json_name = "nextUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.next_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_url = 4 [json_name = "previousUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.previous_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCorporationsByBlockchainIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Corporation corporations = 1 [json_name = "corporations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_corporations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_corporations(i), target, stream);
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_url().data(), static_cast<int>(this->_internal_next_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.next_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_url(), target);
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_url().data(), static_cast<int>(this->_internal_previous_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse.previous_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
  return target;
}

size_t GetCorporationsByBlockchainIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blockchain.network.v1alpha1.Corporation corporations = 1 [json_name = "corporations"];
  total_size += 1UL * this->_internal_corporations_size();
  for (const auto& msg : this->corporations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_url());
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_url());
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCorporationsByBlockchainIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCorporationsByBlockchainIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCorporationsByBlockchainIdResponse::GetClassData() const { return &_class_data_; }

void GetCorporationsByBlockchainIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetCorporationsByBlockchainIdResponse *>(to)->MergeFrom(
      static_cast<const GetCorporationsByBlockchainIdResponse &>(from));
}


void GetCorporationsByBlockchainIdResponse::MergeFrom(const GetCorporationsByBlockchainIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corporations_.MergeFrom(from.corporations_);
  if (!from._internal_next_url().empty()) {
    _internal_set_next_url(from._internal_next_url());
  }
  if (!from._internal_previous_url().empty()) {
    _internal_set_previous_url(from._internal_previous_url());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCorporationsByBlockchainIdResponse::CopyFrom(const GetCorporationsByBlockchainIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.GetCorporationsByBlockchainIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCorporationsByBlockchainIdResponse::IsInitialized() const {
  return true;
}

void GetCorporationsByBlockchainIdResponse::InternalSwap(GetCorporationsByBlockchainIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  corporations_.InternalSwap(&other->corporations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_url_, GetArenaForAllocation(),
      &other->next_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_url_, GetArenaForAllocation(),
      &other->previous_url_, other->GetArenaForAllocation()
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCorporationsByBlockchainIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[21]);
}

// ===================================================================

class CreateCorporationResponse::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Corporation& corporation(const CreateCorporationResponse* msg);
};

const ::blockchain::network::v1alpha1::Corporation&
CreateCorporationResponse::_Internal::corporation(const CreateCorporationResponse* msg) {
  return *msg->corporation_;
}
void CreateCorporationResponse::clear_corporation() {
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
}
CreateCorporationResponse::CreateCorporationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.CreateCorporationResponse)
}
CreateCorporationResponse::CreateCorporationResponse(const CreateCorporationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_corporation()) {
    corporation_ = new ::blockchain::network::v1alpha1::Corporation(*from.corporation_);
  } else {
    corporation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.CreateCorporationResponse)
}

inline void CreateCorporationResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
corporation_ = nullptr;
}

CreateCorporationResponse::~CreateCorporationResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.CreateCorporationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCorporationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete corporation_;
}

void CreateCorporationResponse::ArenaDtor(void* object) {
  CreateCorporationResponse* _this = reinterpret_cast< CreateCorporationResponse* >(object);
  (void)_this;
}
void CreateCorporationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCorporationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCorporationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.CreateCorporationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && corporation_ != nullptr) {
    delete corporation_;
  }
  corporation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCorporationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_corporation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.CreateCorporationResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCorporationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.CreateCorporationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::corporation(this), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.CreateCorporationResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.CreateCorporationResponse)
  return target;
}

size_t CreateCorporationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.CreateCorporationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .blockchain.network.v1alpha1.Corporation corporation = 1 [json_name = "corporation"];
  if (this->_internal_has_corporation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corporation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCorporationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCorporationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCorporationResponse::GetClassData() const { return &_class_data_; }

void CreateCorporationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateCorporationResponse *>(to)->MergeFrom(
      static_cast<const CreateCorporationResponse &>(from));
}


void CreateCorporationResponse::MergeFrom(const CreateCorporationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.CreateCorporationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_corporation()) {
    _internal_mutable_corporation()->::blockchain::network::v1alpha1::Corporation::MergeFrom(from._internal_corporation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCorporationResponse::CopyFrom(const CreateCorporationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.CreateCorporationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCorporationResponse::IsInitialized() const {
  return true;
}

void CreateCorporationResponse::InternalSwap(CreateCorporationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(corporation_, other->corporation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCorporationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[22]);
}

// ===================================================================

class SendInvitationResponse::_Internal {
 public:
  static const ::blockchain::network::v1alpha1::Invitation& invitation(const SendInvitationResponse* msg);
};

const ::blockchain::network::v1alpha1::Invitation&
SendInvitationResponse::_Internal::invitation(const SendInvitationResponse* msg) {
  return *msg->invitation_;
}
void SendInvitationResponse::clear_invitation() {
  if (GetArenaForAllocation() == nullptr && invitation_ != nullptr) {
    delete invitation_;
  }
  invitation_ = nullptr;
}
SendInvitationResponse::SendInvitationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.network.v1alpha1.SendInvitationResponse)
}
SendInvitationResponse::SendInvitationResponse(const SendInvitationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_invitation()) {
    invitation_ = new ::blockchain::network::v1alpha1::Invitation(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.network.v1alpha1.SendInvitationResponse)
}

inline void SendInvitationResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invitation_ = nullptr;
}

SendInvitationResponse::~SendInvitationResponse() {
  // @@protoc_insertion_point(destructor:blockchain.network.v1alpha1.SendInvitationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendInvitationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete invitation_;
}

void SendInvitationResponse::ArenaDtor(void* object) {
  SendInvitationResponse* _this = reinterpret_cast< SendInvitationResponse* >(object);
  (void)_this;
}
void SendInvitationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendInvitationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendInvitationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.network.v1alpha1.SendInvitationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && invitation_ != nullptr) {
    delete invitation_;
  }
  invitation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendInvitationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.network.v1alpha1.SendInvitationResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendInvitationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.network.v1alpha1.SendInvitationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  if (this->_internal_has_invitation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::invitation(this), target, stream);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.network.v1alpha1.SendInvitationResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.network.v1alpha1.SendInvitationResponse)
  return target;
}

size_t SendInvitationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.network.v1alpha1.SendInvitationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .blockchain.network.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  if (this->_internal_has_invitation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendInvitationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendInvitationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendInvitationResponse::GetClassData() const { return &_class_data_; }

void SendInvitationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendInvitationResponse *>(to)->MergeFrom(
      static_cast<const SendInvitationResponse &>(from));
}


void SendInvitationResponse::MergeFrom(const SendInvitationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.network.v1alpha1.SendInvitationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_invitation()) {
    _internal_mutable_invitation()->::blockchain::network::v1alpha1::Invitation::MergeFrom(from._internal_invitation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendInvitationResponse::CopyFrom(const SendInvitationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.network.v1alpha1.SendInvitationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationResponse::IsInitialized() const {
  return true;
}

void SendInvitationResponse::InternalSwap(SendInvitationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(invitation_, other->invitation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendInvitationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_getter, &descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::CreateNetworkRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::CreateNetworkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::CreateNetworkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::AddPeerToCorporationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::AddPeerToCorporationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::CreateChannelRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::CreateChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::CreateChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetBlockchainsRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetBlockchainsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetBlockchainsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetOrderersByNetworkIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetBlockchainByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetBlockchainByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::CreateCorporationRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::CreateCorporationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::CreateCorporationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::SendInvitationRequest* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::SendInvitationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::SendInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::CreateNetworkResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::CreateNetworkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::CreateNetworkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::CreateChannelResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::CreateChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::CreateChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetBlockchainsResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetBlockchainsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetBlockchainsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetOrderersByNetworkIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::CreateCorporationResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::CreateCorporationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::CreateCorporationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::network::v1alpha1::SendInvitationResponse* Arena::CreateMaybeMessage< ::blockchain::network::v1alpha1::SendInvitationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::network::v1alpha1::SendInvitationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
