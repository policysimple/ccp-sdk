// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockchain/network/v1alpha1/network_api.proto
#ifndef GRPC_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto__INCLUDED
#define GRPC_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto__INCLUDED

#include "blockchain/network/v1alpha1/network_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace blockchain {
namespace network {
namespace v1alpha1 {

class BlockchainAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "blockchain.network.v1alpha1.BlockchainAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateNetworkResponse>> AsyncCreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateNetworkResponse>>(AsyncCreateNetworkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateNetworkResponse>> PrepareAsyncCreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateNetworkResponse>>(PrepareAsyncCreateNetworkRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>> AsyncAddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>>(AsyncAddPeerToCorporationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>> PrepareAsyncAddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>>(PrepareAsyncAddPeerToCorporationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsResponse>> AsyncGetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsResponse>>(AsyncGetBlockchainsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsResponse>> PrepareAsyncGetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsResponse>>(PrepareAsyncGetBlockchainsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>> AsyncGetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>>(AsyncGetBlockchainsByUserIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>> PrepareAsyncGetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>>(PrepareAsyncGetBlockchainsByUserIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>> AsyncGetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>>(AsyncGetBlockchainByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>> PrepareAsyncGetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>>(PrepareAsyncGetBlockchainByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>> AsyncGetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>>(AsyncGetCorporationsByBlockchainIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>> PrepareAsyncGetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>>(PrepareAsyncGetCorporationsByBlockchainIdRaw(context, request, cq));
    }
    virtual ::grpc::Status SendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::blockchain::network::v1alpha1::SendInvitationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::SendInvitationResponse>> AsyncSendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::SendInvitationResponse>>(AsyncSendInvitationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::SendInvitationResponse>> PrepareAsyncSendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::SendInvitationResponse>>(PrepareAsyncSendInvitationRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateCorporationResponse>> AsyncCreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateCorporationResponse>>(AsyncCreateCorporationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateCorporationResponse>> PrepareAsyncCreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateCorporationResponse>>(PrepareAsyncCreateCorporationRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::blockchain::network::v1alpha1::CreateChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateChannelResponse>> AsyncCreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateChannelResponse>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateChannelResponse>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateChannelResponse>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>> AsyncGetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>>(AsyncGetPeersByCorporationIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>> PrepareAsyncGetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>>(PrepareAsyncGetPeersByCorporationIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>> AsyncGetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>>(AsyncGetOrdererByNetworkIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>> PrepareAsyncGetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>>(PrepareAsyncGetOrdererByNetworkIdRaw(context, request, cq));
    }
    virtual ::grpc::Status AddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>> AsyncAddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>>(AsyncAddOrdererByNetworkIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>> PrepareAsyncAddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>>(PrepareAsyncAddOrdererByNetworkIdRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::blockchain::network::v1alpha1::SendInvitationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::blockchain::network::v1alpha1::CreateChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateNetworkResponse>* AsyncCreateNetworkRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateNetworkResponse>* PrepareAsyncCreateNetworkRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>* AsyncAddPeerToCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>* PrepareAsyncAddPeerToCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsResponse>* AsyncGetBlockchainsRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsResponse>* PrepareAsyncGetBlockchainsRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>* AsyncGetBlockchainsByUserIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>* PrepareAsyncGetBlockchainsByUserIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>* AsyncGetBlockchainByIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>* PrepareAsyncGetBlockchainByIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>* AsyncGetCorporationsByBlockchainIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>* PrepareAsyncGetCorporationsByBlockchainIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::SendInvitationResponse>* AsyncSendInvitationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::SendInvitationResponse>* PrepareAsyncSendInvitationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateCorporationResponse>* AsyncCreateCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateCorporationResponse>* PrepareAsyncCreateCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateChannelResponse>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::CreateChannelResponse>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>* AsyncGetPeersByCorporationIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>* PrepareAsyncGetPeersByCorporationIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>* AsyncGetOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>* PrepareAsyncGetOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>* AsyncAddOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>* PrepareAsyncAddOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateNetworkResponse>> AsyncCreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateNetworkResponse>>(AsyncCreateNetworkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateNetworkResponse>> PrepareAsyncCreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateNetworkResponse>>(PrepareAsyncCreateNetworkRaw(context, request, cq));
    }
    ::grpc::Status AddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>> AsyncAddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>>(AsyncAddPeerToCorporationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>> PrepareAsyncAddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>>(PrepareAsyncAddPeerToCorporationRaw(context, request, cq));
    }
    ::grpc::Status GetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsResponse>> AsyncGetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsResponse>>(AsyncGetBlockchainsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsResponse>> PrepareAsyncGetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsResponse>>(PrepareAsyncGetBlockchainsRaw(context, request, cq));
    }
    ::grpc::Status GetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>> AsyncGetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>>(AsyncGetBlockchainsByUserIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>> PrepareAsyncGetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>>(PrepareAsyncGetBlockchainsByUserIdRaw(context, request, cq));
    }
    ::grpc::Status GetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>> AsyncGetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>>(AsyncGetBlockchainByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>> PrepareAsyncGetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>>(PrepareAsyncGetBlockchainByIdRaw(context, request, cq));
    }
    ::grpc::Status GetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>> AsyncGetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>>(AsyncGetCorporationsByBlockchainIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>> PrepareAsyncGetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>>(PrepareAsyncGetCorporationsByBlockchainIdRaw(context, request, cq));
    }
    ::grpc::Status SendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::blockchain::network::v1alpha1::SendInvitationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::SendInvitationResponse>> AsyncSendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::SendInvitationResponse>>(AsyncSendInvitationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::SendInvitationResponse>> PrepareAsyncSendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::SendInvitationResponse>>(PrepareAsyncSendInvitationRaw(context, request, cq));
    }
    ::grpc::Status CreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateCorporationResponse>> AsyncCreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateCorporationResponse>>(AsyncCreateCorporationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateCorporationResponse>> PrepareAsyncCreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateCorporationResponse>>(PrepareAsyncCreateCorporationRaw(context, request, cq));
    }
    ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::blockchain::network::v1alpha1::CreateChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateChannelResponse>> AsyncCreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateChannelResponse>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateChannelResponse>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateChannelResponse>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    ::grpc::Status GetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>> AsyncGetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>>(AsyncGetPeersByCorporationIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>> PrepareAsyncGetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>>(PrepareAsyncGetPeersByCorporationIdRaw(context, request, cq));
    }
    ::grpc::Status GetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>> AsyncGetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>>(AsyncGetOrdererByNetworkIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>> PrepareAsyncGetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>>(PrepareAsyncGetOrdererByNetworkIdRaw(context, request, cq));
    }
    ::grpc::Status AddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>> AsyncAddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>>(AsyncAddOrdererByNetworkIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>> PrepareAsyncAddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>>(PrepareAsyncAddOrdererByNetworkIdRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateNetwork(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response, std::function<void(::grpc::Status)>) override;
      void AddPeerToCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockchains(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockchainsByUserId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockchainById(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCorporationsByBlockchainId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response, std::function<void(::grpc::Status)>) override;
      void SendInvitation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::blockchain::network::v1alpha1::SendInvitationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCorporation(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateChannel(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::blockchain::network::v1alpha1::CreateChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPeersByCorporationId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response, std::function<void(::grpc::Status)>) override;
      void AddOrdererByNetworkId(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateNetworkResponse>* AsyncCreateNetworkRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateNetworkResponse>* PrepareAsyncCreateNetworkRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>* AsyncAddPeerToCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>* PrepareAsyncAddPeerToCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsResponse>* AsyncGetBlockchainsRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsResponse>* PrepareAsyncGetBlockchainsRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>* AsyncGetBlockchainsByUserIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>* PrepareAsyncGetBlockchainsByUserIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>* AsyncGetBlockchainByIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>* PrepareAsyncGetBlockchainByIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>* AsyncGetCorporationsByBlockchainIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>* PrepareAsyncGetCorporationsByBlockchainIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::SendInvitationResponse>* AsyncSendInvitationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::SendInvitationResponse>* PrepareAsyncSendInvitationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateCorporationResponse>* AsyncCreateCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateCorporationResponse>* PrepareAsyncCreateCorporationRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateChannelResponse>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::CreateChannelResponse>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>* AsyncGetPeersByCorporationIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>* PrepareAsyncGetPeersByCorporationIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>* AsyncGetOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>* PrepareAsyncGetOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>* AsyncAddOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>* PrepareAsyncAddOrdererByNetworkIdRaw(::grpc::ClientContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNetwork_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPeerToCorporation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockchains_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockchainsByUserId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockchainById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCorporationsByBlockchainId_;
    const ::grpc::internal::RpcMethod rpcmethod_SendInvitation_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCorporation_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeersByCorporationId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrdererByNetworkId_;
    const ::grpc::internal::RpcMethod rpcmethod_AddOrdererByNetworkId_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateNetwork(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response);
    virtual ::grpc::Status AddPeerToCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response);
    virtual ::grpc::Status GetBlockchains(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response);
    virtual ::grpc::Status GetBlockchainsByUserId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response);
    virtual ::grpc::Status GetBlockchainById(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response);
    virtual ::grpc::Status GetCorporationsByBlockchainId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response);
    virtual ::grpc::Status SendInvitation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::blockchain::network::v1alpha1::SendInvitationResponse* response);
    virtual ::grpc::Status CreateCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response);
    virtual ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::blockchain::network::v1alpha1::CreateChannelResponse* response);
    virtual ::grpc::Status GetPeersByCorporationId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response);
    virtual ::grpc::Status GetOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response);
    virtual ::grpc::Status AddOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateNetwork() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNetwork(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNetwork(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::CreateNetworkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPeerToCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddPeerToCorporation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddPeerToCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerToCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeerToCorporation(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockchains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockchains() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBlockchains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchains(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockchains(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::GetBlockchainsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockchainsByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockchainsByUserId() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBlockchainsByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchainsByUserId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockchainsByUserId(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockchainById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBlockchainById() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetBlockchainById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchainById(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockchainById(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCorporationsByBlockchainId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCorporationsByBlockchainId() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetCorporationsByBlockchainId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCorporationsByBlockchainId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCorporationsByBlockchainId(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendInvitation() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SendInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInvitation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::blockchain::network::v1alpha1::SendInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendInvitation(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::SendInvitationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCorporation() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCorporation(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::CreateCorporationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateChannel() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::blockchain::network::v1alpha1::CreateChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::CreateChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeersByCorporationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeersByCorporationId() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetPeersByCorporationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeersByCorporationId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeersByCorporationId(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOrdererByNetworkId() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrdererByNetworkId(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddOrdererByNetworkId() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_AddOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOrdererByNetworkId(::grpc::ServerContext* context, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateNetwork<WithAsyncMethod_AddPeerToCorporation<WithAsyncMethod_GetBlockchains<WithAsyncMethod_GetBlockchainsByUserId<WithAsyncMethod_GetBlockchainById<WithAsyncMethod_GetCorporationsByBlockchainId<WithAsyncMethod_SendInvitation<WithAsyncMethod_CreateCorporation<WithAsyncMethod_CreateChannel<WithAsyncMethod_GetPeersByCorporationId<WithAsyncMethod_GetOrdererByNetworkId<WithAsyncMethod_AddOrdererByNetworkId<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateNetwork() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNetwork(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPeerToCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddPeerToCorporation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddPeerToCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerToCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockchains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockchains() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBlockchains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchains(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockchainsByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockchainsByUserId() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBlockchainsByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchainsByUserId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockchainById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBlockchainById() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetBlockchainById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchainById(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCorporationsByBlockchainId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCorporationsByBlockchainId() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetCorporationsByBlockchainId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCorporationsByBlockchainId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendInvitation() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SendInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInvitation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::blockchain::network::v1alpha1::SendInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCorporation() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateChannel() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::blockchain::network::v1alpha1::CreateChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeersByCorporationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeersByCorporationId() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetPeersByCorporationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeersByCorporationId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOrdererByNetworkId() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddOrdererByNetworkId() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_AddOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateNetwork() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNetwork(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNetwork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPeerToCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddPeerToCorporation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddPeerToCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerToCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeerToCorporation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockchains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetBlockchains() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBlockchains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchains(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockchains(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockchainsByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetBlockchainsByUserId() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBlockchainsByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchainsByUserId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockchainsByUserId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockchainById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetBlockchainById() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetBlockchainById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockchainById(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockchainById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCorporationsByBlockchainId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetCorporationsByBlockchainId() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetCorporationsByBlockchainId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCorporationsByBlockchainId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCorporationsByBlockchainId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendInvitation() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SendInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInvitation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::blockchain::network::v1alpha1::SendInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendInvitation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateCorporation() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CreateCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCorporation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateChannel() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::blockchain::network::v1alpha1::CreateChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeersByCorporationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPeersByCorporationId() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetPeersByCorporationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeersByCorporationId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeersByCorporationId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOrdererByNetworkId() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrdererByNetworkId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddOrdererByNetworkId() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_AddOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOrdererByNetworkId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateNetwork() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::CreateNetworkRequest, ::blockchain::network::v1alpha1::CreateNetworkResponse>(std::bind(&WithStreamedUnaryMethod_CreateNetwork<BaseClass>::StreamedCreateNetwork, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNetwork(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateNetworkRequest* request, ::blockchain::network::v1alpha1::CreateNetworkResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNetwork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::CreateNetworkRequest,::blockchain::network::v1alpha1::CreateNetworkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPeerToCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddPeerToCorporation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::AddPeerToCorporationRequest, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse>(std::bind(&WithStreamedUnaryMethod_AddPeerToCorporation<BaseClass>::StreamedAddPeerToCorporation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddPeerToCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPeerToCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddPeerToCorporationRequest* request, ::blockchain::network::v1alpha1::AddPeerToCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPeerToCorporation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::AddPeerToCorporationRequest,::blockchain::network::v1alpha1::AddPeerToCorporationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockchains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockchains() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::GetBlockchainsRequest, ::blockchain::network::v1alpha1::GetBlockchainsResponse>(std::bind(&WithStreamedUnaryMethod_GetBlockchains<BaseClass>::StreamedGetBlockchains, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockchains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockchains(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockchains(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::GetBlockchainsRequest,::blockchain::network::v1alpha1::GetBlockchainsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockchainsByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockchainsByUserId() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>(std::bind(&WithStreamedUnaryMethod_GetBlockchainsByUserId<BaseClass>::StreamedGetBlockchainsByUserId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockchainsByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockchainsByUserId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockchainsByUserId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::GetBlockchainsByUserIdRequest,::blockchain::network::v1alpha1::GetBlockchainsByUserIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockchainById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBlockchainById() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::GetBlockchainByIdRequest, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse>(std::bind(&WithStreamedUnaryMethod_GetBlockchainById<BaseClass>::StreamedGetBlockchainById, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBlockchainById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockchainById(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetBlockchainByIdRequest* request, ::blockchain::network::v1alpha1::GetBlockchainByIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockchainById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::GetBlockchainByIdRequest,::blockchain::network::v1alpha1::GetBlockchainByIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCorporationsByBlockchainId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCorporationsByBlockchainId() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>(std::bind(&WithStreamedUnaryMethod_GetCorporationsByBlockchainId<BaseClass>::StreamedGetCorporationsByBlockchainId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCorporationsByBlockchainId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCorporationsByBlockchainId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest* request, ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCorporationsByBlockchainId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdRequest,::blockchain::network::v1alpha1::GetCorporationsByBlockchainIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendInvitation() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::SendInvitationRequest, ::blockchain::network::v1alpha1::SendInvitationResponse>(std::bind(&WithStreamedUnaryMethod_SendInvitation<BaseClass>::StreamedSendInvitation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendInvitation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::SendInvitationRequest* request, ::blockchain::network::v1alpha1::SendInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendInvitation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::SendInvitationRequest,::blockchain::network::v1alpha1::SendInvitationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCorporation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCorporation() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::CreateCorporationRequest, ::blockchain::network::v1alpha1::CreateCorporationResponse>(std::bind(&WithStreamedUnaryMethod_CreateCorporation<BaseClass>::StreamedCreateCorporation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCorporation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCorporation(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateCorporationRequest* request, ::blockchain::network::v1alpha1::CreateCorporationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCorporation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::CreateCorporationRequest,::blockchain::network::v1alpha1::CreateCorporationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateChannel() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::CreateChannelRequest, ::blockchain::network::v1alpha1::CreateChannelResponse>(std::bind(&WithStreamedUnaryMethod_CreateChannel<BaseClass>::StreamedCreateChannel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::CreateChannelRequest* request, ::blockchain::network::v1alpha1::CreateChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::CreateChannelRequest,::blockchain::network::v1alpha1::CreateChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeersByCorporationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeersByCorporationId() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>(std::bind(&WithStreamedUnaryMethod_GetPeersByCorporationId<BaseClass>::StreamedGetPeersByCorporationId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeersByCorporationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeersByCorporationId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest* request, ::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeersByCorporationId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::GetPeersByCorporationIdRequest,::blockchain::network::v1alpha1::GetPeersByCorporationIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOrdererByNetworkId() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>(std::bind(&WithStreamedUnaryMethod_GetOrdererByNetworkId<BaseClass>::StreamedGetOrdererByNetworkId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrdererByNetworkId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::GetOrdererByNetworkIdRequest,::blockchain::network::v1alpha1::GetOrdererByNetworkIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddOrdererByNetworkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddOrdererByNetworkId() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>(std::bind(&WithStreamedUnaryMethod_AddOrdererByNetworkId<BaseClass>::StreamedAddOrdererByNetworkId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddOrdererByNetworkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddOrdererByNetworkId(::grpc::ServerContext* context, const ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest* request, ::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddOrdererByNetworkId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::network::v1alpha1::AddOrdererByNetworkIdRequest,::blockchain::network::v1alpha1::AddOrdererByNetworkIdResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateNetwork<WithStreamedUnaryMethod_AddPeerToCorporation<WithStreamedUnaryMethod_GetBlockchains<WithStreamedUnaryMethod_GetBlockchainsByUserId<WithStreamedUnaryMethod_GetBlockchainById<WithStreamedUnaryMethod_GetCorporationsByBlockchainId<WithStreamedUnaryMethod_SendInvitation<WithStreamedUnaryMethod_CreateCorporation<WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_GetPeersByCorporationId<WithStreamedUnaryMethod_GetOrdererByNetworkId<WithStreamedUnaryMethod_AddOrdererByNetworkId<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateNetwork<WithStreamedUnaryMethod_AddPeerToCorporation<WithStreamedUnaryMethod_GetBlockchains<WithStreamedUnaryMethod_GetBlockchainsByUserId<WithStreamedUnaryMethod_GetBlockchainById<WithStreamedUnaryMethod_GetCorporationsByBlockchainId<WithStreamedUnaryMethod_SendInvitation<WithStreamedUnaryMethod_CreateCorporation<WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_GetPeersByCorporationId<WithStreamedUnaryMethod_GetOrdererByNetworkId<WithStreamedUnaryMethod_AddOrdererByNetworkId<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain


#endif  // GRPC_blockchain_2fnetwork_2fv1alpha1_2fnetwork_5fapi_2eproto__INCLUDED
