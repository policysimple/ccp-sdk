// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/network/v1alpha1/network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto;
namespace blockchain {
namespace network {
namespace v1alpha1 {
class Channel;
struct ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class Corporation;
struct CorporationDefaultTypeInternal;
extern CorporationDefaultTypeInternal _Corporation_default_instance_;
class Invitation;
struct InvitationDefaultTypeInternal;
extern InvitationDefaultTypeInternal _Invitation_default_instance_;
class Network;
struct NetworkDefaultTypeInternal;
extern NetworkDefaultTypeInternal _Network_default_instance_;
class Orderer;
struct OrdererDefaultTypeInternal;
extern OrdererDefaultTypeInternal _Orderer_default_instance_;
class Peer;
struct PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::network::v1alpha1::Channel* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::Channel>(Arena*);
template<> ::blockchain::network::v1alpha1::Corporation* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::Corporation>(Arena*);
template<> ::blockchain::network::v1alpha1::Invitation* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::Invitation>(Arena*);
template<> ::blockchain::network::v1alpha1::Network* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::Network>(Arena*);
template<> ::blockchain::network::v1alpha1::Orderer* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::Orderer>(Arena*);
template<> ::blockchain::network::v1alpha1::Peer* Arena::CreateMaybeMessage<::blockchain::network::v1alpha1::Peer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace network {
namespace v1alpha1 {

// ===================================================================

class Network final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.Network) */ {
 public:
  inline Network() : Network(nullptr) {}
  ~Network() override;
  explicit constexpr Network(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Network(const Network& from);
  Network(Network&& from) noexcept
    : Network() {
    *this = ::std::move(from);
  }

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline Network& operator=(Network&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Network& default_instance() {
    return *internal_default_instance();
  }
  static inline const Network* internal_default_instance() {
    return reinterpret_cast<const Network*>(
               &_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Network& a, Network& b) {
    a.Swap(&b);
  }
  inline void Swap(Network* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Network* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Network* New() const final {
    return new Network();
  }

  Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Network>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Network& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Network& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.Network";
  }
  protected:
  explicit Network(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorporationsFieldNumber = 10,
    kIdFieldNumber = 1,
    kNetworkNameFieldNumber = 2,
    kFrameworkFieldNumber = 3,
    kTypeFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kStatusFieldNumber = 6,
    kErrorDetailsFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kUpdatedAtFieldNumber = 9,
    kCcpOrganizationIdFieldNumber = 11,
  };
  // repeated .blockchain.network.v1alpha1.Corporation corporations = 10 [json_name = "corporations"];
  int corporations_size() const;
  private:
  int _internal_corporations_size() const;
  public:
  void clear_corporations();
  ::blockchain::network::v1alpha1::Corporation* mutable_corporations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >*
      mutable_corporations();
  private:
  const ::blockchain::network::v1alpha1::Corporation& _internal_corporations(int index) const;
  ::blockchain::network::v1alpha1::Corporation* _internal_add_corporations();
  public:
  const ::blockchain::network::v1alpha1::Corporation& corporations(int index) const;
  ::blockchain::network::v1alpha1::Corporation* add_corporations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >&
      corporations() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string network_name = 2 [json_name = "networkName"];
  void clear_network_name();
  const std::string& network_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_network_name();
  void set_allocated_network_name(std::string* network_name);
  private:
  const std::string& _internal_network_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_name(const std::string& value);
  std::string* _internal_mutable_network_name();
  public:

  // string framework = 3 [json_name = "framework"];
  void clear_framework();
  const std::string& framework() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_framework(ArgT0&& arg0, ArgT... args);
  std::string* mutable_framework();
  PROTOBUF_MUST_USE_RESULT std::string* release_framework();
  void set_allocated_framework(std::string* framework);
  private:
  const std::string& _internal_framework() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_framework(const std::string& value);
  std::string* _internal_mutable_framework();
  public:

  // string type = 4 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string user_id = 5 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string status = 6 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string error_details = 7 [json_name = "errorDetails"];
  void clear_error_details();
  const std::string& error_details() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_details(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_details();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_details();
  void set_allocated_error_details(std::string* error_details);
  private:
  const std::string& _internal_error_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_details(const std::string& value);
  std::string* _internal_mutable_error_details();
  public:

  // string created_at = 8 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 9 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // string ccp_organization_id = 11 [json_name = "ccpOrganizationId"];
  void clear_ccp_organization_id();
  const std::string& ccp_organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccp_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccp_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccp_organization_id();
  void set_allocated_ccp_organization_id(std::string* ccp_organization_id);
  private:
  const std::string& _internal_ccp_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccp_organization_id(const std::string& value);
  std::string* _internal_mutable_ccp_organization_id();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.Network)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation > corporations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr framework_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccp_organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Corporation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.Corporation) */ {
 public:
  inline Corporation() : Corporation(nullptr) {}
  ~Corporation() override;
  explicit constexpr Corporation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Corporation(const Corporation& from);
  Corporation(Corporation&& from) noexcept
    : Corporation() {
    *this = ::std::move(from);
  }

  inline Corporation& operator=(const Corporation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Corporation& operator=(Corporation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Corporation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Corporation* internal_default_instance() {
    return reinterpret_cast<const Corporation*>(
               &_Corporation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Corporation& a, Corporation& b) {
    a.Swap(&b);
  }
  inline void Swap(Corporation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Corporation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Corporation* New() const final {
    return new Corporation();
  }

  Corporation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Corporation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Corporation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Corporation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Corporation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.Corporation";
  }
  protected:
  explicit Corporation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 7,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kDomainFieldNumber = 3,
    kAdminPasswordFieldNumber = 4,
    kAdminUserFieldNumber = 5,
    kBlockchainIdFieldNumber = 6,
    kStatusFieldNumber = 8,
    kErrorDetailsFieldNumber = 9,
    kCreatedAtFieldNumber = 10,
    kUpdatedAtFieldNumber = 11,
    kNameCaFieldNumber = 12,
    kNameMspFieldNumber = 13,
  };
  // repeated .blockchain.network.v1alpha1.Peer peers = 7 [json_name = "peers"];
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::blockchain::network::v1alpha1::Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >*
      mutable_peers();
  private:
  const ::blockchain::network::v1alpha1::Peer& _internal_peers(int index) const;
  ::blockchain::network::v1alpha1::Peer* _internal_add_peers();
  public:
  const ::blockchain::network::v1alpha1::Peer& peers(int index) const;
  ::blockchain::network::v1alpha1::Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >&
      peers() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string domain = 3 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_MUST_USE_RESULT std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string admin_password = 4 [json_name = "adminPassword"];
  void clear_admin_password();
  const std::string& admin_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_password();
  void set_allocated_admin_password(std::string* admin_password);
  private:
  const std::string& _internal_admin_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_password(const std::string& value);
  std::string* _internal_mutable_admin_password();
  public:

  // string admin_user = 5 [json_name = "adminUser"];
  void clear_admin_user();
  const std::string& admin_user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_user();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_user();
  void set_allocated_admin_user(std::string* admin_user);
  private:
  const std::string& _internal_admin_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_user(const std::string& value);
  std::string* _internal_mutable_admin_user();
  public:

  // string blockchain_id = 6 [json_name = "blockchainId"];
  void clear_blockchain_id();
  const std::string& blockchain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockchain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockchain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_blockchain_id();
  void set_allocated_blockchain_id(std::string* blockchain_id);
  private:
  const std::string& _internal_blockchain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockchain_id(const std::string& value);
  std::string* _internal_mutable_blockchain_id();
  public:

  // string status = 8 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string error_details = 9 [json_name = "errorDetails"];
  void clear_error_details();
  const std::string& error_details() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_details(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_details();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_details();
  void set_allocated_error_details(std::string* error_details);
  private:
  const std::string& _internal_error_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_details(const std::string& value);
  std::string* _internal_mutable_error_details();
  public:

  // string created_at = 10 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 11 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // string name_ca = 12 [json_name = "nameCa"];
  void clear_name_ca();
  const std::string& name_ca() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_ca(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_ca();
  PROTOBUF_MUST_USE_RESULT std::string* release_name_ca();
  void set_allocated_name_ca(std::string* name_ca);
  private:
  const std::string& _internal_name_ca() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_ca(const std::string& value);
  std::string* _internal_mutable_name_ca();
  public:

  // string name_msp = 13 [json_name = "nameMsp"];
  void clear_name_msp();
  const std::string& name_msp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_msp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_msp();
  PROTOBUF_MUST_USE_RESULT std::string* release_name_msp();
  void set_allocated_name_msp(std::string* name_msp);
  private:
  const std::string& _internal_name_msp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_msp(const std::string& value);
  std::string* _internal_mutable_name_msp();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.Corporation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer > peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockchain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_ca_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_msp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Peer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.Peer) */ {
 public:
  inline Peer() : Peer(nullptr) {}
  ~Peer() override;
  explicit constexpr Peer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Peer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const final {
    return new Peer();
  }

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Peer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Peer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.Peer";
  }
  protected:
  explicit Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kStatusFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
    kUpdatedAtFieldNumber = 6,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string status = 4 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string created_at = 5 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 6 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Orderer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.Orderer) */ {
 public:
  inline Orderer() : Orderer(nullptr) {}
  ~Orderer() override;
  explicit constexpr Orderer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orderer(const Orderer& from);
  Orderer(Orderer&& from) noexcept
    : Orderer() {
    *this = ::std::move(from);
  }

  inline Orderer& operator=(const Orderer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orderer& operator=(Orderer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Orderer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Orderer* internal_default_instance() {
    return reinterpret_cast<const Orderer*>(
               &_Orderer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Orderer& a, Orderer& b) {
    a.Swap(&b);
  }
  inline void Swap(Orderer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orderer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orderer* New() const final {
    return new Orderer();
  }

  Orderer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orderer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Orderer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Orderer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orderer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.Orderer";
  }
  protected:
  explicit Orderer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kBlockchainIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kStatusFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string blockchain_id = 3 [json_name = "blockchainId"];
  void clear_blockchain_id();
  const std::string& blockchain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockchain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockchain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_blockchain_id();
  void set_allocated_blockchain_id(std::string* blockchain_id);
  private:
  const std::string& _internal_blockchain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockchain_id(const std::string& value);
  std::string* _internal_mutable_blockchain_id();
  public:

  // string type = 4 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string status = 5 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string created_at = 6 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 7 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.Orderer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockchain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Channel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {}
  ~Channel() override;
  explicit constexpr Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channel* New() const final {
    return new Channel();
  }

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Channel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Channel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.Channel";
  }
  protected:
  explicit Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorporationIdsFieldNumber = 5,
    kIdFieldNumber = 1,
    kCorporationIdFieldNumber = 2,
    kBlockchainIdFieldNumber = 3,
    kNameFieldNumber = 4,
    kStatusFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
  };
  // repeated string corporation_ids = 5 [json_name = "corporationIds"];
  int corporation_ids_size() const;
  private:
  int _internal_corporation_ids_size() const;
  public:
  void clear_corporation_ids();
  const std::string& corporation_ids(int index) const;
  std::string* mutable_corporation_ids(int index);
  void set_corporation_ids(int index, const std::string& value);
  void set_corporation_ids(int index, std::string&& value);
  void set_corporation_ids(int index, const char* value);
  void set_corporation_ids(int index, const char* value, size_t size);
  std::string* add_corporation_ids();
  void add_corporation_ids(const std::string& value);
  void add_corporation_ids(std::string&& value);
  void add_corporation_ids(const char* value);
  void add_corporation_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& corporation_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_corporation_ids();
  private:
  const std::string& _internal_corporation_ids(int index) const;
  std::string* _internal_add_corporation_ids();
  public:

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string corporation_id = 2 [json_name = "corporationId"];
  void clear_corporation_id();
  const std::string& corporation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_corporation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_corporation_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_corporation_id();
  void set_allocated_corporation_id(std::string* corporation_id);
  private:
  const std::string& _internal_corporation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_corporation_id(const std::string& value);
  std::string* _internal_mutable_corporation_id();
  public:

  // string blockchain_id = 3 [json_name = "blockchainId"];
  void clear_blockchain_id();
  const std::string& blockchain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockchain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockchain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_blockchain_id();
  void set_allocated_blockchain_id(std::string* blockchain_id);
  private:
  const std::string& _internal_blockchain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockchain_id(const std::string& value);
  std::string* _internal_mutable_blockchain_id();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string status = 6 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string created_at = 7 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 8 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> corporation_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corporation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockchain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Invitation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.network.v1alpha1.Invitation) */ {
 public:
  inline Invitation() : Invitation(nullptr) {}
  ~Invitation() override;
  explicit constexpr Invitation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Invitation(const Invitation& from);
  Invitation(Invitation&& from) noexcept
    : Invitation() {
    *this = ::std::move(from);
  }

  inline Invitation& operator=(const Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invitation& operator=(Invitation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Invitation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Invitation* internal_default_instance() {
    return reinterpret_cast<const Invitation*>(
               &_Invitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Invitation& a, Invitation& b) {
    a.Swap(&b);
  }
  inline void Swap(Invitation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Invitation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invitation* New() const final {
    return new Invitation();
  }

  Invitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invitation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Invitation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Invitation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.network.v1alpha1.Invitation";
  }
  protected:
  explicit Invitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFromUserIdFieldNumber = 2,
    kEmailFieldNumber = 3,
    kStatusFieldNumber = 4,
    kBlockchainIdFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string from_user_id = 2 [json_name = "fromUserId"];
  void clear_from_user_id();
  const std::string& from_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_from_user_id();
  void set_allocated_from_user_id(std::string* from_user_id);
  private:
  const std::string& _internal_from_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_user_id(const std::string& value);
  std::string* _internal_mutable_from_user_id();
  public:

  // string email = 3 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string status = 4 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string blockchain_id = 5 [json_name = "blockchainId"];
  void clear_blockchain_id();
  const std::string& blockchain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockchain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockchain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_blockchain_id();
  void set_allocated_blockchain_id(std::string* blockchain_id);
  private:
  const std::string& _internal_blockchain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockchain_id(const std::string& value);
  std::string* _internal_mutable_blockchain_id();
  public:

  // string created_at = 6 [json_name = "createdAt"];
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 7 [json_name = "updatedAt"];
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.network.v1alpha1.Invitation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockchain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Network

// string id = 1 [json_name = "id"];
inline void Network::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Network::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.id)
}
inline std::string* Network::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.id)
  return _s;
}
inline const std::string& Network::_internal_id() const {
  return id_.Get();
}
inline void Network::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.id)
}

// string network_name = 2 [json_name = "networkName"];
inline void Network::clear_network_name() {
  network_name_.ClearToEmpty();
}
inline const std::string& Network::network_name() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.network_name)
  return _internal_network_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_network_name(ArgT0&& arg0, ArgT... args) {
 
 network_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.network_name)
}
inline std::string* Network::mutable_network_name() {
  std::string* _s = _internal_mutable_network_name();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.network_name)
  return _s;
}
inline const std::string& Network::_internal_network_name() const {
  return network_name_.Get();
}
inline void Network::_internal_set_network_name(const std::string& value) {
  
  network_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_network_name() {
  
  return network_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_network_name() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.network_name)
  return network_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_network_name(std::string* network_name) {
  if (network_name != nullptr) {
    
  } else {
    
  }
  network_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.network_name)
}

// string framework = 3 [json_name = "framework"];
inline void Network::clear_framework() {
  framework_.ClearToEmpty();
}
inline const std::string& Network::framework() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.framework)
  return _internal_framework();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_framework(ArgT0&& arg0, ArgT... args) {
 
 framework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.framework)
}
inline std::string* Network::mutable_framework() {
  std::string* _s = _internal_mutable_framework();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.framework)
  return _s;
}
inline const std::string& Network::_internal_framework() const {
  return framework_.Get();
}
inline void Network::_internal_set_framework(const std::string& value) {
  
  framework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_framework() {
  
  return framework_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_framework() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.framework)
  return framework_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_framework(std::string* framework) {
  if (framework != nullptr) {
    
  } else {
    
  }
  framework_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), framework,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.framework)
}

// string type = 4 [json_name = "type"];
inline void Network::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Network::type() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.type)
}
inline std::string* Network::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.type)
  return _s;
}
inline const std::string& Network::_internal_type() const {
  return type_.Get();
}
inline void Network::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_type() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.type)
}

// string user_id = 5 [json_name = "userId"];
inline void Network::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& Network::user_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.user_id)
}
inline std::string* Network::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.user_id)
  return _s;
}
inline const std::string& Network::_internal_user_id() const {
  return user_id_.Get();
}
inline void Network::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_user_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.user_id)
}

// string status = 6 [json_name = "status"];
inline void Network::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Network::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.status)
}
inline std::string* Network::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.status)
  return _s;
}
inline const std::string& Network::_internal_status() const {
  return status_.Get();
}
inline void Network::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.status)
}

// string error_details = 7 [json_name = "errorDetails"];
inline void Network::clear_error_details() {
  error_details_.ClearToEmpty();
}
inline const std::string& Network::error_details() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.error_details)
  return _internal_error_details();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_error_details(ArgT0&& arg0, ArgT... args) {
 
 error_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.error_details)
}
inline std::string* Network::mutable_error_details() {
  std::string* _s = _internal_mutable_error_details();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.error_details)
  return _s;
}
inline const std::string& Network::_internal_error_details() const {
  return error_details_.Get();
}
inline void Network::_internal_set_error_details(const std::string& value) {
  
  error_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_error_details() {
  
  return error_details_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_error_details() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.error_details)
  return error_details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_error_details(std::string* error_details) {
  if (error_details != nullptr) {
    
  } else {
    
  }
  error_details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_details,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.error_details)
}

// string created_at = 8 [json_name = "createdAt"];
inline void Network::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Network::created_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.created_at)
}
inline std::string* Network::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.created_at)
  return _s;
}
inline const std::string& Network::_internal_created_at() const {
  return created_at_.Get();
}
inline void Network::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_created_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.created_at)
}

// string updated_at = 9 [json_name = "updatedAt"];
inline void Network::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Network::updated_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.updated_at)
}
inline std::string* Network::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.updated_at)
  return _s;
}
inline const std::string& Network::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Network::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_updated_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.updated_at)
}

// repeated .blockchain.network.v1alpha1.Corporation corporations = 10 [json_name = "corporations"];
inline int Network::_internal_corporations_size() const {
  return corporations_.size();
}
inline int Network::corporations_size() const {
  return _internal_corporations_size();
}
inline void Network::clear_corporations() {
  corporations_.Clear();
}
inline ::blockchain::network::v1alpha1::Corporation* Network::mutable_corporations(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.corporations)
  return corporations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >*
Network::mutable_corporations() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.Network.corporations)
  return &corporations_;
}
inline const ::blockchain::network::v1alpha1::Corporation& Network::_internal_corporations(int index) const {
  return corporations_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Corporation& Network::corporations(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.corporations)
  return _internal_corporations(index);
}
inline ::blockchain::network::v1alpha1::Corporation* Network::_internal_add_corporations() {
  return corporations_.Add();
}
inline ::blockchain::network::v1alpha1::Corporation* Network::add_corporations() {
  ::blockchain::network::v1alpha1::Corporation* _add = _internal_add_corporations();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.Network.corporations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Corporation >&
Network::corporations() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.Network.corporations)
  return corporations_;
}

// string ccp_organization_id = 11 [json_name = "ccpOrganizationId"];
inline void Network::clear_ccp_organization_id() {
  ccp_organization_id_.ClearToEmpty();
}
inline const std::string& Network::ccp_organization_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Network.ccp_organization_id)
  return _internal_ccp_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Network::set_ccp_organization_id(ArgT0&& arg0, ArgT... args) {
 
 ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Network.ccp_organization_id)
}
inline std::string* Network::mutable_ccp_organization_id() {
  std::string* _s = _internal_mutable_ccp_organization_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Network.ccp_organization_id)
  return _s;
}
inline const std::string& Network::_internal_ccp_organization_id() const {
  return ccp_organization_id_.Get();
}
inline void Network::_internal_set_ccp_organization_id(const std::string& value) {
  
  ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Network::_internal_mutable_ccp_organization_id() {
  
  return ccp_organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Network::release_ccp_organization_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Network.ccp_organization_id)
  return ccp_organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Network::set_allocated_ccp_organization_id(std::string* ccp_organization_id) {
  if (ccp_organization_id != nullptr) {
    
  } else {
    
  }
  ccp_organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccp_organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Network.ccp_organization_id)
}

// -------------------------------------------------------------------

// Corporation

// string id = 1 [json_name = "id"];
inline void Corporation::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Corporation::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.id)
}
inline std::string* Corporation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.id)
  return _s;
}
inline const std::string& Corporation::_internal_id() const {
  return id_.Get();
}
inline void Corporation::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.id)
}

// string user_id = 2 [json_name = "userId"];
inline void Corporation::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& Corporation::user_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.user_id)
}
inline std::string* Corporation::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.user_id)
  return _s;
}
inline const std::string& Corporation::_internal_user_id() const {
  return user_id_.Get();
}
inline void Corporation::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_user_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.user_id)
}

// string domain = 3 [json_name = "domain"];
inline void Corporation::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& Corporation::domain() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.domain)
}
inline std::string* Corporation::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.domain)
  return _s;
}
inline const std::string& Corporation::_internal_domain() const {
  return domain_.Get();
}
inline void Corporation::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_domain() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.domain)
}

// string admin_password = 4 [json_name = "adminPassword"];
inline void Corporation::clear_admin_password() {
  admin_password_.ClearToEmpty();
}
inline const std::string& Corporation::admin_password() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.admin_password)
  return _internal_admin_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_admin_password(ArgT0&& arg0, ArgT... args) {
 
 admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.admin_password)
}
inline std::string* Corporation::mutable_admin_password() {
  std::string* _s = _internal_mutable_admin_password();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.admin_password)
  return _s;
}
inline const std::string& Corporation::_internal_admin_password() const {
  return admin_password_.Get();
}
inline void Corporation::_internal_set_admin_password(const std::string& value) {
  
  admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_admin_password() {
  
  return admin_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_admin_password() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.admin_password)
  return admin_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_admin_password(std::string* admin_password) {
  if (admin_password != nullptr) {
    
  } else {
    
  }
  admin_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.admin_password)
}

// string admin_user = 5 [json_name = "adminUser"];
inline void Corporation::clear_admin_user() {
  admin_user_.ClearToEmpty();
}
inline const std::string& Corporation::admin_user() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.admin_user)
  return _internal_admin_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_admin_user(ArgT0&& arg0, ArgT... args) {
 
 admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.admin_user)
}
inline std::string* Corporation::mutable_admin_user() {
  std::string* _s = _internal_mutable_admin_user();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.admin_user)
  return _s;
}
inline const std::string& Corporation::_internal_admin_user() const {
  return admin_user_.Get();
}
inline void Corporation::_internal_set_admin_user(const std::string& value) {
  
  admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_admin_user() {
  
  return admin_user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_admin_user() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.admin_user)
  return admin_user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_admin_user(std::string* admin_user) {
  if (admin_user != nullptr) {
    
  } else {
    
  }
  admin_user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_user,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.admin_user)
}

// string blockchain_id = 6 [json_name = "blockchainId"];
inline void Corporation::clear_blockchain_id() {
  blockchain_id_.ClearToEmpty();
}
inline const std::string& Corporation::blockchain_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.blockchain_id)
  return _internal_blockchain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_blockchain_id(ArgT0&& arg0, ArgT... args) {
 
 blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.blockchain_id)
}
inline std::string* Corporation::mutable_blockchain_id() {
  std::string* _s = _internal_mutable_blockchain_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.blockchain_id)
  return _s;
}
inline const std::string& Corporation::_internal_blockchain_id() const {
  return blockchain_id_.Get();
}
inline void Corporation::_internal_set_blockchain_id(const std::string& value) {
  
  blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_blockchain_id() {
  
  return blockchain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_blockchain_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.blockchain_id)
  return blockchain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_blockchain_id(std::string* blockchain_id) {
  if (blockchain_id != nullptr) {
    
  } else {
    
  }
  blockchain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockchain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.blockchain_id)
}

// repeated .blockchain.network.v1alpha1.Peer peers = 7 [json_name = "peers"];
inline int Corporation::_internal_peers_size() const {
  return peers_.size();
}
inline int Corporation::peers_size() const {
  return _internal_peers_size();
}
inline void Corporation::clear_peers() {
  peers_.Clear();
}
inline ::blockchain::network::v1alpha1::Peer* Corporation::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >*
Corporation::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.Corporation.peers)
  return &peers_;
}
inline const ::blockchain::network::v1alpha1::Peer& Corporation::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::blockchain::network::v1alpha1::Peer& Corporation::peers(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.peers)
  return _internal_peers(index);
}
inline ::blockchain::network::v1alpha1::Peer* Corporation::_internal_add_peers() {
  return peers_.Add();
}
inline ::blockchain::network::v1alpha1::Peer* Corporation::add_peers() {
  ::blockchain::network::v1alpha1::Peer* _add = _internal_add_peers();
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.Corporation.peers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::network::v1alpha1::Peer >&
Corporation::peers() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.Corporation.peers)
  return peers_;
}

// string status = 8 [json_name = "status"];
inline void Corporation::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Corporation::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.status)
}
inline std::string* Corporation::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.status)
  return _s;
}
inline const std::string& Corporation::_internal_status() const {
  return status_.Get();
}
inline void Corporation::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.status)
}

// string error_details = 9 [json_name = "errorDetails"];
inline void Corporation::clear_error_details() {
  error_details_.ClearToEmpty();
}
inline const std::string& Corporation::error_details() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.error_details)
  return _internal_error_details();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_error_details(ArgT0&& arg0, ArgT... args) {
 
 error_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.error_details)
}
inline std::string* Corporation::mutable_error_details() {
  std::string* _s = _internal_mutable_error_details();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.error_details)
  return _s;
}
inline const std::string& Corporation::_internal_error_details() const {
  return error_details_.Get();
}
inline void Corporation::_internal_set_error_details(const std::string& value) {
  
  error_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_error_details() {
  
  return error_details_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_error_details() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.error_details)
  return error_details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_error_details(std::string* error_details) {
  if (error_details != nullptr) {
    
  } else {
    
  }
  error_details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_details,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.error_details)
}

// string created_at = 10 [json_name = "createdAt"];
inline void Corporation::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Corporation::created_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.created_at)
}
inline std::string* Corporation::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.created_at)
  return _s;
}
inline const std::string& Corporation::_internal_created_at() const {
  return created_at_.Get();
}
inline void Corporation::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_created_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.created_at)
}

// string updated_at = 11 [json_name = "updatedAt"];
inline void Corporation::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Corporation::updated_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.updated_at)
}
inline std::string* Corporation::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.updated_at)
  return _s;
}
inline const std::string& Corporation::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Corporation::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_updated_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.updated_at)
}

// string name_ca = 12 [json_name = "nameCa"];
inline void Corporation::clear_name_ca() {
  name_ca_.ClearToEmpty();
}
inline const std::string& Corporation::name_ca() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.name_ca)
  return _internal_name_ca();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_name_ca(ArgT0&& arg0, ArgT... args) {
 
 name_ca_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.name_ca)
}
inline std::string* Corporation::mutable_name_ca() {
  std::string* _s = _internal_mutable_name_ca();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.name_ca)
  return _s;
}
inline const std::string& Corporation::_internal_name_ca() const {
  return name_ca_.Get();
}
inline void Corporation::_internal_set_name_ca(const std::string& value) {
  
  name_ca_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_name_ca() {
  
  return name_ca_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_name_ca() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.name_ca)
  return name_ca_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_name_ca(std::string* name_ca) {
  if (name_ca != nullptr) {
    
  } else {
    
  }
  name_ca_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_ca,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.name_ca)
}

// string name_msp = 13 [json_name = "nameMsp"];
inline void Corporation::clear_name_msp() {
  name_msp_.ClearToEmpty();
}
inline const std::string& Corporation::name_msp() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Corporation.name_msp)
  return _internal_name_msp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Corporation::set_name_msp(ArgT0&& arg0, ArgT... args) {
 
 name_msp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Corporation.name_msp)
}
inline std::string* Corporation::mutable_name_msp() {
  std::string* _s = _internal_mutable_name_msp();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Corporation.name_msp)
  return _s;
}
inline const std::string& Corporation::_internal_name_msp() const {
  return name_msp_.Get();
}
inline void Corporation::_internal_set_name_msp(const std::string& value) {
  
  name_msp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Corporation::_internal_mutable_name_msp() {
  
  return name_msp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Corporation::release_name_msp() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Corporation.name_msp)
  return name_msp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Corporation::set_allocated_name_msp(std::string* name_msp) {
  if (name_msp != nullptr) {
    
  } else {
    
  }
  name_msp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_msp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Corporation.name_msp)
}

// -------------------------------------------------------------------

// Peer

// string id = 1 [json_name = "id"];
inline void Peer::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Peer::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Peer.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Peer.id)
}
inline std::string* Peer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Peer.id)
  return _s;
}
inline const std::string& Peer::_internal_id() const {
  return id_.Get();
}
inline void Peer::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Peer::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Peer.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Peer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Peer.id)
}

// string name = 2 [json_name = "name"];
inline void Peer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Peer::name() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Peer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Peer.name)
}
inline std::string* Peer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Peer.name)
  return _s;
}
inline const std::string& Peer::_internal_name() const {
  return name_.Get();
}
inline void Peer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Peer::release_name() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Peer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Peer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Peer.name)
}

// string type = 3 [json_name = "type"];
inline void Peer::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Peer::type() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Peer.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Peer.type)
}
inline std::string* Peer::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Peer.type)
  return _s;
}
inline const std::string& Peer::_internal_type() const {
  return type_.Get();
}
inline void Peer::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Peer::release_type() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Peer.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Peer::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Peer.type)
}

// string status = 4 [json_name = "status"];
inline void Peer::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Peer::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Peer.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Peer.status)
}
inline std::string* Peer::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Peer.status)
  return _s;
}
inline const std::string& Peer::_internal_status() const {
  return status_.Get();
}
inline void Peer::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Peer::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Peer.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Peer::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Peer.status)
}

// string created_at = 5 [json_name = "createdAt"];
inline void Peer::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Peer::created_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Peer.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Peer.created_at)
}
inline std::string* Peer::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Peer.created_at)
  return _s;
}
inline const std::string& Peer::_internal_created_at() const {
  return created_at_.Get();
}
inline void Peer::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Peer::release_created_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Peer.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Peer::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Peer.created_at)
}

// string updated_at = 6 [json_name = "updatedAt"];
inline void Peer::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Peer::updated_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Peer.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Peer.updated_at)
}
inline std::string* Peer::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Peer.updated_at)
  return _s;
}
inline const std::string& Peer::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Peer::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Peer::release_updated_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Peer.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Peer::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Peer.updated_at)
}

// -------------------------------------------------------------------

// Orderer

// string id = 1 [json_name = "id"];
inline void Orderer::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Orderer::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Orderer.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Orderer::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Orderer.id)
}
inline std::string* Orderer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Orderer.id)
  return _s;
}
inline const std::string& Orderer::_internal_id() const {
  return id_.Get();
}
inline void Orderer::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Orderer::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Orderer::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Orderer.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Orderer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Orderer.id)
}

// string name = 2 [json_name = "name"];
inline void Orderer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Orderer::name() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Orderer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Orderer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Orderer.name)
}
inline std::string* Orderer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Orderer.name)
  return _s;
}
inline const std::string& Orderer::_internal_name() const {
  return name_.Get();
}
inline void Orderer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Orderer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Orderer::release_name() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Orderer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Orderer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Orderer.name)
}

// string blockchain_id = 3 [json_name = "blockchainId"];
inline void Orderer::clear_blockchain_id() {
  blockchain_id_.ClearToEmpty();
}
inline const std::string& Orderer::blockchain_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Orderer.blockchain_id)
  return _internal_blockchain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Orderer::set_blockchain_id(ArgT0&& arg0, ArgT... args) {
 
 blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Orderer.blockchain_id)
}
inline std::string* Orderer::mutable_blockchain_id() {
  std::string* _s = _internal_mutable_blockchain_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Orderer.blockchain_id)
  return _s;
}
inline const std::string& Orderer::_internal_blockchain_id() const {
  return blockchain_id_.Get();
}
inline void Orderer::_internal_set_blockchain_id(const std::string& value) {
  
  blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Orderer::_internal_mutable_blockchain_id() {
  
  return blockchain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Orderer::release_blockchain_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Orderer.blockchain_id)
  return blockchain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Orderer::set_allocated_blockchain_id(std::string* blockchain_id) {
  if (blockchain_id != nullptr) {
    
  } else {
    
  }
  blockchain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockchain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Orderer.blockchain_id)
}

// string type = 4 [json_name = "type"];
inline void Orderer::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Orderer::type() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Orderer.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Orderer::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Orderer.type)
}
inline std::string* Orderer::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Orderer.type)
  return _s;
}
inline const std::string& Orderer::_internal_type() const {
  return type_.Get();
}
inline void Orderer::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Orderer::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Orderer::release_type() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Orderer.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Orderer::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Orderer.type)
}

// string status = 5 [json_name = "status"];
inline void Orderer::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Orderer::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Orderer.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Orderer::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Orderer.status)
}
inline std::string* Orderer::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Orderer.status)
  return _s;
}
inline const std::string& Orderer::_internal_status() const {
  return status_.Get();
}
inline void Orderer::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Orderer::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Orderer::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Orderer.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Orderer::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Orderer.status)
}

// string created_at = 6 [json_name = "createdAt"];
inline void Orderer::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Orderer::created_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Orderer.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Orderer::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Orderer.created_at)
}
inline std::string* Orderer::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Orderer.created_at)
  return _s;
}
inline const std::string& Orderer::_internal_created_at() const {
  return created_at_.Get();
}
inline void Orderer::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Orderer::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Orderer::release_created_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Orderer.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Orderer::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Orderer.created_at)
}

// string updated_at = 7 [json_name = "updatedAt"];
inline void Orderer::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Orderer::updated_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Orderer.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Orderer::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Orderer.updated_at)
}
inline std::string* Orderer::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Orderer.updated_at)
  return _s;
}
inline const std::string& Orderer::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Orderer::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Orderer::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Orderer::release_updated_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Orderer.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Orderer::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Orderer.updated_at)
}

// -------------------------------------------------------------------

// Channel

// string id = 1 [json_name = "id"];
inline void Channel::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Channel::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Channel::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.id)
}
inline std::string* Channel::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.id)
  return _s;
}
inline const std::string& Channel::_internal_id() const {
  return id_.Get();
}
inline void Channel::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Channel::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Channel.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Channel::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Channel.id)
}

// string corporation_id = 2 [json_name = "corporationId"];
inline void Channel::clear_corporation_id() {
  corporation_id_.ClearToEmpty();
}
inline const std::string& Channel::corporation_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.corporation_id)
  return _internal_corporation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Channel::set_corporation_id(ArgT0&& arg0, ArgT... args) {
 
 corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.corporation_id)
}
inline std::string* Channel::mutable_corporation_id() {
  std::string* _s = _internal_mutable_corporation_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.corporation_id)
  return _s;
}
inline const std::string& Channel::_internal_corporation_id() const {
  return corporation_id_.Get();
}
inline void Channel::_internal_set_corporation_id(const std::string& value) {
  
  corporation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_corporation_id() {
  
  return corporation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Channel::release_corporation_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Channel.corporation_id)
  return corporation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Channel::set_allocated_corporation_id(std::string* corporation_id) {
  if (corporation_id != nullptr) {
    
  } else {
    
  }
  corporation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corporation_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Channel.corporation_id)
}

// string blockchain_id = 3 [json_name = "blockchainId"];
inline void Channel::clear_blockchain_id() {
  blockchain_id_.ClearToEmpty();
}
inline const std::string& Channel::blockchain_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.blockchain_id)
  return _internal_blockchain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Channel::set_blockchain_id(ArgT0&& arg0, ArgT... args) {
 
 blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.blockchain_id)
}
inline std::string* Channel::mutable_blockchain_id() {
  std::string* _s = _internal_mutable_blockchain_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.blockchain_id)
  return _s;
}
inline const std::string& Channel::_internal_blockchain_id() const {
  return blockchain_id_.Get();
}
inline void Channel::_internal_set_blockchain_id(const std::string& value) {
  
  blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_blockchain_id() {
  
  return blockchain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Channel::release_blockchain_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Channel.blockchain_id)
  return blockchain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Channel::set_allocated_blockchain_id(std::string* blockchain_id) {
  if (blockchain_id != nullptr) {
    
  } else {
    
  }
  blockchain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockchain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Channel.blockchain_id)
}

// string name = 4 [json_name = "name"];
inline void Channel::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Channel::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.name)
}
inline std::string* Channel::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.name)
  return _s;
}
inline const std::string& Channel::_internal_name() const {
  return name_.Get();
}
inline void Channel::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Channel.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Channel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Channel.name)
}

// repeated string corporation_ids = 5 [json_name = "corporationIds"];
inline int Channel::_internal_corporation_ids_size() const {
  return corporation_ids_.size();
}
inline int Channel::corporation_ids_size() const {
  return _internal_corporation_ids_size();
}
inline void Channel::clear_corporation_ids() {
  corporation_ids_.Clear();
}
inline std::string* Channel::add_corporation_ids() {
  std::string* _s = _internal_add_corporation_ids();
  // @@protoc_insertion_point(field_add_mutable:blockchain.network.v1alpha1.Channel.corporation_ids)
  return _s;
}
inline const std::string& Channel::_internal_corporation_ids(int index) const {
  return corporation_ids_.Get(index);
}
inline const std::string& Channel::corporation_ids(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.corporation_ids)
  return _internal_corporation_ids(index);
}
inline std::string* Channel::mutable_corporation_ids(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.corporation_ids)
  return corporation_ids_.Mutable(index);
}
inline void Channel::set_corporation_ids(int index, const std::string& value) {
  corporation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline void Channel::set_corporation_ids(int index, std::string&& value) {
  corporation_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline void Channel::set_corporation_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  corporation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline void Channel::set_corporation_ids(int index, const char* value, size_t size) {
  corporation_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline std::string* Channel::_internal_add_corporation_ids() {
  return corporation_ids_.Add();
}
inline void Channel::add_corporation_ids(const std::string& value) {
  corporation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline void Channel::add_corporation_ids(std::string&& value) {
  corporation_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline void Channel::add_corporation_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  corporation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline void Channel::add_corporation_ids(const char* value, size_t size) {
  corporation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blockchain.network.v1alpha1.Channel.corporation_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Channel::corporation_ids() const {
  // @@protoc_insertion_point(field_list:blockchain.network.v1alpha1.Channel.corporation_ids)
  return corporation_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Channel::mutable_corporation_ids() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.network.v1alpha1.Channel.corporation_ids)
  return &corporation_ids_;
}

// string status = 6 [json_name = "status"];
inline void Channel::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Channel::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Channel::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.status)
}
inline std::string* Channel::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.status)
  return _s;
}
inline const std::string& Channel::_internal_status() const {
  return status_.Get();
}
inline void Channel::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Channel::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Channel.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Channel::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Channel.status)
}

// string created_at = 7 [json_name = "createdAt"];
inline void Channel::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Channel::created_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Channel::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.created_at)
}
inline std::string* Channel::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.created_at)
  return _s;
}
inline const std::string& Channel::_internal_created_at() const {
  return created_at_.Get();
}
inline void Channel::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Channel::release_created_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Channel.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Channel::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Channel.created_at)
}

// string updated_at = 8 [json_name = "updatedAt"];
inline void Channel::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Channel::updated_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Channel.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Channel::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Channel.updated_at)
}
inline std::string* Channel::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Channel.updated_at)
  return _s;
}
inline const std::string& Channel::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Channel::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Channel::release_updated_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Channel.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Channel::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Channel.updated_at)
}

// -------------------------------------------------------------------

// Invitation

// string id = 1 [json_name = "id"];
inline void Invitation::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Invitation::id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Invitation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Invitation.id)
}
inline std::string* Invitation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Invitation.id)
  return _s;
}
inline const std::string& Invitation::_internal_id() const {
  return id_.Get();
}
inline void Invitation::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Invitation.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Invitation.id)
}

// string from_user_id = 2 [json_name = "fromUserId"];
inline void Invitation::clear_from_user_id() {
  from_user_id_.ClearToEmpty();
}
inline const std::string& Invitation::from_user_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Invitation.from_user_id)
  return _internal_from_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_from_user_id(ArgT0&& arg0, ArgT... args) {
 
 from_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Invitation.from_user_id)
}
inline std::string* Invitation::mutable_from_user_id() {
  std::string* _s = _internal_mutable_from_user_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Invitation.from_user_id)
  return _s;
}
inline const std::string& Invitation::_internal_from_user_id() const {
  return from_user_id_.Get();
}
inline void Invitation::_internal_set_from_user_id(const std::string& value) {
  
  from_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_from_user_id() {
  
  return from_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_from_user_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Invitation.from_user_id)
  return from_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_from_user_id(std::string* from_user_id) {
  if (from_user_id != nullptr) {
    
  } else {
    
  }
  from_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Invitation.from_user_id)
}

// string email = 3 [json_name = "email"];
inline void Invitation::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& Invitation::email() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Invitation.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Invitation.email)
}
inline std::string* Invitation::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Invitation.email)
  return _s;
}
inline const std::string& Invitation::_internal_email() const {
  return email_.Get();
}
inline void Invitation::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_email() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Invitation.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Invitation.email)
}

// string status = 4 [json_name = "status"];
inline void Invitation::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Invitation::status() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Invitation.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Invitation.status)
}
inline std::string* Invitation::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Invitation.status)
  return _s;
}
inline const std::string& Invitation::_internal_status() const {
  return status_.Get();
}
inline void Invitation::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Invitation.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Invitation.status)
}

// string blockchain_id = 5 [json_name = "blockchainId"];
inline void Invitation::clear_blockchain_id() {
  blockchain_id_.ClearToEmpty();
}
inline const std::string& Invitation::blockchain_id() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Invitation.blockchain_id)
  return _internal_blockchain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_blockchain_id(ArgT0&& arg0, ArgT... args) {
 
 blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Invitation.blockchain_id)
}
inline std::string* Invitation::mutable_blockchain_id() {
  std::string* _s = _internal_mutable_blockchain_id();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Invitation.blockchain_id)
  return _s;
}
inline const std::string& Invitation::_internal_blockchain_id() const {
  return blockchain_id_.Get();
}
inline void Invitation::_internal_set_blockchain_id(const std::string& value) {
  
  blockchain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_blockchain_id() {
  
  return blockchain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_blockchain_id() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Invitation.blockchain_id)
  return blockchain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_blockchain_id(std::string* blockchain_id) {
  if (blockchain_id != nullptr) {
    
  } else {
    
  }
  blockchain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockchain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Invitation.blockchain_id)
}

// string created_at = 6 [json_name = "createdAt"];
inline void Invitation::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& Invitation::created_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Invitation.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Invitation.created_at)
}
inline std::string* Invitation::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Invitation.created_at)
  return _s;
}
inline const std::string& Invitation::_internal_created_at() const {
  return created_at_.Get();
}
inline void Invitation::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_created_at() {
  
  return created_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_created_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Invitation.created_at)
  return created_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Invitation.created_at)
}

// string updated_at = 7 [json_name = "updatedAt"];
inline void Invitation::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& Invitation::updated_at() const {
  // @@protoc_insertion_point(field_get:blockchain.network.v1alpha1.Invitation.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.network.v1alpha1.Invitation.updated_at)
}
inline std::string* Invitation::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blockchain.network.v1alpha1.Invitation.updated_at)
  return _s;
}
inline const std::string& Invitation::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void Invitation::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_updated_at() {
  // @@protoc_insertion_point(field_release:blockchain.network.v1alpha1.Invitation.updated_at)
  return updated_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.network.v1alpha1.Invitation.updated_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace network
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fnetwork_2fv1alpha1_2fnetwork_2eproto
