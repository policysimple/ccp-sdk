// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/members/v1alpha1/member_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blockchain/members/v1alpha1/member.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto;
namespace blockchain {
namespace members {
namespace v1alpha1 {
class CreateInvitationRequest;
struct CreateInvitationRequestDefaultTypeInternal;
extern CreateInvitationRequestDefaultTypeInternal _CreateInvitationRequest_default_instance_;
class CreateInvitationResponse;
struct CreateInvitationResponseDefaultTypeInternal;
extern CreateInvitationResponseDefaultTypeInternal _CreateInvitationResponse_default_instance_;
class CreateOrganizationRequest;
struct CreateOrganizationRequestDefaultTypeInternal;
extern CreateOrganizationRequestDefaultTypeInternal _CreateOrganizationRequest_default_instance_;
class CreateOrganizationResponse;
struct CreateOrganizationResponseDefaultTypeInternal;
extern CreateOrganizationResponseDefaultTypeInternal _CreateOrganizationResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace members
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::members::v1alpha1::CreateInvitationRequest* Arena::CreateMaybeMessage<::blockchain::members::v1alpha1::CreateInvitationRequest>(Arena*);
template<> ::blockchain::members::v1alpha1::CreateInvitationResponse* Arena::CreateMaybeMessage<::blockchain::members::v1alpha1::CreateInvitationResponse>(Arena*);
template<> ::blockchain::members::v1alpha1::CreateOrganizationRequest* Arena::CreateMaybeMessage<::blockchain::members::v1alpha1::CreateOrganizationRequest>(Arena*);
template<> ::blockchain::members::v1alpha1::CreateOrganizationResponse* Arena::CreateMaybeMessage<::blockchain::members::v1alpha1::CreateOrganizationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace members {
namespace v1alpha1 {

// ===================================================================

class CreateOrganizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.members.v1alpha1.CreateOrganizationResponse) */ {
 public:
  inline CreateOrganizationResponse() : CreateOrganizationResponse(nullptr) {}
  ~CreateOrganizationResponse() override;
  explicit constexpr CreateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrganizationResponse(const CreateOrganizationResponse& from);
  CreateOrganizationResponse(CreateOrganizationResponse&& from) noexcept
    : CreateOrganizationResponse() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationResponse& operator=(const CreateOrganizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationResponse& operator=(CreateOrganizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrganizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrganizationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationResponse*>(
               &_CreateOrganizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateOrganizationResponse& a, CreateOrganizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationResponse* New() const final {
    return new CreateOrganizationResponse();
  }

  CreateOrganizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrganizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateOrganizationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.members.v1alpha1.CreateOrganizationResponse";
  }
  protected:
  explicit CreateOrganizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string message = 3 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.members.v1alpha1.CreateOrganizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateInvitationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.members.v1alpha1.CreateInvitationResponse) */ {
 public:
  inline CreateInvitationResponse() : CreateInvitationResponse(nullptr) {}
  ~CreateInvitationResponse() override;
  explicit constexpr CreateInvitationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInvitationResponse(const CreateInvitationResponse& from);
  CreateInvitationResponse(CreateInvitationResponse&& from) noexcept
    : CreateInvitationResponse() {
    *this = ::std::move(from);
  }

  inline CreateInvitationResponse& operator=(const CreateInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInvitationResponse& operator=(CreateInvitationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInvitationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInvitationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateInvitationResponse*>(
               &_CreateInvitationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateInvitationResponse& a, CreateInvitationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInvitationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInvitationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInvitationResponse* New() const final {
    return new CreateInvitationResponse();
  }

  CreateInvitationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInvitationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInvitationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateInvitationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInvitationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.members.v1alpha1.CreateInvitationResponse";
  }
  protected:
  explicit CreateInvitationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.members.v1alpha1.CreateInvitationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateOrganizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.members.v1alpha1.CreateOrganizationRequest) */ {
 public:
  inline CreateOrganizationRequest() : CreateOrganizationRequest(nullptr) {}
  ~CreateOrganizationRequest() override;
  explicit constexpr CreateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrganizationRequest(const CreateOrganizationRequest& from);
  CreateOrganizationRequest(CreateOrganizationRequest&& from) noexcept
    : CreateOrganizationRequest() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationRequest& operator=(const CreateOrganizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationRequest& operator=(CreateOrganizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrganizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrganizationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationRequest*>(
               &_CreateOrganizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateOrganizationRequest& a, CreateOrganizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationRequest* New() const final {
    return new CreateOrganizationRequest();
  }

  CreateOrganizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrganizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateOrganizationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.members.v1alpha1.CreateOrganizationRequest";
  }
  protected:
  explicit CreateOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgDomainFieldNumber = 2,
    kAdminPasswordFieldNumber = 3,
    kAdminUserFieldNumber = 4,
    kUserIdNewMemberFieldNumber = 1,
  };
  // string org_domain = 2 [json_name = "orgDomain"];
  void clear_org_domain();
  const std::string& org_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_domain();
  PROTOBUF_MUST_USE_RESULT std::string* release_org_domain();
  void set_allocated_org_domain(std::string* org_domain);
  private:
  const std::string& _internal_org_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_domain(const std::string& value);
  std::string* _internal_mutable_org_domain();
  public:

  // string admin_password = 3 [json_name = "adminPassword"];
  void clear_admin_password();
  const std::string& admin_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_password();
  void set_allocated_admin_password(std::string* admin_password);
  private:
  const std::string& _internal_admin_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_password(const std::string& value);
  std::string* _internal_mutable_admin_password();
  public:

  // string admin_user = 4 [json_name = "adminUser"];
  void clear_admin_user();
  const std::string& admin_user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_user();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_user();
  void set_allocated_admin_user(std::string* admin_user);
  private:
  const std::string& _internal_admin_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_user(const std::string& value);
  std::string* _internal_mutable_admin_user();
  public:

  // uint32 user_id_new_member = 1 [json_name = "userIdNewMember"];
  void clear_user_id_new_member();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_new_member() const;
  void set_user_id_new_member(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id_new_member() const;
  void _internal_set_user_id_new_member(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.members.v1alpha1.CreateOrganizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_user_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_new_member_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateInvitationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.members.v1alpha1.CreateInvitationRequest) */ {
 public:
  inline CreateInvitationRequest() : CreateInvitationRequest(nullptr) {}
  ~CreateInvitationRequest() override;
  explicit constexpr CreateInvitationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInvitationRequest(const CreateInvitationRequest& from);
  CreateInvitationRequest(CreateInvitationRequest&& from) noexcept
    : CreateInvitationRequest() {
    *this = ::std::move(from);
  }

  inline CreateInvitationRequest& operator=(const CreateInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInvitationRequest& operator=(CreateInvitationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInvitationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInvitationRequest*>(
               &_CreateInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateInvitationRequest& a, CreateInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInvitationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInvitationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInvitationRequest* New() const final {
    return new CreateInvitationRequest();
  }

  CreateInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInvitationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInvitationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateInvitationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.members.v1alpha1.CreateInvitationRequest";
  }
  protected:
  explicit CreateInvitationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationFieldNumber = 1,
  };
  // .blockchain.members.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::blockchain::members::v1alpha1::Invitation& invitation() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::members::v1alpha1::Invitation* release_invitation();
  ::blockchain::members::v1alpha1::Invitation* mutable_invitation();
  void set_allocated_invitation(::blockchain::members::v1alpha1::Invitation* invitation);
  private:
  const ::blockchain::members::v1alpha1::Invitation& _internal_invitation() const;
  ::blockchain::members::v1alpha1::Invitation* _internal_mutable_invitation();
  public:
  void unsafe_arena_set_allocated_invitation(
      ::blockchain::members::v1alpha1::Invitation* invitation);
  ::blockchain::members::v1alpha1::Invitation* unsafe_arena_release_invitation();

  // @@protoc_insertion_point(class_scope:blockchain.members.v1alpha1.CreateInvitationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::members::v1alpha1::Invitation* invitation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateOrganizationResponse

// string status = 2 [json_name = "status"];
inline void CreateOrganizationResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateOrganizationResponse::status() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateOrganizationResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.CreateOrganizationResponse.status)
}
inline std::string* CreateOrganizationResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.CreateOrganizationResponse.status)
  return _s;
}
inline const std::string& CreateOrganizationResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateOrganizationResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.CreateOrganizationResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.CreateOrganizationResponse.status)
}

// string message = 3 [json_name = "message"];
inline void CreateOrganizationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateOrganizationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateOrganizationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.CreateOrganizationResponse.message)
}
inline std::string* CreateOrganizationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.CreateOrganizationResponse.message)
  return _s;
}
inline const std::string& CreateOrganizationResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateOrganizationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.CreateOrganizationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.CreateOrganizationResponse.message)
}

// -------------------------------------------------------------------

// CreateInvitationResponse

// string message = 1 [json_name = "message"];
inline void CreateInvitationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateInvitationResponse::message() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateInvitationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInvitationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.CreateInvitationResponse.message)
}
inline std::string* CreateInvitationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.CreateInvitationResponse.message)
  return _s;
}
inline const std::string& CreateInvitationResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateInvitationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateInvitationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateInvitationResponse::release_message() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.CreateInvitationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateInvitationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.CreateInvitationResponse.message)
}

// -------------------------------------------------------------------

// CreateOrganizationRequest

// uint32 user_id_new_member = 1 [json_name = "userIdNewMember"];
inline void CreateOrganizationRequest::clear_user_id_new_member() {
  user_id_new_member_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOrganizationRequest::_internal_user_id_new_member() const {
  return user_id_new_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateOrganizationRequest::user_id_new_member() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateOrganizationRequest.user_id_new_member)
  return _internal_user_id_new_member();
}
inline void CreateOrganizationRequest::_internal_set_user_id_new_member(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_new_member_ = value;
}
inline void CreateOrganizationRequest::set_user_id_new_member(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id_new_member(value);
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.CreateOrganizationRequest.user_id_new_member)
}

// string org_domain = 2 [json_name = "orgDomain"];
inline void CreateOrganizationRequest::clear_org_domain() {
  org_domain_.ClearToEmpty();
}
inline const std::string& CreateOrganizationRequest::org_domain() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateOrganizationRequest.org_domain)
  return _internal_org_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationRequest::set_org_domain(ArgT0&& arg0, ArgT... args) {
 
 org_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.CreateOrganizationRequest.org_domain)
}
inline std::string* CreateOrganizationRequest::mutable_org_domain() {
  std::string* _s = _internal_mutable_org_domain();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.CreateOrganizationRequest.org_domain)
  return _s;
}
inline const std::string& CreateOrganizationRequest::_internal_org_domain() const {
  return org_domain_.Get();
}
inline void CreateOrganizationRequest::_internal_set_org_domain(const std::string& value) {
  
  org_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::_internal_mutable_org_domain() {
  
  return org_domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::release_org_domain() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.CreateOrganizationRequest.org_domain)
  return org_domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationRequest::set_allocated_org_domain(std::string* org_domain) {
  if (org_domain != nullptr) {
    
  } else {
    
  }
  org_domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), org_domain,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.CreateOrganizationRequest.org_domain)
}

// string admin_password = 3 [json_name = "adminPassword"];
inline void CreateOrganizationRequest::clear_admin_password() {
  admin_password_.ClearToEmpty();
}
inline const std::string& CreateOrganizationRequest::admin_password() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_password)
  return _internal_admin_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationRequest::set_admin_password(ArgT0&& arg0, ArgT... args) {
 
 admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_password)
}
inline std::string* CreateOrganizationRequest::mutable_admin_password() {
  std::string* _s = _internal_mutable_admin_password();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_password)
  return _s;
}
inline const std::string& CreateOrganizationRequest::_internal_admin_password() const {
  return admin_password_.Get();
}
inline void CreateOrganizationRequest::_internal_set_admin_password(const std::string& value) {
  
  admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::_internal_mutable_admin_password() {
  
  return admin_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::release_admin_password() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_password)
  return admin_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationRequest::set_allocated_admin_password(std::string* admin_password) {
  if (admin_password != nullptr) {
    
  } else {
    
  }
  admin_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_password)
}

// string admin_user = 4 [json_name = "adminUser"];
inline void CreateOrganizationRequest::clear_admin_user() {
  admin_user_.ClearToEmpty();
}
inline const std::string& CreateOrganizationRequest::admin_user() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_user)
  return _internal_admin_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrganizationRequest::set_admin_user(ArgT0&& arg0, ArgT... args) {
 
 admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_user)
}
inline std::string* CreateOrganizationRequest::mutable_admin_user() {
  std::string* _s = _internal_mutable_admin_user();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_user)
  return _s;
}
inline const std::string& CreateOrganizationRequest::_internal_admin_user() const {
  return admin_user_.Get();
}
inline void CreateOrganizationRequest::_internal_set_admin_user(const std::string& value) {
  
  admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::_internal_mutable_admin_user() {
  
  return admin_user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateOrganizationRequest::release_admin_user() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_user)
  return admin_user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateOrganizationRequest::set_allocated_admin_user(std::string* admin_user) {
  if (admin_user != nullptr) {
    
  } else {
    
  }
  admin_user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_user,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.CreateOrganizationRequest.admin_user)
}

// -------------------------------------------------------------------

// CreateInvitationRequest

// .blockchain.members.v1alpha1.Invitation invitation = 1 [json_name = "invitation"];
inline bool CreateInvitationRequest::_internal_has_invitation() const {
  return this != internal_default_instance() && invitation_ != nullptr;
}
inline bool CreateInvitationRequest::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::blockchain::members::v1alpha1::Invitation& CreateInvitationRequest::_internal_invitation() const {
  const ::blockchain::members::v1alpha1::Invitation* p = invitation_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::members::v1alpha1::Invitation&>(
      ::blockchain::members::v1alpha1::_Invitation_default_instance_);
}
inline const ::blockchain::members::v1alpha1::Invitation& CreateInvitationRequest::invitation() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.CreateInvitationRequest.invitation)
  return _internal_invitation();
}
inline void CreateInvitationRequest::unsafe_arena_set_allocated_invitation(
    ::blockchain::members::v1alpha1::Invitation* invitation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  invitation_ = invitation;
  if (invitation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.members.v1alpha1.CreateInvitationRequest.invitation)
}
inline ::blockchain::members::v1alpha1::Invitation* CreateInvitationRequest::release_invitation() {
  
  ::blockchain::members::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::members::v1alpha1::Invitation* CreateInvitationRequest::unsafe_arena_release_invitation() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.CreateInvitationRequest.invitation)
  
  ::blockchain::members::v1alpha1::Invitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::blockchain::members::v1alpha1::Invitation* CreateInvitationRequest::_internal_mutable_invitation() {
  
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::members::v1alpha1::Invitation>(GetArenaForAllocation());
    invitation_ = p;
  }
  return invitation_;
}
inline ::blockchain::members::v1alpha1::Invitation* CreateInvitationRequest::mutable_invitation() {
  ::blockchain::members::v1alpha1::Invitation* _msg = _internal_mutable_invitation();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.CreateInvitationRequest.invitation)
  return _msg;
}
inline void CreateInvitationRequest::set_allocated_invitation(::blockchain::members::v1alpha1::Invitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation));
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    
  } else {
    
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.CreateInvitationRequest.invitation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace members
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto
