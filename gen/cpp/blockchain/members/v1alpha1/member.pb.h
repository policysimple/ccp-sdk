// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/members/v1alpha1/member.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto;
namespace blockchain {
namespace members {
namespace v1alpha1 {
class Invitation;
struct InvitationDefaultTypeInternal;
extern InvitationDefaultTypeInternal _Invitation_default_instance_;
class Organization;
struct OrganizationDefaultTypeInternal;
extern OrganizationDefaultTypeInternal _Organization_default_instance_;
}  // namespace v1alpha1
}  // namespace members
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::members::v1alpha1::Invitation* Arena::CreateMaybeMessage<::blockchain::members::v1alpha1::Invitation>(Arena*);
template<> ::blockchain::members::v1alpha1::Organization* Arena::CreateMaybeMessage<::blockchain::members::v1alpha1::Organization>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace members {
namespace v1alpha1 {

// ===================================================================

class Organization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.members.v1alpha1.Organization) */ {
 public:
  inline Organization() : Organization(nullptr) {}
  ~Organization() override;
  explicit constexpr Organization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Organization(const Organization& from);
  Organization(Organization&& from) noexcept
    : Organization() {
    *this = ::std::move(from);
  }

  inline Organization& operator=(const Organization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Organization& operator=(Organization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Organization& default_instance() {
    return *internal_default_instance();
  }
  static inline const Organization* internal_default_instance() {
    return reinterpret_cast<const Organization*>(
               &_Organization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Organization& a, Organization& b) {
    a.Swap(&b);
  }
  inline void Swap(Organization* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Organization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Organization* New() const final {
    return new Organization();
  }

  Organization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Organization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Organization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Organization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Organization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.members.v1alpha1.Organization";
  }
  protected:
  explicit Organization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainOrgFieldNumber = 2,
    kAdminPasswordFieldNumber = 3,
    kAdminUserFieldNumber = 4,
    kUserIdFieldNumber = 1,
  };
  // string domain_org = 2 [json_name = "domainOrg"];
  void clear_domain_org();
  const std::string& domain_org() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain_org(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain_org();
  PROTOBUF_MUST_USE_RESULT std::string* release_domain_org();
  void set_allocated_domain_org(std::string* domain_org);
  private:
  const std::string& _internal_domain_org() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain_org(const std::string& value);
  std::string* _internal_mutable_domain_org();
  public:

  // string admin_password = 3 [json_name = "adminPassword"];
  void clear_admin_password();
  const std::string& admin_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_password();
  void set_allocated_admin_password(std::string* admin_password);
  private:
  const std::string& _internal_admin_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_password(const std::string& value);
  std::string* _internal_mutable_admin_password();
  public:

  // string admin_user = 4 [json_name = "adminUser"];
  void clear_admin_user();
  const std::string& admin_user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_user();
  PROTOBUF_MUST_USE_RESULT std::string* release_admin_user();
  void set_allocated_admin_user(std::string* admin_user);
  private:
  const std::string& _internal_admin_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_user(const std::string& value);
  std::string* _internal_mutable_admin_user();
  public:

  // uint32 user_id = 1 [json_name = "userId"];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.members.v1alpha1.Organization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_org_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_user_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto;
};
// -------------------------------------------------------------------

class Invitation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.members.v1alpha1.Invitation) */ {
 public:
  inline Invitation() : Invitation(nullptr) {}
  ~Invitation() override;
  explicit constexpr Invitation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Invitation(const Invitation& from);
  Invitation(Invitation&& from) noexcept
    : Invitation() {
    *this = ::std::move(from);
  }

  inline Invitation& operator=(const Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invitation& operator=(Invitation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Invitation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Invitation* internal_default_instance() {
    return reinterpret_cast<const Invitation*>(
               &_Invitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Invitation& a, Invitation& b) {
    a.Swap(&b);
  }
  inline void Swap(Invitation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Invitation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invitation* New() const final {
    return new Invitation();
  }

  Invitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invitation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Invitation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Invitation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.members.v1alpha1.Invitation";
  }
  protected:
  explicit Invitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:blockchain.members.v1alpha1.Invitation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Organization

// uint32 user_id = 1 [json_name = "userId"];
inline void Organization::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Organization::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Organization::user_id() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.Organization.user_id)
  return _internal_user_id();
}
inline void Organization::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void Organization::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.Organization.user_id)
}

// string domain_org = 2 [json_name = "domainOrg"];
inline void Organization::clear_domain_org() {
  domain_org_.ClearToEmpty();
}
inline const std::string& Organization::domain_org() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.Organization.domain_org)
  return _internal_domain_org();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_domain_org(ArgT0&& arg0, ArgT... args) {
 
 domain_org_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.Organization.domain_org)
}
inline std::string* Organization::mutable_domain_org() {
  std::string* _s = _internal_mutable_domain_org();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.Organization.domain_org)
  return _s;
}
inline const std::string& Organization::_internal_domain_org() const {
  return domain_org_.Get();
}
inline void Organization::_internal_set_domain_org(const std::string& value) {
  
  domain_org_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_domain_org() {
  
  return domain_org_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_domain_org() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.Organization.domain_org)
  return domain_org_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_domain_org(std::string* domain_org) {
  if (domain_org != nullptr) {
    
  } else {
    
  }
  domain_org_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain_org,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.Organization.domain_org)
}

// string admin_password = 3 [json_name = "adminPassword"];
inline void Organization::clear_admin_password() {
  admin_password_.ClearToEmpty();
}
inline const std::string& Organization::admin_password() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.Organization.admin_password)
  return _internal_admin_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_admin_password(ArgT0&& arg0, ArgT... args) {
 
 admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.Organization.admin_password)
}
inline std::string* Organization::mutable_admin_password() {
  std::string* _s = _internal_mutable_admin_password();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.Organization.admin_password)
  return _s;
}
inline const std::string& Organization::_internal_admin_password() const {
  return admin_password_.Get();
}
inline void Organization::_internal_set_admin_password(const std::string& value) {
  
  admin_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_admin_password() {
  
  return admin_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_admin_password() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.Organization.admin_password)
  return admin_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_admin_password(std::string* admin_password) {
  if (admin_password != nullptr) {
    
  } else {
    
  }
  admin_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.Organization.admin_password)
}

// string admin_user = 4 [json_name = "adminUser"];
inline void Organization::clear_admin_user() {
  admin_user_.ClearToEmpty();
}
inline const std::string& Organization::admin_user() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.Organization.admin_user)
  return _internal_admin_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Organization::set_admin_user(ArgT0&& arg0, ArgT... args) {
 
 admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.Organization.admin_user)
}
inline std::string* Organization::mutable_admin_user() {
  std::string* _s = _internal_mutable_admin_user();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.Organization.admin_user)
  return _s;
}
inline const std::string& Organization::_internal_admin_user() const {
  return admin_user_.Get();
}
inline void Organization::_internal_set_admin_user(const std::string& value) {
  
  admin_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Organization::_internal_mutable_admin_user() {
  
  return admin_user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Organization::release_admin_user() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.Organization.admin_user)
  return admin_user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Organization::set_allocated_admin_user(std::string* admin_user) {
  if (admin_user != nullptr) {
    
  } else {
    
  }
  admin_user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin_user,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.Organization.admin_user)
}

// -------------------------------------------------------------------

// Invitation

// string email = 1 [json_name = "email"];
inline void Invitation::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& Invitation::email() const {
  // @@protoc_insertion_point(field_get:blockchain.members.v1alpha1.Invitation.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invitation::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.members.v1alpha1.Invitation.email)
}
inline std::string* Invitation::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:blockchain.members.v1alpha1.Invitation.email)
  return _s;
}
inline const std::string& Invitation::_internal_email() const {
  return email_.Get();
}
inline void Invitation::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Invitation::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Invitation::release_email() {
  // @@protoc_insertion_point(field_release:blockchain.members.v1alpha1.Invitation.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Invitation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.members.v1alpha1.Invitation.email)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace members
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fmembers_2fv1alpha1_2fmember_2eproto
