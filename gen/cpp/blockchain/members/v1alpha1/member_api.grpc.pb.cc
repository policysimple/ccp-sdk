// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockchain/members/v1alpha1/member_api.proto

#include "blockchain/members/v1alpha1/member_api.pb.h"
#include "blockchain/members/v1alpha1/member_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace blockchain {
namespace members {
namespace v1alpha1 {

static const char* BlockchainInvitationAPIService_method_names[] = {
  "/blockchain.members.v1alpha1.BlockchainInvitationAPIService/CreateOrganization",
  "/blockchain.members.v1alpha1.BlockchainInvitationAPIService/CreateInvitation",
};

std::unique_ptr< BlockchainInvitationAPIService::Stub> BlockchainInvitationAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BlockchainInvitationAPIService::Stub> stub(new BlockchainInvitationAPIService::Stub(channel));
  return stub;
}

BlockchainInvitationAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateOrganization_(BlockchainInvitationAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInvitation_(BlockchainInvitationAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BlockchainInvitationAPIService::Stub::CreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOrganization_, context, request, response);
}

void BlockchainInvitationAPIService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>* BlockchainInvitationAPIService::Stub::AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::blockchain::members::v1alpha1::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>* BlockchainInvitationAPIService::Stub::PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::blockchain::members::v1alpha1::CreateOrganizationResponse>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, false);
}

::grpc::Status BlockchainInvitationAPIService::Stub::CreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateInvitation_, context, request, response);
}

void BlockchainInvitationAPIService::Stub::experimental_async::CreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateInvitation_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>* BlockchainInvitationAPIService::Stub::AsyncCreateInvitationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::blockchain::members::v1alpha1::CreateInvitationResponse>::Create(channel_.get(), cq, rpcmethod_CreateInvitation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>* BlockchainInvitationAPIService::Stub::PrepareAsyncCreateInvitationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::blockchain::members::v1alpha1::CreateInvitationResponse>::Create(channel_.get(), cq, rpcmethod_CreateInvitation_, context, request, false);
}

BlockchainInvitationAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlockchainInvitationAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlockchainInvitationAPIService::Service, ::blockchain::members::v1alpha1::CreateOrganizationRequest, ::blockchain::members::v1alpha1::CreateOrganizationResponse>(
          std::mem_fn(&BlockchainInvitationAPIService::Service::CreateOrganization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlockchainInvitationAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlockchainInvitationAPIService::Service, ::blockchain::members::v1alpha1::CreateInvitationRequest, ::blockchain::members::v1alpha1::CreateInvitationResponse>(
          std::mem_fn(&BlockchainInvitationAPIService::Service::CreateInvitation), this)));
}

BlockchainInvitationAPIService::Service::~Service() {
}

::grpc::Status BlockchainInvitationAPIService::Service::CreateOrganization(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BlockchainInvitationAPIService::Service::CreateInvitation(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace blockchain
}  // namespace members
}  // namespace v1alpha1

