// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockchain/members/v1alpha1/member_api.proto
#ifndef GRPC_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto__INCLUDED
#define GRPC_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto__INCLUDED

#include "blockchain/members/v1alpha1/member_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace blockchain {
namespace members {
namespace v1alpha1 {

class BlockchainInvitationAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "blockchain.members.v1alpha1.BlockchainInvitationAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateInvitationResponse>> AsyncCreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateInvitationResponse>>(AsyncCreateInvitationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateInvitationResponse>> PrepareAsyncCreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateInvitationResponse>>(PrepareAsyncCreateInvitationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateInvitationResponse>* AsyncCreateInvitationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::members::v1alpha1::CreateInvitationResponse>* PrepareAsyncCreateInvitationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    ::grpc::Status CreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>> AsyncCreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>>(AsyncCreateInvitationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>> PrepareAsyncCreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>>(PrepareAsyncCreateInvitationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateOrganization(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateInvitation(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>* AsyncCreateInvitationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::members::v1alpha1::CreateInvitationResponse>* PrepareAsyncCreateInvitationRaw(::grpc::ClientContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInvitation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response);
    virtual ::grpc::Status CreateInvitation(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::members::v1alpha1::CreateOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateInvitation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvitation(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInvitation(::grpc::ServerContext* context, ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::members::v1alpha1::CreateInvitationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateOrganization<WithAsyncMethod_CreateInvitation<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateInvitation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvitation(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateInvitation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvitation(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInvitation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::members::v1alpha1::CreateOrganizationRequest, ::blockchain::members::v1alpha1::CreateOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_CreateOrganization<BaseClass>::StreamedCreateOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateOrganizationRequest* request, ::blockchain::members::v1alpha1::CreateOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::members::v1alpha1::CreateOrganizationRequest,::blockchain::members::v1alpha1::CreateOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInvitation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateInvitation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::blockchain::members::v1alpha1::CreateInvitationRequest, ::blockchain::members::v1alpha1::CreateInvitationResponse>(std::bind(&WithStreamedUnaryMethod_CreateInvitation<BaseClass>::StreamedCreateInvitation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateInvitation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInvitation(::grpc::ServerContext* context, const ::blockchain::members::v1alpha1::CreateInvitationRequest* request, ::blockchain::members::v1alpha1::CreateInvitationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInvitation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::members::v1alpha1::CreateInvitationRequest,::blockchain::members::v1alpha1::CreateInvitationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_CreateInvitation<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_CreateInvitation<Service > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace members
}  // namespace blockchain


#endif  // GRPC_blockchain_2fmembers_2fv1alpha1_2fmember_5fapi_2eproto__INCLUDED
