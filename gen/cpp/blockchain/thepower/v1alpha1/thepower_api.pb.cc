// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/thepower/v1alpha1/thepower_api.proto

#include "blockchain/thepower/v1alpha1/thepower_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blockchain {
namespace thepower {
namespace v1alpha1 {
constexpr CreateTpChainRequest::CreateTpChainRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ccp_organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ccp_project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tp_chain_(nullptr){}
struct CreateTpChainRequestDefaultTypeInternal {
  constexpr CreateTpChainRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTpChainRequestDefaultTypeInternal() {}
  union {
    CreateTpChainRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTpChainRequestDefaultTypeInternal _CreateTpChainRequest_default_instance_;
constexpr GetTpChainsByUserIdRequest::GetTpChainsByUserIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct GetTpChainsByUserIdRequestDefaultTypeInternal {
  constexpr GetTpChainsByUserIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTpChainsByUserIdRequestDefaultTypeInternal() {}
  union {
    GetTpChainsByUserIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTpChainsByUserIdRequestDefaultTypeInternal _GetTpChainsByUserIdRequest_default_instance_;
constexpr GetTpChainByIdRequest::GetTpChainByIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetTpChainByIdRequestDefaultTypeInternal {
  constexpr GetTpChainByIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTpChainByIdRequestDefaultTypeInternal() {}
  union {
    GetTpChainByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTpChainByIdRequestDefaultTypeInternal _GetTpChainByIdRequest_default_instance_;
constexpr GetTpChainsRequest::GetTpChainsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct GetTpChainsRequestDefaultTypeInternal {
  constexpr GetTpChainsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTpChainsRequestDefaultTypeInternal() {}
  union {
    GetTpChainsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTpChainsRequestDefaultTypeInternal _GetTpChainsRequest_default_instance_;
constexpr UpdateTpChainRequest::UpdateTpChainRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tp_chain_(nullptr){}
struct UpdateTpChainRequestDefaultTypeInternal {
  constexpr UpdateTpChainRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateTpChainRequestDefaultTypeInternal() {}
  union {
    UpdateTpChainRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateTpChainRequestDefaultTypeInternal _UpdateTpChainRequest_default_instance_;
constexpr CreateTpChainResponse::CreateTpChainResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tp_chain_(nullptr){}
struct CreateTpChainResponseDefaultTypeInternal {
  constexpr CreateTpChainResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTpChainResponseDefaultTypeInternal() {}
  union {
    CreateTpChainResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTpChainResponseDefaultTypeInternal _CreateTpChainResponse_default_instance_;
constexpr GetTpChainsResponse::GetTpChainsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tp_chains_()
  , next_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(int64_t{0}){}
struct GetTpChainsResponseDefaultTypeInternal {
  constexpr GetTpChainsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTpChainsResponseDefaultTypeInternal() {}
  union {
    GetTpChainsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTpChainsResponseDefaultTypeInternal _GetTpChainsResponse_default_instance_;
constexpr GetTpChainsByUserIdResponse::GetTpChainsByUserIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tp_chains_()
  , next_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(int64_t{0}){}
struct GetTpChainsByUserIdResponseDefaultTypeInternal {
  constexpr GetTpChainsByUserIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTpChainsByUserIdResponseDefaultTypeInternal() {}
  union {
    GetTpChainsByUserIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTpChainsByUserIdResponseDefaultTypeInternal _GetTpChainsByUserIdResponse_default_instance_;
constexpr GetTpChainByIdResponse::GetTpChainByIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tp_chain_(nullptr){}
struct GetTpChainByIdResponseDefaultTypeInternal {
  constexpr GetTpChainByIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTpChainByIdResponseDefaultTypeInternal() {}
  union {
    GetTpChainByIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTpChainByIdResponseDefaultTypeInternal _GetTpChainByIdResponse_default_instance_;
constexpr UpdateTpChainResponse::UpdateTpChainResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tp_chain_(nullptr){}
struct UpdateTpChainResponseDefaultTypeInternal {
  constexpr UpdateTpChainResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateTpChainResponseDefaultTypeInternal() {}
  union {
    UpdateTpChainResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateTpChainResponseDefaultTypeInternal _UpdateTpChainResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace thepower
}  // namespace blockchain
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::CreateTpChainRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::CreateTpChainRequest, tp_chain_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::CreateTpChainRequest, ccp_organization_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::CreateTpChainRequest, ccp_project_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainByIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::UpdateTpChainRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::UpdateTpChainRequest, tp_chain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::CreateTpChainResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::CreateTpChainResponse, tp_chain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsResponse, tp_chains_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsResponse, total_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsResponse, next_url_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsResponse, previous_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse, tp_chains_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse, total_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse, next_url_),
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse, previous_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::GetTpChainByIdResponse, tp_chain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::UpdateTpChainResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::blockchain::thepower::v1alpha1::UpdateTpChainResponse, tp_chain_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::blockchain::thepower::v1alpha1::CreateTpChainRequest)},
  { 8, -1, sizeof(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest)},
  { 16, -1, sizeof(::blockchain::thepower::v1alpha1::GetTpChainByIdRequest)},
  { 22, -1, sizeof(::blockchain::thepower::v1alpha1::GetTpChainsRequest)},
  { 29, -1, sizeof(::blockchain::thepower::v1alpha1::UpdateTpChainRequest)},
  { 35, -1, sizeof(::blockchain::thepower::v1alpha1::CreateTpChainResponse)},
  { 41, -1, sizeof(::blockchain::thepower::v1alpha1::GetTpChainsResponse)},
  { 50, -1, sizeof(::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse)},
  { 59, -1, sizeof(::blockchain::thepower::v1alpha1::GetTpChainByIdResponse)},
  { 65, -1, sizeof(::blockchain::thepower::v1alpha1::UpdateTpChainResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_CreateTpChainRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_GetTpChainsByUserIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_GetTpChainByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_GetTpChainsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_UpdateTpChainRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_CreateTpChainResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_GetTpChainsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_GetTpChainsByUserIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_GetTpChainByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blockchain::thepower::v1alpha1::_UpdateTpChainResponse_default_instance_),
};

const char descriptor_table_protodef_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/blockchain/thepower/v1alpha1/thepower_"
  "api.proto\022\034blockchain.thepower.v1alpha1\032"
  "+blockchain/thepower/v1alpha1/thepower.p"
  "roto\032\033google/protobuf/empty.proto\"\256\001\n\024Cr"
  "eateTpChainRequest\022@\n\010tp_chain\030\001 \001(\0132%.b"
  "lockchain.thepower.v1alpha1.TpChainR\007tpC"
  "hain\022.\n\023ccp_organization_id\030\002 \001(\tR\021ccpOr"
  "ganizationId\022$\n\016ccp_project_id\030\003 \001(\tR\014cc"
  "pProjectId\"c\n\032GetTpChainsByUserIdRequest"
  "\022\027\n\007user_id\030\001 \001(\tR\006userId\022\026\n\006offset\030\002 \001("
  "\003R\006offset\022\024\n\005limit\030\003 \001(\003R\005limit\"\'\n\025GetTp"
  "ChainByIdRequest\022\016\n\002id\030\001 \001(\tR\002id\"B\n\022GetT"
  "pChainsRequest\022\026\n\006offset\030\001 \001(\003R\006offset\022\024"
  "\n\005limit\030\002 \001(\003R\005limit\"X\n\024UpdateTpChainReq"
  "uest\022@\n\010tp_chain\030\001 \001(\0132%.blockchain.thep"
  "ower.v1alpha1.TpChainR\007tpChain\"Y\n\025Create"
  "TpChainResponse\022@\n\010tp_chain\030\001 \001(\0132%.bloc"
  "kchain.thepower.v1alpha1.TpChainR\007tpChai"
  "n\"\255\001\n\023GetTpChainsResponse\022B\n\ttp_chains\030\001"
  " \003(\0132%.blockchain.thepower.v1alpha1.TpCh"
  "ainR\010tpChains\022\024\n\005total\030\002 \001(\003R\005total\022\031\n\010n"
  "ext_url\030\003 \001(\tR\007nextUrl\022!\n\014previous_url\030\004"
  " \001(\tR\013previousUrl\"\265\001\n\033GetTpChainsByUserI"
  "dResponse\022B\n\ttp_chains\030\001 \003(\0132%.blockchai"
  "n.thepower.v1alpha1.TpChainR\010tpChains\022\024\n"
  "\005total\030\002 \001(\003R\005total\022\031\n\010next_url\030\003 \001(\tR\007n"
  "extUrl\022!\n\014previous_url\030\004 \001(\tR\013previousUr"
  "l\"Z\n\026GetTpChainByIdResponse\022@\n\010tp_chain\030"
  "\001 \001(\0132%.blockchain.thepower.v1alpha1.TpC"
  "hainR\007tpChain\"Y\n\025UpdateTpChainResponse\022@"
  "\n\010tp_chain\030\001 \001(\0132%.blockchain.thepower.v"
  "1alpha1.TpChainR\007tpChain2\215\005\n\031BlockchainT"
  "hePowerService\022x\n\rCreateTpChain\0222.blockc"
  "hain.thepower.v1alpha1.CreateTpChainRequ"
  "est\0323.blockchain.thepower.v1alpha1.Creat"
  "eTpChainResponse\022r\n\013GetTpChains\0220.blockc"
  "hain.thepower.v1alpha1.GetTpChainsReques"
  "t\0321.blockchain.thepower.v1alpha1.GetTpCh"
  "ainsResponse\022\212\001\n\023GetTpChainsByUserId\0228.b"
  "lockchain.thepower.v1alpha1.GetTpChainsB"
  "yUserIdRequest\0329.blockchain.thepower.v1a"
  "lpha1.GetTpChainsByUserIdResponse\022{\n\016Get"
  "TpChainById\0223.blockchain.thepower.v1alph"
  "a1.GetTpChainByIdRequest\0324.blockchain.th"
  "epower.v1alpha1.GetTpChainByIdResponse\022x"
  "\n\rUpdateTpChain\0222.blockchain.thepower.v1"
  "alpha1.UpdateTpChainRequest\0323.blockchain"
  ".thepower.v1alpha1.UpdateTpChainResponse"
  "B\?Z=github.com/cuemby/ccp-sdk/gen/go/blo"
  "ckchain/thepower/v1alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_deps[2] = {
  &::descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto = {
  false, false, 1993, descriptor_table_protodef_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto, "blockchain/thepower/v1alpha1/thepower_api.proto", 
  &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once, descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_deps, 2, 10,
  schemas, file_default_instances, TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto::offsets,
  file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto, file_level_enum_descriptors_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto, file_level_service_descriptors_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter() {
  return &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto(&descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto);
namespace blockchain {
namespace thepower {
namespace v1alpha1 {

// ===================================================================

class CreateTpChainRequest::_Internal {
 public:
  static const ::blockchain::thepower::v1alpha1::TpChain& tp_chain(const CreateTpChainRequest* msg);
};

const ::blockchain::thepower::v1alpha1::TpChain&
CreateTpChainRequest::_Internal::tp_chain(const CreateTpChainRequest* msg) {
  return *msg->tp_chain_;
}
void CreateTpChainRequest::clear_tp_chain() {
  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
}
CreateTpChainRequest::CreateTpChainRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.CreateTpChainRequest)
}
CreateTpChainRequest::CreateTpChainRequest(const CreateTpChainRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_organization_id().empty()) {
    ccp_organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_organization_id(), 
      GetArenaForAllocation());
  }
  ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccp_project_id().empty()) {
    ccp_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccp_project_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tp_chain()) {
    tp_chain_ = new ::blockchain::thepower::v1alpha1::TpChain(*from.tp_chain_);
  } else {
    tp_chain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.CreateTpChainRequest)
}

inline void CreateTpChainRequest::SharedCtor() {
ccp_organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ccp_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tp_chain_ = nullptr;
}

CreateTpChainRequest::~CreateTpChainRequest() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.CreateTpChainRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTpChainRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ccp_organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ccp_project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tp_chain_;
}

void CreateTpChainRequest::ArenaDtor(void* object) {
  CreateTpChainRequest* _this = reinterpret_cast< CreateTpChainRequest* >(object);
  (void)_this;
}
void CreateTpChainRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTpChainRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTpChainRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.CreateTpChainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ccp_organization_id_.ClearToEmpty();
  ccp_project_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTpChainRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tp_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ccp_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.CreateTpChainRequest.ccp_organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccp_project_id = 3 [json_name = "ccpProjectId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ccp_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.CreateTpChainRequest.ccp_project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTpChainRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.CreateTpChainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tp_chain(this), target, stream);
  }

  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_organization_id().data(), static_cast<int>(this->_internal_ccp_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.CreateTpChainRequest.ccp_organization_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ccp_organization_id(), target);
  }

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccp_project_id().data(), static_cast<int>(this->_internal_ccp_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.CreateTpChainRequest.ccp_project_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ccp_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.CreateTpChainRequest)
  return target;
}

size_t CreateTpChainRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.CreateTpChainRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ccp_organization_id = 2 [json_name = "ccpOrganizationId"];
  if (!this->_internal_ccp_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_organization_id());
  }

  // string ccp_project_id = 3 [json_name = "ccpProjectId"];
  if (!this->_internal_ccp_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccp_project_id());
  }

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tp_chain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTpChainRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTpChainRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTpChainRequest::GetClassData() const { return &_class_data_; }

void CreateTpChainRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTpChainRequest *>(to)->MergeFrom(
      static_cast<const CreateTpChainRequest &>(from));
}


void CreateTpChainRequest::MergeFrom(const CreateTpChainRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.CreateTpChainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ccp_organization_id().empty()) {
    _internal_set_ccp_organization_id(from._internal_ccp_organization_id());
  }
  if (!from._internal_ccp_project_id().empty()) {
    _internal_set_ccp_project_id(from._internal_ccp_project_id());
  }
  if (from._internal_has_tp_chain()) {
    _internal_mutable_tp_chain()->::blockchain::thepower::v1alpha1::TpChain::MergeFrom(from._internal_tp_chain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTpChainRequest::CopyFrom(const CreateTpChainRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.CreateTpChainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTpChainRequest::IsInitialized() const {
  return true;
}

void CreateTpChainRequest::InternalSwap(CreateTpChainRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_organization_id_, GetArenaForAllocation(),
      &other->ccp_organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccp_project_id_, GetArenaForAllocation(),
      &other->ccp_project_id_, other->GetArenaForAllocation()
  );
  swap(tp_chain_, other->tp_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTpChainRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[0]);
}

// ===================================================================

class GetTpChainsByUserIdRequest::_Internal {
 public:
};

GetTpChainsByUserIdRequest::GetTpChainsByUserIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
}
GetTpChainsByUserIdRequest::GetTpChainsByUserIdRequest(const GetTpChainsByUserIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
}

inline void GetTpChainsByUserIdRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

GetTpChainsByUserIdRequest::~GetTpChainsByUserIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTpChainsByUserIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTpChainsByUserIdRequest::ArenaDtor(void* object) {
  GetTpChainsByUserIdRequest* _this = reinterpret_cast< GetTpChainsByUserIdRequest* >(object);
  (void)_this;
}
void GetTpChainsByUserIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTpChainsByUserIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTpChainsByUserIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTpChainsByUserIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTpChainsByUserIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
  return target;
}

size_t GetTpChainsByUserIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTpChainsByUserIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTpChainsByUserIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTpChainsByUserIdRequest::GetClassData() const { return &_class_data_; }

void GetTpChainsByUserIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTpChainsByUserIdRequest *>(to)->MergeFrom(
      static_cast<const GetTpChainsByUserIdRequest &>(from));
}


void GetTpChainsByUserIdRequest::MergeFrom(const GetTpChainsByUserIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTpChainsByUserIdRequest::CopyFrom(const GetTpChainsByUserIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTpChainsByUserIdRequest::IsInitialized() const {
  return true;
}

void GetTpChainsByUserIdRequest::InternalSwap(GetTpChainsByUserIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTpChainsByUserIdRequest, limit_)
      + sizeof(GetTpChainsByUserIdRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetTpChainsByUserIdRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTpChainsByUserIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[1]);
}

// ===================================================================

class GetTpChainByIdRequest::_Internal {
 public:
};

GetTpChainByIdRequest::GetTpChainByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
}
GetTpChainByIdRequest::GetTpChainByIdRequest(const GetTpChainByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
}

inline void GetTpChainByIdRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTpChainByIdRequest::~GetTpChainByIdRequest() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTpChainByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTpChainByIdRequest::ArenaDtor(void* object) {
  GetTpChainByIdRequest* _this = reinterpret_cast< GetTpChainByIdRequest* >(object);
  (void)_this;
}
void GetTpChainByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTpChainByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTpChainByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTpChainByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.GetTpChainByIdRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTpChainByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.GetTpChainByIdRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
  return target;
}

size_t GetTpChainByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTpChainByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTpChainByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTpChainByIdRequest::GetClassData() const { return &_class_data_; }

void GetTpChainByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTpChainByIdRequest *>(to)->MergeFrom(
      static_cast<const GetTpChainByIdRequest &>(from));
}


void GetTpChainByIdRequest::MergeFrom(const GetTpChainByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTpChainByIdRequest::CopyFrom(const GetTpChainByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.GetTpChainByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTpChainByIdRequest::IsInitialized() const {
  return true;
}

void GetTpChainByIdRequest::InternalSwap(GetTpChainByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTpChainByIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[2]);
}

// ===================================================================

class GetTpChainsRequest::_Internal {
 public:
};

GetTpChainsRequest::GetTpChainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.GetTpChainsRequest)
}
GetTpChainsRequest::GetTpChainsRequest(const GetTpChainsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.GetTpChainsRequest)
}

inline void GetTpChainsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

GetTpChainsRequest::~GetTpChainsRequest() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.GetTpChainsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTpChainsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTpChainsRequest::ArenaDtor(void* object) {
  GetTpChainsRequest* _this = reinterpret_cast< GetTpChainsRequest* >(object);
  (void)_this;
}
void GetTpChainsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTpChainsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTpChainsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.GetTpChainsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTpChainsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1 [json_name = "offset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTpChainsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.GetTpChainsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  // int64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.GetTpChainsRequest)
  return target;
}

size_t GetTpChainsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.GetTpChainsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTpChainsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTpChainsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTpChainsRequest::GetClassData() const { return &_class_data_; }

void GetTpChainsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTpChainsRequest *>(to)->MergeFrom(
      static_cast<const GetTpChainsRequest &>(from));
}


void GetTpChainsRequest::MergeFrom(const GetTpChainsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.GetTpChainsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTpChainsRequest::CopyFrom(const GetTpChainsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.GetTpChainsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTpChainsRequest::IsInitialized() const {
  return true;
}

void GetTpChainsRequest::InternalSwap(GetTpChainsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTpChainsRequest, limit_)
      + sizeof(GetTpChainsRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(GetTpChainsRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTpChainsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[3]);
}

// ===================================================================

class UpdateTpChainRequest::_Internal {
 public:
  static const ::blockchain::thepower::v1alpha1::TpChain& tp_chain(const UpdateTpChainRequest* msg);
};

const ::blockchain::thepower::v1alpha1::TpChain&
UpdateTpChainRequest::_Internal::tp_chain(const UpdateTpChainRequest* msg) {
  return *msg->tp_chain_;
}
void UpdateTpChainRequest::clear_tp_chain() {
  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
}
UpdateTpChainRequest::UpdateTpChainRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
}
UpdateTpChainRequest::UpdateTpChainRequest(const UpdateTpChainRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tp_chain()) {
    tp_chain_ = new ::blockchain::thepower::v1alpha1::TpChain(*from.tp_chain_);
  } else {
    tp_chain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
}

inline void UpdateTpChainRequest::SharedCtor() {
tp_chain_ = nullptr;
}

UpdateTpChainRequest::~UpdateTpChainRequest() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateTpChainRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tp_chain_;
}

void UpdateTpChainRequest::ArenaDtor(void* object) {
  UpdateTpChainRequest* _this = reinterpret_cast< UpdateTpChainRequest* >(object);
  (void)_this;
}
void UpdateTpChainRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTpChainRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateTpChainRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTpChainRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tp_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTpChainRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tp_chain(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
  return target;
}

size_t UpdateTpChainRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tp_chain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTpChainRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateTpChainRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTpChainRequest::GetClassData() const { return &_class_data_; }

void UpdateTpChainRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateTpChainRequest *>(to)->MergeFrom(
      static_cast<const UpdateTpChainRequest &>(from));
}


void UpdateTpChainRequest::MergeFrom(const UpdateTpChainRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tp_chain()) {
    _internal_mutable_tp_chain()->::blockchain::thepower::v1alpha1::TpChain::MergeFrom(from._internal_tp_chain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTpChainRequest::CopyFrom(const UpdateTpChainRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.UpdateTpChainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTpChainRequest::IsInitialized() const {
  return true;
}

void UpdateTpChainRequest::InternalSwap(UpdateTpChainRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tp_chain_, other->tp_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTpChainRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[4]);
}

// ===================================================================

class CreateTpChainResponse::_Internal {
 public:
  static const ::blockchain::thepower::v1alpha1::TpChain& tp_chain(const CreateTpChainResponse* msg);
};

const ::blockchain::thepower::v1alpha1::TpChain&
CreateTpChainResponse::_Internal::tp_chain(const CreateTpChainResponse* msg) {
  return *msg->tp_chain_;
}
void CreateTpChainResponse::clear_tp_chain() {
  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
}
CreateTpChainResponse::CreateTpChainResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.CreateTpChainResponse)
}
CreateTpChainResponse::CreateTpChainResponse(const CreateTpChainResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tp_chain()) {
    tp_chain_ = new ::blockchain::thepower::v1alpha1::TpChain(*from.tp_chain_);
  } else {
    tp_chain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.CreateTpChainResponse)
}

inline void CreateTpChainResponse::SharedCtor() {
tp_chain_ = nullptr;
}

CreateTpChainResponse::~CreateTpChainResponse() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.CreateTpChainResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTpChainResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tp_chain_;
}

void CreateTpChainResponse::ArenaDtor(void* object) {
  CreateTpChainResponse* _this = reinterpret_cast< CreateTpChainResponse* >(object);
  (void)_this;
}
void CreateTpChainResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTpChainResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTpChainResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.CreateTpChainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTpChainResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tp_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTpChainResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.CreateTpChainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tp_chain(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.CreateTpChainResponse)
  return target;
}

size_t CreateTpChainResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.CreateTpChainResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tp_chain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTpChainResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTpChainResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTpChainResponse::GetClassData() const { return &_class_data_; }

void CreateTpChainResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTpChainResponse *>(to)->MergeFrom(
      static_cast<const CreateTpChainResponse &>(from));
}


void CreateTpChainResponse::MergeFrom(const CreateTpChainResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.CreateTpChainResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tp_chain()) {
    _internal_mutable_tp_chain()->::blockchain::thepower::v1alpha1::TpChain::MergeFrom(from._internal_tp_chain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTpChainResponse::CopyFrom(const CreateTpChainResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.CreateTpChainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTpChainResponse::IsInitialized() const {
  return true;
}

void CreateTpChainResponse::InternalSwap(CreateTpChainResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tp_chain_, other->tp_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTpChainResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[5]);
}

// ===================================================================

class GetTpChainsResponse::_Internal {
 public:
};

void GetTpChainsResponse::clear_tp_chains() {
  tp_chains_.Clear();
}
GetTpChainsResponse::GetTpChainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tp_chains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.GetTpChainsResponse)
}
GetTpChainsResponse::GetTpChainsResponse(const GetTpChainsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tp_chains_(from.tp_chains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_url().empty()) {
    next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_url(), 
      GetArenaForAllocation());
  }
  previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_url().empty()) {
    previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_url(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.GetTpChainsResponse)
}

inline void GetTpChainsResponse::SharedCtor() {
next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_ = int64_t{0};
}

GetTpChainsResponse::~GetTpChainsResponse() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.GetTpChainsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTpChainsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTpChainsResponse::ArenaDtor(void* object) {
  GetTpChainsResponse* _this = reinterpret_cast< GetTpChainsResponse* >(object);
  (void)_this;
}
void GetTpChainsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTpChainsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTpChainsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.GetTpChainsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tp_chains_.Clear();
  next_url_.ClearToEmpty();
  previous_url_.ClearToEmpty();
  total_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTpChainsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blockchain.thepower.v1alpha1.TpChain tp_chains = 1 [json_name = "tpChains"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tp_chains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_url = 3 [json_name = "nextUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.GetTpChainsResponse.next_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_url = 4 [json_name = "previousUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.GetTpChainsResponse.previous_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTpChainsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.GetTpChainsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockchain.thepower.v1alpha1.TpChain tp_chains = 1 [json_name = "tpChains"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tp_chains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tp_chains(i), target, stream);
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_url().data(), static_cast<int>(this->_internal_next_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.GetTpChainsResponse.next_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_url(), target);
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_url().data(), static_cast<int>(this->_internal_previous_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.GetTpChainsResponse.previous_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.GetTpChainsResponse)
  return target;
}

size_t GetTpChainsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.GetTpChainsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blockchain.thepower.v1alpha1.TpChain tp_chains = 1 [json_name = "tpChains"];
  total_size += 1UL * this->_internal_tp_chains_size();
  for (const auto& msg : this->tp_chains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_url());
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_url());
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTpChainsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTpChainsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTpChainsResponse::GetClassData() const { return &_class_data_; }

void GetTpChainsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTpChainsResponse *>(to)->MergeFrom(
      static_cast<const GetTpChainsResponse &>(from));
}


void GetTpChainsResponse::MergeFrom(const GetTpChainsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.GetTpChainsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tp_chains_.MergeFrom(from.tp_chains_);
  if (!from._internal_next_url().empty()) {
    _internal_set_next_url(from._internal_next_url());
  }
  if (!from._internal_previous_url().empty()) {
    _internal_set_previous_url(from._internal_previous_url());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTpChainsResponse::CopyFrom(const GetTpChainsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.GetTpChainsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTpChainsResponse::IsInitialized() const {
  return true;
}

void GetTpChainsResponse::InternalSwap(GetTpChainsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tp_chains_.InternalSwap(&other->tp_chains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_url_, GetArenaForAllocation(),
      &other->next_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_url_, GetArenaForAllocation(),
      &other->previous_url_, other->GetArenaForAllocation()
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTpChainsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[6]);
}

// ===================================================================

class GetTpChainsByUserIdResponse::_Internal {
 public:
};

void GetTpChainsByUserIdResponse::clear_tp_chains() {
  tp_chains_.Clear();
}
GetTpChainsByUserIdResponse::GetTpChainsByUserIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tp_chains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
}
GetTpChainsByUserIdResponse::GetTpChainsByUserIdResponse(const GetTpChainsByUserIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tp_chains_(from.tp_chains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_url().empty()) {
    next_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_url(), 
      GetArenaForAllocation());
  }
  previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_url().empty()) {
    previous_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_url(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
}

inline void GetTpChainsByUserIdResponse::SharedCtor() {
next_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_ = int64_t{0};
}

GetTpChainsByUserIdResponse::~GetTpChainsByUserIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTpChainsByUserIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTpChainsByUserIdResponse::ArenaDtor(void* object) {
  GetTpChainsByUserIdResponse* _this = reinterpret_cast< GetTpChainsByUserIdResponse* >(object);
  (void)_this;
}
void GetTpChainsByUserIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTpChainsByUserIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTpChainsByUserIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tp_chains_.Clear();
  next_url_.ClearToEmpty();
  previous_url_.ClearToEmpty();
  total_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTpChainsByUserIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blockchain.thepower.v1alpha1.TpChain tp_chains = 1 [json_name = "tpChains"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tp_chains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_url = 3 [json_name = "nextUrl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.next_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_url = 4 [json_name = "previousUrl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.previous_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTpChainsByUserIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blockchain.thepower.v1alpha1.TpChain tp_chains = 1 [json_name = "tpChains"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tp_chains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tp_chains(i), target, stream);
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_url().data(), static_cast<int>(this->_internal_next_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.next_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_url(), target);
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_url().data(), static_cast<int>(this->_internal_previous_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse.previous_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
  return target;
}

size_t GetTpChainsByUserIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blockchain.thepower.v1alpha1.TpChain tp_chains = 1 [json_name = "tpChains"];
  total_size += 1UL * this->_internal_tp_chains_size();
  for (const auto& msg : this->tp_chains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_url = 3 [json_name = "nextUrl"];
  if (!this->_internal_next_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_url());
  }

  // string previous_url = 4 [json_name = "previousUrl"];
  if (!this->_internal_previous_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_url());
  }

  // int64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTpChainsByUserIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTpChainsByUserIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTpChainsByUserIdResponse::GetClassData() const { return &_class_data_; }

void GetTpChainsByUserIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTpChainsByUserIdResponse *>(to)->MergeFrom(
      static_cast<const GetTpChainsByUserIdResponse &>(from));
}


void GetTpChainsByUserIdResponse::MergeFrom(const GetTpChainsByUserIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tp_chains_.MergeFrom(from.tp_chains_);
  if (!from._internal_next_url().empty()) {
    _internal_set_next_url(from._internal_next_url());
  }
  if (!from._internal_previous_url().empty()) {
    _internal_set_previous_url(from._internal_previous_url());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTpChainsByUserIdResponse::CopyFrom(const GetTpChainsByUserIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.GetTpChainsByUserIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTpChainsByUserIdResponse::IsInitialized() const {
  return true;
}

void GetTpChainsByUserIdResponse::InternalSwap(GetTpChainsByUserIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tp_chains_.InternalSwap(&other->tp_chains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_url_, GetArenaForAllocation(),
      &other->next_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_url_, GetArenaForAllocation(),
      &other->previous_url_, other->GetArenaForAllocation()
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTpChainsByUserIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[7]);
}

// ===================================================================

class GetTpChainByIdResponse::_Internal {
 public:
  static const ::blockchain::thepower::v1alpha1::TpChain& tp_chain(const GetTpChainByIdResponse* msg);
};

const ::blockchain::thepower::v1alpha1::TpChain&
GetTpChainByIdResponse::_Internal::tp_chain(const GetTpChainByIdResponse* msg) {
  return *msg->tp_chain_;
}
void GetTpChainByIdResponse::clear_tp_chain() {
  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
}
GetTpChainByIdResponse::GetTpChainByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
}
GetTpChainByIdResponse::GetTpChainByIdResponse(const GetTpChainByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tp_chain()) {
    tp_chain_ = new ::blockchain::thepower::v1alpha1::TpChain(*from.tp_chain_);
  } else {
    tp_chain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
}

inline void GetTpChainByIdResponse::SharedCtor() {
tp_chain_ = nullptr;
}

GetTpChainByIdResponse::~GetTpChainByIdResponse() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTpChainByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tp_chain_;
}

void GetTpChainByIdResponse::ArenaDtor(void* object) {
  GetTpChainByIdResponse* _this = reinterpret_cast< GetTpChainByIdResponse* >(object);
  (void)_this;
}
void GetTpChainByIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTpChainByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTpChainByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTpChainByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tp_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTpChainByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tp_chain(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
  return target;
}

size_t GetTpChainByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tp_chain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTpChainByIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTpChainByIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTpChainByIdResponse::GetClassData() const { return &_class_data_; }

void GetTpChainByIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTpChainByIdResponse *>(to)->MergeFrom(
      static_cast<const GetTpChainByIdResponse &>(from));
}


void GetTpChainByIdResponse::MergeFrom(const GetTpChainByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tp_chain()) {
    _internal_mutable_tp_chain()->::blockchain::thepower::v1alpha1::TpChain::MergeFrom(from._internal_tp_chain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTpChainByIdResponse::CopyFrom(const GetTpChainByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.GetTpChainByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTpChainByIdResponse::IsInitialized() const {
  return true;
}

void GetTpChainByIdResponse::InternalSwap(GetTpChainByIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tp_chain_, other->tp_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTpChainByIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[8]);
}

// ===================================================================

class UpdateTpChainResponse::_Internal {
 public:
  static const ::blockchain::thepower::v1alpha1::TpChain& tp_chain(const UpdateTpChainResponse* msg);
};

const ::blockchain::thepower::v1alpha1::TpChain&
UpdateTpChainResponse::_Internal::tp_chain(const UpdateTpChainResponse* msg) {
  return *msg->tp_chain_;
}
void UpdateTpChainResponse::clear_tp_chain() {
  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
}
UpdateTpChainResponse::UpdateTpChainResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
}
UpdateTpChainResponse::UpdateTpChainResponse(const UpdateTpChainResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tp_chain()) {
    tp_chain_ = new ::blockchain::thepower::v1alpha1::TpChain(*from.tp_chain_);
  } else {
    tp_chain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
}

inline void UpdateTpChainResponse::SharedCtor() {
tp_chain_ = nullptr;
}

UpdateTpChainResponse::~UpdateTpChainResponse() {
  // @@protoc_insertion_point(destructor:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateTpChainResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tp_chain_;
}

void UpdateTpChainResponse::ArenaDtor(void* object) {
  UpdateTpChainResponse* _this = reinterpret_cast< UpdateTpChainResponse* >(object);
  (void)_this;
}
void UpdateTpChainResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTpChainResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateTpChainResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tp_chain_ != nullptr) {
    delete tp_chain_;
  }
  tp_chain_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTpChainResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tp_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTpChainResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tp_chain(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
  return target;
}

size_t UpdateTpChainResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  if (this->_internal_has_tp_chain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tp_chain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTpChainResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateTpChainResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTpChainResponse::GetClassData() const { return &_class_data_; }

void UpdateTpChainResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateTpChainResponse *>(to)->MergeFrom(
      static_cast<const UpdateTpChainResponse &>(from));
}


void UpdateTpChainResponse::MergeFrom(const UpdateTpChainResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tp_chain()) {
    _internal_mutable_tp_chain()->::blockchain::thepower::v1alpha1::TpChain::MergeFrom(from._internal_tp_chain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTpChainResponse::CopyFrom(const UpdateTpChainResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blockchain.thepower.v1alpha1.UpdateTpChainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTpChainResponse::IsInitialized() const {
  return true;
}

void UpdateTpChainResponse::InternalSwap(UpdateTpChainResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tp_chain_, other->tp_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTpChainResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_getter, &descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto_once,
      file_level_metadata_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace thepower
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::CreateTpChainRequest* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::CreateTpChainRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::CreateTpChainRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::GetTpChainsByUserIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::GetTpChainByIdRequest* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::GetTpChainByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::GetTpChainByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::GetTpChainsRequest* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::GetTpChainsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::GetTpChainsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::UpdateTpChainRequest* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::UpdateTpChainRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::UpdateTpChainRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::CreateTpChainResponse* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::CreateTpChainResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::CreateTpChainResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::GetTpChainsResponse* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::GetTpChainsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::GetTpChainsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::GetTpChainsByUserIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::GetTpChainByIdResponse* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::GetTpChainByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::GetTpChainByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::blockchain::thepower::v1alpha1::UpdateTpChainResponse* Arena::CreateMaybeMessage< ::blockchain::thepower::v1alpha1::UpdateTpChainResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blockchain::thepower::v1alpha1::UpdateTpChainResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
