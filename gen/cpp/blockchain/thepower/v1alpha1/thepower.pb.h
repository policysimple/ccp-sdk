// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/thepower/v1alpha1/thepower.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto;
namespace blockchain {
namespace thepower {
namespace v1alpha1 {
class CrosschainExternal;
struct CrosschainExternalDefaultTypeInternal;
extern CrosschainExternalDefaultTypeInternal _CrosschainExternal_default_instance_;
class TpChain;
struct TpChainDefaultTypeInternal;
extern TpChainDefaultTypeInternal _TpChain_default_instance_;
class TpNode;
struct TpNodeDefaultTypeInternal;
extern TpNodeDefaultTypeInternal _TpNode_default_instance_;
}  // namespace v1alpha1
}  // namespace thepower
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::thepower::v1alpha1::CrosschainExternal* Arena::CreateMaybeMessage<::blockchain::thepower::v1alpha1::CrosschainExternal>(Arena*);
template<> ::blockchain::thepower::v1alpha1::TpChain* Arena::CreateMaybeMessage<::blockchain::thepower::v1alpha1::TpChain>(Arena*);
template<> ::blockchain::thepower::v1alpha1::TpNode* Arena::CreateMaybeMessage<::blockchain::thepower::v1alpha1::TpNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace thepower {
namespace v1alpha1 {

// ===================================================================

class TpChain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.thepower.v1alpha1.TpChain) */ {
 public:
  inline TpChain() : TpChain(nullptr) {}
  ~TpChain() override;
  explicit constexpr TpChain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TpChain(const TpChain& from);
  TpChain(TpChain&& from) noexcept
    : TpChain() {
    *this = ::std::move(from);
  }

  inline TpChain& operator=(const TpChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpChain& operator=(TpChain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TpChain& default_instance() {
    return *internal_default_instance();
  }
  static inline const TpChain* internal_default_instance() {
    return reinterpret_cast<const TpChain*>(
               &_TpChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TpChain& a, TpChain& b) {
    a.Swap(&b);
  }
  inline void Swap(TpChain* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TpChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TpChain* New() const final {
    return new TpChain();
  }

  TpChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpChain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TpChain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TpChain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.thepower.v1alpha1.TpChain";
  }
  protected:
  explicit TpChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainNodesFieldNumber = 4,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kStatusFieldNumber = 5,
    kChainNumberFieldNumber = 2,
  };
  // repeated .blockchain.thepower.v1alpha1.TpNode chain_nodes = 4 [json_name = "chainNodes"];
  int chain_nodes_size() const;
  private:
  int _internal_chain_nodes_size() const;
  public:
  void clear_chain_nodes();
  ::blockchain::thepower::v1alpha1::TpNode* mutable_chain_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::TpNode >*
      mutable_chain_nodes();
  private:
  const ::blockchain::thepower::v1alpha1::TpNode& _internal_chain_nodes(int index) const;
  ::blockchain::thepower::v1alpha1::TpNode* _internal_add_chain_nodes();
  public:
  const ::blockchain::thepower::v1alpha1::TpNode& chain_nodes(int index) const;
  ::blockchain::thepower::v1alpha1::TpNode* add_chain_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::TpNode >&
      chain_nodes() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string user_id = 3 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string status = 5 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 chain_number = 2 [json_name = "chainNumber"];
  void clear_chain_number();
  ::PROTOBUF_NAMESPACE_ID::int32 chain_number() const;
  void set_chain_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chain_number() const;
  void _internal_set_chain_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.thepower.v1alpha1.TpChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::TpNode > chain_nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 chain_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto;
};
// -------------------------------------------------------------------

class TpNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.thepower.v1alpha1.TpNode) */ {
 public:
  inline TpNode() : TpNode(nullptr) {}
  ~TpNode() override;
  explicit constexpr TpNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TpNode(const TpNode& from);
  TpNode(TpNode&& from) noexcept
    : TpNode() {
    *this = ::std::move(from);
  }

  inline TpNode& operator=(const TpNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpNode& operator=(TpNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TpNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const TpNode* internal_default_instance() {
    return reinterpret_cast<const TpNode*>(
               &_TpNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TpNode& a, TpNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TpNode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TpNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TpNode* New() const final {
    return new TpNode();
  }

  TpNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TpNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TpNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TpNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.thepower.v1alpha1.TpNode";
  }
  protected:
  explicit TpNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrosschainExternalFieldNumber = 6,
    kNodenameFieldNumber = 1,
    kTpicPortFieldNumber = 2,
    kApiPortFieldNumber = 3,
    kApisPortFieldNumber = 4,
    kCcPortFieldNumber = 5,
  };
  // repeated .blockchain.thepower.v1alpha1.CrosschainExternal crosschain_external = 6 [json_name = "crosschainExternal"];
  int crosschain_external_size() const;
  private:
  int _internal_crosschain_external_size() const;
  public:
  void clear_crosschain_external();
  ::blockchain::thepower::v1alpha1::CrosschainExternal* mutable_crosschain_external(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::CrosschainExternal >*
      mutable_crosschain_external();
  private:
  const ::blockchain::thepower::v1alpha1::CrosschainExternal& _internal_crosschain_external(int index) const;
  ::blockchain::thepower::v1alpha1::CrosschainExternal* _internal_add_crosschain_external();
  public:
  const ::blockchain::thepower::v1alpha1::CrosschainExternal& crosschain_external(int index) const;
  ::blockchain::thepower::v1alpha1::CrosschainExternal* add_crosschain_external();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::CrosschainExternal >&
      crosschain_external() const;

  // string nodename = 1 [json_name = "nodename"];
  void clear_nodename();
  const std::string& nodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodename();
  PROTOBUF_MUST_USE_RESULT std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // int64 tpic_port = 2 [json_name = "tpicPort"];
  void clear_tpic_port();
  ::PROTOBUF_NAMESPACE_ID::int64 tpic_port() const;
  void set_tpic_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tpic_port() const;
  void _internal_set_tpic_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 api_port = 3 [json_name = "apiPort"];
  void clear_api_port();
  ::PROTOBUF_NAMESPACE_ID::int64 api_port() const;
  void set_api_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_api_port() const;
  void _internal_set_api_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 apis_port = 4 [json_name = "apisPort"];
  void clear_apis_port();
  ::PROTOBUF_NAMESPACE_ID::int64 apis_port() const;
  void set_apis_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_apis_port() const;
  void _internal_set_apis_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cc_port = 5 [json_name = "ccPort"];
  void clear_cc_port();
  ::PROTOBUF_NAMESPACE_ID::int64 cc_port() const;
  void set_cc_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cc_port() const;
  void _internal_set_cc_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.thepower.v1alpha1.TpNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::CrosschainExternal > crosschain_external_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::int64 tpic_port_;
  ::PROTOBUF_NAMESPACE_ID::int64 api_port_;
  ::PROTOBUF_NAMESPACE_ID::int64 apis_port_;
  ::PROTOBUF_NAMESPACE_ID::int64 cc_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto;
};
// -------------------------------------------------------------------

class CrosschainExternal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.thepower.v1alpha1.CrosschainExternal) */ {
 public:
  inline CrosschainExternal() : CrosschainExternal(nullptr) {}
  ~CrosschainExternal() override;
  explicit constexpr CrosschainExternal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrosschainExternal(const CrosschainExternal& from);
  CrosschainExternal(CrosschainExternal&& from) noexcept
    : CrosschainExternal() {
    *this = ::std::move(from);
  }

  inline CrosschainExternal& operator=(const CrosschainExternal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrosschainExternal& operator=(CrosschainExternal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrosschainExternal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrosschainExternal* internal_default_instance() {
    return reinterpret_cast<const CrosschainExternal*>(
               &_CrosschainExternal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CrosschainExternal& a, CrosschainExternal& b) {
    a.Swap(&b);
  }
  inline void Swap(CrosschainExternal* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrosschainExternal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrosschainExternal* New() const final {
    return new CrosschainExternal();
  }

  CrosschainExternal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrosschainExternal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrosschainExternal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CrosschainExternal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrosschainExternal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.thepower.v1alpha1.CrosschainExternal";
  }
  protected:
  explicit CrosschainExternal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host = 1 [json_name = "host"];
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_MUST_USE_RESULT std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // int64 port = 2 [json_name = "port"];
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int64 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:blockchain.thepower.v1alpha1.CrosschainExternal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::int64 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TpChain

// string id = 1 [json_name = "id"];
inline void TpChain::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& TpChain::id() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpChain.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TpChain::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpChain.id)
}
inline std::string* TpChain::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.TpChain.id)
  return _s;
}
inline const std::string& TpChain::_internal_id() const {
  return id_.Get();
}
inline void TpChain::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TpChain::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TpChain::release_id() {
  // @@protoc_insertion_point(field_release:blockchain.thepower.v1alpha1.TpChain.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TpChain::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.thepower.v1alpha1.TpChain.id)
}

// int32 chain_number = 2 [json_name = "chainNumber"];
inline void TpChain::clear_chain_number() {
  chain_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TpChain::_internal_chain_number() const {
  return chain_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TpChain::chain_number() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpChain.chain_number)
  return _internal_chain_number();
}
inline void TpChain::_internal_set_chain_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chain_number_ = value;
}
inline void TpChain::set_chain_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chain_number(value);
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpChain.chain_number)
}

// string user_id = 3 [json_name = "userId"];
inline void TpChain::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& TpChain::user_id() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpChain.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TpChain::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpChain.user_id)
}
inline std::string* TpChain::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.TpChain.user_id)
  return _s;
}
inline const std::string& TpChain::_internal_user_id() const {
  return user_id_.Get();
}
inline void TpChain::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TpChain::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TpChain::release_user_id() {
  // @@protoc_insertion_point(field_release:blockchain.thepower.v1alpha1.TpChain.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TpChain::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.thepower.v1alpha1.TpChain.user_id)
}

// repeated .blockchain.thepower.v1alpha1.TpNode chain_nodes = 4 [json_name = "chainNodes"];
inline int TpChain::_internal_chain_nodes_size() const {
  return chain_nodes_.size();
}
inline int TpChain::chain_nodes_size() const {
  return _internal_chain_nodes_size();
}
inline void TpChain::clear_chain_nodes() {
  chain_nodes_.Clear();
}
inline ::blockchain::thepower::v1alpha1::TpNode* TpChain::mutable_chain_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.TpChain.chain_nodes)
  return chain_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::TpNode >*
TpChain::mutable_chain_nodes() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.thepower.v1alpha1.TpChain.chain_nodes)
  return &chain_nodes_;
}
inline const ::blockchain::thepower::v1alpha1::TpNode& TpChain::_internal_chain_nodes(int index) const {
  return chain_nodes_.Get(index);
}
inline const ::blockchain::thepower::v1alpha1::TpNode& TpChain::chain_nodes(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpChain.chain_nodes)
  return _internal_chain_nodes(index);
}
inline ::blockchain::thepower::v1alpha1::TpNode* TpChain::_internal_add_chain_nodes() {
  return chain_nodes_.Add();
}
inline ::blockchain::thepower::v1alpha1::TpNode* TpChain::add_chain_nodes() {
  ::blockchain::thepower::v1alpha1::TpNode* _add = _internal_add_chain_nodes();
  // @@protoc_insertion_point(field_add:blockchain.thepower.v1alpha1.TpChain.chain_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::TpNode >&
TpChain::chain_nodes() const {
  // @@protoc_insertion_point(field_list:blockchain.thepower.v1alpha1.TpChain.chain_nodes)
  return chain_nodes_;
}

// string status = 5 [json_name = "status"];
inline void TpChain::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& TpChain::status() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpChain.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TpChain::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpChain.status)
}
inline std::string* TpChain::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.TpChain.status)
  return _s;
}
inline const std::string& TpChain::_internal_status() const {
  return status_.Get();
}
inline void TpChain::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TpChain::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TpChain::release_status() {
  // @@protoc_insertion_point(field_release:blockchain.thepower.v1alpha1.TpChain.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TpChain::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.thepower.v1alpha1.TpChain.status)
}

// -------------------------------------------------------------------

// TpNode

// string nodename = 1 [json_name = "nodename"];
inline void TpNode::clear_nodename() {
  nodename_.ClearToEmpty();
}
inline const std::string& TpNode::nodename() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpNode.nodename)
  return _internal_nodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TpNode::set_nodename(ArgT0&& arg0, ArgT... args) {
 
 nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpNode.nodename)
}
inline std::string* TpNode::mutable_nodename() {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.TpNode.nodename)
  return _s;
}
inline const std::string& TpNode::_internal_nodename() const {
  return nodename_.Get();
}
inline void TpNode::_internal_set_nodename(const std::string& value) {
  
  nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TpNode::_internal_mutable_nodename() {
  
  return nodename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TpNode::release_nodename() {
  // @@protoc_insertion_point(field_release:blockchain.thepower.v1alpha1.TpNode.nodename)
  return nodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TpNode::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.thepower.v1alpha1.TpNode.nodename)
}

// int64 tpic_port = 2 [json_name = "tpicPort"];
inline void TpNode::clear_tpic_port() {
  tpic_port_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::_internal_tpic_port() const {
  return tpic_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::tpic_port() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpNode.tpic_port)
  return _internal_tpic_port();
}
inline void TpNode::_internal_set_tpic_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tpic_port_ = value;
}
inline void TpNode::set_tpic_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tpic_port(value);
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpNode.tpic_port)
}

// int64 api_port = 3 [json_name = "apiPort"];
inline void TpNode::clear_api_port() {
  api_port_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::_internal_api_port() const {
  return api_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::api_port() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpNode.api_port)
  return _internal_api_port();
}
inline void TpNode::_internal_set_api_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  api_port_ = value;
}
inline void TpNode::set_api_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_api_port(value);
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpNode.api_port)
}

// int64 apis_port = 4 [json_name = "apisPort"];
inline void TpNode::clear_apis_port() {
  apis_port_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::_internal_apis_port() const {
  return apis_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::apis_port() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpNode.apis_port)
  return _internal_apis_port();
}
inline void TpNode::_internal_set_apis_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  apis_port_ = value;
}
inline void TpNode::set_apis_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_apis_port(value);
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpNode.apis_port)
}

// int64 cc_port = 5 [json_name = "ccPort"];
inline void TpNode::clear_cc_port() {
  cc_port_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::_internal_cc_port() const {
  return cc_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TpNode::cc_port() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpNode.cc_port)
  return _internal_cc_port();
}
inline void TpNode::_internal_set_cc_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cc_port_ = value;
}
inline void TpNode::set_cc_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cc_port(value);
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.TpNode.cc_port)
}

// repeated .blockchain.thepower.v1alpha1.CrosschainExternal crosschain_external = 6 [json_name = "crosschainExternal"];
inline int TpNode::_internal_crosschain_external_size() const {
  return crosschain_external_.size();
}
inline int TpNode::crosschain_external_size() const {
  return _internal_crosschain_external_size();
}
inline void TpNode::clear_crosschain_external() {
  crosschain_external_.Clear();
}
inline ::blockchain::thepower::v1alpha1::CrosschainExternal* TpNode::mutable_crosschain_external(int index) {
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.TpNode.crosschain_external)
  return crosschain_external_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::CrosschainExternal >*
TpNode::mutable_crosschain_external() {
  // @@protoc_insertion_point(field_mutable_list:blockchain.thepower.v1alpha1.TpNode.crosschain_external)
  return &crosschain_external_;
}
inline const ::blockchain::thepower::v1alpha1::CrosschainExternal& TpNode::_internal_crosschain_external(int index) const {
  return crosschain_external_.Get(index);
}
inline const ::blockchain::thepower::v1alpha1::CrosschainExternal& TpNode::crosschain_external(int index) const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.TpNode.crosschain_external)
  return _internal_crosschain_external(index);
}
inline ::blockchain::thepower::v1alpha1::CrosschainExternal* TpNode::_internal_add_crosschain_external() {
  return crosschain_external_.Add();
}
inline ::blockchain::thepower::v1alpha1::CrosschainExternal* TpNode::add_crosschain_external() {
  ::blockchain::thepower::v1alpha1::CrosschainExternal* _add = _internal_add_crosschain_external();
  // @@protoc_insertion_point(field_add:blockchain.thepower.v1alpha1.TpNode.crosschain_external)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blockchain::thepower::v1alpha1::CrosschainExternal >&
TpNode::crosschain_external() const {
  // @@protoc_insertion_point(field_list:blockchain.thepower.v1alpha1.TpNode.crosschain_external)
  return crosschain_external_;
}

// -------------------------------------------------------------------

// CrosschainExternal

// string host = 1 [json_name = "host"];
inline void CrosschainExternal::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& CrosschainExternal::host() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.CrosschainExternal.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CrosschainExternal::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.CrosschainExternal.host)
}
inline std::string* CrosschainExternal::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.CrosschainExternal.host)
  return _s;
}
inline const std::string& CrosschainExternal::_internal_host() const {
  return host_.Get();
}
inline void CrosschainExternal::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CrosschainExternal::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CrosschainExternal::release_host() {
  // @@protoc_insertion_point(field_release:blockchain.thepower.v1alpha1.CrosschainExternal.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CrosschainExternal::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:blockchain.thepower.v1alpha1.CrosschainExternal.host)
}

// int64 port = 2 [json_name = "port"];
inline void CrosschainExternal::clear_port() {
  port_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CrosschainExternal::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CrosschainExternal::port() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.CrosschainExternal.port)
  return _internal_port();
}
inline void CrosschainExternal::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  port_ = value;
}
inline void CrosschainExternal::set_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:blockchain.thepower.v1alpha1.CrosschainExternal.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace thepower
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fthepower_2fv1alpha1_2fthepower_2eproto
