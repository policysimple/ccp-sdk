// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain/thepower/v1alpha1/thepower_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blockchain/thepower/v1alpha1/thepower.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto;
namespace blockchain {
namespace thepower {
namespace v1alpha1 {
class CreateTpChainRequest;
struct CreateTpChainRequestDefaultTypeInternal;
extern CreateTpChainRequestDefaultTypeInternal _CreateTpChainRequest_default_instance_;
class CreateTpChainResponse;
struct CreateTpChainResponseDefaultTypeInternal;
extern CreateTpChainResponseDefaultTypeInternal _CreateTpChainResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace thepower
}  // namespace blockchain
PROTOBUF_NAMESPACE_OPEN
template<> ::blockchain::thepower::v1alpha1::CreateTpChainRequest* Arena::CreateMaybeMessage<::blockchain::thepower::v1alpha1::CreateTpChainRequest>(Arena*);
template<> ::blockchain::thepower::v1alpha1::CreateTpChainResponse* Arena::CreateMaybeMessage<::blockchain::thepower::v1alpha1::CreateTpChainResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blockchain {
namespace thepower {
namespace v1alpha1 {

// ===================================================================

class CreateTpChainRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.thepower.v1alpha1.CreateTpChainRequest) */ {
 public:
  inline CreateTpChainRequest() : CreateTpChainRequest(nullptr) {}
  ~CreateTpChainRequest() override;
  explicit constexpr CreateTpChainRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTpChainRequest(const CreateTpChainRequest& from);
  CreateTpChainRequest(CreateTpChainRequest&& from) noexcept
    : CreateTpChainRequest() {
    *this = ::std::move(from);
  }

  inline CreateTpChainRequest& operator=(const CreateTpChainRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTpChainRequest& operator=(CreateTpChainRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTpChainRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTpChainRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTpChainRequest*>(
               &_CreateTpChainRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateTpChainRequest& a, CreateTpChainRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTpChainRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTpChainRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTpChainRequest* New() const final {
    return new CreateTpChainRequest();
  }

  CreateTpChainRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTpChainRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTpChainRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTpChainRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTpChainRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.thepower.v1alpha1.CreateTpChainRequest";
  }
  protected:
  explicit CreateTpChainRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTpChainFieldNumber = 1,
  };
  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  bool has_tp_chain() const;
  private:
  bool _internal_has_tp_chain() const;
  public:
  void clear_tp_chain();
  const ::blockchain::thepower::v1alpha1::TpChain& tp_chain() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::thepower::v1alpha1::TpChain* release_tp_chain();
  ::blockchain::thepower::v1alpha1::TpChain* mutable_tp_chain();
  void set_allocated_tp_chain(::blockchain::thepower::v1alpha1::TpChain* tp_chain);
  private:
  const ::blockchain::thepower::v1alpha1::TpChain& _internal_tp_chain() const;
  ::blockchain::thepower::v1alpha1::TpChain* _internal_mutable_tp_chain();
  public:
  void unsafe_arena_set_allocated_tp_chain(
      ::blockchain::thepower::v1alpha1::TpChain* tp_chain);
  ::blockchain::thepower::v1alpha1::TpChain* unsafe_arena_release_tp_chain();

  // @@protoc_insertion_point(class_scope:blockchain.thepower.v1alpha1.CreateTpChainRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::thepower::v1alpha1::TpChain* tp_chain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateTpChainResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blockchain.thepower.v1alpha1.CreateTpChainResponse) */ {
 public:
  inline CreateTpChainResponse() : CreateTpChainResponse(nullptr) {}
  ~CreateTpChainResponse() override;
  explicit constexpr CreateTpChainResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTpChainResponse(const CreateTpChainResponse& from);
  CreateTpChainResponse(CreateTpChainResponse&& from) noexcept
    : CreateTpChainResponse() {
    *this = ::std::move(from);
  }

  inline CreateTpChainResponse& operator=(const CreateTpChainResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTpChainResponse& operator=(CreateTpChainResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTpChainResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTpChainResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTpChainResponse*>(
               &_CreateTpChainResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateTpChainResponse& a, CreateTpChainResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTpChainResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTpChainResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTpChainResponse* New() const final {
    return new CreateTpChainResponse();
  }

  CreateTpChainResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTpChainResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTpChainResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTpChainResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTpChainResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blockchain.thepower.v1alpha1.CreateTpChainResponse";
  }
  protected:
  explicit CreateTpChainResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTpChainFieldNumber = 1,
  };
  // .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
  bool has_tp_chain() const;
  private:
  bool _internal_has_tp_chain() const;
  public:
  void clear_tp_chain();
  const ::blockchain::thepower::v1alpha1::TpChain& tp_chain() const;
  PROTOBUF_MUST_USE_RESULT ::blockchain::thepower::v1alpha1::TpChain* release_tp_chain();
  ::blockchain::thepower::v1alpha1::TpChain* mutable_tp_chain();
  void set_allocated_tp_chain(::blockchain::thepower::v1alpha1::TpChain* tp_chain);
  private:
  const ::blockchain::thepower::v1alpha1::TpChain& _internal_tp_chain() const;
  ::blockchain::thepower::v1alpha1::TpChain* _internal_mutable_tp_chain();
  public:
  void unsafe_arena_set_allocated_tp_chain(
      ::blockchain::thepower::v1alpha1::TpChain* tp_chain);
  ::blockchain::thepower::v1alpha1::TpChain* unsafe_arena_release_tp_chain();

  // @@protoc_insertion_point(class_scope:blockchain.thepower.v1alpha1.CreateTpChainResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::blockchain::thepower::v1alpha1::TpChain* tp_chain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateTpChainRequest

// .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
inline bool CreateTpChainRequest::_internal_has_tp_chain() const {
  return this != internal_default_instance() && tp_chain_ != nullptr;
}
inline bool CreateTpChainRequest::has_tp_chain() const {
  return _internal_has_tp_chain();
}
inline const ::blockchain::thepower::v1alpha1::TpChain& CreateTpChainRequest::_internal_tp_chain() const {
  const ::blockchain::thepower::v1alpha1::TpChain* p = tp_chain_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::thepower::v1alpha1::TpChain&>(
      ::blockchain::thepower::v1alpha1::_TpChain_default_instance_);
}
inline const ::blockchain::thepower::v1alpha1::TpChain& CreateTpChainRequest::tp_chain() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.CreateTpChainRequest.tp_chain)
  return _internal_tp_chain();
}
inline void CreateTpChainRequest::unsafe_arena_set_allocated_tp_chain(
    ::blockchain::thepower::v1alpha1::TpChain* tp_chain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tp_chain_);
  }
  tp_chain_ = tp_chain;
  if (tp_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.thepower.v1alpha1.CreateTpChainRequest.tp_chain)
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainRequest::release_tp_chain() {
  
  ::blockchain::thepower::v1alpha1::TpChain* temp = tp_chain_;
  tp_chain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainRequest::unsafe_arena_release_tp_chain() {
  // @@protoc_insertion_point(field_release:blockchain.thepower.v1alpha1.CreateTpChainRequest.tp_chain)
  
  ::blockchain::thepower::v1alpha1::TpChain* temp = tp_chain_;
  tp_chain_ = nullptr;
  return temp;
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainRequest::_internal_mutable_tp_chain() {
  
  if (tp_chain_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::thepower::v1alpha1::TpChain>(GetArenaForAllocation());
    tp_chain_ = p;
  }
  return tp_chain_;
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainRequest::mutable_tp_chain() {
  ::blockchain::thepower::v1alpha1::TpChain* _msg = _internal_mutable_tp_chain();
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.CreateTpChainRequest.tp_chain)
  return _msg;
}
inline void CreateTpChainRequest::set_allocated_tp_chain(::blockchain::thepower::v1alpha1::TpChain* tp_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tp_chain_);
  }
  if (tp_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tp_chain));
    if (message_arena != submessage_arena) {
      tp_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tp_chain, submessage_arena);
    }
    
  } else {
    
  }
  tp_chain_ = tp_chain;
  // @@protoc_insertion_point(field_set_allocated:blockchain.thepower.v1alpha1.CreateTpChainRequest.tp_chain)
}

// -------------------------------------------------------------------

// CreateTpChainResponse

// .blockchain.thepower.v1alpha1.TpChain tp_chain = 1 [json_name = "tpChain"];
inline bool CreateTpChainResponse::_internal_has_tp_chain() const {
  return this != internal_default_instance() && tp_chain_ != nullptr;
}
inline bool CreateTpChainResponse::has_tp_chain() const {
  return _internal_has_tp_chain();
}
inline const ::blockchain::thepower::v1alpha1::TpChain& CreateTpChainResponse::_internal_tp_chain() const {
  const ::blockchain::thepower::v1alpha1::TpChain* p = tp_chain_;
  return p != nullptr ? *p : reinterpret_cast<const ::blockchain::thepower::v1alpha1::TpChain&>(
      ::blockchain::thepower::v1alpha1::_TpChain_default_instance_);
}
inline const ::blockchain::thepower::v1alpha1::TpChain& CreateTpChainResponse::tp_chain() const {
  // @@protoc_insertion_point(field_get:blockchain.thepower.v1alpha1.CreateTpChainResponse.tp_chain)
  return _internal_tp_chain();
}
inline void CreateTpChainResponse::unsafe_arena_set_allocated_tp_chain(
    ::blockchain::thepower::v1alpha1::TpChain* tp_chain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tp_chain_);
  }
  tp_chain_ = tp_chain;
  if (tp_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blockchain.thepower.v1alpha1.CreateTpChainResponse.tp_chain)
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainResponse::release_tp_chain() {
  
  ::blockchain::thepower::v1alpha1::TpChain* temp = tp_chain_;
  tp_chain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainResponse::unsafe_arena_release_tp_chain() {
  // @@protoc_insertion_point(field_release:blockchain.thepower.v1alpha1.CreateTpChainResponse.tp_chain)
  
  ::blockchain::thepower::v1alpha1::TpChain* temp = tp_chain_;
  tp_chain_ = nullptr;
  return temp;
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainResponse::_internal_mutable_tp_chain() {
  
  if (tp_chain_ == nullptr) {
    auto* p = CreateMaybeMessage<::blockchain::thepower::v1alpha1::TpChain>(GetArenaForAllocation());
    tp_chain_ = p;
  }
  return tp_chain_;
}
inline ::blockchain::thepower::v1alpha1::TpChain* CreateTpChainResponse::mutable_tp_chain() {
  ::blockchain::thepower::v1alpha1::TpChain* _msg = _internal_mutable_tp_chain();
  // @@protoc_insertion_point(field_mutable:blockchain.thepower.v1alpha1.CreateTpChainResponse.tp_chain)
  return _msg;
}
inline void CreateTpChainResponse::set_allocated_tp_chain(::blockchain::thepower::v1alpha1::TpChain* tp_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tp_chain_);
  }
  if (tp_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tp_chain));
    if (message_arena != submessage_arena) {
      tp_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tp_chain, submessage_arena);
    }
    
  } else {
    
  }
  tp_chain_ = tp_chain;
  // @@protoc_insertion_point(field_set_allocated:blockchain.thepower.v1alpha1.CreateTpChainResponse.tp_chain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace thepower
}  // namespace blockchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2fthepower_2fv1alpha1_2fthepower_5fapi_2eproto
