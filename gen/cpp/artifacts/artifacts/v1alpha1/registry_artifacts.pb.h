// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/artifacts/v1alpha1/registry_artifacts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto;
namespace artifacts {
namespace artifacts {
namespace v1alpha1 {
class ArtifactsRegistry;
struct ArtifactsRegistryDefaultTypeInternal;
extern ArtifactsRegistryDefaultTypeInternal _ArtifactsRegistry_default_instance_;
class Tags;
struct TagsDefaultTypeInternal;
extern TagsDefaultTypeInternal _Tags_default_instance_;
}  // namespace v1alpha1
}  // namespace artifacts
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> ::artifacts::artifacts::v1alpha1::ArtifactsRegistry* Arena::CreateMaybeMessage<::artifacts::artifacts::v1alpha1::ArtifactsRegistry>(Arena*);
template<> ::artifacts::artifacts::v1alpha1::Tags* Arena::CreateMaybeMessage<::artifacts::artifacts::v1alpha1::Tags>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace artifacts {
namespace artifacts {
namespace v1alpha1 {

// ===================================================================

class Tags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.artifacts.v1alpha1.Tags) */ {
 public:
  inline Tags() : Tags(nullptr) {}
  ~Tags() override;
  explicit constexpr Tags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tags(const Tags& from);
  Tags(Tags&& from) noexcept
    : Tags() {
    *this = ::std::move(from);
  }

  inline Tags& operator=(const Tags& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tags& operator=(Tags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tags& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tags* internal_default_instance() {
    return reinterpret_cast<const Tags*>(
               &_Tags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tags& a, Tags& b) {
    a.Swap(&b);
  }
  inline void Swap(Tags* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tags* New() const final {
    return new Tags();
  }

  Tags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Tags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.artifacts.v1alpha1.Tags";
  }
  protected:
  explicit Tags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPullTimeFieldNumber = 2,
    kPushTimeFieldNumber = 3,
    kStorageLimitFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pull_time = 2 [json_name = "pullTime"];
  void clear_pull_time();
  const std::string& pull_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pull_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pull_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_pull_time();
  void set_allocated_pull_time(std::string* pull_time);
  private:
  const std::string& _internal_pull_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pull_time(const std::string& value);
  std::string* _internal_mutable_pull_time();
  public:

  // string push_time = 3 [json_name = "pushTime"];
  void clear_push_time();
  const std::string& push_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_push_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_push_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_push_time();
  void set_allocated_push_time(std::string* push_time);
  private:
  const std::string& _internal_push_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_push_time(const std::string& value);
  std::string* _internal_mutable_push_time();
  public:

  // uint32 storage_limit = 4 [json_name = "storageLimit"];
  void clear_storage_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_limit() const;
  void set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_limit() const;
  void _internal_set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:artifacts.artifacts.v1alpha1.Tags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pull_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr push_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto;
};
// -------------------------------------------------------------------

class ArtifactsRegistry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.artifacts.v1alpha1.ArtifactsRegistry) */ {
 public:
  inline ArtifactsRegistry() : ArtifactsRegistry(nullptr) {}
  ~ArtifactsRegistry() override;
  explicit constexpr ArtifactsRegistry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArtifactsRegistry(const ArtifactsRegistry& from);
  ArtifactsRegistry(ArtifactsRegistry&& from) noexcept
    : ArtifactsRegistry() {
    *this = ::std::move(from);
  }

  inline ArtifactsRegistry& operator=(const ArtifactsRegistry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtifactsRegistry& operator=(ArtifactsRegistry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArtifactsRegistry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArtifactsRegistry* internal_default_instance() {
    return reinterpret_cast<const ArtifactsRegistry*>(
               &_ArtifactsRegistry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArtifactsRegistry& a, ArtifactsRegistry& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtifactsRegistry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtifactsRegistry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtifactsRegistry* New() const final {
    return new ArtifactsRegistry();
  }

  ArtifactsRegistry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtifactsRegistry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArtifactsRegistry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ArtifactsRegistry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtifactsRegistry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.artifacts.v1alpha1.ArtifactsRegistry";
  }
  protected:
  explicit ArtifactsRegistry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 7,
    kIdFieldNumber = 1,
    kDigestFieldNumber = 2,
    kPullTimeFieldNumber = 3,
    kPushTimeFieldNumber = 4,
    kOrganizationNameFieldNumber = 8,
    kProjectNameFieldNumber = 9,
    kEnvironmentNameFieldNumber = 10,
    kApplicationNameFieldNumber = 11,
    kUrlRepoFieldNumber = 12,
    kBranchRepoFieldNumber = 13,
    kUserFieldNumber = 15,
    kUserEmailFieldNumber = 16,
    kSizeFieldNumber = 5,
    kActiveFieldNumber = 6,
    kCurrentTagFieldNumber = 14,
  };
  // repeated .artifacts.artifacts.v1alpha1.Tags tags = 7 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::artifacts::artifacts::v1alpha1::Tags* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::artifacts::v1alpha1::Tags >*
      mutable_tags();
  private:
  const ::artifacts::artifacts::v1alpha1::Tags& _internal_tags(int index) const;
  ::artifacts::artifacts::v1alpha1::Tags* _internal_add_tags();
  public:
  const ::artifacts::artifacts::v1alpha1::Tags& tags(int index) const;
  ::artifacts::artifacts::v1alpha1::Tags* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::artifacts::v1alpha1::Tags >&
      tags() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string digest = 2 [json_name = "digest"];
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_MUST_USE_RESULT std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // string pull_time = 3 [json_name = "pullTime"];
  void clear_pull_time();
  const std::string& pull_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pull_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pull_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_pull_time();
  void set_allocated_pull_time(std::string* pull_time);
  private:
  const std::string& _internal_pull_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pull_time(const std::string& value);
  std::string* _internal_mutable_pull_time();
  public:

  // string push_time = 4 [json_name = "pushTime"];
  void clear_push_time();
  const std::string& push_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_push_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_push_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_push_time();
  void set_allocated_push_time(std::string* push_time);
  private:
  const std::string& _internal_push_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_push_time(const std::string& value);
  std::string* _internal_mutable_push_time();
  public:

  // string organization_name = 8 [json_name = "organizationName"];
  void clear_organization_name();
  const std::string& organization_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_name();
  void set_allocated_organization_name(std::string* organization_name);
  private:
  const std::string& _internal_organization_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_name(const std::string& value);
  std::string* _internal_mutable_organization_name();
  public:

  // string project_name = 9 [json_name = "projectName"];
  void clear_project_name();
  const std::string& project_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string environment_name = 10 [json_name = "environmentName"];
  void clear_environment_name();
  const std::string& environment_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_name();
  void set_allocated_environment_name(std::string* environment_name);
  private:
  const std::string& _internal_environment_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_name(const std::string& value);
  std::string* _internal_mutable_environment_name();
  public:

  // string application_name = 11 [json_name = "applicationName"];
  void clear_application_name();
  const std::string& application_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_name();
  void set_allocated_application_name(std::string* application_name);
  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(const std::string& value);
  std::string* _internal_mutable_application_name();
  public:

  // string url_repo = 12 [json_name = "urlRepo"];
  void clear_url_repo();
  const std::string& url_repo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_repo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_repo();
  PROTOBUF_MUST_USE_RESULT std::string* release_url_repo();
  void set_allocated_url_repo(std::string* url_repo);
  private:
  const std::string& _internal_url_repo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_repo(const std::string& value);
  std::string* _internal_mutable_url_repo();
  public:

  // string branch_repo = 13 [json_name = "branchRepo"];
  void clear_branch_repo();
  const std::string& branch_repo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_branch_repo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_branch_repo();
  PROTOBUF_MUST_USE_RESULT std::string* release_branch_repo();
  void set_allocated_branch_repo(std::string* branch_repo);
  private:
  const std::string& _internal_branch_repo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_branch_repo(const std::string& value);
  std::string* _internal_mutable_branch_repo();
  public:

  // string user = 15 [json_name = "user"];
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_MUST_USE_RESULT std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string user_email = 16 [json_name = "userEmail"];
  void clear_user_email();
  const std::string& user_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_email();
  void set_allocated_user_email(std::string* user_email);
  private:
  const std::string& _internal_user_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_email(const std::string& value);
  std::string* _internal_mutable_user_email();
  public:

  // int64 size = 5 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool active = 6 [json_name = "active"];
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // bool current_tag = 14 [json_name = "currentTag"];
  void clear_current_tag();
  bool current_tag() const;
  void set_current_tag(bool value);
  private:
  bool _internal_current_tag() const;
  void _internal_set_current_tag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::artifacts::v1alpha1::Tags > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pull_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr push_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_repo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_repo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_email_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  bool active_;
  bool current_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tags

// string name = 1 [json_name = "name"];
inline void Tags::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Tags::name() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.Tags.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tags::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.Tags.name)
}
inline std::string* Tags::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.Tags.name)
  return _s;
}
inline const std::string& Tags::_internal_name() const {
  return name_.Get();
}
inline void Tags::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Tags::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Tags::release_name() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.Tags.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Tags::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.Tags.name)
}

// string pull_time = 2 [json_name = "pullTime"];
inline void Tags::clear_pull_time() {
  pull_time_.ClearToEmpty();
}
inline const std::string& Tags::pull_time() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.Tags.pull_time)
  return _internal_pull_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tags::set_pull_time(ArgT0&& arg0, ArgT... args) {
 
 pull_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.Tags.pull_time)
}
inline std::string* Tags::mutable_pull_time() {
  std::string* _s = _internal_mutable_pull_time();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.Tags.pull_time)
  return _s;
}
inline const std::string& Tags::_internal_pull_time() const {
  return pull_time_.Get();
}
inline void Tags::_internal_set_pull_time(const std::string& value) {
  
  pull_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Tags::_internal_mutable_pull_time() {
  
  return pull_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Tags::release_pull_time() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.Tags.pull_time)
  return pull_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Tags::set_allocated_pull_time(std::string* pull_time) {
  if (pull_time != nullptr) {
    
  } else {
    
  }
  pull_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pull_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.Tags.pull_time)
}

// string push_time = 3 [json_name = "pushTime"];
inline void Tags::clear_push_time() {
  push_time_.ClearToEmpty();
}
inline const std::string& Tags::push_time() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.Tags.push_time)
  return _internal_push_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tags::set_push_time(ArgT0&& arg0, ArgT... args) {
 
 push_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.Tags.push_time)
}
inline std::string* Tags::mutable_push_time() {
  std::string* _s = _internal_mutable_push_time();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.Tags.push_time)
  return _s;
}
inline const std::string& Tags::_internal_push_time() const {
  return push_time_.Get();
}
inline void Tags::_internal_set_push_time(const std::string& value) {
  
  push_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Tags::_internal_mutable_push_time() {
  
  return push_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Tags::release_push_time() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.Tags.push_time)
  return push_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Tags::set_allocated_push_time(std::string* push_time) {
  if (push_time != nullptr) {
    
  } else {
    
  }
  push_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), push_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.Tags.push_time)
}

// uint32 storage_limit = 4 [json_name = "storageLimit"];
inline void Tags::clear_storage_limit() {
  storage_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tags::_internal_storage_limit() const {
  return storage_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tags::storage_limit() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.Tags.storage_limit)
  return _internal_storage_limit();
}
inline void Tags::_internal_set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_limit_ = value;
}
inline void Tags::set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_limit(value);
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.Tags.storage_limit)
}

// -------------------------------------------------------------------

// ArtifactsRegistry

// string id = 1 [json_name = "id"];
inline void ArtifactsRegistry::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::id() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.id)
}
inline std::string* ArtifactsRegistry::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.id)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_id() const {
  return id_.Get();
}
inline void ArtifactsRegistry::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_id() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.id)
}

// string digest = 2 [json_name = "digest"];
inline void ArtifactsRegistry::clear_digest() {
  digest_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::digest() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_digest(ArgT0&& arg0, ArgT... args) {
 
 digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.digest)
}
inline std::string* ArtifactsRegistry::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.digest)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_digest() const {
  return digest_.Get();
}
inline void ArtifactsRegistry::_internal_set_digest(const std::string& value) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_digest() {
  
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_digest() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.digest)
}

// string pull_time = 3 [json_name = "pullTime"];
inline void ArtifactsRegistry::clear_pull_time() {
  pull_time_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::pull_time() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.pull_time)
  return _internal_pull_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_pull_time(ArgT0&& arg0, ArgT... args) {
 
 pull_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.pull_time)
}
inline std::string* ArtifactsRegistry::mutable_pull_time() {
  std::string* _s = _internal_mutable_pull_time();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.pull_time)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_pull_time() const {
  return pull_time_.Get();
}
inline void ArtifactsRegistry::_internal_set_pull_time(const std::string& value) {
  
  pull_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_pull_time() {
  
  return pull_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_pull_time() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.pull_time)
  return pull_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_pull_time(std::string* pull_time) {
  if (pull_time != nullptr) {
    
  } else {
    
  }
  pull_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pull_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.pull_time)
}

// string push_time = 4 [json_name = "pushTime"];
inline void ArtifactsRegistry::clear_push_time() {
  push_time_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::push_time() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.push_time)
  return _internal_push_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_push_time(ArgT0&& arg0, ArgT... args) {
 
 push_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.push_time)
}
inline std::string* ArtifactsRegistry::mutable_push_time() {
  std::string* _s = _internal_mutable_push_time();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.push_time)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_push_time() const {
  return push_time_.Get();
}
inline void ArtifactsRegistry::_internal_set_push_time(const std::string& value) {
  
  push_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_push_time() {
  
  return push_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_push_time() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.push_time)
  return push_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_push_time(std::string* push_time) {
  if (push_time != nullptr) {
    
  } else {
    
  }
  push_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), push_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.push_time)
}

// int64 size = 5 [json_name = "size"];
inline void ArtifactsRegistry::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ArtifactsRegistry::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ArtifactsRegistry::size() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.size)
  return _internal_size();
}
inline void ArtifactsRegistry::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void ArtifactsRegistry::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.size)
}

// bool active = 6 [json_name = "active"];
inline void ArtifactsRegistry::clear_active() {
  active_ = false;
}
inline bool ArtifactsRegistry::_internal_active() const {
  return active_;
}
inline bool ArtifactsRegistry::active() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.active)
  return _internal_active();
}
inline void ArtifactsRegistry::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void ArtifactsRegistry::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.active)
}

// repeated .artifacts.artifacts.v1alpha1.Tags tags = 7 [json_name = "tags"];
inline int ArtifactsRegistry::_internal_tags_size() const {
  return tags_.size();
}
inline int ArtifactsRegistry::tags_size() const {
  return _internal_tags_size();
}
inline void ArtifactsRegistry::clear_tags() {
  tags_.Clear();
}
inline ::artifacts::artifacts::v1alpha1::Tags* ArtifactsRegistry::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::artifacts::v1alpha1::Tags >*
ArtifactsRegistry::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:artifacts.artifacts.v1alpha1.ArtifactsRegistry.tags)
  return &tags_;
}
inline const ::artifacts::artifacts::v1alpha1::Tags& ArtifactsRegistry::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::artifacts::artifacts::v1alpha1::Tags& ArtifactsRegistry::tags(int index) const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.tags)
  return _internal_tags(index);
}
inline ::artifacts::artifacts::v1alpha1::Tags* ArtifactsRegistry::_internal_add_tags() {
  return tags_.Add();
}
inline ::artifacts::artifacts::v1alpha1::Tags* ArtifactsRegistry::add_tags() {
  ::artifacts::artifacts::v1alpha1::Tags* _add = _internal_add_tags();
  // @@protoc_insertion_point(field_add:artifacts.artifacts.v1alpha1.ArtifactsRegistry.tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::artifacts::v1alpha1::Tags >&
ArtifactsRegistry::tags() const {
  // @@protoc_insertion_point(field_list:artifacts.artifacts.v1alpha1.ArtifactsRegistry.tags)
  return tags_;
}

// string organization_name = 8 [json_name = "organizationName"];
inline void ArtifactsRegistry::clear_organization_name() {
  organization_name_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::organization_name() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.organization_name)
  return _internal_organization_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_organization_name(ArgT0&& arg0, ArgT... args) {
 
 organization_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.organization_name)
}
inline std::string* ArtifactsRegistry::mutable_organization_name() {
  std::string* _s = _internal_mutable_organization_name();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.organization_name)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_organization_name() const {
  return organization_name_.Get();
}
inline void ArtifactsRegistry::_internal_set_organization_name(const std::string& value) {
  
  organization_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_organization_name() {
  
  return organization_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_organization_name() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.organization_name)
  return organization_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_organization_name(std::string* organization_name) {
  if (organization_name != nullptr) {
    
  } else {
    
  }
  organization_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.organization_name)
}

// string project_name = 9 [json_name = "projectName"];
inline void ArtifactsRegistry::clear_project_name() {
  project_name_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::project_name() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.project_name)
  return _internal_project_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_project_name(ArgT0&& arg0, ArgT... args) {
 
 project_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.project_name)
}
inline std::string* ArtifactsRegistry::mutable_project_name() {
  std::string* _s = _internal_mutable_project_name();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.project_name)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_project_name() const {
  return project_name_.Get();
}
inline void ArtifactsRegistry::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_project_name() {
  
  return project_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_project_name() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.project_name)
}

// string environment_name = 10 [json_name = "environmentName"];
inline void ArtifactsRegistry::clear_environment_name() {
  environment_name_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::environment_name() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.environment_name)
  return _internal_environment_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_environment_name(ArgT0&& arg0, ArgT... args) {
 
 environment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.environment_name)
}
inline std::string* ArtifactsRegistry::mutable_environment_name() {
  std::string* _s = _internal_mutable_environment_name();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.environment_name)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_environment_name() const {
  return environment_name_.Get();
}
inline void ArtifactsRegistry::_internal_set_environment_name(const std::string& value) {
  
  environment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_environment_name() {
  
  return environment_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_environment_name() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.environment_name)
  return environment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_environment_name(std::string* environment_name) {
  if (environment_name != nullptr) {
    
  } else {
    
  }
  environment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.environment_name)
}

// string application_name = 11 [json_name = "applicationName"];
inline void ArtifactsRegistry::clear_application_name() {
  application_name_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::application_name() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.application_name)
  return _internal_application_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_application_name(ArgT0&& arg0, ArgT... args) {
 
 application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.application_name)
}
inline std::string* ArtifactsRegistry::mutable_application_name() {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.application_name)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_application_name() const {
  return application_name_.Get();
}
inline void ArtifactsRegistry::_internal_set_application_name(const std::string& value) {
  
  application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_application_name() {
  
  return application_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_application_name() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.application_name)
  return application_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_application_name(std::string* application_name) {
  if (application_name != nullptr) {
    
  } else {
    
  }
  application_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.application_name)
}

// string url_repo = 12 [json_name = "urlRepo"];
inline void ArtifactsRegistry::clear_url_repo() {
  url_repo_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::url_repo() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.url_repo)
  return _internal_url_repo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_url_repo(ArgT0&& arg0, ArgT... args) {
 
 url_repo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.url_repo)
}
inline std::string* ArtifactsRegistry::mutable_url_repo() {
  std::string* _s = _internal_mutable_url_repo();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.url_repo)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_url_repo() const {
  return url_repo_.Get();
}
inline void ArtifactsRegistry::_internal_set_url_repo(const std::string& value) {
  
  url_repo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_url_repo() {
  
  return url_repo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_url_repo() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.url_repo)
  return url_repo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_url_repo(std::string* url_repo) {
  if (url_repo != nullptr) {
    
  } else {
    
  }
  url_repo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_repo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.url_repo)
}

// string branch_repo = 13 [json_name = "branchRepo"];
inline void ArtifactsRegistry::clear_branch_repo() {
  branch_repo_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::branch_repo() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.branch_repo)
  return _internal_branch_repo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_branch_repo(ArgT0&& arg0, ArgT... args) {
 
 branch_repo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.branch_repo)
}
inline std::string* ArtifactsRegistry::mutable_branch_repo() {
  std::string* _s = _internal_mutable_branch_repo();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.branch_repo)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_branch_repo() const {
  return branch_repo_.Get();
}
inline void ArtifactsRegistry::_internal_set_branch_repo(const std::string& value) {
  
  branch_repo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_branch_repo() {
  
  return branch_repo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_branch_repo() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.branch_repo)
  return branch_repo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_branch_repo(std::string* branch_repo) {
  if (branch_repo != nullptr) {
    
  } else {
    
  }
  branch_repo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch_repo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.branch_repo)
}

// bool current_tag = 14 [json_name = "currentTag"];
inline void ArtifactsRegistry::clear_current_tag() {
  current_tag_ = false;
}
inline bool ArtifactsRegistry::_internal_current_tag() const {
  return current_tag_;
}
inline bool ArtifactsRegistry::current_tag() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.current_tag)
  return _internal_current_tag();
}
inline void ArtifactsRegistry::_internal_set_current_tag(bool value) {
  
  current_tag_ = value;
}
inline void ArtifactsRegistry::set_current_tag(bool value) {
  _internal_set_current_tag(value);
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.current_tag)
}

// string user = 15 [json_name = "user"];
inline void ArtifactsRegistry::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::user() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_user(ArgT0&& arg0, ArgT... args) {
 
 user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user)
}
inline std::string* ArtifactsRegistry::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_user() const {
  return user_.Get();
}
inline void ArtifactsRegistry::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_user() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user)
}

// string user_email = 16 [json_name = "userEmail"];
inline void ArtifactsRegistry::clear_user_email() {
  user_email_.ClearToEmpty();
}
inline const std::string& ArtifactsRegistry::user_email() const {
  // @@protoc_insertion_point(field_get:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user_email)
  return _internal_user_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArtifactsRegistry::set_user_email(ArgT0&& arg0, ArgT... args) {
 
 user_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user_email)
}
inline std::string* ArtifactsRegistry::mutable_user_email() {
  std::string* _s = _internal_mutable_user_email();
  // @@protoc_insertion_point(field_mutable:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user_email)
  return _s;
}
inline const std::string& ArtifactsRegistry::_internal_user_email() const {
  return user_email_.Get();
}
inline void ArtifactsRegistry::_internal_set_user_email(const std::string& value) {
  
  user_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::_internal_mutable_user_email() {
  
  return user_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArtifactsRegistry::release_user_email() {
  // @@protoc_insertion_point(field_release:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user_email)
  return user_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ArtifactsRegistry::set_allocated_user_email(std::string* user_email) {
  if (user_email != nullptr) {
    
  } else {
    
  }
  user_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.artifacts.v1alpha1.ArtifactsRegistry.user_email)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace artifacts
}  // namespace artifacts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto
