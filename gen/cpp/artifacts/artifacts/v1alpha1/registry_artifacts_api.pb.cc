// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/artifacts/v1alpha1/registry_artifacts_api.proto

#include "artifacts/artifacts/v1alpha1/registry_artifacts_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artifacts {
namespace artifacts {
namespace v1alpha1 {
constexpr ListArtifactsRegistryRequest::ListArtifactsRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListArtifactsRegistryRequestDefaultTypeInternal {
  constexpr ListArtifactsRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListArtifactsRegistryRequestDefaultTypeInternal() {}
  union {
    ListArtifactsRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListArtifactsRegistryRequestDefaultTypeInternal _ListArtifactsRegistryRequest_default_instance_;
constexpr ListArtifactsRegistryResponse::ListArtifactsRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : artifacts_registry_()
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListArtifactsRegistryResponseDefaultTypeInternal {
  constexpr ListArtifactsRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListArtifactsRegistryResponseDefaultTypeInternal() {}
  union {
    ListArtifactsRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListArtifactsRegistryResponseDefaultTypeInternal _ListArtifactsRegistryResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace artifacts
}  // namespace artifacts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest, runtime_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse, artifacts_registry_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest)},
  { 8, -1, sizeof(::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::artifacts::v1alpha1::_ListArtifactsRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::artifacts::v1alpha1::_ListArtifactsRegistryResponse_default_instance_),
};

const char descriptor_table_protodef_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9artifacts/artifacts/v1alpha1/registry_"
  "artifacts_api.proto\022\034artifacts.artifacts"
  ".v1alpha1\0325artifacts/artifacts/v1alpha1/"
  "registry_artifacts.proto\"\205\001\n\034ListArtifac"
  "tsRegistryRequest\022\'\n\017organization_id\030\001 \001"
  "(\tR\016organizationId\022\035\n\nproject_id\030\002 \001(\tR\t"
  "projectId\022\035\n\nruntime_id\030\003 \001(\tR\truntimeId"
  "\"\227\001\n\035ListArtifactsRegistryResponse\022^\n\022ar"
  "tifacts_registry\030\001 \003(\0132/.artifacts.artif"
  "acts.v1alpha1.ArtifactsRegistryR\021artifac"
  "tsRegistry\022\026\n\006status\030\002 \001(\tR\006status2\260\001\n\033R"
  "egistryArtifactsAPIService\022\220\001\n\025ListArtif"
  "actsRegistry\022:.artifacts.artifacts.v1alp"
  "ha1.ListArtifactsRegistryRequest\032;.artif"
  "acts.artifacts.v1alpha1.ListArtifactsReg"
  "istryResponseB\310\001\n&io.cuemby.artifacts.ar"
  "tifacts.v1alpha1B\031RegistryArtifactsProto"
  "APIP\001Z=github.com/cuemby/ccp-sdk/gen/go/"
  "artifacts/artifacts/v1alpha1\242\002\003PPX\252\002\034Art"
  "ifacts.Artifacts.V1Alpha1\312\002\034Artifacts\\Ar"
  "tifacts\\V1Alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_deps[1] = {
  &::descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto = {
  false, false, 824, descriptor_table_protodef_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto, "artifacts/artifacts/v1alpha1/registry_artifacts_api.proto", 
  &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_once, descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto::offsets,
  file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto, file_level_enum_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto, file_level_service_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_getter() {
  return &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto(&descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto);
namespace artifacts {
namespace artifacts {
namespace v1alpha1 {

// ===================================================================

class ListArtifactsRegistryRequest::_Internal {
 public:
};

ListArtifactsRegistryRequest::ListArtifactsRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
}
ListArtifactsRegistryRequest::ListArtifactsRegistryRequest(const ListArtifactsRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_id().empty()) {
    runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
}

inline void ListArtifactsRegistryRequest::SharedCtor() {
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListArtifactsRegistryRequest::~ListArtifactsRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListArtifactsRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListArtifactsRegistryRequest::ArenaDtor(void* object) {
  ListArtifactsRegistryRequest* _this = reinterpret_cast< ListArtifactsRegistryRequest* >(object);
  (void)_this;
}
void ListArtifactsRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListArtifactsRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListArtifactsRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  runtime_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListArtifactsRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_id = 3 [json_name = "runtimeId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_runtime_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest.runtime_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListArtifactsRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_id(), target);
  }

  // string runtime_id = 3 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_id().data(), static_cast<int>(this->_internal_runtime_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest.runtime_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_runtime_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
  return target;
}

size_t ListArtifactsRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string runtime_id = 3 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListArtifactsRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListArtifactsRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListArtifactsRegistryRequest::GetClassData() const { return &_class_data_; }

void ListArtifactsRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListArtifactsRegistryRequest *>(to)->MergeFrom(
      static_cast<const ListArtifactsRegistryRequest &>(from));
}


void ListArtifactsRegistryRequest::MergeFrom(const ListArtifactsRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_runtime_id().empty()) {
    _internal_set_runtime_id(from._internal_runtime_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListArtifactsRegistryRequest::CopyFrom(const ListArtifactsRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactsRegistryRequest::IsInitialized() const {
  return true;
}

void ListArtifactsRegistryRequest::InternalSwap(ListArtifactsRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_id_, GetArenaForAllocation(),
      &other->runtime_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListArtifactsRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_getter, &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto[0]);
}

// ===================================================================

class ListArtifactsRegistryResponse::_Internal {
 public:
};

void ListArtifactsRegistryResponse::clear_artifacts_registry() {
  artifacts_registry_.Clear();
}
ListArtifactsRegistryResponse::ListArtifactsRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  artifacts_registry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
}
ListArtifactsRegistryResponse::ListArtifactsRegistryResponse(const ListArtifactsRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      artifacts_registry_(from.artifacts_registry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
}

inline void ListArtifactsRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListArtifactsRegistryResponse::~ListArtifactsRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListArtifactsRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListArtifactsRegistryResponse::ArenaDtor(void* object) {
  ListArtifactsRegistryResponse* _this = reinterpret_cast< ListArtifactsRegistryResponse* >(object);
  (void)_this;
}
void ListArtifactsRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListArtifactsRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListArtifactsRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifacts_registry_.Clear();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListArtifactsRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .artifacts.artifacts.v1alpha1.ArtifactsRegistry artifacts_registry = 1 [json_name = "artifactsRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artifacts_registry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListArtifactsRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artifacts.artifacts.v1alpha1.ArtifactsRegistry artifacts_registry = 1 [json_name = "artifactsRegistry"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artifacts_registry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_artifacts_registry(i), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
  return target;
}

size_t ListArtifactsRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artifacts.artifacts.v1alpha1.ArtifactsRegistry artifacts_registry = 1 [json_name = "artifactsRegistry"];
  total_size += 1UL * this->_internal_artifacts_registry_size();
  for (const auto& msg : this->artifacts_registry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListArtifactsRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListArtifactsRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListArtifactsRegistryResponse::GetClassData() const { return &_class_data_; }

void ListArtifactsRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListArtifactsRegistryResponse *>(to)->MergeFrom(
      static_cast<const ListArtifactsRegistryResponse &>(from));
}


void ListArtifactsRegistryResponse::MergeFrom(const ListArtifactsRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifacts_registry_.MergeFrom(from.artifacts_registry_);
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListArtifactsRegistryResponse::CopyFrom(const ListArtifactsRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.artifacts.v1alpha1.ListArtifactsRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactsRegistryResponse::IsInitialized() const {
  return true;
}

void ListArtifactsRegistryResponse::InternalSwap(ListArtifactsRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  artifacts_registry_.InternalSwap(&other->artifacts_registry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListArtifactsRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_getter, &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace artifacts
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
