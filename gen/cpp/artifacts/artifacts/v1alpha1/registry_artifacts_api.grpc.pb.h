// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: artifacts/artifacts/v1alpha1/registry_artifacts_api.proto
#ifndef GRPC_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto__INCLUDED
#define GRPC_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto__INCLUDED

#include "artifacts/artifacts/v1alpha1/registry_artifacts_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace artifacts {
namespace artifacts {
namespace v1alpha1 {

class RegistryArtifactsAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "artifacts.artifacts.v1alpha1.RegistryArtifactsAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>> AsyncListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>>(AsyncListArtifactsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>> PrepareAsyncListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>>(PrepareAsyncListArtifactsRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>> AsyncCreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>>(AsyncCreateLabelArtifactsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>> PrepareAsyncCreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>>(PrepareAsyncCreateLabelArtifactsRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status AddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>> AsyncAddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>>(AsyncAddLabelArtifactsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>> PrepareAsyncAddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>>(PrepareAsyncAddLabelArtifactsRegistryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>* AsyncListArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>* PrepareAsyncListArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>* AsyncCreateLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>* PrepareAsyncCreateLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>* AsyncAddLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>* PrepareAsyncAddLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>> AsyncListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>>(AsyncListArtifactsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>> PrepareAsyncListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>>(PrepareAsyncListArtifactsRegistryRaw(context, request, cq));
    }
    ::grpc::Status CreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>> AsyncCreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>>(AsyncCreateLabelArtifactsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>> PrepareAsyncCreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>>(PrepareAsyncCreateLabelArtifactsRegistryRaw(context, request, cq));
    }
    ::grpc::Status AddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>> AsyncAddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>>(AsyncAddLabelArtifactsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>> PrepareAsyncAddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>>(PrepareAsyncAddLabelArtifactsRegistryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void AddLabelArtifactsRegistry(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>* AsyncListArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>* PrepareAsyncListArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>* AsyncCreateLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>* PrepareAsyncCreateLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>* AsyncAddLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>* PrepareAsyncAddLabelArtifactsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListArtifactsRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLabelArtifactsRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_AddLabelArtifactsRegistry_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response);
    virtual ::grpc::Status CreateLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response);
    virtual ::grpc::Status AddLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListArtifactsRegistry() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArtifactsRegistry(::grpc::ServerContext* context, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLabelArtifactsRegistry(::grpc::ServerContext* context, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLabelArtifactsRegistry(::grpc::ServerContext* context, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListArtifactsRegistry<WithAsyncMethod_CreateLabelArtifactsRegistry<WithAsyncMethod_AddLabelArtifactsRegistry<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListArtifactsRegistry() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListArtifactsRegistry() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArtifactsRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLabelArtifactsRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLabelArtifactsRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListArtifactsRegistry() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>(std::bind(&WithStreamedUnaryMethod_ListArtifactsRegistry<BaseClass>::StreamedListArtifactsRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListArtifactsRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::artifacts::v1alpha1::ListArtifactsRegistryRequest,::artifacts::artifacts::v1alpha1::ListArtifactsRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>(std::bind(&WithStreamedUnaryMethod_CreateLabelArtifactsRegistry<BaseClass>::StreamedCreateLabelArtifactsRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLabelArtifactsRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryRequest,::artifacts::artifacts::v1alpha1::CreateLabelArtifactsRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddLabelArtifactsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddLabelArtifactsRegistry() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>(std::bind(&WithStreamedUnaryMethod_AddLabelArtifactsRegistry<BaseClass>::StreamedAddLabelArtifactsRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddLabelArtifactsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddLabelArtifactsRegistry(::grpc::ServerContext* context, const ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest* request, ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddLabelArtifactsRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryRequest,::artifacts::artifacts::v1alpha1::AddLabelArtifactsRegistryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListArtifactsRegistry<WithStreamedUnaryMethod_CreateLabelArtifactsRegistry<WithStreamedUnaryMethod_AddLabelArtifactsRegistry<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListArtifactsRegistry<WithStreamedUnaryMethod_CreateLabelArtifactsRegistry<WithStreamedUnaryMethod_AddLabelArtifactsRegistry<Service > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace artifacts
}  // namespace artifacts


#endif  // GRPC_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_5fapi_2eproto__INCLUDED
