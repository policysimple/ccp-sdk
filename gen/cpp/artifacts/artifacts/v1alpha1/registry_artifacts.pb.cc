// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/artifacts/v1alpha1/registry_artifacts.proto

#include "artifacts/artifacts/v1alpha1/registry_artifacts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artifacts {
namespace artifacts {
namespace v1alpha1 {
constexpr Tags::Tags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pull_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , push_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , storage_limit_(0u){}
struct TagsDefaultTypeInternal {
  constexpr TagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagsDefaultTypeInternal() {}
  union {
    Tags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagsDefaultTypeInternal _Tags_default_instance_;
constexpr ArtifactsRegistry::ArtifactsRegistry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pull_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , push_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_repo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_repo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(int64_t{0})
  , active_(false)
  , current_tag_(false){}
struct ArtifactsRegistryDefaultTypeInternal {
  constexpr ArtifactsRegistryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArtifactsRegistryDefaultTypeInternal() {}
  union {
    ArtifactsRegistry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArtifactsRegistryDefaultTypeInternal _ArtifactsRegistry_default_instance_;
}  // namespace v1alpha1
}  // namespace artifacts
}  // namespace artifacts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::Tags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::Tags, name_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::Tags, pull_time_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::Tags, push_time_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::Tags, storage_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, digest_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, pull_time_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, push_time_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, size_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, active_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, tags_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, organization_name_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, project_name_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, environment_name_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, application_name_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, url_repo_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, branch_repo_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, current_tag_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, user_),
  PROTOBUF_FIELD_OFFSET(::artifacts::artifacts::v1alpha1::ArtifactsRegistry, user_email_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artifacts::artifacts::v1alpha1::Tags)},
  { 9, -1, sizeof(::artifacts::artifacts::v1alpha1::ArtifactsRegistry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::artifacts::v1alpha1::_Tags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::artifacts::v1alpha1::_ArtifactsRegistry_default_instance_),
};

const char descriptor_table_protodef_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5artifacts/artifacts/v1alpha1/registry_"
  "artifacts.proto\022\034artifacts.artifacts.v1a"
  "lpha1\"y\n\004Tags\022\022\n\004name\030\001 \001(\tR\004name\022\033\n\tpul"
  "l_time\030\002 \001(\tR\010pullTime\022\033\n\tpush_time\030\003 \001("
  "\tR\010pushTime\022#\n\rstorage_limit\030\004 \001(\rR\014stor"
  "ageLimit\"\217\004\n\021ArtifactsRegistry\022\016\n\002id\030\001 \001"
  "(\tR\002id\022\026\n\006digest\030\002 \001(\tR\006digest\022\033\n\tpull_t"
  "ime\030\003 \001(\tR\010pullTime\022\033\n\tpush_time\030\004 \001(\tR\010"
  "pushTime\022\022\n\004size\030\005 \001(\003R\004size\022\026\n\006active\030\006"
  " \001(\010R\006active\0226\n\004tags\030\007 \003(\0132\".artifacts.a"
  "rtifacts.v1alpha1.TagsR\004tags\022+\n\021organiza"
  "tion_name\030\010 \001(\tR\020organizationName\022!\n\014pro"
  "ject_name\030\t \001(\tR\013projectName\022)\n\020environm"
  "ent_name\030\n \001(\tR\017environmentName\022)\n\020appli"
  "cation_name\030\013 \001(\tR\017applicationName\022\031\n\010ur"
  "l_repo\030\014 \001(\tR\007urlRepo\022\037\n\013branch_repo\030\r \001"
  "(\tR\nbranchRepo\022\037\n\013current_tag\030\016 \001(\010R\ncur"
  "rentTag\022\022\n\004user\030\017 \001(\tR\004user\022\035\n\nuser_emai"
  "l\030\020 \001(\tR\tuserEmailB\305\001\n&io.cuemby.artifac"
  "ts.artifacts.v1alpha1B\026RegistryArtifacts"
  "ProtoP\001Z=github.com/cuemby/ccp-sdk/gen/g"
  "o/artifacts/artifacts/v1alpha1\242\002\003PPX\252\002\034A"
  "rtifacts.Artifacts.V1Alpha1\312\002\034Artifacts\\"
  "Artifacts\\V1Alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto = {
  false, false, 946, descriptor_table_protodef_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto, "artifacts/artifacts/v1alpha1/registry_artifacts.proto", 
  &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto::offsets,
  file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto, file_level_enum_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto, file_level_service_descriptors_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto_getter() {
  return &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto(&descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto);
namespace artifacts {
namespace artifacts {
namespace v1alpha1 {

// ===================================================================

class Tags::_Internal {
 public:
};

Tags::Tags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.artifacts.v1alpha1.Tags)
}
Tags::Tags(const Tags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  pull_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pull_time().empty()) {
    pull_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pull_time(), 
      GetArenaForAllocation());
  }
  push_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_push_time().empty()) {
    push_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_push_time(), 
      GetArenaForAllocation());
  }
  storage_limit_ = from.storage_limit_;
  // @@protoc_insertion_point(copy_constructor:artifacts.artifacts.v1alpha1.Tags)
}

inline void Tags::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pull_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
push_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
storage_limit_ = 0u;
}

Tags::~Tags() {
  // @@protoc_insertion_point(destructor:artifacts.artifacts.v1alpha1.Tags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pull_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tags::ArenaDtor(void* object) {
  Tags* _this = reinterpret_cast< Tags* >(object);
  (void)_this;
}
void Tags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tags::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.artifacts.v1alpha1.Tags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  pull_time_.ClearToEmpty();
  push_time_.ClearToEmpty();
  storage_limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.Tags.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pull_time = 2 [json_name = "pullTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pull_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.Tags.pull_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string push_time = 3 [json_name = "pushTime"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_push_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.Tags.push_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 storage_limit = 4 [json_name = "storageLimit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          storage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.artifacts.v1alpha1.Tags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.Tags.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string pull_time = 2 [json_name = "pullTime"];
  if (!this->_internal_pull_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pull_time().data(), static_cast<int>(this->_internal_pull_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.Tags.pull_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pull_time(), target);
  }

  // string push_time = 3 [json_name = "pushTime"];
  if (!this->_internal_push_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_push_time().data(), static_cast<int>(this->_internal_push_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.Tags.push_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_push_time(), target);
  }

  // uint32 storage_limit = 4 [json_name = "storageLimit"];
  if (this->_internal_storage_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_storage_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.artifacts.v1alpha1.Tags)
  return target;
}

size_t Tags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.artifacts.v1alpha1.Tags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string pull_time = 2 [json_name = "pullTime"];
  if (!this->_internal_pull_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pull_time());
  }

  // string push_time = 3 [json_name = "pushTime"];
  if (!this->_internal_push_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_push_time());
  }

  // uint32 storage_limit = 4 [json_name = "storageLimit"];
  if (this->_internal_storage_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tags::GetClassData() const { return &_class_data_; }

void Tags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Tags *>(to)->MergeFrom(
      static_cast<const Tags &>(from));
}


void Tags::MergeFrom(const Tags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.artifacts.v1alpha1.Tags)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_pull_time().empty()) {
    _internal_set_pull_time(from._internal_pull_time());
  }
  if (!from._internal_push_time().empty()) {
    _internal_set_push_time(from._internal_push_time());
  }
  if (from._internal_storage_limit() != 0) {
    _internal_set_storage_limit(from._internal_storage_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tags::CopyFrom(const Tags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.artifacts.v1alpha1.Tags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tags::IsInitialized() const {
  return true;
}

void Tags::InternalSwap(Tags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pull_time_, GetArenaForAllocation(),
      &other->pull_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &push_time_, GetArenaForAllocation(),
      &other->push_time_, other->GetArenaForAllocation()
  );
  swap(storage_limit_, other->storage_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto_getter, &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto_once,
      file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto[0]);
}

// ===================================================================

class ArtifactsRegistry::_Internal {
 public:
};

ArtifactsRegistry::ArtifactsRegistry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
}
ArtifactsRegistry::ArtifactsRegistry(const ArtifactsRegistry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digest().empty()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArenaForAllocation());
  }
  pull_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pull_time().empty()) {
    pull_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pull_time(), 
      GetArenaForAllocation());
  }
  push_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_push_time().empty()) {
    push_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_push_time(), 
      GetArenaForAllocation());
  }
  organization_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_name().empty()) {
    organization_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_name(), 
      GetArenaForAllocation());
  }
  project_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_name().empty()) {
    project_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_name(), 
      GetArenaForAllocation());
  }
  environment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_name().empty()) {
    environment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_name(), 
      GetArenaForAllocation());
  }
  application_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_name().empty()) {
    application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_name(), 
      GetArenaForAllocation());
  }
  url_repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url_repo().empty()) {
    url_repo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_repo(), 
      GetArenaForAllocation());
  }
  branch_repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch_repo().empty()) {
    branch_repo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch_repo(), 
      GetArenaForAllocation());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArenaForAllocation());
  }
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_email().empty()) {
    user_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_email(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_tag_) -
    reinterpret_cast<char*>(&size_)) + sizeof(current_tag_));
  // @@protoc_insertion_point(copy_constructor:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
}

inline void ArtifactsRegistry::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pull_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
push_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_tag_) -
    reinterpret_cast<char*>(&size_)) + sizeof(current_tag_));
}

ArtifactsRegistry::~ArtifactsRegistry() {
  // @@protoc_insertion_point(destructor:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArtifactsRegistry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pull_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_repo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_repo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArtifactsRegistry::ArenaDtor(void* object) {
  ArtifactsRegistry* _this = reinterpret_cast< ArtifactsRegistry* >(object);
  (void)_this;
}
void ArtifactsRegistry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsRegistry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArtifactsRegistry::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  id_.ClearToEmpty();
  digest_.ClearToEmpty();
  pull_time_.ClearToEmpty();
  push_time_.ClearToEmpty();
  organization_name_.ClearToEmpty();
  project_name_.ClearToEmpty();
  environment_name_.ClearToEmpty();
  application_name_.ClearToEmpty();
  url_repo_.ClearToEmpty();
  branch_repo_.ClearToEmpty();
  user_.ClearToEmpty();
  user_email_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_tag_) -
      reinterpret_cast<char*>(&size_)) + sizeof(current_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsRegistry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string digest = 2 [json_name = "digest"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.digest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pull_time = 3 [json_name = "pullTime"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pull_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.pull_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string push_time = 4 [json_name = "pushTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_push_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.push_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 5 [json_name = "size"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 6 [json_name = "active"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .artifacts.artifacts.v1alpha1.Tags tags = 7 [json_name = "tags"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string organization_name = 8 [json_name = "organizationName"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_organization_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.organization_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_name = 9 [json_name = "projectName"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_project_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.project_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_name = 10 [json_name = "environmentName"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_environment_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.environment_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_name = 11 [json_name = "applicationName"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_application_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.application_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url_repo = 12 [json_name = "urlRepo"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_url_repo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.url_repo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string branch_repo = 13 [json_name = "branchRepo"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_branch_repo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.branch_repo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool current_tag = 14 [json_name = "currentTag"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          current_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 15 [json_name = "user"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_email = 16 [json_name = "userEmail"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_user_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.artifacts.v1alpha1.ArtifactsRegistry.user_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsRegistry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string digest = 2 [json_name = "digest"];
  if (!this->_internal_digest().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.digest");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // string pull_time = 3 [json_name = "pullTime"];
  if (!this->_internal_pull_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pull_time().data(), static_cast<int>(this->_internal_pull_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.pull_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pull_time(), target);
  }

  // string push_time = 4 [json_name = "pushTime"];
  if (!this->_internal_push_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_push_time().data(), static_cast<int>(this->_internal_push_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.push_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_push_time(), target);
  }

  // int64 size = 5 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_size(), target);
  }

  // bool active = 6 [json_name = "active"];
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_active(), target);
  }

  // repeated .artifacts.artifacts.v1alpha1.Tags tags = 7 [json_name = "tags"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tags(i), target, stream);
  }

  // string organization_name = 8 [json_name = "organizationName"];
  if (!this->_internal_organization_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_name().data(), static_cast<int>(this->_internal_organization_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.organization_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_organization_name(), target);
  }

  // string project_name = 9 [json_name = "projectName"];
  if (!this->_internal_project_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_name().data(), static_cast<int>(this->_internal_project_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.project_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_project_name(), target);
  }

  // string environment_name = 10 [json_name = "environmentName"];
  if (!this->_internal_environment_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_name().data(), static_cast<int>(this->_internal_environment_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.environment_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_environment_name(), target);
  }

  // string application_name = 11 [json_name = "applicationName"];
  if (!this->_internal_application_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_name().data(), static_cast<int>(this->_internal_application_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.application_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_application_name(), target);
  }

  // string url_repo = 12 [json_name = "urlRepo"];
  if (!this->_internal_url_repo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url_repo().data(), static_cast<int>(this->_internal_url_repo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.url_repo");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_url_repo(), target);
  }

  // string branch_repo = 13 [json_name = "branchRepo"];
  if (!this->_internal_branch_repo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch_repo().data(), static_cast<int>(this->_internal_branch_repo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.branch_repo");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_branch_repo(), target);
  }

  // bool current_tag = 14 [json_name = "currentTag"];
  if (this->_internal_current_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_current_tag(), target);
  }

  // string user = 15 [json_name = "user"];
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.user");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_user(), target);
  }

  // string user_email = 16 [json_name = "userEmail"];
  if (!this->_internal_user_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_email().data(), static_cast<int>(this->_internal_user_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.artifacts.v1alpha1.ArtifactsRegistry.user_email");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_user_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
  return target;
}

size_t ArtifactsRegistry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artifacts.artifacts.v1alpha1.Tags tags = 7 [json_name = "tags"];
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string digest = 2 [json_name = "digest"];
  if (!this->_internal_digest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_digest());
  }

  // string pull_time = 3 [json_name = "pullTime"];
  if (!this->_internal_pull_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pull_time());
  }

  // string push_time = 4 [json_name = "pushTime"];
  if (!this->_internal_push_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_push_time());
  }

  // string organization_name = 8 [json_name = "organizationName"];
  if (!this->_internal_organization_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_name());
  }

  // string project_name = 9 [json_name = "projectName"];
  if (!this->_internal_project_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_name());
  }

  // string environment_name = 10 [json_name = "environmentName"];
  if (!this->_internal_environment_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_name());
  }

  // string application_name = 11 [json_name = "applicationName"];
  if (!this->_internal_application_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_name());
  }

  // string url_repo = 12 [json_name = "urlRepo"];
  if (!this->_internal_url_repo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url_repo());
  }

  // string branch_repo = 13 [json_name = "branchRepo"];
  if (!this->_internal_branch_repo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch_repo());
  }

  // string user = 15 [json_name = "user"];
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string user_email = 16 [json_name = "userEmail"];
  if (!this->_internal_user_email().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_email());
  }

  // int64 size = 5 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // bool active = 6 [json_name = "active"];
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  // bool current_tag = 14 [json_name = "currentTag"];
  if (this->_internal_current_tag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArtifactsRegistry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArtifactsRegistry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArtifactsRegistry::GetClassData() const { return &_class_data_; }

void ArtifactsRegistry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ArtifactsRegistry *>(to)->MergeFrom(
      static_cast<const ArtifactsRegistry &>(from));
}


void ArtifactsRegistry::MergeFrom(const ArtifactsRegistry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_digest().empty()) {
    _internal_set_digest(from._internal_digest());
  }
  if (!from._internal_pull_time().empty()) {
    _internal_set_pull_time(from._internal_pull_time());
  }
  if (!from._internal_push_time().empty()) {
    _internal_set_push_time(from._internal_push_time());
  }
  if (!from._internal_organization_name().empty()) {
    _internal_set_organization_name(from._internal_organization_name());
  }
  if (!from._internal_project_name().empty()) {
    _internal_set_project_name(from._internal_project_name());
  }
  if (!from._internal_environment_name().empty()) {
    _internal_set_environment_name(from._internal_environment_name());
  }
  if (!from._internal_application_name().empty()) {
    _internal_set_application_name(from._internal_application_name());
  }
  if (!from._internal_url_repo().empty()) {
    _internal_set_url_repo(from._internal_url_repo());
  }
  if (!from._internal_branch_repo().empty()) {
    _internal_set_branch_repo(from._internal_branch_repo());
  }
  if (!from._internal_user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from._internal_user_email().empty()) {
    _internal_set_user_email(from._internal_user_email());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from._internal_current_tag() != 0) {
    _internal_set_current_tag(from._internal_current_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArtifactsRegistry::CopyFrom(const ArtifactsRegistry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.artifacts.v1alpha1.ArtifactsRegistry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsRegistry::IsInitialized() const {
  return true;
}

void ArtifactsRegistry::InternalSwap(ArtifactsRegistry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digest_, GetArenaForAllocation(),
      &other->digest_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pull_time_, GetArenaForAllocation(),
      &other->pull_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &push_time_, GetArenaForAllocation(),
      &other->push_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_name_, GetArenaForAllocation(),
      &other->organization_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_name_, GetArenaForAllocation(),
      &other->project_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_name_, GetArenaForAllocation(),
      &other->environment_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_name_, GetArenaForAllocation(),
      &other->application_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_repo_, GetArenaForAllocation(),
      &other->url_repo_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_repo_, GetArenaForAllocation(),
      &other->branch_repo_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_, GetArenaForAllocation(),
      &other->user_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_email_, GetArenaForAllocation(),
      &other->user_email_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsRegistry, current_tag_)
      + sizeof(ArtifactsRegistry::current_tag_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsRegistry, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsRegistry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto_getter, &descriptor_table_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto_once,
      file_level_metadata_artifacts_2fartifacts_2fv1alpha1_2fregistry_5fartifacts_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace artifacts
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artifacts::artifacts::v1alpha1::Tags* Arena::CreateMaybeMessage< ::artifacts::artifacts::v1alpha1::Tags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::artifacts::v1alpha1::Tags >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::artifacts::v1alpha1::ArtifactsRegistry* Arena::CreateMaybeMessage< ::artifacts::artifacts::v1alpha1::ArtifactsRegistry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::artifacts::v1alpha1::ArtifactsRegistry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
