// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/quotas/v1alpha1/registry_quotas.proto

#include "artifacts/quotas/v1alpha1/registry_quotas.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artifacts {
namespace quotas {
namespace v1alpha1 {
constexpr HarborQuotas::HarborQuotas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : storage_used_(0u)
  , storage_limit_(0u){}
struct HarborQuotasDefaultTypeInternal {
  constexpr HarborQuotasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HarborQuotasDefaultTypeInternal() {}
  union {
    HarborQuotas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HarborQuotasDefaultTypeInternal _HarborQuotas_default_instance_;
constexpr QuotasRegistry::QuotasRegistry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , harbor_(nullptr)
  , organization_id_(0u)
  , project_id_(0u)
  , active_(false){}
struct QuotasRegistryDefaultTypeInternal {
  constexpr QuotasRegistryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuotasRegistryDefaultTypeInternal() {}
  union {
    QuotasRegistry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuotasRegistryDefaultTypeInternal _QuotasRegistry_default_instance_;
}  // namespace v1alpha1
}  // namespace quotas
}  // namespace artifacts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::HarborQuotas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::HarborQuotas, storage_used_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::HarborQuotas, storage_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::QuotasRegistry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::QuotasRegistry, id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::QuotasRegistry, organization_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::QuotasRegistry, project_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::QuotasRegistry, environment_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::QuotasRegistry, active_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::QuotasRegistry, harbor_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artifacts::quotas::v1alpha1::HarborQuotas)},
  { 7, -1, sizeof(::artifacts::quotas::v1alpha1::QuotasRegistry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::quotas::v1alpha1::_HarborQuotas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::quotas::v1alpha1::_QuotasRegistry_default_instance_),
};

const char descriptor_table_protodef_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/artifacts/quotas/v1alpha1/registry_quo"
  "tas.proto\022\031artifacts.quotas.v1alpha1\"V\n\014"
  "HarborQuotas\022!\n\014storage_used\030\001 \001(\rR\013stor"
  "ageUsed\022#\n\rstorage_limit\030\002 \001(\rR\014storageL"
  "imit\"\350\001\n\016QuotasRegistry\022\016\n\002id\030\001 \001(\tR\002id\022"
  "\'\n\017organization_id\030\002 \001(\rR\016organizationId"
  "\022\035\n\nproject_id\030\003 \001(\rR\tprojectId\022%\n\016envir"
  "onment_id\030\004 \001(\tR\renvironmentId\022\026\n\006active"
  "\030\006 \001(\010R\006active\022\?\n\006harbor\030\007 \001(\0132\'.artifac"
  "ts.quotas.v1alpha1.HarborQuotasR\006harborB"
  "\266\001\n#io.cuemby.artifacts.quotas.v1alpha1B"
  "\023RegistryQuotasProtoP\001Z:github.com/cuemb"
  "y/ccp-sdk/gen/go/artifacts/quotas/v1alph"
  "a1\242\002\003PPX\252\002\031Artifacts.Quotas.V1Alpha1\312\002\031A"
  "rtifacts\\Quotas\\V1Alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto = {
  false, false, 592, descriptor_table_protodef_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto, "artifacts/quotas/v1alpha1/registry_quotas.proto", 
  &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto::offsets,
  file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto, file_level_enum_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto, file_level_service_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto_getter() {
  return &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto(&descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto);
namespace artifacts {
namespace quotas {
namespace v1alpha1 {

// ===================================================================

class HarborQuotas::_Internal {
 public:
};

HarborQuotas::HarborQuotas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.quotas.v1alpha1.HarborQuotas)
}
HarborQuotas::HarborQuotas(const HarborQuotas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&storage_used_, &from.storage_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_limit_) -
    reinterpret_cast<char*>(&storage_used_)) + sizeof(storage_limit_));
  // @@protoc_insertion_point(copy_constructor:artifacts.quotas.v1alpha1.HarborQuotas)
}

inline void HarborQuotas::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&storage_used_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_limit_) -
    reinterpret_cast<char*>(&storage_used_)) + sizeof(storage_limit_));
}

HarborQuotas::~HarborQuotas() {
  // @@protoc_insertion_point(destructor:artifacts.quotas.v1alpha1.HarborQuotas)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HarborQuotas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HarborQuotas::ArenaDtor(void* object) {
  HarborQuotas* _this = reinterpret_cast< HarborQuotas* >(object);
  (void)_this;
}
void HarborQuotas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HarborQuotas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HarborQuotas::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.quotas.v1alpha1.HarborQuotas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&storage_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_limit_) -
      reinterpret_cast<char*>(&storage_used_)) + sizeof(storage_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HarborQuotas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_used = 1 [json_name = "storageUsed"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 storage_limit = 2 [json_name = "storageLimit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          storage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HarborQuotas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.quotas.v1alpha1.HarborQuotas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_used = 1 [json_name = "storageUsed"];
  if (this->_internal_storage_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_used(), target);
  }

  // uint32 storage_limit = 2 [json_name = "storageLimit"];
  if (this->_internal_storage_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_storage_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.quotas.v1alpha1.HarborQuotas)
  return target;
}

size_t HarborQuotas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.quotas.v1alpha1.HarborQuotas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 storage_used = 1 [json_name = "storageUsed"];
  if (this->_internal_storage_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_used());
  }

  // uint32 storage_limit = 2 [json_name = "storageLimit"];
  if (this->_internal_storage_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HarborQuotas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HarborQuotas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HarborQuotas::GetClassData() const { return &_class_data_; }

void HarborQuotas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HarborQuotas *>(to)->MergeFrom(
      static_cast<const HarborQuotas &>(from));
}


void HarborQuotas::MergeFrom(const HarborQuotas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.quotas.v1alpha1.HarborQuotas)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_storage_used() != 0) {
    _internal_set_storage_used(from._internal_storage_used());
  }
  if (from._internal_storage_limit() != 0) {
    _internal_set_storage_limit(from._internal_storage_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HarborQuotas::CopyFrom(const HarborQuotas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.quotas.v1alpha1.HarborQuotas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarborQuotas::IsInitialized() const {
  return true;
}

void HarborQuotas::InternalSwap(HarborQuotas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HarborQuotas, storage_limit_)
      + sizeof(HarborQuotas::storage_limit_)
      - PROTOBUF_FIELD_OFFSET(HarborQuotas, storage_used_)>(
          reinterpret_cast<char*>(&storage_used_),
          reinterpret_cast<char*>(&other->storage_used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HarborQuotas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto_getter, &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto_once,
      file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto[0]);
}

// ===================================================================

class QuotasRegistry::_Internal {
 public:
  static const ::artifacts::quotas::v1alpha1::HarborQuotas& harbor(const QuotasRegistry* msg);
};

const ::artifacts::quotas::v1alpha1::HarborQuotas&
QuotasRegistry::_Internal::harbor(const QuotasRegistry* msg) {
  return *msg->harbor_;
}
QuotasRegistry::QuotasRegistry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.quotas.v1alpha1.QuotasRegistry)
}
QuotasRegistry::QuotasRegistry(const QuotasRegistry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_id().empty()) {
    environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_harbor()) {
    harbor_ = new ::artifacts::quotas::v1alpha1::HarborQuotas(*from.harbor_);
  } else {
    harbor_ = nullptr;
  }
  ::memcpy(&organization_id_, &from.organization_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&organization_id_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:artifacts.quotas.v1alpha1.QuotasRegistry)
}

inline void QuotasRegistry::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&harbor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&harbor_)) + sizeof(active_));
}

QuotasRegistry::~QuotasRegistry() {
  // @@protoc_insertion_point(destructor:artifacts.quotas.v1alpha1.QuotasRegistry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuotasRegistry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete harbor_;
}

void QuotasRegistry::ArenaDtor(void* object) {
  QuotasRegistry* _this = reinterpret_cast< QuotasRegistry* >(object);
  (void)_this;
}
void QuotasRegistry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuotasRegistry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuotasRegistry::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.quotas.v1alpha1.QuotasRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  environment_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && harbor_ != nullptr) {
    delete harbor_;
  }
  harbor_ = nullptr;
  ::memset(&organization_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&organization_id_)) + sizeof(active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuotasRegistry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.quotas.v1alpha1.QuotasRegistry.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 project_id = 3 [json_name = "projectId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_id = 4 [json_name = "environmentId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_environment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.quotas.v1alpha1.QuotasRegistry.environment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 6 [json_name = "active"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .artifacts.quotas.v1alpha1.HarborQuotas harbor = 7 [json_name = "harbor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_harbor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuotasRegistry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.quotas.v1alpha1.QuotasRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.quotas.v1alpha1.QuotasRegistry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_organization_id(), target);
  }

  // uint32 project_id = 3 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_project_id(), target);
  }

  // string environment_id = 4 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_id().data(), static_cast<int>(this->_internal_environment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.quotas.v1alpha1.QuotasRegistry.environment_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_environment_id(), target);
  }

  // bool active = 6 [json_name = "active"];
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_active(), target);
  }

  // .artifacts.quotas.v1alpha1.HarborQuotas harbor = 7 [json_name = "harbor"];
  if (this->_internal_has_harbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::harbor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.quotas.v1alpha1.QuotasRegistry)
  return target;
}

size_t QuotasRegistry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.quotas.v1alpha1.QuotasRegistry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string environment_id = 4 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_id());
  }

  // .artifacts.quotas.v1alpha1.HarborQuotas harbor = 7 [json_name = "harbor"];
  if (this->_internal_has_harbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *harbor_);
  }

  // uint32 organization_id = 2 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  // uint32 project_id = 3 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  // bool active = 6 [json_name = "active"];
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuotasRegistry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuotasRegistry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuotasRegistry::GetClassData() const { return &_class_data_; }

void QuotasRegistry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<QuotasRegistry *>(to)->MergeFrom(
      static_cast<const QuotasRegistry &>(from));
}


void QuotasRegistry::MergeFrom(const QuotasRegistry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.quotas.v1alpha1.QuotasRegistry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_environment_id().empty()) {
    _internal_set_environment_id(from._internal_environment_id());
  }
  if (from._internal_has_harbor()) {
    _internal_mutable_harbor()->::artifacts::quotas::v1alpha1::HarborQuotas::MergeFrom(from._internal_harbor());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuotasRegistry::CopyFrom(const QuotasRegistry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.quotas.v1alpha1.QuotasRegistry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotasRegistry::IsInitialized() const {
  return true;
}

void QuotasRegistry::InternalSwap(QuotasRegistry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_id_, GetArenaForAllocation(),
      &other->environment_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuotasRegistry, active_)
      + sizeof(QuotasRegistry::active_)
      - PROTOBUF_FIELD_OFFSET(QuotasRegistry, harbor_)>(
          reinterpret_cast<char*>(&harbor_),
          reinterpret_cast<char*>(&other->harbor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuotasRegistry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto_getter, &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto_once,
      file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace quotas
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artifacts::quotas::v1alpha1::HarborQuotas* Arena::CreateMaybeMessage< ::artifacts::quotas::v1alpha1::HarborQuotas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::quotas::v1alpha1::HarborQuotas >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::quotas::v1alpha1::QuotasRegistry* Arena::CreateMaybeMessage< ::artifacts::quotas::v1alpha1::QuotasRegistry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::quotas::v1alpha1::QuotasRegistry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
